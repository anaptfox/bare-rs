/* automatically generated by rust-bindgen 0.71.1 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    fn extract_bit(byte: u8, index: usize) -> bool {
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        Self::extract_bit(byte, index)
    }
    #[inline]
    pub unsafe fn raw_get_bit(this: *const Self, index: usize) -> bool {
        debug_assert!(index / 8 < core::mem::size_of::<Storage>());
        let byte_index = index / 8;
        let byte = *(core::ptr::addr_of!((*this).storage) as *const u8).offset(byte_index as isize);
        Self::extract_bit(byte, index)
    }
    #[inline]
    fn change_bit(byte: u8, index: usize, val: bool) -> u8 {
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            byte | mask
        } else {
            byte & !mask
        }
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        *byte = Self::change_bit(*byte, index, val);
    }
    #[inline]
    pub unsafe fn raw_set_bit(this: *mut Self, index: usize, val: bool) {
        debug_assert!(index / 8 < core::mem::size_of::<Storage>());
        let byte_index = index / 8;
        let byte =
            (core::ptr::addr_of_mut!((*this).storage) as *mut u8).offset(byte_index as isize);
        *byte = Self::change_bit(*byte, index, val);
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub unsafe fn raw_get(this: *const Self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < core::mem::size_of::<Storage>());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= core::mem::size_of::<Storage>());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if Self::raw_get_bit(this, i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
    #[inline]
    pub unsafe fn raw_set(this: *mut Self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < core::mem::size_of::<Storage>());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= core::mem::size_of::<Storage>());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            Self::raw_set_bit(this, index + bit_offset, val_bit_is_set);
        }
    }
}
#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const __bool_true_false_are_defined: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __WORDSIZE: u32 = 64;
pub const __has_safe_buffers: u32 = 1;
pub const __DARWIN_ONLY_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const __DARWIN_ONLY_VERS_1050: u32 = 1;
pub const __DARWIN_UNIX03: u32 = 1;
pub const __DARWIN_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_VERS_1050: u32 = 1;
pub const __DARWIN_NON_CANCELABLE: u32 = 0;
pub const __DARWIN_SUF_EXTSN: &[u8; 14] = b"$DARWIN_EXTSN\0";
pub const __DARWIN_C_ANSI: u32 = 4096;
pub const __DARWIN_C_FULL: u32 = 900000;
pub const __DARWIN_C_LEVEL: u32 = 900000;
pub const __STDC_WANT_LIB_EXT1__: u32 = 1;
pub const __DARWIN_NO_LONG_LONG: u32 = 0;
pub const _DARWIN_FEATURE_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_VERS_1050: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: u32 = 3;
pub const __has_ptrcheck: u32 = 0;
pub const USE_CLANG_TYPES: u32 = 0;
pub const __PTHREAD_SIZE__: u32 = 8176;
pub const __PTHREAD_ATTR_SIZE__: u32 = 56;
pub const __PTHREAD_MUTEXATTR_SIZE__: u32 = 8;
pub const __PTHREAD_MUTEX_SIZE__: u32 = 56;
pub const __PTHREAD_CONDATTR_SIZE__: u32 = 8;
pub const __PTHREAD_COND_SIZE__: u32 = 40;
pub const __PTHREAD_ONCE_SIZE__: u32 = 8;
pub const __PTHREAD_RWLOCK_SIZE__: u32 = 192;
pub const __PTHREAD_RWLOCKATTR_SIZE__: u32 = 16;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const INT64_MAX: u64 = 9223372036854775807;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT64_MAX: i32 = -1;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_LEAST64_MAX: i32 = -1;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -32768;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST64_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u32 = 32767;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const INT_FAST64_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: u32 = 65535;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const UINT_FAST64_MAX: i32 = -1;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const UINTPTR_MAX: i32 = -1;
pub const SIZE_MAX: i32 = -1;
pub const RSIZE_MAX: i32 = -1;
pub const WINT_MIN: i32 = -2147483648;
pub const WINT_MAX: u32 = 2147483647;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const __API_TO_BE_DEPRECATED: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_MACOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_IOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_MACCATALYST: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_WATCHOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_TVOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_DRIVERKIT: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_VISIONOS: u32 = 100000;
pub const __MAC_10_0: u32 = 1000;
pub const __MAC_10_1: u32 = 1010;
pub const __MAC_10_2: u32 = 1020;
pub const __MAC_10_3: u32 = 1030;
pub const __MAC_10_4: u32 = 1040;
pub const __MAC_10_5: u32 = 1050;
pub const __MAC_10_6: u32 = 1060;
pub const __MAC_10_7: u32 = 1070;
pub const __MAC_10_8: u32 = 1080;
pub const __MAC_10_9: u32 = 1090;
pub const __MAC_10_10: u32 = 101000;
pub const __MAC_10_10_2: u32 = 101002;
pub const __MAC_10_10_3: u32 = 101003;
pub const __MAC_10_11: u32 = 101100;
pub const __MAC_10_11_2: u32 = 101102;
pub const __MAC_10_11_3: u32 = 101103;
pub const __MAC_10_11_4: u32 = 101104;
pub const __MAC_10_12: u32 = 101200;
pub const __MAC_10_12_1: u32 = 101201;
pub const __MAC_10_12_2: u32 = 101202;
pub const __MAC_10_12_4: u32 = 101204;
pub const __MAC_10_13: u32 = 101300;
pub const __MAC_10_13_1: u32 = 101301;
pub const __MAC_10_13_2: u32 = 101302;
pub const __MAC_10_13_4: u32 = 101304;
pub const __MAC_10_14: u32 = 101400;
pub const __MAC_10_14_1: u32 = 101401;
pub const __MAC_10_14_4: u32 = 101404;
pub const __MAC_10_14_5: u32 = 101405;
pub const __MAC_10_14_6: u32 = 101406;
pub const __MAC_10_15: u32 = 101500;
pub const __MAC_10_15_1: u32 = 101501;
pub const __MAC_10_15_4: u32 = 101504;
pub const __MAC_10_16: u32 = 101600;
pub const __MAC_11_0: u32 = 110000;
pub const __MAC_11_1: u32 = 110100;
pub const __MAC_11_3: u32 = 110300;
pub const __MAC_11_4: u32 = 110400;
pub const __MAC_11_5: u32 = 110500;
pub const __MAC_11_6: u32 = 110600;
pub const __MAC_12_0: u32 = 120000;
pub const __MAC_12_1: u32 = 120100;
pub const __MAC_12_2: u32 = 120200;
pub const __MAC_12_3: u32 = 120300;
pub const __MAC_12_4: u32 = 120400;
pub const __MAC_12_5: u32 = 120500;
pub const __MAC_12_6: u32 = 120600;
pub const __MAC_12_7: u32 = 120700;
pub const __MAC_13_0: u32 = 130000;
pub const __MAC_13_1: u32 = 130100;
pub const __MAC_13_2: u32 = 130200;
pub const __MAC_13_3: u32 = 130300;
pub const __MAC_13_4: u32 = 130400;
pub const __MAC_13_5: u32 = 130500;
pub const __MAC_13_6: u32 = 130600;
pub const __MAC_14_0: u32 = 140000;
pub const __MAC_14_1: u32 = 140100;
pub const __MAC_14_2: u32 = 140200;
pub const __MAC_14_3: u32 = 140300;
pub const __MAC_14_4: u32 = 140400;
pub const __MAC_14_5: u32 = 140500;
pub const __MAC_15_0: u32 = 150000;
pub const __MAC_15_1: u32 = 150100;
pub const __MAC_15_2: u32 = 150200;
pub const __IPHONE_2_0: u32 = 20000;
pub const __IPHONE_2_1: u32 = 20100;
pub const __IPHONE_2_2: u32 = 20200;
pub const __IPHONE_3_0: u32 = 30000;
pub const __IPHONE_3_1: u32 = 30100;
pub const __IPHONE_3_2: u32 = 30200;
pub const __IPHONE_4_0: u32 = 40000;
pub const __IPHONE_4_1: u32 = 40100;
pub const __IPHONE_4_2: u32 = 40200;
pub const __IPHONE_4_3: u32 = 40300;
pub const __IPHONE_5_0: u32 = 50000;
pub const __IPHONE_5_1: u32 = 50100;
pub const __IPHONE_6_0: u32 = 60000;
pub const __IPHONE_6_1: u32 = 60100;
pub const __IPHONE_7_0: u32 = 70000;
pub const __IPHONE_7_1: u32 = 70100;
pub const __IPHONE_8_0: u32 = 80000;
pub const __IPHONE_8_1: u32 = 80100;
pub const __IPHONE_8_2: u32 = 80200;
pub const __IPHONE_8_3: u32 = 80300;
pub const __IPHONE_8_4: u32 = 80400;
pub const __IPHONE_9_0: u32 = 90000;
pub const __IPHONE_9_1: u32 = 90100;
pub const __IPHONE_9_2: u32 = 90200;
pub const __IPHONE_9_3: u32 = 90300;
pub const __IPHONE_10_0: u32 = 100000;
pub const __IPHONE_10_1: u32 = 100100;
pub const __IPHONE_10_2: u32 = 100200;
pub const __IPHONE_10_3: u32 = 100300;
pub const __IPHONE_11_0: u32 = 110000;
pub const __IPHONE_11_1: u32 = 110100;
pub const __IPHONE_11_2: u32 = 110200;
pub const __IPHONE_11_3: u32 = 110300;
pub const __IPHONE_11_4: u32 = 110400;
pub const __IPHONE_12_0: u32 = 120000;
pub const __IPHONE_12_1: u32 = 120100;
pub const __IPHONE_12_2: u32 = 120200;
pub const __IPHONE_12_3: u32 = 120300;
pub const __IPHONE_12_4: u32 = 120400;
pub const __IPHONE_13_0: u32 = 130000;
pub const __IPHONE_13_1: u32 = 130100;
pub const __IPHONE_13_2: u32 = 130200;
pub const __IPHONE_13_3: u32 = 130300;
pub const __IPHONE_13_4: u32 = 130400;
pub const __IPHONE_13_5: u32 = 130500;
pub const __IPHONE_13_6: u32 = 130600;
pub const __IPHONE_13_7: u32 = 130700;
pub const __IPHONE_14_0: u32 = 140000;
pub const __IPHONE_14_1: u32 = 140100;
pub const __IPHONE_14_2: u32 = 140200;
pub const __IPHONE_14_3: u32 = 140300;
pub const __IPHONE_14_5: u32 = 140500;
pub const __IPHONE_14_4: u32 = 140400;
pub const __IPHONE_14_6: u32 = 140600;
pub const __IPHONE_14_7: u32 = 140700;
pub const __IPHONE_14_8: u32 = 140800;
pub const __IPHONE_15_0: u32 = 150000;
pub const __IPHONE_15_1: u32 = 150100;
pub const __IPHONE_15_2: u32 = 150200;
pub const __IPHONE_15_3: u32 = 150300;
pub const __IPHONE_15_4: u32 = 150400;
pub const __IPHONE_15_5: u32 = 150500;
pub const __IPHONE_15_6: u32 = 150600;
pub const __IPHONE_15_7: u32 = 150700;
pub const __IPHONE_15_8: u32 = 150800;
pub const __IPHONE_16_0: u32 = 160000;
pub const __IPHONE_16_1: u32 = 160100;
pub const __IPHONE_16_2: u32 = 160200;
pub const __IPHONE_16_3: u32 = 160300;
pub const __IPHONE_16_4: u32 = 160400;
pub const __IPHONE_16_5: u32 = 160500;
pub const __IPHONE_16_6: u32 = 160600;
pub const __IPHONE_16_7: u32 = 160700;
pub const __IPHONE_17_0: u32 = 170000;
pub const __IPHONE_17_1: u32 = 170100;
pub const __IPHONE_17_2: u32 = 170200;
pub const __IPHONE_17_3: u32 = 170300;
pub const __IPHONE_17_4: u32 = 170400;
pub const __IPHONE_17_5: u32 = 170500;
pub const __IPHONE_18_0: u32 = 180000;
pub const __IPHONE_18_1: u32 = 180100;
pub const __IPHONE_18_2: u32 = 180200;
pub const __WATCHOS_1_0: u32 = 10000;
pub const __WATCHOS_2_0: u32 = 20000;
pub const __WATCHOS_2_1: u32 = 20100;
pub const __WATCHOS_2_2: u32 = 20200;
pub const __WATCHOS_3_0: u32 = 30000;
pub const __WATCHOS_3_1: u32 = 30100;
pub const __WATCHOS_3_1_1: u32 = 30101;
pub const __WATCHOS_3_2: u32 = 30200;
pub const __WATCHOS_4_0: u32 = 40000;
pub const __WATCHOS_4_1: u32 = 40100;
pub const __WATCHOS_4_2: u32 = 40200;
pub const __WATCHOS_4_3: u32 = 40300;
pub const __WATCHOS_5_0: u32 = 50000;
pub const __WATCHOS_5_1: u32 = 50100;
pub const __WATCHOS_5_2: u32 = 50200;
pub const __WATCHOS_5_3: u32 = 50300;
pub const __WATCHOS_6_0: u32 = 60000;
pub const __WATCHOS_6_1: u32 = 60100;
pub const __WATCHOS_6_2: u32 = 60200;
pub const __WATCHOS_7_0: u32 = 70000;
pub const __WATCHOS_7_1: u32 = 70100;
pub const __WATCHOS_7_2: u32 = 70200;
pub const __WATCHOS_7_3: u32 = 70300;
pub const __WATCHOS_7_4: u32 = 70400;
pub const __WATCHOS_7_5: u32 = 70500;
pub const __WATCHOS_7_6: u32 = 70600;
pub const __WATCHOS_8_0: u32 = 80000;
pub const __WATCHOS_8_1: u32 = 80100;
pub const __WATCHOS_8_3: u32 = 80300;
pub const __WATCHOS_8_4: u32 = 80400;
pub const __WATCHOS_8_5: u32 = 80500;
pub const __WATCHOS_8_6: u32 = 80600;
pub const __WATCHOS_8_7: u32 = 80700;
pub const __WATCHOS_8_8: u32 = 80800;
pub const __WATCHOS_9_0: u32 = 90000;
pub const __WATCHOS_9_1: u32 = 90100;
pub const __WATCHOS_9_2: u32 = 90200;
pub const __WATCHOS_9_3: u32 = 90300;
pub const __WATCHOS_9_4: u32 = 90400;
pub const __WATCHOS_9_5: u32 = 90500;
pub const __WATCHOS_9_6: u32 = 90600;
pub const __WATCHOS_10_0: u32 = 100000;
pub const __WATCHOS_10_1: u32 = 100100;
pub const __WATCHOS_10_2: u32 = 100200;
pub const __WATCHOS_10_3: u32 = 100300;
pub const __WATCHOS_10_4: u32 = 100400;
pub const __WATCHOS_10_5: u32 = 100500;
pub const __WATCHOS_11_0: u32 = 110000;
pub const __WATCHOS_11_1: u32 = 110100;
pub const __WATCHOS_11_2: u32 = 110200;
pub const __TVOS_9_0: u32 = 90000;
pub const __TVOS_9_1: u32 = 90100;
pub const __TVOS_9_2: u32 = 90200;
pub const __TVOS_10_0: u32 = 100000;
pub const __TVOS_10_0_1: u32 = 100001;
pub const __TVOS_10_1: u32 = 100100;
pub const __TVOS_10_2: u32 = 100200;
pub const __TVOS_11_0: u32 = 110000;
pub const __TVOS_11_1: u32 = 110100;
pub const __TVOS_11_2: u32 = 110200;
pub const __TVOS_11_3: u32 = 110300;
pub const __TVOS_11_4: u32 = 110400;
pub const __TVOS_12_0: u32 = 120000;
pub const __TVOS_12_1: u32 = 120100;
pub const __TVOS_12_2: u32 = 120200;
pub const __TVOS_12_3: u32 = 120300;
pub const __TVOS_12_4: u32 = 120400;
pub const __TVOS_13_0: u32 = 130000;
pub const __TVOS_13_2: u32 = 130200;
pub const __TVOS_13_3: u32 = 130300;
pub const __TVOS_13_4: u32 = 130400;
pub const __TVOS_14_0: u32 = 140000;
pub const __TVOS_14_1: u32 = 140100;
pub const __TVOS_14_2: u32 = 140200;
pub const __TVOS_14_3: u32 = 140300;
pub const __TVOS_14_5: u32 = 140500;
pub const __TVOS_14_6: u32 = 140600;
pub const __TVOS_14_7: u32 = 140700;
pub const __TVOS_15_0: u32 = 150000;
pub const __TVOS_15_1: u32 = 150100;
pub const __TVOS_15_2: u32 = 150200;
pub const __TVOS_15_3: u32 = 150300;
pub const __TVOS_15_4: u32 = 150400;
pub const __TVOS_15_5: u32 = 150500;
pub const __TVOS_15_6: u32 = 150600;
pub const __TVOS_16_0: u32 = 160000;
pub const __TVOS_16_1: u32 = 160100;
pub const __TVOS_16_2: u32 = 160200;
pub const __TVOS_16_3: u32 = 160300;
pub const __TVOS_16_4: u32 = 160400;
pub const __TVOS_16_5: u32 = 160500;
pub const __TVOS_16_6: u32 = 160600;
pub const __TVOS_17_0: u32 = 170000;
pub const __TVOS_17_1: u32 = 170100;
pub const __TVOS_17_2: u32 = 170200;
pub const __TVOS_17_3: u32 = 170300;
pub const __TVOS_17_4: u32 = 170400;
pub const __TVOS_17_5: u32 = 170500;
pub const __TVOS_18_0: u32 = 180000;
pub const __TVOS_18_1: u32 = 180100;
pub const __TVOS_18_2: u32 = 180200;
pub const __BRIDGEOS_2_0: u32 = 20000;
pub const __BRIDGEOS_3_0: u32 = 30000;
pub const __BRIDGEOS_3_1: u32 = 30100;
pub const __BRIDGEOS_3_4: u32 = 30400;
pub const __BRIDGEOS_4_0: u32 = 40000;
pub const __BRIDGEOS_4_1: u32 = 40100;
pub const __BRIDGEOS_5_0: u32 = 50000;
pub const __BRIDGEOS_5_1: u32 = 50100;
pub const __BRIDGEOS_5_3: u32 = 50300;
pub const __BRIDGEOS_6_0: u32 = 60000;
pub const __BRIDGEOS_6_2: u32 = 60200;
pub const __BRIDGEOS_6_4: u32 = 60400;
pub const __BRIDGEOS_6_5: u32 = 60500;
pub const __BRIDGEOS_6_6: u32 = 60600;
pub const __BRIDGEOS_7_0: u32 = 70000;
pub const __BRIDGEOS_7_1: u32 = 70100;
pub const __BRIDGEOS_7_2: u32 = 70200;
pub const __BRIDGEOS_7_3: u32 = 70300;
pub const __BRIDGEOS_7_4: u32 = 70400;
pub const __BRIDGEOS_7_6: u32 = 70600;
pub const __BRIDGEOS_8_0: u32 = 80000;
pub const __BRIDGEOS_8_1: u32 = 80100;
pub const __BRIDGEOS_8_2: u32 = 80200;
pub const __BRIDGEOS_8_3: u32 = 80300;
pub const __BRIDGEOS_8_4: u32 = 80400;
pub const __BRIDGEOS_8_5: u32 = 80500;
pub const __BRIDGEOS_9_0: u32 = 90000;
pub const __BRIDGEOS_9_1: u32 = 90100;
pub const __BRIDGEOS_9_2: u32 = 90200;
pub const __DRIVERKIT_19_0: u32 = 190000;
pub const __DRIVERKIT_20_0: u32 = 200000;
pub const __DRIVERKIT_21_0: u32 = 210000;
pub const __DRIVERKIT_22_0: u32 = 220000;
pub const __DRIVERKIT_22_4: u32 = 220400;
pub const __DRIVERKIT_22_5: u32 = 220500;
pub const __DRIVERKIT_22_6: u32 = 220600;
pub const __DRIVERKIT_23_0: u32 = 230000;
pub const __DRIVERKIT_23_1: u32 = 230100;
pub const __DRIVERKIT_23_2: u32 = 230200;
pub const __DRIVERKIT_23_3: u32 = 230300;
pub const __DRIVERKIT_23_4: u32 = 230400;
pub const __DRIVERKIT_23_5: u32 = 230500;
pub const __DRIVERKIT_24_0: u32 = 240000;
pub const __DRIVERKIT_24_1: u32 = 240100;
pub const __DRIVERKIT_24_2: u32 = 240200;
pub const __VISIONOS_1_0: u32 = 10000;
pub const __VISIONOS_1_1: u32 = 10100;
pub const __VISIONOS_1_2: u32 = 10200;
pub const __VISIONOS_2_0: u32 = 20000;
pub const __VISIONOS_2_1: u32 = 20100;
pub const __VISIONOS_2_2: u32 = 20200;
pub const MAC_OS_X_VERSION_10_0: u32 = 1000;
pub const MAC_OS_X_VERSION_10_1: u32 = 1010;
pub const MAC_OS_X_VERSION_10_2: u32 = 1020;
pub const MAC_OS_X_VERSION_10_3: u32 = 1030;
pub const MAC_OS_X_VERSION_10_4: u32 = 1040;
pub const MAC_OS_X_VERSION_10_5: u32 = 1050;
pub const MAC_OS_X_VERSION_10_6: u32 = 1060;
pub const MAC_OS_X_VERSION_10_7: u32 = 1070;
pub const MAC_OS_X_VERSION_10_8: u32 = 1080;
pub const MAC_OS_X_VERSION_10_9: u32 = 1090;
pub const MAC_OS_X_VERSION_10_10: u32 = 101000;
pub const MAC_OS_X_VERSION_10_10_2: u32 = 101002;
pub const MAC_OS_X_VERSION_10_10_3: u32 = 101003;
pub const MAC_OS_X_VERSION_10_11: u32 = 101100;
pub const MAC_OS_X_VERSION_10_11_2: u32 = 101102;
pub const MAC_OS_X_VERSION_10_11_3: u32 = 101103;
pub const MAC_OS_X_VERSION_10_11_4: u32 = 101104;
pub const MAC_OS_X_VERSION_10_12: u32 = 101200;
pub const MAC_OS_X_VERSION_10_12_1: u32 = 101201;
pub const MAC_OS_X_VERSION_10_12_2: u32 = 101202;
pub const MAC_OS_X_VERSION_10_12_4: u32 = 101204;
pub const MAC_OS_X_VERSION_10_13: u32 = 101300;
pub const MAC_OS_X_VERSION_10_13_1: u32 = 101301;
pub const MAC_OS_X_VERSION_10_13_2: u32 = 101302;
pub const MAC_OS_X_VERSION_10_13_4: u32 = 101304;
pub const MAC_OS_X_VERSION_10_14: u32 = 101400;
pub const MAC_OS_X_VERSION_10_14_1: u32 = 101401;
pub const MAC_OS_X_VERSION_10_14_4: u32 = 101404;
pub const MAC_OS_X_VERSION_10_14_5: u32 = 101405;
pub const MAC_OS_X_VERSION_10_14_6: u32 = 101406;
pub const MAC_OS_X_VERSION_10_15: u32 = 101500;
pub const MAC_OS_X_VERSION_10_15_1: u32 = 101501;
pub const MAC_OS_X_VERSION_10_15_4: u32 = 101504;
pub const MAC_OS_X_VERSION_10_16: u32 = 101600;
pub const MAC_OS_VERSION_11_0: u32 = 110000;
pub const MAC_OS_VERSION_11_1: u32 = 110100;
pub const MAC_OS_VERSION_11_3: u32 = 110300;
pub const MAC_OS_VERSION_11_4: u32 = 110400;
pub const MAC_OS_VERSION_11_5: u32 = 110500;
pub const MAC_OS_VERSION_11_6: u32 = 110600;
pub const MAC_OS_VERSION_12_0: u32 = 120000;
pub const MAC_OS_VERSION_12_1: u32 = 120100;
pub const MAC_OS_VERSION_12_2: u32 = 120200;
pub const MAC_OS_VERSION_12_3: u32 = 120300;
pub const MAC_OS_VERSION_12_4: u32 = 120400;
pub const MAC_OS_VERSION_12_5: u32 = 120500;
pub const MAC_OS_VERSION_12_6: u32 = 120600;
pub const MAC_OS_VERSION_12_7: u32 = 120700;
pub const MAC_OS_VERSION_13_0: u32 = 130000;
pub const MAC_OS_VERSION_13_1: u32 = 130100;
pub const MAC_OS_VERSION_13_2: u32 = 130200;
pub const MAC_OS_VERSION_13_3: u32 = 130300;
pub const MAC_OS_VERSION_13_4: u32 = 130400;
pub const MAC_OS_VERSION_13_5: u32 = 130500;
pub const MAC_OS_VERSION_13_6: u32 = 130600;
pub const MAC_OS_VERSION_14_0: u32 = 140000;
pub const MAC_OS_VERSION_14_1: u32 = 140100;
pub const MAC_OS_VERSION_14_2: u32 = 140200;
pub const MAC_OS_VERSION_14_3: u32 = 140300;
pub const MAC_OS_VERSION_14_4: u32 = 140400;
pub const MAC_OS_VERSION_14_5: u32 = 140500;
pub const MAC_OS_VERSION_15_0: u32 = 150000;
pub const MAC_OS_VERSION_15_1: u32 = 150100;
pub const MAC_OS_VERSION_15_2: u32 = 150200;
pub const __MAC_OS_X_VERSION_MAX_ALLOWED: u32 = 150200;
pub const __ENABLE_LEGACY_MAC_AVAILABILITY: u32 = 1;
pub const __DARWIN_WCHAR_MIN: i32 = -2147483648;
pub const _FORTIFY_SOURCE: u32 = 2;
pub const USE_CLANG_STDARG: u32 = 0;
pub const USE_CLANG_STDDEF: u32 = 0;
pub const RENAME_SECLUDE: u32 = 1;
pub const RENAME_SWAP: u32 = 2;
pub const RENAME_EXCL: u32 = 4;
pub const RENAME_RESERVED1: u32 = 8;
pub const RENAME_NOFOLLOW_ANY: u32 = 16;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const SEEK_HOLE: u32 = 3;
pub const SEEK_DATA: u32 = 4;
pub const __SLBF: u32 = 1;
pub const __SNBF: u32 = 2;
pub const __SRD: u32 = 4;
pub const __SWR: u32 = 8;
pub const __SRW: u32 = 16;
pub const __SEOF: u32 = 32;
pub const __SERR: u32 = 64;
pub const __SMBF: u32 = 128;
pub const __SAPP: u32 = 256;
pub const __SSTR: u32 = 512;
pub const __SOPT: u32 = 1024;
pub const __SNPT: u32 = 2048;
pub const __SOFF: u32 = 4096;
pub const __SMOD: u32 = 8192;
pub const __SALC: u32 = 16384;
pub const __SIGN: u32 = 32768;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 1024;
pub const EOF: i32 = -1;
pub const FOPEN_MAX: u32 = 20;
pub const FILENAME_MAX: u32 = 1024;
pub const P_tmpdir: &[u8; 10] = b"/var/tmp/\0";
pub const L_tmpnam: u32 = 1024;
pub const TMP_MAX: u32 = 308915776;
pub const L_ctermid: u32 = 1024;
pub const _USE_FORTIFY_LEVEL: u32 = 2;
pub const __DARWIN_NSIG: u32 = 32;
pub const NSIG: u32 = 32;
pub const _ARM_SIGNAL_: u32 = 1;
pub const SIGHUP: u32 = 1;
pub const SIGINT: u32 = 2;
pub const SIGQUIT: u32 = 3;
pub const SIGILL: u32 = 4;
pub const SIGTRAP: u32 = 5;
pub const SIGABRT: u32 = 6;
pub const SIGIOT: u32 = 6;
pub const SIGEMT: u32 = 7;
pub const SIGFPE: u32 = 8;
pub const SIGKILL: u32 = 9;
pub const SIGBUS: u32 = 10;
pub const SIGSEGV: u32 = 11;
pub const SIGSYS: u32 = 12;
pub const SIGPIPE: u32 = 13;
pub const SIGALRM: u32 = 14;
pub const SIGTERM: u32 = 15;
pub const SIGURG: u32 = 16;
pub const SIGSTOP: u32 = 17;
pub const SIGTSTP: u32 = 18;
pub const SIGCONT: u32 = 19;
pub const SIGCHLD: u32 = 20;
pub const SIGTTIN: u32 = 21;
pub const SIGTTOU: u32 = 22;
pub const SIGIO: u32 = 23;
pub const SIGXCPU: u32 = 24;
pub const SIGXFSZ: u32 = 25;
pub const SIGVTALRM: u32 = 26;
pub const SIGPROF: u32 = 27;
pub const SIGWINCH: u32 = 28;
pub const SIGINFO: u32 = 29;
pub const SIGUSR1: u32 = 30;
pub const SIGUSR2: u32 = 31;
pub const __DARWIN_OPAQUE_ARM_THREAD_STATE64: u32 = 0;
pub const SIGEV_NONE: u32 = 0;
pub const SIGEV_SIGNAL: u32 = 1;
pub const SIGEV_THREAD: u32 = 3;
pub const ILL_NOOP: u32 = 0;
pub const ILL_ILLOPC: u32 = 1;
pub const ILL_ILLTRP: u32 = 2;
pub const ILL_PRVOPC: u32 = 3;
pub const ILL_ILLOPN: u32 = 4;
pub const ILL_ILLADR: u32 = 5;
pub const ILL_PRVREG: u32 = 6;
pub const ILL_COPROC: u32 = 7;
pub const ILL_BADSTK: u32 = 8;
pub const FPE_NOOP: u32 = 0;
pub const FPE_FLTDIV: u32 = 1;
pub const FPE_FLTOVF: u32 = 2;
pub const FPE_FLTUND: u32 = 3;
pub const FPE_FLTRES: u32 = 4;
pub const FPE_FLTINV: u32 = 5;
pub const FPE_FLTSUB: u32 = 6;
pub const FPE_INTDIV: u32 = 7;
pub const FPE_INTOVF: u32 = 8;
pub const SEGV_NOOP: u32 = 0;
pub const SEGV_MAPERR: u32 = 1;
pub const SEGV_ACCERR: u32 = 2;
pub const BUS_NOOP: u32 = 0;
pub const BUS_ADRALN: u32 = 1;
pub const BUS_ADRERR: u32 = 2;
pub const BUS_OBJERR: u32 = 3;
pub const TRAP_BRKPT: u32 = 1;
pub const TRAP_TRACE: u32 = 2;
pub const CLD_NOOP: u32 = 0;
pub const CLD_EXITED: u32 = 1;
pub const CLD_KILLED: u32 = 2;
pub const CLD_DUMPED: u32 = 3;
pub const CLD_TRAPPED: u32 = 4;
pub const CLD_STOPPED: u32 = 5;
pub const CLD_CONTINUED: u32 = 6;
pub const POLL_IN: u32 = 1;
pub const POLL_OUT: u32 = 2;
pub const POLL_MSG: u32 = 3;
pub const POLL_ERR: u32 = 4;
pub const POLL_PRI: u32 = 5;
pub const POLL_HUP: u32 = 6;
pub const SA_ONSTACK: u32 = 1;
pub const SA_RESTART: u32 = 2;
pub const SA_RESETHAND: u32 = 4;
pub const SA_NOCLDSTOP: u32 = 8;
pub const SA_NODEFER: u32 = 16;
pub const SA_NOCLDWAIT: u32 = 32;
pub const SA_SIGINFO: u32 = 64;
pub const SA_USERTRAMP: u32 = 256;
pub const SA_64REGSET: u32 = 512;
pub const SA_USERSPACE_MASK: u32 = 127;
pub const SIG_BLOCK: u32 = 1;
pub const SIG_UNBLOCK: u32 = 2;
pub const SIG_SETMASK: u32 = 3;
pub const SI_USER: u32 = 65537;
pub const SI_QUEUE: u32 = 65538;
pub const SI_TIMER: u32 = 65539;
pub const SI_ASYNCIO: u32 = 65540;
pub const SI_MESGQ: u32 = 65541;
pub const SS_ONSTACK: u32 = 1;
pub const SS_DISABLE: u32 = 4;
pub const MINSIGSTKSZ: u32 = 32768;
pub const SIGSTKSZ: u32 = 131072;
pub const SV_ONSTACK: u32 = 1;
pub const SV_INTERRUPT: u32 = 2;
pub const SV_RESETHAND: u32 = 4;
pub const SV_NODEFER: u32 = 16;
pub const SV_NOCLDSTOP: u32 = 8;
pub const SV_SIGINFO: u32 = 64;
pub const PRIO_PROCESS: u32 = 0;
pub const PRIO_PGRP: u32 = 1;
pub const PRIO_USER: u32 = 2;
pub const PRIO_DARWIN_THREAD: u32 = 3;
pub const PRIO_DARWIN_PROCESS: u32 = 4;
pub const PRIO_MIN: i32 = -20;
pub const PRIO_MAX: u32 = 20;
pub const PRIO_DARWIN_BG: u32 = 4096;
pub const PRIO_DARWIN_NONUI: u32 = 4097;
pub const RUSAGE_SELF: u32 = 0;
pub const RUSAGE_CHILDREN: i32 = -1;
pub const RUSAGE_INFO_V0: u32 = 0;
pub const RUSAGE_INFO_V1: u32 = 1;
pub const RUSAGE_INFO_V2: u32 = 2;
pub const RUSAGE_INFO_V3: u32 = 3;
pub const RUSAGE_INFO_V4: u32 = 4;
pub const RUSAGE_INFO_V5: u32 = 5;
pub const RUSAGE_INFO_V6: u32 = 6;
pub const RUSAGE_INFO_CURRENT: u32 = 6;
pub const RU_PROC_RUNS_RESLIDE: u32 = 1;
pub const RLIMIT_CPU: u32 = 0;
pub const RLIMIT_FSIZE: u32 = 1;
pub const RLIMIT_DATA: u32 = 2;
pub const RLIMIT_STACK: u32 = 3;
pub const RLIMIT_CORE: u32 = 4;
pub const RLIMIT_AS: u32 = 5;
pub const RLIMIT_RSS: u32 = 5;
pub const RLIMIT_MEMLOCK: u32 = 6;
pub const RLIMIT_NPROC: u32 = 7;
pub const RLIMIT_NOFILE: u32 = 8;
pub const RLIM_NLIMITS: u32 = 9;
pub const _RLIMIT_POSIX_FLAG: u32 = 4096;
pub const RLIMIT_WAKEUPS_MONITOR: u32 = 1;
pub const RLIMIT_CPU_USAGE_MONITOR: u32 = 2;
pub const RLIMIT_THREAD_CPULIMITS: u32 = 3;
pub const RLIMIT_FOOTPRINT_INTERVAL: u32 = 4;
pub const WAKEMON_ENABLE: u32 = 1;
pub const WAKEMON_DISABLE: u32 = 2;
pub const WAKEMON_GET_PARAMS: u32 = 4;
pub const WAKEMON_SET_DEFAULTS: u32 = 8;
pub const WAKEMON_MAKE_FATAL: u32 = 16;
pub const CPUMON_MAKE_FATAL: u32 = 4096;
pub const FOOTPRINT_INTERVAL_RESET: u32 = 1;
pub const IOPOL_TYPE_DISK: u32 = 0;
pub const IOPOL_TYPE_VFS_ATIME_UPDATES: u32 = 2;
pub const IOPOL_TYPE_VFS_MATERIALIZE_DATALESS_FILES: u32 = 3;
pub const IOPOL_TYPE_VFS_STATFS_NO_DATA_VOLUME: u32 = 4;
pub const IOPOL_TYPE_VFS_TRIGGER_RESOLVE: u32 = 5;
pub const IOPOL_TYPE_VFS_IGNORE_CONTENT_PROTECTION: u32 = 6;
pub const IOPOL_TYPE_VFS_IGNORE_PERMISSIONS: u32 = 7;
pub const IOPOL_TYPE_VFS_SKIP_MTIME_UPDATE: u32 = 8;
pub const IOPOL_TYPE_VFS_ALLOW_LOW_SPACE_WRITES: u32 = 9;
pub const IOPOL_TYPE_VFS_DISALLOW_RW_FOR_O_EVTONLY: u32 = 10;
pub const IOPOL_SCOPE_PROCESS: u32 = 0;
pub const IOPOL_SCOPE_THREAD: u32 = 1;
pub const IOPOL_SCOPE_DARWIN_BG: u32 = 2;
pub const IOPOL_DEFAULT: u32 = 0;
pub const IOPOL_IMPORTANT: u32 = 1;
pub const IOPOL_PASSIVE: u32 = 2;
pub const IOPOL_THROTTLE: u32 = 3;
pub const IOPOL_UTILITY: u32 = 4;
pub const IOPOL_STANDARD: u32 = 5;
pub const IOPOL_APPLICATION: u32 = 5;
pub const IOPOL_NORMAL: u32 = 1;
pub const IOPOL_ATIME_UPDATES_DEFAULT: u32 = 0;
pub const IOPOL_ATIME_UPDATES_OFF: u32 = 1;
pub const IOPOL_MATERIALIZE_DATALESS_FILES_DEFAULT: u32 = 0;
pub const IOPOL_MATERIALIZE_DATALESS_FILES_OFF: u32 = 1;
pub const IOPOL_MATERIALIZE_DATALESS_FILES_ON: u32 = 2;
pub const IOPOL_VFS_STATFS_NO_DATA_VOLUME_DEFAULT: u32 = 0;
pub const IOPOL_VFS_STATFS_FORCE_NO_DATA_VOLUME: u32 = 1;
pub const IOPOL_VFS_TRIGGER_RESOLVE_DEFAULT: u32 = 0;
pub const IOPOL_VFS_TRIGGER_RESOLVE_OFF: u32 = 1;
pub const IOPOL_VFS_CONTENT_PROTECTION_DEFAULT: u32 = 0;
pub const IOPOL_VFS_CONTENT_PROTECTION_IGNORE: u32 = 1;
pub const IOPOL_VFS_IGNORE_PERMISSIONS_OFF: u32 = 0;
pub const IOPOL_VFS_IGNORE_PERMISSIONS_ON: u32 = 1;
pub const IOPOL_VFS_SKIP_MTIME_UPDATE_OFF: u32 = 0;
pub const IOPOL_VFS_SKIP_MTIME_UPDATE_ON: u32 = 1;
pub const IOPOL_VFS_ALLOW_LOW_SPACE_WRITES_OFF: u32 = 0;
pub const IOPOL_VFS_ALLOW_LOW_SPACE_WRITES_ON: u32 = 1;
pub const IOPOL_VFS_DISALLOW_RW_FOR_O_EVTONLY_DEFAULT: u32 = 0;
pub const IOPOL_VFS_DISALLOW_RW_FOR_O_EVTONLY_ON: u32 = 1;
pub const IOPOL_VFS_NOCACHE_WRITE_FS_BLKSIZE_DEFAULT: u32 = 0;
pub const IOPOL_VFS_NOCACHE_WRITE_FS_BLKSIZE_ON: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WCOREFLAG: u32 = 128;
pub const _WSTOPPED: u32 = 127;
pub const WEXITED: u32 = 4;
pub const WSTOPPED: u32 = 8;
pub const WCONTINUED: u32 = 16;
pub const WNOWAIT: u32 = 32;
pub const WAIT_ANY: i32 = -1;
pub const WAIT_MYPGRP: u32 = 0;
pub const _QUAD_HIGHWORD: u32 = 1;
pub const _QUAD_LOWWORD: u32 = 0;
pub const __DARWIN_LITTLE_ENDIAN: u32 = 1234;
pub const __DARWIN_BIG_ENDIAN: u32 = 4321;
pub const __DARWIN_PDP_ENDIAN: u32 = 3412;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const __DARWIN_BYTE_ORDER: u32 = 1234;
pub const BYTE_ORDER: u32 = 1234;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const RAND_MAX: u32 = 2147483647;
pub const __HAS_FIXED_CHK_PROTOTYPES: u32 = 1;
pub const EPERM: u32 = 1;
pub const ENOENT: u32 = 2;
pub const ESRCH: u32 = 3;
pub const EINTR: u32 = 4;
pub const EIO: u32 = 5;
pub const ENXIO: u32 = 6;
pub const E2BIG: u32 = 7;
pub const ENOEXEC: u32 = 8;
pub const EBADF: u32 = 9;
pub const ECHILD: u32 = 10;
pub const EDEADLK: u32 = 11;
pub const ENOMEM: u32 = 12;
pub const EACCES: u32 = 13;
pub const EFAULT: u32 = 14;
pub const ENOTBLK: u32 = 15;
pub const EBUSY: u32 = 16;
pub const EEXIST: u32 = 17;
pub const EXDEV: u32 = 18;
pub const ENODEV: u32 = 19;
pub const ENOTDIR: u32 = 20;
pub const EISDIR: u32 = 21;
pub const EINVAL: u32 = 22;
pub const ENFILE: u32 = 23;
pub const EMFILE: u32 = 24;
pub const ENOTTY: u32 = 25;
pub const ETXTBSY: u32 = 26;
pub const EFBIG: u32 = 27;
pub const ENOSPC: u32 = 28;
pub const ESPIPE: u32 = 29;
pub const EROFS: u32 = 30;
pub const EMLINK: u32 = 31;
pub const EPIPE: u32 = 32;
pub const EDOM: u32 = 33;
pub const ERANGE: u32 = 34;
pub const EAGAIN: u32 = 35;
pub const EWOULDBLOCK: u32 = 35;
pub const EINPROGRESS: u32 = 36;
pub const EALREADY: u32 = 37;
pub const ENOTSOCK: u32 = 38;
pub const EDESTADDRREQ: u32 = 39;
pub const EMSGSIZE: u32 = 40;
pub const EPROTOTYPE: u32 = 41;
pub const ENOPROTOOPT: u32 = 42;
pub const EPROTONOSUPPORT: u32 = 43;
pub const ESOCKTNOSUPPORT: u32 = 44;
pub const ENOTSUP: u32 = 45;
pub const EPFNOSUPPORT: u32 = 46;
pub const EAFNOSUPPORT: u32 = 47;
pub const EADDRINUSE: u32 = 48;
pub const EADDRNOTAVAIL: u32 = 49;
pub const ENETDOWN: u32 = 50;
pub const ENETUNREACH: u32 = 51;
pub const ENETRESET: u32 = 52;
pub const ECONNABORTED: u32 = 53;
pub const ECONNRESET: u32 = 54;
pub const ENOBUFS: u32 = 55;
pub const EISCONN: u32 = 56;
pub const ENOTCONN: u32 = 57;
pub const ESHUTDOWN: u32 = 58;
pub const ETOOMANYREFS: u32 = 59;
pub const ETIMEDOUT: u32 = 60;
pub const ECONNREFUSED: u32 = 61;
pub const ELOOP: u32 = 62;
pub const ENAMETOOLONG: u32 = 63;
pub const EHOSTDOWN: u32 = 64;
pub const EHOSTUNREACH: u32 = 65;
pub const ENOTEMPTY: u32 = 66;
pub const EPROCLIM: u32 = 67;
pub const EUSERS: u32 = 68;
pub const EDQUOT: u32 = 69;
pub const ESTALE: u32 = 70;
pub const EREMOTE: u32 = 71;
pub const EBADRPC: u32 = 72;
pub const ERPCMISMATCH: u32 = 73;
pub const EPROGUNAVAIL: u32 = 74;
pub const EPROGMISMATCH: u32 = 75;
pub const EPROCUNAVAIL: u32 = 76;
pub const ENOLCK: u32 = 77;
pub const ENOSYS: u32 = 78;
pub const EFTYPE: u32 = 79;
pub const EAUTH: u32 = 80;
pub const ENEEDAUTH: u32 = 81;
pub const EPWROFF: u32 = 82;
pub const EDEVERR: u32 = 83;
pub const EOVERFLOW: u32 = 84;
pub const EBADEXEC: u32 = 85;
pub const EBADARCH: u32 = 86;
pub const ESHLIBVERS: u32 = 87;
pub const EBADMACHO: u32 = 88;
pub const ECANCELED: u32 = 89;
pub const EIDRM: u32 = 90;
pub const ENOMSG: u32 = 91;
pub const EILSEQ: u32 = 92;
pub const ENOATTR: u32 = 93;
pub const EBADMSG: u32 = 94;
pub const EMULTIHOP: u32 = 95;
pub const ENODATA: u32 = 96;
pub const ENOLINK: u32 = 97;
pub const ENOSR: u32 = 98;
pub const ENOSTR: u32 = 99;
pub const EPROTO: u32 = 100;
pub const ETIME: u32 = 101;
pub const EOPNOTSUPP: u32 = 102;
pub const ENOPOLICY: u32 = 103;
pub const ENOTRECOVERABLE: u32 = 104;
pub const EOWNERDEAD: u32 = 105;
pub const EQFULL: u32 = 106;
pub const ELAST: u32 = 106;
pub const UV__EOF: i32 = -4095;
pub const UV__UNKNOWN: i32 = -4094;
pub const UV__EAI_ADDRFAMILY: i32 = -3000;
pub const UV__EAI_AGAIN: i32 = -3001;
pub const UV__EAI_BADFLAGS: i32 = -3002;
pub const UV__EAI_CANCELED: i32 = -3003;
pub const UV__EAI_FAIL: i32 = -3004;
pub const UV__EAI_FAMILY: i32 = -3005;
pub const UV__EAI_MEMORY: i32 = -3006;
pub const UV__EAI_NODATA: i32 = -3007;
pub const UV__EAI_NONAME: i32 = -3008;
pub const UV__EAI_OVERFLOW: i32 = -3009;
pub const UV__EAI_SERVICE: i32 = -3010;
pub const UV__EAI_SOCKTYPE: i32 = -3011;
pub const UV__EAI_BADHINTS: i32 = -3013;
pub const UV__EAI_PROTOCOL: i32 = -3014;
pub const UV__ECHARSET: i32 = -4080;
pub const UV__ENONET: i32 = -4056;
pub const UV__EREMOTEIO: i32 = -4030;
pub const UV__EUNATCH: i32 = -4023;
pub const UV_VERSION_MAJOR: u32 = 1;
pub const UV_VERSION_MINOR: u32 = 48;
pub const UV_VERSION_PATCH: u32 = 0;
pub const UV_VERSION_IS_RELEASE: u32 = 1;
pub const UV_VERSION_SUFFIX: &[u8; 1] = b"\0";
pub const UV_VERSION_HEX: u32 = 77824;
pub const __DARWIN_FD_SETSIZE: u32 = 1024;
pub const __DARWIN_NBBY: u32 = 8;
pub const NBBY: u32 = 8;
pub const FD_SETSIZE: u32 = 1024;
pub const S_IFMT: u32 = 61440;
pub const S_IFIFO: u32 = 4096;
pub const S_IFCHR: u32 = 8192;
pub const S_IFDIR: u32 = 16384;
pub const S_IFBLK: u32 = 24576;
pub const S_IFREG: u32 = 32768;
pub const S_IFLNK: u32 = 40960;
pub const S_IFSOCK: u32 = 49152;
pub const S_IFWHT: u32 = 57344;
pub const S_IRWXU: u32 = 448;
pub const S_IRUSR: u32 = 256;
pub const S_IWUSR: u32 = 128;
pub const S_IXUSR: u32 = 64;
pub const S_IRWXG: u32 = 56;
pub const S_IRGRP: u32 = 32;
pub const S_IWGRP: u32 = 16;
pub const S_IXGRP: u32 = 8;
pub const S_IRWXO: u32 = 7;
pub const S_IROTH: u32 = 4;
pub const S_IWOTH: u32 = 2;
pub const S_IXOTH: u32 = 1;
pub const S_ISUID: u32 = 2048;
pub const S_ISGID: u32 = 1024;
pub const S_ISVTX: u32 = 512;
pub const S_ISTXT: u32 = 512;
pub const S_IREAD: u32 = 256;
pub const S_IWRITE: u32 = 128;
pub const S_IEXEC: u32 = 64;
pub const ACCESSPERMS: u32 = 511;
pub const ALLPERMS: u32 = 4095;
pub const DEFFILEMODE: u32 = 438;
pub const S_BLKSIZE: u32 = 512;
pub const UF_SETTABLE: u32 = 65535;
pub const UF_NODUMP: u32 = 1;
pub const UF_IMMUTABLE: u32 = 2;
pub const UF_APPEND: u32 = 4;
pub const UF_OPAQUE: u32 = 8;
pub const UF_COMPRESSED: u32 = 32;
pub const UF_TRACKED: u32 = 64;
pub const UF_DATAVAULT: u32 = 128;
pub const UF_HIDDEN: u32 = 32768;
pub const SF_SUPPORTED: u32 = 10420224;
pub const SF_SETTABLE: u32 = 1073676288;
pub const SF_SYNTHETIC: u32 = 3221225472;
pub const SF_ARCHIVED: u32 = 65536;
pub const SF_IMMUTABLE: u32 = 131072;
pub const SF_APPEND: u32 = 262144;
pub const SF_RESTRICTED: u32 = 524288;
pub const SF_NOUNLINK: u32 = 1048576;
pub const SF_FIRMLINK: u32 = 8388608;
pub const SF_DATALESS: u32 = 1073741824;
pub const EF_MAY_SHARE_BLOCKS: u32 = 1;
pub const EF_NO_XATTRS: u32 = 2;
pub const EF_IS_SYNC_ROOT: u32 = 4;
pub const EF_IS_PURGEABLE: u32 = 8;
pub const EF_IS_SPARSE: u32 = 16;
pub const EF_IS_SYNTHETIC: u32 = 32;
pub const EF_SHARES_ALL_BLOCKS: u32 = 64;
pub const UTIME_NOW: i32 = -1;
pub const UTIME_OMIT: i32 = -2;
pub const O_RDONLY: u32 = 0;
pub const O_WRONLY: u32 = 1;
pub const O_RDWR: u32 = 2;
pub const O_ACCMODE: u32 = 3;
pub const FREAD: u32 = 1;
pub const FWRITE: u32 = 2;
pub const O_NONBLOCK: u32 = 4;
pub const O_APPEND: u32 = 8;
pub const O_SYNC: u32 = 128;
pub const O_SHLOCK: u32 = 16;
pub const O_EXLOCK: u32 = 32;
pub const O_ASYNC: u32 = 64;
pub const O_FSYNC: u32 = 128;
pub const O_NOFOLLOW: u32 = 256;
pub const O_CREAT: u32 = 512;
pub const O_TRUNC: u32 = 1024;
pub const O_EXCL: u32 = 2048;
pub const O_EVTONLY: u32 = 32768;
pub const O_NOCTTY: u32 = 131072;
pub const O_DIRECTORY: u32 = 1048576;
pub const O_SYMLINK: u32 = 2097152;
pub const O_DSYNC: u32 = 4194304;
pub const O_CLOEXEC: u32 = 16777216;
pub const O_NOFOLLOW_ANY: u32 = 536870912;
pub const O_EXEC: u32 = 1073741824;
pub const O_SEARCH: u32 = 1074790400;
pub const AT_FDCWD: i32 = -2;
pub const AT_EACCESS: u32 = 16;
pub const AT_SYMLINK_NOFOLLOW: u32 = 32;
pub const AT_SYMLINK_FOLLOW: u32 = 64;
pub const AT_REMOVEDIR: u32 = 128;
pub const AT_REALDEV: u32 = 512;
pub const AT_FDONLY: u32 = 1024;
pub const AT_SYMLINK_NOFOLLOW_ANY: u32 = 2048;
pub const O_DP_GETRAWENCRYPTED: u32 = 1;
pub const O_DP_GETRAWUNENCRYPTED: u32 = 2;
pub const O_DP_AUTHENTICATE: u32 = 4;
pub const AUTH_OPEN_NOAUTHFD: i32 = -1;
pub const FAPPEND: u32 = 8;
pub const FASYNC: u32 = 64;
pub const FFSYNC: u32 = 128;
pub const FFDSYNC: u32 = 4194304;
pub const FNONBLOCK: u32 = 4;
pub const FNDELAY: u32 = 4;
pub const O_NDELAY: u32 = 4;
pub const CPF_OVERWRITE: u32 = 1;
pub const CPF_IGNORE_MODE: u32 = 2;
pub const CPF_MASK: u32 = 3;
pub const F_DUPFD: u32 = 0;
pub const F_GETFD: u32 = 1;
pub const F_SETFD: u32 = 2;
pub const F_GETFL: u32 = 3;
pub const F_SETFL: u32 = 4;
pub const F_GETOWN: u32 = 5;
pub const F_SETOWN: u32 = 6;
pub const F_GETLK: u32 = 7;
pub const F_SETLK: u32 = 8;
pub const F_SETLKW: u32 = 9;
pub const F_SETLKWTIMEOUT: u32 = 10;
pub const F_FLUSH_DATA: u32 = 40;
pub const F_CHKCLEAN: u32 = 41;
pub const F_PREALLOCATE: u32 = 42;
pub const F_SETSIZE: u32 = 43;
pub const F_RDADVISE: u32 = 44;
pub const F_RDAHEAD: u32 = 45;
pub const F_NOCACHE: u32 = 48;
pub const F_LOG2PHYS: u32 = 49;
pub const F_GETPATH: u32 = 50;
pub const F_FULLFSYNC: u32 = 51;
pub const F_PATHPKG_CHECK: u32 = 52;
pub const F_FREEZE_FS: u32 = 53;
pub const F_THAW_FS: u32 = 54;
pub const F_GLOBAL_NOCACHE: u32 = 55;
pub const F_ADDSIGS: u32 = 59;
pub const F_ADDFILESIGS: u32 = 61;
pub const F_NODIRECT: u32 = 62;
pub const F_GETPROTECTIONCLASS: u32 = 63;
pub const F_SETPROTECTIONCLASS: u32 = 64;
pub const F_LOG2PHYS_EXT: u32 = 65;
pub const F_GETLKPID: u32 = 66;
pub const F_SETBACKINGSTORE: u32 = 70;
pub const F_GETPATH_MTMINFO: u32 = 71;
pub const F_GETCODEDIR: u32 = 72;
pub const F_SETNOSIGPIPE: u32 = 73;
pub const F_GETNOSIGPIPE: u32 = 74;
pub const F_TRANSCODEKEY: u32 = 75;
pub const F_SINGLE_WRITER: u32 = 76;
pub const F_GETPROTECTIONLEVEL: u32 = 77;
pub const F_FINDSIGS: u32 = 78;
pub const F_ADDFILESIGS_FOR_DYLD_SIM: u32 = 83;
pub const F_BARRIERFSYNC: u32 = 85;
pub const F_OFD_SETLK: u32 = 90;
pub const F_OFD_SETLKW: u32 = 91;
pub const F_OFD_GETLK: u32 = 92;
pub const F_OFD_SETLKWTIMEOUT: u32 = 93;
pub const F_ADDFILESIGS_RETURN: u32 = 97;
pub const F_CHECK_LV: u32 = 98;
pub const F_PUNCHHOLE: u32 = 99;
pub const F_TRIM_ACTIVE_FILE: u32 = 100;
pub const F_SPECULATIVE_READ: u32 = 101;
pub const F_GETPATH_NOFIRMLINK: u32 = 102;
pub const F_ADDFILESIGS_INFO: u32 = 103;
pub const F_ADDFILESUPPL: u32 = 104;
pub const F_GETSIGSINFO: u32 = 105;
pub const F_SETLEASE: u32 = 106;
pub const F_GETLEASE: u32 = 107;
pub const F_TRANSFEREXTENTS: u32 = 110;
pub const F_ATTRIBUTION_TAG: u32 = 111;
pub const F_ADDSIGS_MAIN_BINARY: u32 = 113;
pub const FCNTL_FS_SPECIFIC_BASE: u32 = 65536;
pub const F_DUPFD_CLOEXEC: u32 = 67;
pub const FD_CLOEXEC: u32 = 1;
pub const F_RDLCK: u32 = 1;
pub const F_UNLCK: u32 = 2;
pub const F_WRLCK: u32 = 3;
pub const F_ALLOCATECONTIG: u32 = 2;
pub const F_ALLOCATEALL: u32 = 4;
pub const F_ALLOCATEPERSIST: u32 = 8;
pub const F_PEOFPOSMODE: u32 = 3;
pub const F_VOLPOSMODE: u32 = 4;
pub const USER_FSIGNATURES_CDHASH_LEN: u32 = 20;
pub const GETSIGSINFO_PLATFORM_BINARY: u32 = 1;
pub const LOCK_SH: u32 = 1;
pub const LOCK_EX: u32 = 2;
pub const LOCK_NB: u32 = 4;
pub const LOCK_UN: u32 = 8;
pub const ATTRIBUTION_NAME_MAX: u32 = 255;
pub const F_CREATE_TAG: u32 = 1;
pub const F_DELETE_TAG: u32 = 2;
pub const F_QUERY_TAG: u32 = 4;
pub const O_POPUP: u32 = 2147483648;
pub const O_ALERT: u32 = 536870912;
pub const __DARWIN_MAXNAMLEN: u32 = 255;
pub const __DARWIN_MAXPATHLEN: u32 = 1024;
pub const MAXNAMLEN: u32 = 255;
pub const DT_UNKNOWN: u32 = 0;
pub const DT_FIFO: u32 = 1;
pub const DT_CHR: u32 = 2;
pub const DT_DIR: u32 = 4;
pub const DT_BLK: u32 = 6;
pub const DT_REG: u32 = 8;
pub const DT_LNK: u32 = 10;
pub const DT_SOCK: u32 = 12;
pub const DT_WHT: u32 = 14;
pub const DIRBLKSIZ: u32 = 1024;
pub const DTF_HIDEW: u32 = 1;
pub const DTF_NODUP: u32 = 2;
pub const DTF_REWIND: u32 = 4;
pub const __DTF_READALL: u32 = 8;
pub const __DTF_SKIPREAD: u32 = 16;
pub const __DTF_ATEND: u32 = 32;
pub const KEV_INET_SUBCLASS: u32 = 1;
pub const KEV_INET_NEW_ADDR: u32 = 1;
pub const KEV_INET_CHANGED_ADDR: u32 = 2;
pub const KEV_INET_ADDR_DELETED: u32 = 3;
pub const KEV_INET_SIFDSTADDR: u32 = 4;
pub const KEV_INET_SIFBRDADDR: u32 = 5;
pub const KEV_INET_SIFNETMASK: u32 = 6;
pub const KEV_INET_ARPCOLLISION: u32 = 7;
pub const KEV_INET_PORTINUSE: u32 = 8;
pub const KEV_INET_ARPRTRFAILURE: u32 = 9;
pub const KEV_INET_ARPRTRALIVE: u32 = 10;
pub const KEV_DL_SUBCLASS: u32 = 2;
pub const KEV_DL_SIFFLAGS: u32 = 1;
pub const KEV_DL_SIFMETRICS: u32 = 2;
pub const KEV_DL_SIFMTU: u32 = 3;
pub const KEV_DL_SIFPHYS: u32 = 4;
pub const KEV_DL_SIFMEDIA: u32 = 5;
pub const KEV_DL_SIFGENERIC: u32 = 6;
pub const KEV_DL_ADDMULTI: u32 = 7;
pub const KEV_DL_DELMULTI: u32 = 8;
pub const KEV_DL_IF_ATTACHED: u32 = 9;
pub const KEV_DL_IF_DETACHING: u32 = 10;
pub const KEV_DL_IF_DETACHED: u32 = 11;
pub const KEV_DL_LINK_OFF: u32 = 12;
pub const KEV_DL_LINK_ON: u32 = 13;
pub const KEV_DL_PROTO_ATTACHED: u32 = 14;
pub const KEV_DL_PROTO_DETACHED: u32 = 15;
pub const KEV_DL_LINK_ADDRESS_CHANGED: u32 = 16;
pub const KEV_DL_WAKEFLAGS_CHANGED: u32 = 17;
pub const KEV_DL_IF_IDLE_ROUTE_REFCNT: u32 = 18;
pub const KEV_DL_IFCAP_CHANGED: u32 = 19;
pub const KEV_DL_LINK_QUALITY_METRIC_CHANGED: u32 = 20;
pub const KEV_DL_NODE_PRESENCE: u32 = 21;
pub const KEV_DL_NODE_ABSENCE: u32 = 22;
pub const KEV_DL_PRIMARY_ELECTED: u32 = 23;
pub const KEV_DL_ISSUES: u32 = 24;
pub const KEV_DL_IFDELEGATE_CHANGED: u32 = 25;
pub const KEV_DL_AWDL_RESTRICTED: u32 = 26;
pub const KEV_DL_AWDL_UNRESTRICTED: u32 = 27;
pub const KEV_DL_RRC_STATE_CHANGED: u32 = 28;
pub const KEV_DL_QOS_MODE_CHANGED: u32 = 29;
pub const KEV_DL_LOW_POWER_MODE_CHANGED: u32 = 30;
pub const KEV_INET6_SUBCLASS: u32 = 6;
pub const KEV_INET6_NEW_USER_ADDR: u32 = 1;
pub const KEV_INET6_CHANGED_ADDR: u32 = 2;
pub const KEV_INET6_ADDR_DELETED: u32 = 3;
pub const KEV_INET6_NEW_LL_ADDR: u32 = 4;
pub const KEV_INET6_NEW_RTADV_ADDR: u32 = 5;
pub const KEV_INET6_DEFROUTER: u32 = 6;
pub const KEV_INET6_REQUEST_NAT64_PREFIX: u32 = 7;
pub const SOCK_STREAM: u32 = 1;
pub const SOCK_DGRAM: u32 = 2;
pub const SOCK_RAW: u32 = 3;
pub const SOCK_RDM: u32 = 4;
pub const SOCK_SEQPACKET: u32 = 5;
pub const SO_DEBUG: u32 = 1;
pub const SO_ACCEPTCONN: u32 = 2;
pub const SO_REUSEADDR: u32 = 4;
pub const SO_KEEPALIVE: u32 = 8;
pub const SO_DONTROUTE: u32 = 16;
pub const SO_BROADCAST: u32 = 32;
pub const SO_USELOOPBACK: u32 = 64;
pub const SO_LINGER: u32 = 128;
pub const SO_LINGER_SEC: u32 = 4224;
pub const SO_OOBINLINE: u32 = 256;
pub const SO_REUSEPORT: u32 = 512;
pub const SO_TIMESTAMP: u32 = 1024;
pub const SO_TIMESTAMP_MONOTONIC: u32 = 2048;
pub const SO_DONTTRUNC: u32 = 8192;
pub const SO_WANTMORE: u32 = 16384;
pub const SO_WANTOOBFLAG: u32 = 32768;
pub const SO_SNDBUF: u32 = 4097;
pub const SO_RCVBUF: u32 = 4098;
pub const SO_SNDLOWAT: u32 = 4099;
pub const SO_RCVLOWAT: u32 = 4100;
pub const SO_SNDTIMEO: u32 = 4101;
pub const SO_RCVTIMEO: u32 = 4102;
pub const SO_ERROR: u32 = 4103;
pub const SO_TYPE: u32 = 4104;
pub const SO_LABEL: u32 = 4112;
pub const SO_PEERLABEL: u32 = 4113;
pub const SO_NREAD: u32 = 4128;
pub const SO_NKE: u32 = 4129;
pub const SO_NOSIGPIPE: u32 = 4130;
pub const SO_NOADDRERR: u32 = 4131;
pub const SO_NWRITE: u32 = 4132;
pub const SO_REUSESHAREUID: u32 = 4133;
pub const SO_NOTIFYCONFLICT: u32 = 4134;
pub const SO_UPCALLCLOSEWAIT: u32 = 4135;
pub const SO_RANDOMPORT: u32 = 4226;
pub const SO_NP_EXTENSIONS: u32 = 4227;
pub const SO_NUMRCVPKT: u32 = 4370;
pub const SO_NET_SERVICE_TYPE: u32 = 4374;
pub const SO_NETSVC_MARKING_LEVEL: u32 = 4377;
pub const SO_RESOLVER_SIGNATURE: u32 = 4401;
pub const SO_BINDTODEVICE: u32 = 4404;
pub const NET_SERVICE_TYPE_BE: u32 = 0;
pub const NET_SERVICE_TYPE_BK: u32 = 1;
pub const NET_SERVICE_TYPE_SIG: u32 = 2;
pub const NET_SERVICE_TYPE_VI: u32 = 3;
pub const NET_SERVICE_TYPE_VO: u32 = 4;
pub const NET_SERVICE_TYPE_RV: u32 = 5;
pub const NET_SERVICE_TYPE_AV: u32 = 6;
pub const NET_SERVICE_TYPE_OAM: u32 = 7;
pub const NET_SERVICE_TYPE_RD: u32 = 8;
pub const NETSVC_MRKNG_UNKNOWN: u32 = 0;
pub const NETSVC_MRKNG_LVL_L2: u32 = 1;
pub const NETSVC_MRKNG_LVL_L3L2_ALL: u32 = 2;
pub const NETSVC_MRKNG_LVL_L3L2_BK: u32 = 3;
pub const SAE_ASSOCID_ANY: u32 = 0;
pub const SAE_CONNID_ANY: u32 = 0;
pub const CONNECT_RESUME_ON_READ_WRITE: u32 = 1;
pub const CONNECT_DATA_IDEMPOTENT: u32 = 2;
pub const CONNECT_DATA_AUTHENTICATED: u32 = 4;
pub const SONPX_SETOPTSHUT: u32 = 1;
pub const SOL_SOCKET: u32 = 65535;
pub const AF_UNSPEC: u32 = 0;
pub const AF_UNIX: u32 = 1;
pub const AF_LOCAL: u32 = 1;
pub const AF_INET: u32 = 2;
pub const AF_IMPLINK: u32 = 3;
pub const AF_PUP: u32 = 4;
pub const AF_CHAOS: u32 = 5;
pub const AF_NS: u32 = 6;
pub const AF_ISO: u32 = 7;
pub const AF_OSI: u32 = 7;
pub const AF_ECMA: u32 = 8;
pub const AF_DATAKIT: u32 = 9;
pub const AF_CCITT: u32 = 10;
pub const AF_SNA: u32 = 11;
pub const AF_DECnet: u32 = 12;
pub const AF_DLI: u32 = 13;
pub const AF_LAT: u32 = 14;
pub const AF_HYLINK: u32 = 15;
pub const AF_APPLETALK: u32 = 16;
pub const AF_ROUTE: u32 = 17;
pub const AF_LINK: u32 = 18;
pub const pseudo_AF_XTP: u32 = 19;
pub const AF_COIP: u32 = 20;
pub const AF_CNT: u32 = 21;
pub const pseudo_AF_RTIP: u32 = 22;
pub const AF_IPX: u32 = 23;
pub const AF_SIP: u32 = 24;
pub const pseudo_AF_PIP: u32 = 25;
pub const AF_NDRV: u32 = 27;
pub const AF_ISDN: u32 = 28;
pub const AF_E164: u32 = 28;
pub const pseudo_AF_KEY: u32 = 29;
pub const AF_INET6: u32 = 30;
pub const AF_NATM: u32 = 31;
pub const AF_SYSTEM: u32 = 32;
pub const AF_NETBIOS: u32 = 33;
pub const AF_PPP: u32 = 34;
pub const pseudo_AF_HDRCMPLT: u32 = 35;
pub const AF_RESERVED_36: u32 = 36;
pub const AF_IEEE80211: u32 = 37;
pub const AF_UTUN: u32 = 38;
pub const AF_VSOCK: u32 = 40;
pub const AF_MAX: u32 = 41;
pub const SOCK_MAXADDRLEN: u32 = 255;
pub const _SS_MAXSIZE: u32 = 128;
pub const PF_UNSPEC: u32 = 0;
pub const PF_LOCAL: u32 = 1;
pub const PF_UNIX: u32 = 1;
pub const PF_INET: u32 = 2;
pub const PF_IMPLINK: u32 = 3;
pub const PF_PUP: u32 = 4;
pub const PF_CHAOS: u32 = 5;
pub const PF_NS: u32 = 6;
pub const PF_ISO: u32 = 7;
pub const PF_OSI: u32 = 7;
pub const PF_ECMA: u32 = 8;
pub const PF_DATAKIT: u32 = 9;
pub const PF_CCITT: u32 = 10;
pub const PF_SNA: u32 = 11;
pub const PF_DECnet: u32 = 12;
pub const PF_DLI: u32 = 13;
pub const PF_LAT: u32 = 14;
pub const PF_HYLINK: u32 = 15;
pub const PF_APPLETALK: u32 = 16;
pub const PF_ROUTE: u32 = 17;
pub const PF_LINK: u32 = 18;
pub const PF_XTP: u32 = 19;
pub const PF_COIP: u32 = 20;
pub const PF_CNT: u32 = 21;
pub const PF_SIP: u32 = 24;
pub const PF_IPX: u32 = 23;
pub const PF_RTIP: u32 = 22;
pub const PF_PIP: u32 = 25;
pub const PF_NDRV: u32 = 27;
pub const PF_ISDN: u32 = 28;
pub const PF_KEY: u32 = 29;
pub const PF_INET6: u32 = 30;
pub const PF_NATM: u32 = 31;
pub const PF_SYSTEM: u32 = 32;
pub const PF_NETBIOS: u32 = 33;
pub const PF_PPP: u32 = 34;
pub const PF_RESERVED_36: u32 = 36;
pub const PF_UTUN: u32 = 38;
pub const PF_VSOCK: u32 = 40;
pub const PF_MAX: u32 = 41;
pub const NET_MAXID: u32 = 41;
pub const NET_RT_DUMP: u32 = 1;
pub const NET_RT_FLAGS: u32 = 2;
pub const NET_RT_IFLIST: u32 = 3;
pub const NET_RT_STAT: u32 = 4;
pub const NET_RT_TRASH: u32 = 5;
pub const NET_RT_IFLIST2: u32 = 6;
pub const NET_RT_DUMP2: u32 = 7;
pub const NET_RT_FLAGS_PRIV: u32 = 10;
pub const NET_RT_MAXID: u32 = 11;
pub const SOMAXCONN: u32 = 128;
pub const MSG_OOB: u32 = 1;
pub const MSG_PEEK: u32 = 2;
pub const MSG_DONTROUTE: u32 = 4;
pub const MSG_EOR: u32 = 8;
pub const MSG_TRUNC: u32 = 16;
pub const MSG_CTRUNC: u32 = 32;
pub const MSG_WAITALL: u32 = 64;
pub const MSG_DONTWAIT: u32 = 128;
pub const MSG_EOF: u32 = 256;
pub const MSG_WAITSTREAM: u32 = 512;
pub const MSG_FLUSH: u32 = 1024;
pub const MSG_HOLD: u32 = 2048;
pub const MSG_SEND: u32 = 4096;
pub const MSG_HAVEMORE: u32 = 8192;
pub const MSG_RCVMORE: u32 = 16384;
pub const MSG_NEEDSA: u32 = 65536;
pub const MSG_NOSIGNAL: u32 = 524288;
pub const SCM_RIGHTS: u32 = 1;
pub const SCM_TIMESTAMP: u32 = 2;
pub const SCM_CREDS: u32 = 3;
pub const SCM_TIMESTAMP_MONOTONIC: u32 = 4;
pub const SHUT_RD: u32 = 0;
pub const SHUT_WR: u32 = 1;
pub const SHUT_RDWR: u32 = 2;
pub const IPPROTO_IP: u32 = 0;
pub const IPPROTO_HOPOPTS: u32 = 0;
pub const IPPROTO_ICMP: u32 = 1;
pub const IPPROTO_IGMP: u32 = 2;
pub const IPPROTO_GGP: u32 = 3;
pub const IPPROTO_IPV4: u32 = 4;
pub const IPPROTO_IPIP: u32 = 4;
pub const IPPROTO_TCP: u32 = 6;
pub const IPPROTO_ST: u32 = 7;
pub const IPPROTO_EGP: u32 = 8;
pub const IPPROTO_PIGP: u32 = 9;
pub const IPPROTO_RCCMON: u32 = 10;
pub const IPPROTO_NVPII: u32 = 11;
pub const IPPROTO_PUP: u32 = 12;
pub const IPPROTO_ARGUS: u32 = 13;
pub const IPPROTO_EMCON: u32 = 14;
pub const IPPROTO_XNET: u32 = 15;
pub const IPPROTO_CHAOS: u32 = 16;
pub const IPPROTO_UDP: u32 = 17;
pub const IPPROTO_MUX: u32 = 18;
pub const IPPROTO_MEAS: u32 = 19;
pub const IPPROTO_HMP: u32 = 20;
pub const IPPROTO_PRM: u32 = 21;
pub const IPPROTO_IDP: u32 = 22;
pub const IPPROTO_TRUNK1: u32 = 23;
pub const IPPROTO_TRUNK2: u32 = 24;
pub const IPPROTO_LEAF1: u32 = 25;
pub const IPPROTO_LEAF2: u32 = 26;
pub const IPPROTO_RDP: u32 = 27;
pub const IPPROTO_IRTP: u32 = 28;
pub const IPPROTO_TP: u32 = 29;
pub const IPPROTO_BLT: u32 = 30;
pub const IPPROTO_NSP: u32 = 31;
pub const IPPROTO_INP: u32 = 32;
pub const IPPROTO_SEP: u32 = 33;
pub const IPPROTO_3PC: u32 = 34;
pub const IPPROTO_IDPR: u32 = 35;
pub const IPPROTO_XTP: u32 = 36;
pub const IPPROTO_DDP: u32 = 37;
pub const IPPROTO_CMTP: u32 = 38;
pub const IPPROTO_TPXX: u32 = 39;
pub const IPPROTO_IL: u32 = 40;
pub const IPPROTO_IPV6: u32 = 41;
pub const IPPROTO_SDRP: u32 = 42;
pub const IPPROTO_ROUTING: u32 = 43;
pub const IPPROTO_FRAGMENT: u32 = 44;
pub const IPPROTO_IDRP: u32 = 45;
pub const IPPROTO_RSVP: u32 = 46;
pub const IPPROTO_GRE: u32 = 47;
pub const IPPROTO_MHRP: u32 = 48;
pub const IPPROTO_BHA: u32 = 49;
pub const IPPROTO_ESP: u32 = 50;
pub const IPPROTO_AH: u32 = 51;
pub const IPPROTO_INLSP: u32 = 52;
pub const IPPROTO_SWIPE: u32 = 53;
pub const IPPROTO_NHRP: u32 = 54;
pub const IPPROTO_ICMPV6: u32 = 58;
pub const IPPROTO_NONE: u32 = 59;
pub const IPPROTO_DSTOPTS: u32 = 60;
pub const IPPROTO_AHIP: u32 = 61;
pub const IPPROTO_CFTP: u32 = 62;
pub const IPPROTO_HELLO: u32 = 63;
pub const IPPROTO_SATEXPAK: u32 = 64;
pub const IPPROTO_KRYPTOLAN: u32 = 65;
pub const IPPROTO_RVD: u32 = 66;
pub const IPPROTO_IPPC: u32 = 67;
pub const IPPROTO_ADFS: u32 = 68;
pub const IPPROTO_SATMON: u32 = 69;
pub const IPPROTO_VISA: u32 = 70;
pub const IPPROTO_IPCV: u32 = 71;
pub const IPPROTO_CPNX: u32 = 72;
pub const IPPROTO_CPHB: u32 = 73;
pub const IPPROTO_WSN: u32 = 74;
pub const IPPROTO_PVP: u32 = 75;
pub const IPPROTO_BRSATMON: u32 = 76;
pub const IPPROTO_ND: u32 = 77;
pub const IPPROTO_WBMON: u32 = 78;
pub const IPPROTO_WBEXPAK: u32 = 79;
pub const IPPROTO_EON: u32 = 80;
pub const IPPROTO_VMTP: u32 = 81;
pub const IPPROTO_SVMTP: u32 = 82;
pub const IPPROTO_VINES: u32 = 83;
pub const IPPROTO_TTP: u32 = 84;
pub const IPPROTO_IGP: u32 = 85;
pub const IPPROTO_DGP: u32 = 86;
pub const IPPROTO_TCF: u32 = 87;
pub const IPPROTO_IGRP: u32 = 88;
pub const IPPROTO_OSPFIGP: u32 = 89;
pub const IPPROTO_SRPC: u32 = 90;
pub const IPPROTO_LARP: u32 = 91;
pub const IPPROTO_MTP: u32 = 92;
pub const IPPROTO_AX25: u32 = 93;
pub const IPPROTO_IPEIP: u32 = 94;
pub const IPPROTO_MICP: u32 = 95;
pub const IPPROTO_SCCSP: u32 = 96;
pub const IPPROTO_ETHERIP: u32 = 97;
pub const IPPROTO_ENCAP: u32 = 98;
pub const IPPROTO_APES: u32 = 99;
pub const IPPROTO_GMTP: u32 = 100;
pub const IPPROTO_PIM: u32 = 103;
pub const IPPROTO_IPCOMP: u32 = 108;
pub const IPPROTO_PGM: u32 = 113;
pub const IPPROTO_SCTP: u32 = 132;
pub const IPPROTO_DIVERT: u32 = 254;
pub const IPPROTO_RAW: u32 = 255;
pub const IPPROTO_MAX: u32 = 256;
pub const IPPROTO_DONE: u32 = 257;
pub const __DARWIN_IPPORT_RESERVED: u32 = 1024;
pub const IPPORT_RESERVED: u32 = 1024;
pub const IPPORT_USERRESERVED: u32 = 5000;
pub const IPPORT_HIFIRSTAUTO: u32 = 49152;
pub const IPPORT_HILASTAUTO: u32 = 65535;
pub const IPPORT_RESERVEDSTART: u32 = 600;
pub const IN_CLASSA_NET: u32 = 4278190080;
pub const IN_CLASSA_NSHIFT: u32 = 24;
pub const IN_CLASSA_HOST: u32 = 16777215;
pub const IN_CLASSA_MAX: u32 = 128;
pub const IN_CLASSB_NET: u32 = 4294901760;
pub const IN_CLASSB_NSHIFT: u32 = 16;
pub const IN_CLASSB_HOST: u32 = 65535;
pub const IN_CLASSB_MAX: u32 = 65536;
pub const IN_CLASSC_NET: u32 = 4294967040;
pub const IN_CLASSC_NSHIFT: u32 = 8;
pub const IN_CLASSC_HOST: u32 = 255;
pub const IN_CLASSD_NET: u32 = 4026531840;
pub const IN_CLASSD_NSHIFT: u32 = 28;
pub const IN_CLASSD_HOST: u32 = 268435455;
pub const INADDR_NONE: u32 = 4294967295;
pub const IN_LOOPBACKNET: u32 = 127;
pub const INET_ADDRSTRLEN: u32 = 16;
pub const IP_OPTIONS: u32 = 1;
pub const IP_HDRINCL: u32 = 2;
pub const IP_TOS: u32 = 3;
pub const IP_TTL: u32 = 4;
pub const IP_RECVOPTS: u32 = 5;
pub const IP_RECVRETOPTS: u32 = 6;
pub const IP_RECVDSTADDR: u32 = 7;
pub const IP_RETOPTS: u32 = 8;
pub const IP_MULTICAST_IF: u32 = 9;
pub const IP_MULTICAST_TTL: u32 = 10;
pub const IP_MULTICAST_LOOP: u32 = 11;
pub const IP_ADD_MEMBERSHIP: u32 = 12;
pub const IP_DROP_MEMBERSHIP: u32 = 13;
pub const IP_MULTICAST_VIF: u32 = 14;
pub const IP_RSVP_ON: u32 = 15;
pub const IP_RSVP_OFF: u32 = 16;
pub const IP_RSVP_VIF_ON: u32 = 17;
pub const IP_RSVP_VIF_OFF: u32 = 18;
pub const IP_PORTRANGE: u32 = 19;
pub const IP_RECVIF: u32 = 20;
pub const IP_IPSEC_POLICY: u32 = 21;
pub const IP_FAITH: u32 = 22;
pub const IP_STRIPHDR: u32 = 23;
pub const IP_RECVTTL: u32 = 24;
pub const IP_BOUND_IF: u32 = 25;
pub const IP_PKTINFO: u32 = 26;
pub const IP_RECVPKTINFO: u32 = 26;
pub const IP_RECVTOS: u32 = 27;
pub const IP_DONTFRAG: u32 = 28;
pub const IP_FW_ADD: u32 = 40;
pub const IP_FW_DEL: u32 = 41;
pub const IP_FW_FLUSH: u32 = 42;
pub const IP_FW_ZERO: u32 = 43;
pub const IP_FW_GET: u32 = 44;
pub const IP_FW_RESETLOG: u32 = 45;
pub const IP_OLD_FW_ADD: u32 = 50;
pub const IP_OLD_FW_DEL: u32 = 51;
pub const IP_OLD_FW_FLUSH: u32 = 52;
pub const IP_OLD_FW_ZERO: u32 = 53;
pub const IP_OLD_FW_GET: u32 = 54;
pub const IP_NAT__XXX: u32 = 55;
pub const IP_OLD_FW_RESETLOG: u32 = 56;
pub const IP_DUMMYNET_CONFIGURE: u32 = 60;
pub const IP_DUMMYNET_DEL: u32 = 61;
pub const IP_DUMMYNET_FLUSH: u32 = 62;
pub const IP_DUMMYNET_GET: u32 = 64;
pub const IP_TRAFFIC_MGT_BACKGROUND: u32 = 65;
pub const IP_MULTICAST_IFINDEX: u32 = 66;
pub const IP_ADD_SOURCE_MEMBERSHIP: u32 = 70;
pub const IP_DROP_SOURCE_MEMBERSHIP: u32 = 71;
pub const IP_BLOCK_SOURCE: u32 = 72;
pub const IP_UNBLOCK_SOURCE: u32 = 73;
pub const IP_MSFILTER: u32 = 74;
pub const MCAST_JOIN_GROUP: u32 = 80;
pub const MCAST_LEAVE_GROUP: u32 = 81;
pub const MCAST_JOIN_SOURCE_GROUP: u32 = 82;
pub const MCAST_LEAVE_SOURCE_GROUP: u32 = 83;
pub const MCAST_BLOCK_SOURCE: u32 = 84;
pub const MCAST_UNBLOCK_SOURCE: u32 = 85;
pub const IP_DEFAULT_MULTICAST_TTL: u32 = 1;
pub const IP_DEFAULT_MULTICAST_LOOP: u32 = 1;
pub const IP_MIN_MEMBERSHIPS: u32 = 31;
pub const IP_MAX_MEMBERSHIPS: u32 = 4095;
pub const IP_MAX_GROUP_SRC_FILTER: u32 = 512;
pub const IP_MAX_SOCK_SRC_FILTER: u32 = 128;
pub const IP_MAX_SOCK_MUTE_FILTER: u32 = 128;
pub const MCAST_UNDEFINED: u32 = 0;
pub const MCAST_INCLUDE: u32 = 1;
pub const MCAST_EXCLUDE: u32 = 2;
pub const IP_PORTRANGE_DEFAULT: u32 = 0;
pub const IP_PORTRANGE_HIGH: u32 = 1;
pub const IP_PORTRANGE_LOW: u32 = 2;
pub const IPPROTO_MAXID: u32 = 52;
pub const IPCTL_FORWARDING: u32 = 1;
pub const IPCTL_SENDREDIRECTS: u32 = 2;
pub const IPCTL_DEFTTL: u32 = 3;
pub const IPCTL_RTEXPIRE: u32 = 5;
pub const IPCTL_RTMINEXPIRE: u32 = 6;
pub const IPCTL_RTMAXCACHE: u32 = 7;
pub const IPCTL_SOURCEROUTE: u32 = 8;
pub const IPCTL_DIRECTEDBROADCAST: u32 = 9;
pub const IPCTL_INTRQMAXLEN: u32 = 10;
pub const IPCTL_INTRQDROPS: u32 = 11;
pub const IPCTL_STATS: u32 = 12;
pub const IPCTL_ACCEPTSOURCEROUTE: u32 = 13;
pub const IPCTL_FASTFORWARDING: u32 = 14;
pub const IPCTL_KEEPFAITH: u32 = 15;
pub const IPCTL_GIF_TTL: u32 = 16;
pub const IPCTL_MAXID: u32 = 17;
pub const __KAME_VERSION: &[u8; 18] = b"2009/apple-darwin\0";
pub const IPV6PORT_RESERVED: u32 = 1024;
pub const IPV6PORT_ANONMIN: u32 = 49152;
pub const IPV6PORT_ANONMAX: u32 = 65535;
pub const IPV6PORT_RESERVEDMIN: u32 = 600;
pub const IPV6PORT_RESERVEDMAX: u32 = 1023;
pub const INET6_ADDRSTRLEN: u32 = 46;
pub const __IPV6_ADDR_SCOPE_NODELOCAL: u32 = 1;
pub const __IPV6_ADDR_SCOPE_INTFACELOCAL: u32 = 1;
pub const __IPV6_ADDR_SCOPE_LINKLOCAL: u32 = 2;
pub const __IPV6_ADDR_SCOPE_SITELOCAL: u32 = 5;
pub const __IPV6_ADDR_SCOPE_ORGLOCAL: u32 = 8;
pub const __IPV6_ADDR_SCOPE_GLOBAL: u32 = 14;
pub const IPV6_ADDR_MC_FLAGS_TRANSIENT: u32 = 16;
pub const IPV6_ADDR_MC_FLAGS_PREFIX: u32 = 32;
pub const IPV6_ADDR_MC_FLAGS_UNICAST_BASED: u32 = 48;
pub const IPV6_SOCKOPT_RESERVED1: u32 = 3;
pub const IPV6_UNICAST_HOPS: u32 = 4;
pub const IPV6_MULTICAST_IF: u32 = 9;
pub const IPV6_MULTICAST_HOPS: u32 = 10;
pub const IPV6_MULTICAST_LOOP: u32 = 11;
pub const IPV6_JOIN_GROUP: u32 = 12;
pub const IPV6_LEAVE_GROUP: u32 = 13;
pub const IPV6_PORTRANGE: u32 = 14;
pub const ICMP6_FILTER: u32 = 18;
pub const IPV6_2292PKTINFO: u32 = 19;
pub const IPV6_2292HOPLIMIT: u32 = 20;
pub const IPV6_2292NEXTHOP: u32 = 21;
pub const IPV6_2292HOPOPTS: u32 = 22;
pub const IPV6_2292DSTOPTS: u32 = 23;
pub const IPV6_2292RTHDR: u32 = 24;
pub const IPV6_2292PKTOPTIONS: u32 = 25;
pub const IPV6_CHECKSUM: u32 = 26;
pub const IPV6_V6ONLY: u32 = 27;
pub const IPV6_BINDV6ONLY: u32 = 27;
pub const IPV6_IPSEC_POLICY: u32 = 28;
pub const IPV6_FAITH: u32 = 29;
pub const IPV6_FW_ADD: u32 = 30;
pub const IPV6_FW_DEL: u32 = 31;
pub const IPV6_FW_FLUSH: u32 = 32;
pub const IPV6_FW_ZERO: u32 = 33;
pub const IPV6_FW_GET: u32 = 34;
pub const IPV6_RECVTCLASS: u32 = 35;
pub const IPV6_TCLASS: u32 = 36;
pub const IPV6_BOUND_IF: u32 = 125;
pub const IPV6_RTHDR_LOOSE: u32 = 0;
pub const IPV6_RTHDR_STRICT: u32 = 1;
pub const IPV6_RTHDR_TYPE_0: u32 = 0;
pub const IPV6_DEFAULT_MULTICAST_HOPS: u32 = 1;
pub const IPV6_DEFAULT_MULTICAST_LOOP: u32 = 1;
pub const IPV6_MIN_MEMBERSHIPS: u32 = 31;
pub const IPV6_MAX_MEMBERSHIPS: u32 = 4095;
pub const IPV6_MAX_GROUP_SRC_FILTER: u32 = 512;
pub const IPV6_MAX_SOCK_SRC_FILTER: u32 = 128;
pub const IPV6_PORTRANGE_DEFAULT: u32 = 0;
pub const IPV6_PORTRANGE_HIGH: u32 = 1;
pub const IPV6_PORTRANGE_LOW: u32 = 2;
pub const IPV6PROTO_MAXID: u32 = 104;
pub const IPV6CTL_FORWARDING: u32 = 1;
pub const IPV6CTL_SENDREDIRECTS: u32 = 2;
pub const IPV6CTL_DEFHLIM: u32 = 3;
pub const IPV6CTL_FORWSRCRT: u32 = 5;
pub const IPV6CTL_STATS: u32 = 6;
pub const IPV6CTL_MRTSTATS: u32 = 7;
pub const IPV6CTL_MRTPROTO: u32 = 8;
pub const IPV6CTL_MAXFRAGPACKETS: u32 = 9;
pub const IPV6CTL_SOURCECHECK: u32 = 10;
pub const IPV6CTL_SOURCECHECK_LOGINT: u32 = 11;
pub const IPV6CTL_ACCEPT_RTADV: u32 = 12;
pub const IPV6CTL_KEEPFAITH: u32 = 13;
pub const IPV6CTL_LOG_INTERVAL: u32 = 14;
pub const IPV6CTL_HDRNESTLIMIT: u32 = 15;
pub const IPV6CTL_DAD_COUNT: u32 = 16;
pub const IPV6CTL_AUTO_FLOWLABEL: u32 = 17;
pub const IPV6CTL_DEFMCASTHLIM: u32 = 18;
pub const IPV6CTL_GIF_HLIM: u32 = 19;
pub const IPV6CTL_KAME_VERSION: u32 = 20;
pub const IPV6CTL_USE_DEPRECATED: u32 = 21;
pub const IPV6CTL_RR_PRUNE: u32 = 22;
pub const IPV6CTL_V6ONLY: u32 = 24;
pub const IPV6CTL_RTEXPIRE: u32 = 25;
pub const IPV6CTL_RTMINEXPIRE: u32 = 26;
pub const IPV6CTL_RTMAXCACHE: u32 = 27;
pub const IPV6CTL_USETEMPADDR: u32 = 32;
pub const IPV6CTL_TEMPPLTIME: u32 = 33;
pub const IPV6CTL_TEMPVLTIME: u32 = 34;
pub const IPV6CTL_AUTO_LINKLOCAL: u32 = 35;
pub const IPV6CTL_RIP6STATS: u32 = 36;
pub const IPV6CTL_PREFER_TEMPADDR: u32 = 37;
pub const IPV6CTL_ADDRCTLPOLICY: u32 = 38;
pub const IPV6CTL_USE_DEFAULTZONE: u32 = 39;
pub const IPV6CTL_MAXFRAGS: u32 = 41;
pub const IPV6CTL_MCAST_PMTU: u32 = 44;
pub const IPV6CTL_NEIGHBORGCTHRESH: u32 = 46;
pub const IPV6CTL_MAXIFPREFIXES: u32 = 47;
pub const IPV6CTL_MAXIFDEFROUTERS: u32 = 48;
pub const IPV6CTL_MAXDYNROUTES: u32 = 49;
pub const ICMPV6CTL_ND6_ONLINKNSRFC4861: u32 = 50;
pub const IPV6CTL_ULA_USETEMPADDR: u32 = 51;
pub const IPV6CTL_MAXID: u32 = 51;
pub const TH_FIN: u32 = 1;
pub const TH_SYN: u32 = 2;
pub const TH_RST: u32 = 4;
pub const TH_PUSH: u32 = 8;
pub const TH_ACK: u32 = 16;
pub const TH_URG: u32 = 32;
pub const TH_ECE: u32 = 64;
pub const TH_CWR: u32 = 128;
pub const TH_AE: u32 = 256;
pub const TH_FLAGS: u32 = 247;
pub const TH_FLAGS_ALL: u32 = 255;
pub const TH_ACCEPT: u32 = 23;
pub const TH_ACE: u32 = 448;
pub const TCPOPT_EOL: u32 = 0;
pub const TCPOPT_NOP: u32 = 1;
pub const TCPOPT_MAXSEG: u32 = 2;
pub const TCPOLEN_MAXSEG: u32 = 4;
pub const TCPOPT_WINDOW: u32 = 3;
pub const TCPOLEN_WINDOW: u32 = 3;
pub const TCPOPT_SACK_PERMITTED: u32 = 4;
pub const TCPOLEN_SACK_PERMITTED: u32 = 2;
pub const TCPOPT_SACK: u32 = 5;
pub const TCPOLEN_SACK: u32 = 8;
pub const TCPOPT_TIMESTAMP: u32 = 8;
pub const TCPOLEN_TIMESTAMP: u32 = 10;
pub const TCPOLEN_TSTAMP_APPA: u32 = 12;
pub const TCPOPT_TSTAMP_HDR: u32 = 16844810;
pub const MAX_TCPOPTLEN: u32 = 40;
pub const TCPOPT_CC: u32 = 11;
pub const TCPOPT_CCNEW: u32 = 12;
pub const TCPOPT_CCECHO: u32 = 13;
pub const TCPOLEN_CC: u32 = 6;
pub const TCPOLEN_CC_APPA: u32 = 8;
pub const TCPOPT_SIGNATURE: u32 = 19;
pub const TCPOLEN_SIGNATURE: u32 = 18;
pub const TCPOPT_FASTOPEN: u32 = 34;
pub const TCPOLEN_FASTOPEN_REQ: u32 = 2;
pub const TCPOPT_ACCECN0: u32 = 172;
pub const TCPOPT_ACCECN1: u32 = 174;
pub const TCPOLEN_ACCECN_EMPTY: u32 = 2;
pub const TCPOLEN_ACCECN_COUNTER: u32 = 3;
pub const TCPOPT_SACK_HDR: u32 = 16844032;
pub const MAX_SACK_BLKS: u32 = 6;
pub const TCP_MAX_SACK: u32 = 4;
pub const TCP_MSS: u32 = 512;
pub const TCP_MINMSS: u32 = 216;
pub const TCP6_MSS: u32 = 1024;
pub const TCP_MAXWIN: u32 = 65535;
pub const TTCP_CLIENT_SND_WND: u32 = 4096;
pub const TCP_MAX_WINSHIFT: u32 = 14;
pub const TCP_MAXHLEN: u32 = 60;
pub const TCP_NODELAY: u32 = 1;
pub const TCP_MAXSEG: u32 = 2;
pub const TCP_NOPUSH: u32 = 4;
pub const TCP_NOOPT: u32 = 8;
pub const TCP_KEEPALIVE: u32 = 16;
pub const TCP_CONNECTIONTIMEOUT: u32 = 32;
pub const PERSIST_TIMEOUT: u32 = 64;
pub const TCP_RXT_CONNDROPTIME: u32 = 128;
pub const TCP_RXT_FINDROP: u32 = 256;
pub const TCP_KEEPINTVL: u32 = 257;
pub const TCP_KEEPCNT: u32 = 258;
pub const TCP_SENDMOREACKS: u32 = 259;
pub const TCP_ENABLE_ECN: u32 = 260;
pub const TCP_FASTOPEN: u32 = 261;
pub const TCP_CONNECTION_INFO: u32 = 262;
pub const TCP_NOTSENT_LOWAT: u32 = 513;
pub const TCPCI_OPT_TIMESTAMPS: u32 = 1;
pub const TCPCI_OPT_SACK: u32 = 2;
pub const TCPCI_OPT_WSCALE: u32 = 4;
pub const TCPCI_OPT_ECN: u32 = 8;
pub const TCPCI_FLAG_LOSSRECOVERY: u32 = 1;
pub const TCPCI_FLAG_REORDERING_DETECTED: u32 = 2;
pub const _PATH_HEQUIV: &[u8; 17] = b"/etc/hosts.equiv\0";
pub const _PATH_HOSTS: &[u8; 11] = b"/etc/hosts\0";
pub const _PATH_NETWORKS: &[u8; 14] = b"/etc/networks\0";
pub const _PATH_PROTOCOLS: &[u8; 15] = b"/etc/protocols\0";
pub const _PATH_SERVICES: &[u8; 14] = b"/etc/services\0";
pub const NETDB_INTERNAL: i32 = -1;
pub const NETDB_SUCCESS: u32 = 0;
pub const HOST_NOT_FOUND: u32 = 1;
pub const TRY_AGAIN: u32 = 2;
pub const NO_RECOVERY: u32 = 3;
pub const NO_DATA: u32 = 4;
pub const NO_ADDRESS: u32 = 4;
pub const EAI_ADDRFAMILY: u32 = 1;
pub const EAI_AGAIN: u32 = 2;
pub const EAI_BADFLAGS: u32 = 3;
pub const EAI_FAIL: u32 = 4;
pub const EAI_FAMILY: u32 = 5;
pub const EAI_MEMORY: u32 = 6;
pub const EAI_NODATA: u32 = 7;
pub const EAI_NONAME: u32 = 8;
pub const EAI_SERVICE: u32 = 9;
pub const EAI_SOCKTYPE: u32 = 10;
pub const EAI_SYSTEM: u32 = 11;
pub const EAI_BADHINTS: u32 = 12;
pub const EAI_PROTOCOL: u32 = 13;
pub const EAI_OVERFLOW: u32 = 14;
pub const EAI_MAX: u32 = 15;
pub const AI_PASSIVE: u32 = 1;
pub const AI_CANONNAME: u32 = 2;
pub const AI_NUMERICHOST: u32 = 4;
pub const AI_NUMERICSERV: u32 = 4096;
pub const AI_ALL: u32 = 256;
pub const AI_V4MAPPED_CFG: u32 = 512;
pub const AI_ADDRCONFIG: u32 = 1024;
pub const AI_V4MAPPED: u32 = 2048;
pub const AI_DEFAULT: u32 = 1536;
pub const AI_UNUSABLE: u32 = 268435456;
pub const NI_MAXHOST: u32 = 1025;
pub const NI_MAXSERV: u32 = 32;
pub const NI_NOFQDN: u32 = 1;
pub const NI_NUMERICHOST: u32 = 2;
pub const NI_NAMEREQD: u32 = 4;
pub const NI_NUMERICSERV: u32 = 8;
pub const NI_NUMERICSCOPE: u32 = 256;
pub const NI_DGRAM: u32 = 16;
pub const NI_WITHSCOPEID: u32 = 32;
pub const SCOPE_DELIMITER: u8 = 37u8;
pub const VEOF: u32 = 0;
pub const VEOL: u32 = 1;
pub const VEOL2: u32 = 2;
pub const VERASE: u32 = 3;
pub const VWERASE: u32 = 4;
pub const VKILL: u32 = 5;
pub const VREPRINT: u32 = 6;
pub const VINTR: u32 = 8;
pub const VQUIT: u32 = 9;
pub const VSUSP: u32 = 10;
pub const VDSUSP: u32 = 11;
pub const VSTART: u32 = 12;
pub const VSTOP: u32 = 13;
pub const VLNEXT: u32 = 14;
pub const VDISCARD: u32 = 15;
pub const VMIN: u32 = 16;
pub const VTIME: u32 = 17;
pub const VSTATUS: u32 = 18;
pub const NCCS: u32 = 20;
pub const IGNBRK: u32 = 1;
pub const BRKINT: u32 = 2;
pub const IGNPAR: u32 = 4;
pub const PARMRK: u32 = 8;
pub const INPCK: u32 = 16;
pub const ISTRIP: u32 = 32;
pub const INLCR: u32 = 64;
pub const IGNCR: u32 = 128;
pub const ICRNL: u32 = 256;
pub const IXON: u32 = 512;
pub const IXOFF: u32 = 1024;
pub const IXANY: u32 = 2048;
pub const IMAXBEL: u32 = 8192;
pub const IUTF8: u32 = 16384;
pub const OPOST: u32 = 1;
pub const ONLCR: u32 = 2;
pub const OXTABS: u32 = 4;
pub const ONOEOT: u32 = 8;
pub const OCRNL: u32 = 16;
pub const ONOCR: u32 = 32;
pub const ONLRET: u32 = 64;
pub const OFILL: u32 = 128;
pub const NLDLY: u32 = 768;
pub const TABDLY: u32 = 3076;
pub const CRDLY: u32 = 12288;
pub const FFDLY: u32 = 16384;
pub const BSDLY: u32 = 32768;
pub const VTDLY: u32 = 65536;
pub const OFDEL: u32 = 131072;
pub const NL0: u32 = 0;
pub const NL1: u32 = 256;
pub const NL2: u32 = 512;
pub const NL3: u32 = 768;
pub const TAB0: u32 = 0;
pub const TAB1: u32 = 1024;
pub const TAB2: u32 = 2048;
pub const TAB3: u32 = 4;
pub const CR0: u32 = 0;
pub const CR1: u32 = 4096;
pub const CR2: u32 = 8192;
pub const CR3: u32 = 12288;
pub const FF0: u32 = 0;
pub const FF1: u32 = 16384;
pub const BS0: u32 = 0;
pub const BS1: u32 = 32768;
pub const VT0: u32 = 0;
pub const VT1: u32 = 65536;
pub const CIGNORE: u32 = 1;
pub const CSIZE: u32 = 768;
pub const CS5: u32 = 0;
pub const CS6: u32 = 256;
pub const CS7: u32 = 512;
pub const CS8: u32 = 768;
pub const CSTOPB: u32 = 1024;
pub const CREAD: u32 = 2048;
pub const PARENB: u32 = 4096;
pub const PARODD: u32 = 8192;
pub const HUPCL: u32 = 16384;
pub const CLOCAL: u32 = 32768;
pub const CCTS_OFLOW: u32 = 65536;
pub const CRTS_IFLOW: u32 = 131072;
pub const CDTR_IFLOW: u32 = 262144;
pub const CDSR_OFLOW: u32 = 524288;
pub const CCAR_OFLOW: u32 = 1048576;
pub const MDMBUF: u32 = 1048576;
pub const ECHOKE: u32 = 1;
pub const ECHOE: u32 = 2;
pub const ECHOK: u32 = 4;
pub const ECHO: u32 = 8;
pub const ECHONL: u32 = 16;
pub const ECHOPRT: u32 = 32;
pub const ECHOCTL: u32 = 64;
pub const ISIG: u32 = 128;
pub const ICANON: u32 = 256;
pub const ALTWERASE: u32 = 512;
pub const IEXTEN: u32 = 1024;
pub const EXTPROC: u32 = 2048;
pub const TOSTOP: u32 = 4194304;
pub const FLUSHO: u32 = 8388608;
pub const NOKERNINFO: u32 = 33554432;
pub const PENDIN: u32 = 536870912;
pub const NOFLSH: u32 = 2147483648;
pub const TCSANOW: u32 = 0;
pub const TCSADRAIN: u32 = 1;
pub const TCSAFLUSH: u32 = 2;
pub const TCSASOFT: u32 = 16;
pub const B0: u32 = 0;
pub const B50: u32 = 50;
pub const B75: u32 = 75;
pub const B110: u32 = 110;
pub const B134: u32 = 134;
pub const B150: u32 = 150;
pub const B200: u32 = 200;
pub const B300: u32 = 300;
pub const B600: u32 = 600;
pub const B1200: u32 = 1200;
pub const B1800: u32 = 1800;
pub const B2400: u32 = 2400;
pub const B4800: u32 = 4800;
pub const B9600: u32 = 9600;
pub const B19200: u32 = 19200;
pub const B38400: u32 = 38400;
pub const B7200: u32 = 7200;
pub const B14400: u32 = 14400;
pub const B28800: u32 = 28800;
pub const B57600: u32 = 57600;
pub const B76800: u32 = 76800;
pub const B115200: u32 = 115200;
pub const B230400: u32 = 230400;
pub const EXTA: u32 = 19200;
pub const EXTB: u32 = 38400;
pub const TCIFLUSH: u32 = 1;
pub const TCOFLUSH: u32 = 2;
pub const TCIOFLUSH: u32 = 3;
pub const TCOOFF: u32 = 1;
pub const TCOON: u32 = 2;
pub const TCIOFF: u32 = 3;
pub const TCION: u32 = 4;
pub const IOCPARM_MASK: u32 = 8191;
pub const IOCPARM_MAX: u32 = 8192;
pub const TIOCM_LE: u32 = 1;
pub const TIOCM_DTR: u32 = 2;
pub const TIOCM_RTS: u32 = 4;
pub const TIOCM_ST: u32 = 8;
pub const TIOCM_SR: u32 = 16;
pub const TIOCM_CTS: u32 = 32;
pub const TIOCM_CAR: u32 = 64;
pub const TIOCM_CD: u32 = 64;
pub const TIOCM_RNG: u32 = 128;
pub const TIOCM_RI: u32 = 128;
pub const TIOCM_DSR: u32 = 256;
pub const TIOCPKT_DATA: u32 = 0;
pub const TIOCPKT_FLUSHREAD: u32 = 1;
pub const TIOCPKT_FLUSHWRITE: u32 = 2;
pub const TIOCPKT_STOP: u32 = 4;
pub const TIOCPKT_START: u32 = 8;
pub const TIOCPKT_NOSTOP: u32 = 16;
pub const TIOCPKT_DOSTOP: u32 = 32;
pub const TIOCPKT_IOCTL: u32 = 64;
pub const TTYDISC: u32 = 0;
pub const TABLDISC: u32 = 3;
pub const SLIPDISC: u32 = 4;
pub const PPPDISC: u32 = 5;
pub const TTYDEF_IFLAG: u32 = 11010;
pub const TTYDEF_OFLAG: u32 = 3;
pub const TTYDEF_LFLAG: u32 = 1483;
pub const TTYDEF_CFLAG: u32 = 19200;
pub const TTYDEF_SPEED: u32 = 9600;
pub const CEOL: u32 = 255;
pub const CERASE: u32 = 127;
pub const CMIN: u32 = 1;
pub const CQUIT: u32 = 28;
pub const CTIME: u32 = 0;
pub const CBRK: u32 = 255;
pub const _PATH_PWD: &[u8; 5] = b"/etc\0";
pub const _PATH_PASSWD: &[u8; 12] = b"/etc/passwd\0";
pub const _PASSWD: &[u8; 7] = b"passwd\0";
pub const _PATH_MASTERPASSWD: &[u8; 19] = b"/etc/master.passwd\0";
pub const _PATH_MASTERPASSWD_LOCK: &[u8; 10] = b"/etc/ptmp\0";
pub const _MASTERPASSWD: &[u8; 14] = b"master.passwd\0";
pub const _PATH_MP_DB: &[u8; 12] = b"/etc/pwd.db\0";
pub const _MP_DB: &[u8; 7] = b"pwd.db\0";
pub const _PATH_SMP_DB: &[u8; 13] = b"/etc/spwd.db\0";
pub const _SMP_DB: &[u8; 8] = b"spwd.db\0";
pub const _PATH_PWD_MKDB: &[u8; 19] = b"/usr/sbin/pwd_mkdb\0";
pub const _PW_KEYBYNAME: u8 = 49u8;
pub const _PW_KEYBYNUM: u8 = 50u8;
pub const _PW_KEYBYUID: u8 = 51u8;
pub const _PASSWORD_EFMT1: u8 = 95u8;
pub const _PASSWORD_LEN: u32 = 128;
pub const _PASSWORD_NOUID: u32 = 1;
pub const _PASSWORD_NOGID: u32 = 2;
pub const _PASSWORD_NOCHG: u32 = 4;
pub const _PASSWORD_NOEXP: u32 = 8;
pub const _PASSWORD_WARNDAYS: u32 = 14;
pub const _PASSWORD_CHGNOW: i32 = -1;
pub const SEM_VALUE_MAX: u32 = 32767;
pub const BSD: u32 = 199506;
pub const BSD4_3: u32 = 1;
pub const BSD4_4: u32 = 1;
pub const NeXTBSD: u32 = 1995064;
pub const NeXTBSD4_0: u32 = 0;
pub const ARG_MAX: u32 = 1048576;
pub const CHILD_MAX: u32 = 266;
pub const GID_MAX: u32 = 2147483647;
pub const LINK_MAX: u32 = 32767;
pub const MAX_CANON: u32 = 1024;
pub const MAX_INPUT: u32 = 1024;
pub const NAME_MAX: u32 = 255;
pub const NGROUPS_MAX: u32 = 16;
pub const UID_MAX: u32 = 2147483647;
pub const OPEN_MAX: u32 = 10240;
pub const PATH_MAX: u32 = 1024;
pub const PIPE_BUF: u32 = 512;
pub const BC_BASE_MAX: u32 = 99;
pub const BC_DIM_MAX: u32 = 2048;
pub const BC_SCALE_MAX: u32 = 99;
pub const BC_STRING_MAX: u32 = 1000;
pub const CHARCLASS_NAME_MAX: u32 = 14;
pub const COLL_WEIGHTS_MAX: u32 = 2;
pub const EQUIV_CLASS_MAX: u32 = 2;
pub const EXPR_NEST_MAX: u32 = 32;
pub const LINE_MAX: u32 = 2048;
pub const RE_DUP_MAX: u32 = 255;
pub const NZERO: u32 = 20;
pub const MAXCOMLEN: u32 = 16;
pub const MAXINTERP: u32 = 64;
pub const MAXLOGNAME: u32 = 255;
pub const MAXUPRC: u32 = 266;
pub const NCARGS: u32 = 1048576;
pub const NGROUPS: u32 = 16;
pub const NOFILE: u32 = 256;
pub const NOGROUP: u32 = 65535;
pub const MAXHOSTNAMELEN: u32 = 256;
pub const MAXDOMNAMELEN: u32 = 256;
pub const NBPG: u32 = 4096;
pub const PGOFSET: u32 = 4095;
pub const PGSHIFT: u32 = 12;
pub const DEV_BSIZE: u32 = 512;
pub const DEV_BSHIFT: u32 = 9;
pub const BLKDEV_IOSIZE: u32 = 2048;
pub const MAXPHYS: u32 = 65536;
pub const CLSIZE: u32 = 1;
pub const CLSIZELOG2: u32 = 0;
pub const MSIZESHIFT: u32 = 8;
pub const MSIZE: u32 = 256;
pub const MCLSHIFT: u32 = 11;
pub const MCLBYTES: u32 = 2048;
pub const MBIGCLSHIFT: u32 = 12;
pub const MBIGCLBYTES: u32 = 4096;
pub const M16KCLSHIFT: u32 = 14;
pub const M16KCLBYTES: u32 = 16384;
pub const MCLOFSET: u32 = 2047;
pub const __DARWIN_CLK_TCK: u32 = 100;
pub const USE_CLANG_LIMITS: u32 = 0;
pub const MB_LEN_MAX: u32 = 6;
pub const CLK_TCK: u32 = 100;
pub const CHAR_BIT: u32 = 8;
pub const SCHAR_MAX: u32 = 127;
pub const SCHAR_MIN: i32 = -128;
pub const UCHAR_MAX: u32 = 255;
pub const CHAR_MAX: u32 = 127;
pub const CHAR_MIN: i32 = -128;
pub const USHRT_MAX: u32 = 65535;
pub const SHRT_MAX: u32 = 32767;
pub const SHRT_MIN: i32 = -32768;
pub const UINT_MAX: u32 = 4294967295;
pub const INT_MAX: u32 = 2147483647;
pub const INT_MIN: i32 = -2147483648;
pub const ULONG_MAX: i32 = -1;
pub const LONG_MAX: u64 = 9223372036854775807;
pub const LONG_MIN: i64 = -9223372036854775808;
pub const ULLONG_MAX: i32 = -1;
pub const LLONG_MAX: u64 = 9223372036854775807;
pub const LLONG_MIN: i64 = -9223372036854775808;
pub const LONG_BIT: u32 = 64;
pub const SSIZE_MAX: u64 = 9223372036854775807;
pub const WORD_BIT: u32 = 32;
pub const SIZE_T_MAX: i32 = -1;
pub const UQUAD_MAX: i32 = -1;
pub const QUAD_MAX: u64 = 9223372036854775807;
pub const QUAD_MIN: i64 = -9223372036854775808;
pub const _POSIX_ARG_MAX: u32 = 4096;
pub const _POSIX_CHILD_MAX: u32 = 25;
pub const _POSIX_LINK_MAX: u32 = 8;
pub const _POSIX_MAX_CANON: u32 = 255;
pub const _POSIX_MAX_INPUT: u32 = 255;
pub const _POSIX_NAME_MAX: u32 = 14;
pub const _POSIX_NGROUPS_MAX: u32 = 8;
pub const _POSIX_OPEN_MAX: u32 = 20;
pub const _POSIX_PATH_MAX: u32 = 256;
pub const _POSIX_PIPE_BUF: u32 = 512;
pub const _POSIX_SSIZE_MAX: u32 = 32767;
pub const _POSIX_STREAM_MAX: u32 = 8;
pub const _POSIX_TZNAME_MAX: u32 = 6;
pub const _POSIX2_BC_BASE_MAX: u32 = 99;
pub const _POSIX2_BC_DIM_MAX: u32 = 2048;
pub const _POSIX2_BC_SCALE_MAX: u32 = 99;
pub const _POSIX2_BC_STRING_MAX: u32 = 1000;
pub const _POSIX2_EQUIV_CLASS_MAX: u32 = 2;
pub const _POSIX2_EXPR_NEST_MAX: u32 = 32;
pub const _POSIX2_LINE_MAX: u32 = 2048;
pub const _POSIX2_RE_DUP_MAX: u32 = 255;
pub const _POSIX_AIO_LISTIO_MAX: u32 = 2;
pub const _POSIX_AIO_MAX: u32 = 1;
pub const _POSIX_DELAYTIMER_MAX: u32 = 32;
pub const _POSIX_MQ_OPEN_MAX: u32 = 8;
pub const _POSIX_MQ_PRIO_MAX: u32 = 32;
pub const _POSIX_RTSIG_MAX: u32 = 8;
pub const _POSIX_SEM_NSEMS_MAX: u32 = 256;
pub const _POSIX_SEM_VALUE_MAX: u32 = 32767;
pub const _POSIX_SIGQUEUE_MAX: u32 = 32;
pub const _POSIX_TIMER_MAX: u32 = 32;
pub const _POSIX_CLOCKRES_MIN: u32 = 20000000;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
pub const _POSIX_THREAD_THREADS_MAX: u32 = 64;
pub const PTHREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const PTHREAD_KEYS_MAX: u32 = 512;
pub const PTHREAD_STACK_MIN: u32 = 16384;
pub const _POSIX_HOST_NAME_MAX: u32 = 255;
pub const _POSIX_LOGIN_NAME_MAX: u32 = 9;
pub const _POSIX_SS_REPL_MAX: u32 = 4;
pub const _POSIX_SYMLINK_MAX: u32 = 255;
pub const _POSIX_SYMLOOP_MAX: u32 = 8;
pub const _POSIX_TRACE_EVENT_NAME_MAX: u32 = 30;
pub const _POSIX_TRACE_NAME_MAX: u32 = 8;
pub const _POSIX_TRACE_SYS_MAX: u32 = 8;
pub const _POSIX_TRACE_USER_EVENT_MAX: u32 = 32;
pub const _POSIX_TTY_NAME_MAX: u32 = 9;
pub const _POSIX2_CHARCLASS_NAME_MAX: u32 = 14;
pub const _POSIX2_COLL_WEIGHTS_MAX: u32 = 2;
pub const _POSIX_RE_DUP_MAX: u32 = 255;
pub const OFF_MIN: i64 = -9223372036854775808;
pub const OFF_MAX: u64 = 9223372036854775807;
pub const PASS_MAX: u32 = 128;
pub const NL_ARGMAX: u32 = 9;
pub const NL_LANGMAX: u32 = 14;
pub const NL_MSGMAX: u32 = 32767;
pub const NL_NMAX: u32 = 1;
pub const NL_SETMAX: u32 = 255;
pub const NL_TEXTMAX: u32 = 2048;
pub const _XOPEN_IOV_MAX: u32 = 16;
pub const IOV_MAX: u32 = 1024;
pub const _XOPEN_NAME_MAX: u32 = 255;
pub const _XOPEN_PATH_MAX: u32 = 1024;
pub const PSWP: u32 = 0;
pub const PVM: u32 = 4;
pub const PINOD: u32 = 8;
pub const PRIBIO: u32 = 16;
pub const PVFS: u32 = 20;
pub const PZERO: u32 = 22;
pub const PSOCK: u32 = 24;
pub const PWAIT: u32 = 32;
pub const PLOCK: u32 = 36;
pub const PPAUSE: u32 = 40;
pub const PUSER: u32 = 50;
pub const MAXPRI: u32 = 127;
pub const PRIMASK: u32 = 255;
pub const PCATCH: u32 = 256;
pub const PTTYBLOCK: u32 = 512;
pub const PDROP: u32 = 1024;
pub const PSPIN: u32 = 2048;
pub const CMASK: u32 = 18;
pub const CLBYTES: u32 = 4096;
pub const CLOFSET: u32 = 4095;
pub const CLOFF: u32 = 4095;
pub const CLSHIFT: u32 = 12;
pub const CBLOCK: u32 = 64;
pub const CBQSIZE: u32 = 8;
pub const CROUND: u32 = 63;
pub const MAXBSIZE: u32 = 1048576;
pub const MAXPHYSIO: u32 = 65536;
pub const MAXFRAG: u32 = 8;
pub const MAXPHYSIO_WIRED: u32 = 16777216;
pub const MAXPATHLEN: u32 = 1024;
pub const MAXSYMLINKS: u32 = 32;
pub const FSHIFT: u32 = 11;
pub const FSCALE: u32 = 2048;
pub const _PTHREAD_MUTEX_SIG_init: u32 = 850045863;
pub const _PTHREAD_ERRORCHECK_MUTEX_SIG_init: u32 = 850045857;
pub const _PTHREAD_RECURSIVE_MUTEX_SIG_init: u32 = 850045858;
pub const _PTHREAD_FIRSTFIT_MUTEX_SIG_init: u32 = 850045859;
pub const _PTHREAD_COND_SIG_init: u32 = 1018212795;
pub const _PTHREAD_ONCE_SIG_init: u32 = 816954554;
pub const _PTHREAD_RWLOCK_SIG_init: u32 = 766030772;
pub const SCHED_OTHER: u32 = 1;
pub const SCHED_FIFO: u32 = 4;
pub const SCHED_RR: u32 = 2;
pub const __SCHED_PARAM_SIZE__: u32 = 4;
pub const TIME_UTC: u32 = 1;
pub const QOS_MIN_RELATIVE_PRIORITY: i32 = -15;
pub const PTHREAD_CREATE_JOINABLE: u32 = 1;
pub const PTHREAD_CREATE_DETACHED: u32 = 2;
pub const PTHREAD_INHERIT_SCHED: u32 = 1;
pub const PTHREAD_EXPLICIT_SCHED: u32 = 2;
pub const PTHREAD_CANCEL_ENABLE: u32 = 1;
pub const PTHREAD_CANCEL_DISABLE: u32 = 0;
pub const PTHREAD_CANCEL_DEFERRED: u32 = 2;
pub const PTHREAD_CANCEL_ASYNCHRONOUS: u32 = 0;
pub const PTHREAD_SCOPE_SYSTEM: u32 = 1;
pub const PTHREAD_SCOPE_PROCESS: u32 = 2;
pub const PTHREAD_PROCESS_SHARED: u32 = 1;
pub const PTHREAD_PROCESS_PRIVATE: u32 = 2;
pub const PTHREAD_PRIO_NONE: u32 = 0;
pub const PTHREAD_PRIO_INHERIT: u32 = 1;
pub const PTHREAD_PRIO_PROTECT: u32 = 2;
pub const PTHREAD_MUTEX_NORMAL: u32 = 0;
pub const PTHREAD_MUTEX_ERRORCHECK: u32 = 1;
pub const PTHREAD_MUTEX_RECURSIVE: u32 = 2;
pub const PTHREAD_MUTEX_DEFAULT: u32 = 0;
pub const PTHREAD_MUTEX_POLICY_FAIRSHARE_NP: u32 = 1;
pub const PTHREAD_MUTEX_POLICY_FIRSTFIT_NP: u32 = 3;
pub const TRUE: u32 = 1;
pub const FALSE: u32 = 0;
pub const KERN_SUCCESS: u32 = 0;
pub const KERN_INVALID_ADDRESS: u32 = 1;
pub const KERN_PROTECTION_FAILURE: u32 = 2;
pub const KERN_NO_SPACE: u32 = 3;
pub const KERN_INVALID_ARGUMENT: u32 = 4;
pub const KERN_FAILURE: u32 = 5;
pub const KERN_RESOURCE_SHORTAGE: u32 = 6;
pub const KERN_NOT_RECEIVER: u32 = 7;
pub const KERN_NO_ACCESS: u32 = 8;
pub const KERN_MEMORY_FAILURE: u32 = 9;
pub const KERN_MEMORY_ERROR: u32 = 10;
pub const KERN_ALREADY_IN_SET: u32 = 11;
pub const KERN_NOT_IN_SET: u32 = 12;
pub const KERN_NAME_EXISTS: u32 = 13;
pub const KERN_ABORTED: u32 = 14;
pub const KERN_INVALID_NAME: u32 = 15;
pub const KERN_INVALID_TASK: u32 = 16;
pub const KERN_INVALID_RIGHT: u32 = 17;
pub const KERN_INVALID_VALUE: u32 = 18;
pub const KERN_UREFS_OVERFLOW: u32 = 19;
pub const KERN_INVALID_CAPABILITY: u32 = 20;
pub const KERN_RIGHT_EXISTS: u32 = 21;
pub const KERN_INVALID_HOST: u32 = 22;
pub const KERN_MEMORY_PRESENT: u32 = 23;
pub const KERN_MEMORY_DATA_MOVED: u32 = 24;
pub const KERN_MEMORY_RESTART_COPY: u32 = 25;
pub const KERN_INVALID_PROCESSOR_SET: u32 = 26;
pub const KERN_POLICY_LIMIT: u32 = 27;
pub const KERN_INVALID_POLICY: u32 = 28;
pub const KERN_INVALID_OBJECT: u32 = 29;
pub const KERN_ALREADY_WAITING: u32 = 30;
pub const KERN_DEFAULT_SET: u32 = 31;
pub const KERN_EXCEPTION_PROTECTED: u32 = 32;
pub const KERN_INVALID_LEDGER: u32 = 33;
pub const KERN_INVALID_MEMORY_CONTROL: u32 = 34;
pub const KERN_INVALID_SECURITY: u32 = 35;
pub const KERN_NOT_DEPRESSED: u32 = 36;
pub const KERN_TERMINATED: u32 = 37;
pub const KERN_LOCK_SET_DESTROYED: u32 = 38;
pub const KERN_LOCK_UNSTABLE: u32 = 39;
pub const KERN_LOCK_OWNED: u32 = 40;
pub const KERN_LOCK_OWNED_SELF: u32 = 41;
pub const KERN_SEMAPHORE_DESTROYED: u32 = 42;
pub const KERN_RPC_SERVER_TERMINATED: u32 = 43;
pub const KERN_RPC_TERMINATE_ORPHAN: u32 = 44;
pub const KERN_RPC_CONTINUE_ORPHAN: u32 = 45;
pub const KERN_NOT_SUPPORTED: u32 = 46;
pub const KERN_NODE_DOWN: u32 = 47;
pub const KERN_NOT_WAITING: u32 = 48;
pub const KERN_OPERATION_TIMED_OUT: u32 = 49;
pub const KERN_CODESIGN_ERROR: u32 = 50;
pub const KERN_POLICY_STATIC: u32 = 51;
pub const KERN_INSUFFICIENT_BUFFER_SIZE: u32 = 52;
pub const KERN_DENIED: u32 = 53;
pub const KERN_MISSING_KC: u32 = 54;
pub const KERN_INVALID_KC: u32 = 55;
pub const KERN_NOT_FOUND: u32 = 56;
pub const KERN_RETURN_MAX: u32 = 256;
pub const MACH_PORT_NULL: u32 = 0;
pub const MACH_PORT_TYPE_DNREQUEST: u32 = 2147483648;
pub const MACH_PORT_TYPE_SPREQUEST: u32 = 1073741824;
pub const MACH_PORT_TYPE_SPREQUEST_DELAYED: u32 = 536870912;
pub const MACH_PORT_SRIGHTS_NONE: u32 = 0;
pub const MACH_PORT_SRIGHTS_PRESENT: u32 = 1;
pub const MACH_PORT_QLIMIT_ZERO: u32 = 0;
pub const MACH_PORT_QLIMIT_BASIC: u32 = 5;
pub const MACH_PORT_QLIMIT_SMALL: u32 = 16;
pub const MACH_PORT_QLIMIT_LARGE: u32 = 1024;
pub const MACH_PORT_QLIMIT_KERNEL: u32 = 65534;
pub const MACH_PORT_QLIMIT_MIN: u32 = 0;
pub const MACH_PORT_QLIMIT_DEFAULT: u32 = 5;
pub const MACH_PORT_QLIMIT_MAX: u32 = 1024;
pub const MACH_PORT_STATUS_FLAG_TEMPOWNER: u32 = 1;
pub const MACH_PORT_STATUS_FLAG_GUARDED: u32 = 2;
pub const MACH_PORT_STATUS_FLAG_STRICT_GUARD: u32 = 4;
pub const MACH_PORT_STATUS_FLAG_IMP_DONATION: u32 = 8;
pub const MACH_PORT_STATUS_FLAG_REVIVE: u32 = 16;
pub const MACH_PORT_STATUS_FLAG_TASKPTR: u32 = 32;
pub const MACH_PORT_STATUS_FLAG_GUARD_IMMOVABLE_RECEIVE: u32 = 64;
pub const MACH_PORT_STATUS_FLAG_NO_GRANT: u32 = 128;
pub const MACH_PORT_LIMITS_INFO: u32 = 1;
pub const MACH_PORT_RECEIVE_STATUS: u32 = 2;
pub const MACH_PORT_DNREQUESTS_SIZE: u32 = 3;
pub const MACH_PORT_TEMPOWNER: u32 = 4;
pub const MACH_PORT_IMPORTANCE_RECEIVER: u32 = 5;
pub const MACH_PORT_DENAP_RECEIVER: u32 = 6;
pub const MACH_PORT_INFO_EXT: u32 = 7;
pub const MACH_PORT_GUARD_INFO: u32 = 8;
pub const MACH_PORT_SERVICE_THROTTLED: u32 = 9;
pub const MACH_PORT_DNREQUESTS_SIZE_COUNT: u32 = 1;
pub const MACH_PORT_SERVICE_THROTTLED_COUNT: u32 = 1;
pub const MACH_SERVICE_PORT_INFO_STRING_NAME_MAX_BUF_LEN: u32 = 255;
pub const MPO_CONTEXT_AS_GUARD: u32 = 1;
pub const MPO_QLIMIT: u32 = 2;
pub const MPO_TEMPOWNER: u32 = 4;
pub const MPO_IMPORTANCE_RECEIVER: u32 = 8;
pub const MPO_INSERT_SEND_RIGHT: u32 = 16;
pub const MPO_STRICT: u32 = 32;
pub const MPO_DENAP_RECEIVER: u32 = 64;
pub const MPO_IMMOVABLE_RECEIVE: u32 = 128;
pub const MPO_FILTER_MSG: u32 = 256;
pub const MPO_TG_BLOCK_TRACKING: u32 = 512;
pub const MPO_SERVICE_PORT: u32 = 1024;
pub const MPO_CONNECTION_PORT: u32 = 2048;
pub const MPO_REPLY_PORT: u32 = 4096;
pub const MPO_ENFORCE_REPLY_PORT_SEMANTICS: u32 = 8192;
pub const MPO_PROVISIONAL_REPLY_PORT: u32 = 16384;
pub const MPO_EXCEPTION_PORT: u32 = 32768;
pub const GUARD_TYPE_MACH_PORT: u32 = 1;
pub const MAX_FATAL_kGUARD_EXC_CODE: u32 = 128;
pub const MPG_FLAGS_NONE: u32 = 0;
pub const MAX_OPTIONAL_kGUARD_EXC_CODE: u32 = 524288;
pub const MPG_FLAGS_STRICT_REPLY_INVALID_REPLY_DISP: u64 = 72057594037927936;
pub const MPG_FLAGS_STRICT_REPLY_INVALID_REPLY_PORT: u64 = 144115188075855872;
pub const MPG_FLAGS_STRICT_REPLY_INVALID_VOUCHER: u64 = 288230376151711744;
pub const MPG_FLAGS_STRICT_REPLY_NO_BANK_ATTR: u64 = 576460752303423488;
pub const MPG_FLAGS_STRICT_REPLY_MISMATCHED_PERSONA: u64 = 1152921504606846976;
pub const MPG_FLAGS_STRICT_REPLY_MASK: i64 = -72057594037927936;
pub const MPG_FLAGS_MOD_REFS_PINNED_DEALLOC: u64 = 72057594037927936;
pub const MPG_FLAGS_MOD_REFS_PINNED_DESTROY: u64 = 144115188075855872;
pub const MPG_FLAGS_MOD_REFS_PINNED_COPYIN: u64 = 288230376151711744;
pub const MPG_FLAGS_IMMOVABLE_PINNED: u64 = 72057594037927936;
pub const MPG_STRICT: u32 = 1;
pub const MPG_IMMOVABLE_RECEIVE: u32 = 2;
pub const PPNUM_MAX: u32 = 4294967295;
pub const MACH_MSGH_BITS_ZERO: u32 = 0;
pub const MACH_MSGH_BITS_REMOTE_MASK: u32 = 31;
pub const MACH_MSGH_BITS_LOCAL_MASK: u32 = 7936;
pub const MACH_MSGH_BITS_VOUCHER_MASK: u32 = 2031616;
pub const MACH_MSGH_BITS_PORTS_MASK: u32 = 2039583;
pub const MACH_MSGH_BITS_COMPLEX: u32 = 2147483648;
pub const MACH_MSGH_BITS_USER: u32 = 2149523231;
pub const MACH_MSGH_BITS_RAISEIMP: u32 = 536870912;
pub const MACH_MSGH_BITS_DENAP: u32 = 536870912;
pub const MACH_MSGH_BITS_IMPHOLDASRT: u32 = 268435456;
pub const MACH_MSGH_BITS_DENAPHOLDASRT: u32 = 268435456;
pub const MACH_MSGH_BITS_CIRCULAR: u32 = 268435456;
pub const MACH_MSGH_BITS_USED: u32 = 2954829599;
pub const MACH_MSG_TYPE_MOVE_RECEIVE: u32 = 16;
pub const MACH_MSG_TYPE_MOVE_SEND: u32 = 17;
pub const MACH_MSG_TYPE_MOVE_SEND_ONCE: u32 = 18;
pub const MACH_MSG_TYPE_COPY_SEND: u32 = 19;
pub const MACH_MSG_TYPE_MAKE_SEND: u32 = 20;
pub const MACH_MSG_TYPE_MAKE_SEND_ONCE: u32 = 21;
pub const MACH_MSG_TYPE_COPY_RECEIVE: u32 = 22;
pub const MACH_MSG_TYPE_DISPOSE_RECEIVE: u32 = 24;
pub const MACH_MSG_TYPE_DISPOSE_SEND: u32 = 25;
pub const MACH_MSG_TYPE_DISPOSE_SEND_ONCE: u32 = 26;
pub const MACH_MSG_PHYSICAL_COPY: u32 = 0;
pub const MACH_MSG_VIRTUAL_COPY: u32 = 1;
pub const MACH_MSG_ALLOCATE: u32 = 2;
pub const MACH_MSG_OVERWRITE: u32 = 3;
pub const MACH_MSG_GUARD_FLAGS_NONE: u32 = 0;
pub const MACH_MSG_GUARD_FLAGS_IMMOVABLE_RECEIVE: u32 = 1;
pub const MACH_MSG_GUARD_FLAGS_UNGUARDED_ON_SEND: u32 = 2;
pub const MACH_MSG_GUARD_FLAGS_MASK: u32 = 3;
pub const MACH_MSG_PORT_DESCRIPTOR: u32 = 0;
pub const MACH_MSG_OOL_DESCRIPTOR: u32 = 1;
pub const MACH_MSG_OOL_PORTS_DESCRIPTOR: u32 = 2;
pub const MACH_MSG_OOL_VOLATILE_DESCRIPTOR: u32 = 3;
pub const MACH_MSG_GUARDED_PORT_DESCRIPTOR: u32 = 4;
pub const MACH_MSG_DESCRIPTOR_MAX: u32 = 4;
pub const MACH_MSG_TRAILER_FORMAT_0: u32 = 0;
pub const MACH_MSGH_KIND_NORMAL: u32 = 0;
pub const MACH_MSGH_KIND_NOTIFICATION: u32 = 1;
pub const MACH_MSG_TYPE_PORT_NONE: u32 = 0;
pub const MACH_MSG_TYPE_PORT_NAME: u32 = 15;
pub const MACH_MSG_TYPE_PORT_RECEIVE: u32 = 16;
pub const MACH_MSG_TYPE_PORT_SEND: u32 = 17;
pub const MACH_MSG_TYPE_PORT_SEND_ONCE: u32 = 18;
pub const MACH_MSG_TYPE_LAST: u32 = 22;
pub const MACH_MSG_OPTION_NONE: u32 = 0;
pub const MACH_SEND_MSG: u32 = 1;
pub const MACH_RCV_MSG: u32 = 2;
pub const MACH_RCV_LARGE: u32 = 4;
pub const MACH_RCV_LARGE_IDENTITY: u32 = 8;
pub const MACH_SEND_TIMEOUT: u32 = 16;
pub const MACH_SEND_OVERRIDE: u32 = 32;
pub const MACH_SEND_INTERRUPT: u32 = 64;
pub const MACH_SEND_NOTIFY: u32 = 128;
pub const MACH_SEND_ALWAYS: u32 = 65536;
pub const MACH_SEND_FILTER_NONFATAL: u32 = 65536;
pub const MACH_SEND_TRAILER: u32 = 131072;
pub const MACH_SEND_NOIMPORTANCE: u32 = 262144;
pub const MACH_SEND_NODENAP: u32 = 262144;
pub const MACH_SEND_IMPORTANCE: u32 = 524288;
pub const MACH_SEND_SYNC_OVERRIDE: u32 = 1048576;
pub const MACH_SEND_PROPAGATE_QOS: u32 = 2097152;
pub const MACH_SEND_SYNC_USE_THRPRI: u32 = 2097152;
pub const MACH_SEND_KERNEL: u32 = 4194304;
pub const MACH_SEND_SYNC_BOOTSTRAP_CHECKIN: u32 = 8388608;
pub const MACH_RCV_TIMEOUT: u32 = 256;
pub const MACH_RCV_NOTIFY: u32 = 0;
pub const MACH_RCV_INTERRUPT: u32 = 1024;
pub const MACH_RCV_VOUCHER: u32 = 2048;
pub const MACH_RCV_OVERWRITE: u32 = 0;
pub const MACH_RCV_GUARDED_DESC: u32 = 4096;
pub const MACH_RCV_SYNC_WAIT: u32 = 16384;
pub const MACH_RCV_SYNC_PEEK: u32 = 32768;
pub const MACH_MSG_STRICT_REPLY: u32 = 512;
pub const MACH_RCV_TRAILER_NULL: u32 = 0;
pub const MACH_RCV_TRAILER_SEQNO: u32 = 1;
pub const MACH_RCV_TRAILER_SENDER: u32 = 2;
pub const MACH_RCV_TRAILER_AUDIT: u32 = 3;
pub const MACH_RCV_TRAILER_CTX: u32 = 4;
pub const MACH_RCV_TRAILER_AV: u32 = 7;
pub const MACH_RCV_TRAILER_LABELS: u32 = 8;
pub const MACH_RCV_TRAILER_MASK: u32 = 251658240;
pub const MACH_MSG_SUCCESS: u32 = 0;
pub const MACH_MSG_MASK: u32 = 15872;
pub const MACH_MSG_IPC_SPACE: u32 = 8192;
pub const MACH_MSG_VM_SPACE: u32 = 4096;
pub const MACH_MSG_IPC_KERNEL: u32 = 2048;
pub const MACH_MSG_VM_KERNEL: u32 = 1024;
pub const MACH_SEND_IN_PROGRESS: u32 = 268435457;
pub const MACH_SEND_INVALID_DATA: u32 = 268435458;
pub const MACH_SEND_INVALID_DEST: u32 = 268435459;
pub const MACH_SEND_TIMED_OUT: u32 = 268435460;
pub const MACH_SEND_INVALID_VOUCHER: u32 = 268435461;
pub const MACH_SEND_INTERRUPTED: u32 = 268435463;
pub const MACH_SEND_MSG_TOO_SMALL: u32 = 268435464;
pub const MACH_SEND_INVALID_REPLY: u32 = 268435465;
pub const MACH_SEND_INVALID_RIGHT: u32 = 268435466;
pub const MACH_SEND_INVALID_NOTIFY: u32 = 268435467;
pub const MACH_SEND_INVALID_MEMORY: u32 = 268435468;
pub const MACH_SEND_NO_BUFFER: u32 = 268435469;
pub const MACH_SEND_TOO_LARGE: u32 = 268435470;
pub const MACH_SEND_INVALID_TYPE: u32 = 268435471;
pub const MACH_SEND_INVALID_HEADER: u32 = 268435472;
pub const MACH_SEND_INVALID_TRAILER: u32 = 268435473;
pub const MACH_SEND_INVALID_CONTEXT: u32 = 268435474;
pub const MACH_SEND_INVALID_OPTIONS: u32 = 268435475;
pub const MACH_SEND_INVALID_RT_OOL_SIZE: u32 = 268435477;
pub const MACH_SEND_NO_GRANT_DEST: u32 = 268435478;
pub const MACH_SEND_MSG_FILTERED: u32 = 268435479;
pub const MACH_SEND_AUX_TOO_SMALL: u32 = 268435480;
pub const MACH_SEND_AUX_TOO_LARGE: u32 = 268435481;
pub const MACH_RCV_IN_PROGRESS: u32 = 268451841;
pub const MACH_RCV_INVALID_NAME: u32 = 268451842;
pub const MACH_RCV_TIMED_OUT: u32 = 268451843;
pub const MACH_RCV_TOO_LARGE: u32 = 268451844;
pub const MACH_RCV_INTERRUPTED: u32 = 268451845;
pub const MACH_RCV_PORT_CHANGED: u32 = 268451846;
pub const MACH_RCV_INVALID_NOTIFY: u32 = 268451847;
pub const MACH_RCV_INVALID_DATA: u32 = 268451848;
pub const MACH_RCV_PORT_DIED: u32 = 268451849;
pub const MACH_RCV_IN_SET: u32 = 268451850;
pub const MACH_RCV_HEADER_ERROR: u32 = 268451851;
pub const MACH_RCV_BODY_ERROR: u32 = 268451852;
pub const MACH_RCV_INVALID_TYPE: u32 = 268451853;
pub const MACH_RCV_SCATTER_SMALL: u32 = 268451854;
pub const MACH_RCV_INVALID_TRAILER: u32 = 268451855;
pub const MACH_RCV_IN_PROGRESS_TIMED: u32 = 268451857;
pub const MACH_RCV_INVALID_REPLY: u32 = 268451858;
pub const MACH_RCV_INVALID_ARGUMENTS: u32 = 268451859;
pub const VM_PAGE_QUERY_PAGE_PRESENT: u32 = 1;
pub const VM_PAGE_QUERY_PAGE_FICTITIOUS: u32 = 2;
pub const VM_PAGE_QUERY_PAGE_REF: u32 = 4;
pub const VM_PAGE_QUERY_PAGE_DIRTY: u32 = 8;
pub const VM_PAGE_QUERY_PAGE_PAGED_OUT: u32 = 16;
pub const VM_PAGE_QUERY_PAGE_COPIED: u32 = 32;
pub const VM_PAGE_QUERY_PAGE_SPECULATIVE: u32 = 64;
pub const VM_PAGE_QUERY_PAGE_EXTERNAL: u32 = 128;
pub const VM_PAGE_QUERY_PAGE_CS_VALIDATED: u32 = 256;
pub const VM_PAGE_QUERY_PAGE_CS_TAINTED: u32 = 512;
pub const VM_PAGE_QUERY_PAGE_CS_NX: u32 = 1024;
pub const VM_PAGE_QUERY_PAGE_REUSABLE: u32 = 2048;
pub const VM_FLAGS_FIXED: u32 = 0;
pub const VM_FLAGS_ANYWHERE: u32 = 1;
pub const VM_FLAGS_PURGABLE: u32 = 2;
pub const VM_FLAGS_4GB_CHUNK: u32 = 4;
pub const VM_FLAGS_RANDOM_ADDR: u32 = 8;
pub const VM_FLAGS_NO_CACHE: u32 = 16;
pub const VM_FLAGS_RESILIENT_CODESIGN: u32 = 32;
pub const VM_FLAGS_RESILIENT_MEDIA: u32 = 64;
pub const VM_FLAGS_PERMANENT: u32 = 128;
pub const VM_FLAGS_TPRO: u32 = 4096;
pub const VM_FLAGS_OVERWRITE: u32 = 16384;
pub const VM_FLAGS_SUPERPAGE_MASK: u32 = 458752;
pub const VM_FLAGS_RETURN_DATA_ADDR: u32 = 1048576;
pub const VM_FLAGS_RETURN_4K_DATA_ADDR: u32 = 8388608;
pub const VM_FLAGS_ALIAS_MASK: u32 = 4278190080;
pub const VM_FLAGS_HW: u32 = 4096;
pub const VM_FLAGS_USER_ALLOCATE: u32 = 4278669471;
pub const VM_FLAGS_USER_MAP: u32 = 4288106655;
pub const VM_FLAGS_USER_REMAP: u32 = 1065065;
pub const VM_FLAGS_SUPERPAGE_SHIFT: u32 = 16;
pub const SUPERPAGE_NONE: u32 = 0;
pub const SUPERPAGE_SIZE_ANY: u32 = 1;
pub const VM_FLAGS_SUPERPAGE_NONE: u32 = 0;
pub const VM_FLAGS_SUPERPAGE_SIZE_ANY: u32 = 65536;
pub const SUPERPAGE_SIZE_2MB: u32 = 2;
pub const VM_FLAGS_SUPERPAGE_SIZE_2MB: u32 = 131072;
pub const GUARD_TYPE_VIRT_MEMORY: u32 = 5;
pub const __VM_LEDGER_ACCOUNTING_POSTMARK: u32 = 2019032600;
pub const VM_LEDGER_TAG_NONE: u32 = 0;
pub const VM_LEDGER_TAG_DEFAULT: u32 = 1;
pub const VM_LEDGER_TAG_NETWORK: u32 = 2;
pub const VM_LEDGER_TAG_MEDIA: u32 = 3;
pub const VM_LEDGER_TAG_GRAPHICS: u32 = 4;
pub const VM_LEDGER_TAG_NEURAL: u32 = 5;
pub const VM_LEDGER_TAG_MAX: u32 = 5;
pub const VM_LEDGER_FLAG_NO_FOOTPRINT: u32 = 1;
pub const VM_LEDGER_FLAG_NO_FOOTPRINT_FOR_DEBUG: u32 = 2;
pub const VM_LEDGER_FLAG_FROM_KERNEL: u32 = 4;
pub const VM_LEDGER_FLAGS_USER: u32 = 3;
pub const VM_LEDGER_FLAGS_ALL: u32 = 7;
pub const VM_MEMORY_MALLOC: u32 = 1;
pub const VM_MEMORY_MALLOC_SMALL: u32 = 2;
pub const VM_MEMORY_MALLOC_LARGE: u32 = 3;
pub const VM_MEMORY_MALLOC_HUGE: u32 = 4;
pub const VM_MEMORY_SBRK: u32 = 5;
pub const VM_MEMORY_REALLOC: u32 = 6;
pub const VM_MEMORY_MALLOC_TINY: u32 = 7;
pub const VM_MEMORY_MALLOC_LARGE_REUSABLE: u32 = 8;
pub const VM_MEMORY_MALLOC_LARGE_REUSED: u32 = 9;
pub const VM_MEMORY_ANALYSIS_TOOL: u32 = 10;
pub const VM_MEMORY_MALLOC_NANO: u32 = 11;
pub const VM_MEMORY_MALLOC_MEDIUM: u32 = 12;
pub const VM_MEMORY_MALLOC_PROB_GUARD: u32 = 13;
pub const VM_MEMORY_MACH_MSG: u32 = 20;
pub const VM_MEMORY_IOKIT: u32 = 21;
pub const VM_MEMORY_STACK: u32 = 30;
pub const VM_MEMORY_GUARD: u32 = 31;
pub const VM_MEMORY_SHARED_PMAP: u32 = 32;
pub const VM_MEMORY_DYLIB: u32 = 33;
pub const VM_MEMORY_OBJC_DISPATCHERS: u32 = 34;
pub const VM_MEMORY_UNSHARED_PMAP: u32 = 35;
pub const VM_MEMORY_APPKIT: u32 = 40;
pub const VM_MEMORY_FOUNDATION: u32 = 41;
pub const VM_MEMORY_COREGRAPHICS: u32 = 42;
pub const VM_MEMORY_CORESERVICES: u32 = 43;
pub const VM_MEMORY_CARBON: u32 = 43;
pub const VM_MEMORY_JAVA: u32 = 44;
pub const VM_MEMORY_COREDATA: u32 = 45;
pub const VM_MEMORY_COREDATA_OBJECTIDS: u32 = 46;
pub const VM_MEMORY_ATS: u32 = 50;
pub const VM_MEMORY_LAYERKIT: u32 = 51;
pub const VM_MEMORY_CGIMAGE: u32 = 52;
pub const VM_MEMORY_TCMALLOC: u32 = 53;
pub const VM_MEMORY_COREGRAPHICS_DATA: u32 = 54;
pub const VM_MEMORY_COREGRAPHICS_SHARED: u32 = 55;
pub const VM_MEMORY_COREGRAPHICS_FRAMEBUFFERS: u32 = 56;
pub const VM_MEMORY_COREGRAPHICS_BACKINGSTORES: u32 = 57;
pub const VM_MEMORY_COREGRAPHICS_XALLOC: u32 = 58;
pub const VM_MEMORY_COREGRAPHICS_MISC: u32 = 42;
pub const VM_MEMORY_DYLD: u32 = 60;
pub const VM_MEMORY_DYLD_MALLOC: u32 = 61;
pub const VM_MEMORY_SQLITE: u32 = 62;
pub const VM_MEMORY_JAVASCRIPT_CORE: u32 = 63;
pub const VM_MEMORY_WEBASSEMBLY: u32 = 63;
pub const VM_MEMORY_JAVASCRIPT_JIT_EXECUTABLE_ALLOCATOR: u32 = 64;
pub const VM_MEMORY_JAVASCRIPT_JIT_REGISTER_FILE: u32 = 65;
pub const VM_MEMORY_GLSL: u32 = 66;
pub const VM_MEMORY_OPENCL: u32 = 67;
pub const VM_MEMORY_COREIMAGE: u32 = 68;
pub const VM_MEMORY_WEBCORE_PURGEABLE_BUFFERS: u32 = 69;
pub const VM_MEMORY_IMAGEIO: u32 = 70;
pub const VM_MEMORY_COREPROFILE: u32 = 71;
pub const VM_MEMORY_ASSETSD: u32 = 72;
pub const VM_MEMORY_OS_ALLOC_ONCE: u32 = 73;
pub const VM_MEMORY_LIBDISPATCH: u32 = 74;
pub const VM_MEMORY_ACCELERATE: u32 = 75;
pub const VM_MEMORY_COREUI: u32 = 76;
pub const VM_MEMORY_COREUIFILE: u32 = 77;
pub const VM_MEMORY_GENEALOGY: u32 = 78;
pub const VM_MEMORY_RAWCAMERA: u32 = 79;
pub const VM_MEMORY_CORPSEINFO: u32 = 80;
pub const VM_MEMORY_ASL: u32 = 81;
pub const VM_MEMORY_SWIFT_RUNTIME: u32 = 82;
pub const VM_MEMORY_SWIFT_METADATA: u32 = 83;
pub const VM_MEMORY_DHMM: u32 = 84;
pub const VM_MEMORY_SCENEKIT: u32 = 86;
pub const VM_MEMORY_SKYWALK: u32 = 87;
pub const VM_MEMORY_IOSURFACE: u32 = 88;
pub const VM_MEMORY_LIBNETWORK: u32 = 89;
pub const VM_MEMORY_AUDIO: u32 = 90;
pub const VM_MEMORY_VIDEOBITSTREAM: u32 = 91;
pub const VM_MEMORY_CM_XPC: u32 = 92;
pub const VM_MEMORY_CM_RPC: u32 = 93;
pub const VM_MEMORY_CM_MEMORYPOOL: u32 = 94;
pub const VM_MEMORY_CM_READCACHE: u32 = 95;
pub const VM_MEMORY_CM_CRABS: u32 = 96;
pub const VM_MEMORY_QUICKLOOK_THUMBNAILS: u32 = 97;
pub const VM_MEMORY_ACCOUNTS: u32 = 98;
pub const VM_MEMORY_SANITIZER: u32 = 99;
pub const VM_MEMORY_IOACCELERATOR: u32 = 100;
pub const VM_MEMORY_CM_REGWARP: u32 = 101;
pub const VM_MEMORY_EAR_DECODER: u32 = 102;
pub const VM_MEMORY_COREUI_CACHED_IMAGE_DATA: u32 = 103;
pub const VM_MEMORY_COLORSYNC: u32 = 104;
pub const VM_MEMORY_BTINFO: u32 = 105;
pub const VM_MEMORY_CM_HLS: u32 = 106;
pub const VM_MEMORY_ROSETTA: u32 = 230;
pub const VM_MEMORY_ROSETTA_THREAD_CONTEXT: u32 = 231;
pub const VM_MEMORY_ROSETTA_INDIRECT_BRANCH_MAP: u32 = 232;
pub const VM_MEMORY_ROSETTA_RETURN_STACK: u32 = 233;
pub const VM_MEMORY_ROSETTA_EXECUTABLE_HEAP: u32 = 234;
pub const VM_MEMORY_ROSETTA_USER_LDT: u32 = 235;
pub const VM_MEMORY_ROSETTA_ARENA: u32 = 236;
pub const VM_MEMORY_ROSETTA_10: u32 = 239;
pub const VM_MEMORY_APPLICATION_SPECIFIC_1: u32 = 240;
pub const VM_MEMORY_APPLICATION_SPECIFIC_16: u32 = 255;
pub const VM_MEMORY_COUNT: u32 = 256;
pub const CPU_STATE_MAX: u32 = 4;
pub const CPU_STATE_USER: u32 = 0;
pub const CPU_STATE_SYSTEM: u32 = 1;
pub const CPU_STATE_IDLE: u32 = 2;
pub const CPU_STATE_NICE: u32 = 3;
pub const CPU_ARCH_MASK: u32 = 4278190080;
pub const CPU_ARCH_ABI64: u32 = 16777216;
pub const CPU_ARCH_ABI64_32: u32 = 33554432;
pub const CPU_SUBTYPE_MASK: u32 = 4278190080;
pub const CPU_SUBTYPE_LIB64: u32 = 2147483648;
pub const CPU_SUBTYPE_PTRAUTH_ABI: u32 = 2147483648;
pub const CPU_SUBTYPE_INTEL_FAMILY_MAX: u32 = 15;
pub const CPU_SUBTYPE_INTEL_MODEL_ALL: u32 = 0;
pub const CPU_SUBTYPE_ARM64_PTR_AUTH_MASK: u32 = 251658240;
pub const CPUFAMILY_UNKNOWN: u32 = 0;
pub const CPUFAMILY_POWERPC_G3: u32 = 3471054153;
pub const CPUFAMILY_POWERPC_G4: u32 = 2009171118;
pub const CPUFAMILY_POWERPC_G5: u32 = 3983988906;
pub const CPUFAMILY_INTEL_6_13: u32 = 2855483691;
pub const CPUFAMILY_INTEL_PENRYN: u32 = 2028621756;
pub const CPUFAMILY_INTEL_NEHALEM: u32 = 1801080018;
pub const CPUFAMILY_INTEL_WESTMERE: u32 = 1463508716;
pub const CPUFAMILY_INTEL_SANDYBRIDGE: u32 = 1418770316;
pub const CPUFAMILY_INTEL_IVYBRIDGE: u32 = 526772277;
pub const CPUFAMILY_INTEL_HASWELL: u32 = 280134364;
pub const CPUFAMILY_INTEL_BROADWELL: u32 = 1479463068;
pub const CPUFAMILY_INTEL_SKYLAKE: u32 = 939270559;
pub const CPUFAMILY_INTEL_KABYLAKE: u32 = 260141638;
pub const CPUFAMILY_INTEL_ICELAKE: u32 = 943936839;
pub const CPUFAMILY_INTEL_COMETLAKE: u32 = 486055998;
pub const CPUFAMILY_ARM_9: u32 = 3878847406;
pub const CPUFAMILY_ARM_11: u32 = 2415272152;
pub const CPUFAMILY_ARM_XSCALE: u32 = 1404044789;
pub const CPUFAMILY_ARM_12: u32 = 3172666089;
pub const CPUFAMILY_ARM_13: u32 = 214503012;
pub const CPUFAMILY_ARM_14: u32 = 2517073649;
pub const CPUFAMILY_ARM_15: u32 = 2823887818;
pub const CPUFAMILY_ARM_SWIFT: u32 = 506291073;
pub const CPUFAMILY_ARM_CYCLONE: u32 = 933271106;
pub const CPUFAMILY_ARM_TYPHOON: u32 = 747742334;
pub const CPUFAMILY_ARM_TWISTER: u32 = 2465937352;
pub const CPUFAMILY_ARM_HURRICANE: u32 = 1741614739;
pub const CPUFAMILY_ARM_MONSOON_MISTRAL: u32 = 3894312694;
pub const CPUFAMILY_ARM_VORTEX_TEMPEST: u32 = 131287967;
pub const CPUFAMILY_ARM_LIGHTNING_THUNDER: u32 = 1176831186;
pub const CPUFAMILY_ARM_FIRESTORM_ICESTORM: u32 = 458787763;
pub const CPUFAMILY_ARM_BLIZZARD_AVALANCHE: u32 = 3660830781;
pub const CPUFAMILY_ARM_EVEREST_SAWTOOTH: u32 = 2271604202;
pub const CPUFAMILY_ARM_IBIZA: u32 = 4197663070;
pub const CPUFAMILY_ARM_PALMA: u32 = 1912690738;
pub const CPUFAMILY_ARM_COLL: u32 = 678884789;
pub const CPUFAMILY_ARM_LOBOS: u32 = 1598941843;
pub const CPUFAMILY_ARM_DONAN: u32 = 1867590060;
pub const CPUFAMILY_ARM_BRAVA: u32 = 399882554;
pub const CPUFAMILY_ARM_TAHITI: u32 = 1976872121;
pub const CPUFAMILY_ARM_TUPAI: u32 = 541402832;
pub const CPUSUBFAMILY_UNKNOWN: u32 = 0;
pub const CPUSUBFAMILY_ARM_HP: u32 = 1;
pub const CPUSUBFAMILY_ARM_HG: u32 = 2;
pub const CPUSUBFAMILY_ARM_M: u32 = 3;
pub const CPUSUBFAMILY_ARM_HS: u32 = 4;
pub const CPUSUBFAMILY_ARM_HC_HD: u32 = 5;
pub const CPUSUBFAMILY_ARM_HA: u32 = 6;
pub const CPUFAMILY_INTEL_6_23: u32 = 2028621756;
pub const CPUFAMILY_INTEL_6_26: u32 = 1801080018;
pub const TIME_MICROS_MAX: u32 = 1000000;
pub const HOST_INFO_MAX: u32 = 1024;
pub const KERNEL_VERSION_MAX: u32 = 512;
pub const KERNEL_BOOT_INFO_MAX: u32 = 4096;
pub const HOST_BASIC_INFO: u32 = 1;
pub const HOST_SCHED_INFO: u32 = 3;
pub const HOST_RESOURCE_SIZES: u32 = 4;
pub const HOST_PRIORITY_INFO: u32 = 5;
pub const HOST_SEMAPHORE_TRAPS: u32 = 7;
pub const HOST_MACH_MSG_TRAP: u32 = 8;
pub const HOST_VM_PURGABLE: u32 = 9;
pub const HOST_DEBUG_INFO_INTERNAL: u32 = 10;
pub const HOST_CAN_HAS_DEBUGGER: u32 = 11;
pub const HOST_PREFERRED_USER_ARCH: u32 = 12;
pub const HOST_LOAD_INFO: u32 = 1;
pub const HOST_VM_INFO: u32 = 2;
pub const HOST_CPU_LOAD_INFO: u32 = 3;
pub const HOST_VM_INFO64: u32 = 4;
pub const HOST_EXTMOD_INFO64: u32 = 5;
pub const HOST_EXPIRED_TASK_INFO: u32 = 6;
pub const HOST_NOTIFY_CALENDAR_CHANGE: u32 = 0;
pub const HOST_NOTIFY_CALENDAR_SET: u32 = 1;
pub const HOST_NOTIFY_TYPE_MAX: u32 = 1;
pub const HOST_CALENDAR_CHANGED_REPLYID: u32 = 950;
pub const HOST_CALENDAR_SET_REPLYID: u32 = 951;
pub const HOST_SECURITY_PORT: u32 = 0;
pub const HOST_MIN_SPECIAL_PORT: u32 = 0;
pub const HOST_PORT: u32 = 1;
pub const HOST_PRIV_PORT: u32 = 2;
pub const HOST_IO_MAIN_PORT: u32 = 3;
pub const HOST_MAX_SPECIAL_KERNEL_PORT: u32 = 7;
pub const HOST_LAST_SPECIAL_KERNEL_PORT: u32 = 3;
pub const HOST_DYNAMIC_PAGER_PORT: u32 = 8;
pub const HOST_AUDIT_CONTROL_PORT: u32 = 9;
pub const HOST_USER_NOTIFICATION_PORT: u32 = 10;
pub const HOST_AUTOMOUNTD_PORT: u32 = 11;
pub const HOST_LOCKD_PORT: u32 = 12;
pub const HOST_KTRACE_BACKGROUND_PORT: u32 = 13;
pub const HOST_SEATBELT_PORT: u32 = 14;
pub const HOST_KEXTD_PORT: u32 = 15;
pub const HOST_LAUNCHCTL_PORT: u32 = 16;
pub const HOST_UNFREED_PORT: u32 = 17;
pub const HOST_AMFID_PORT: u32 = 18;
pub const HOST_GSSD_PORT: u32 = 19;
pub const HOST_TELEMETRY_PORT: u32 = 20;
pub const HOST_ATM_NOTIFICATION_PORT: u32 = 21;
pub const HOST_COALITION_PORT: u32 = 22;
pub const HOST_SYSDIAGNOSE_PORT: u32 = 23;
pub const HOST_XPC_EXCEPTION_PORT: u32 = 24;
pub const HOST_CONTAINERD_PORT: u32 = 25;
pub const HOST_NODE_PORT: u32 = 26;
pub const HOST_RESOURCE_NOTIFY_PORT: u32 = 27;
pub const HOST_CLOSURED_PORT: u32 = 28;
pub const HOST_SYSPOLICYD_PORT: u32 = 29;
pub const HOST_FILECOORDINATIOND_PORT: u32 = 30;
pub const HOST_FAIRPLAYD_PORT: u32 = 31;
pub const HOST_IOCOMPRESSIONSTATS_PORT: u32 = 32;
pub const HOST_MEMORY_ERROR_PORT: u32 = 33;
pub const HOST_MANAGEDAPPDISTD_PORT: u32 = 34;
pub const HOST_DOUBLEAGENTD_PORT: u32 = 35;
pub const HOST_MAX_SPECIAL_PORT: u32 = 35;
pub const HOST_CHUD_PORT: u32 = 16;
pub const HOST_LOCAL_NODE: i32 = -1;
pub const MEMORY_OBJECT_COPY_NONE: u32 = 0;
pub const MEMORY_OBJECT_COPY_CALL: u32 = 1;
pub const MEMORY_OBJECT_COPY_DELAY: u32 = 2;
pub const MEMORY_OBJECT_COPY_TEMPORARY: u32 = 3;
pub const MEMORY_OBJECT_COPY_SYMMETRIC: u32 = 4;
pub const MEMORY_OBJECT_COPY_INVALID: u32 = 5;
pub const MEMORY_OBJECT_COPY_DELAY_FORK: u32 = 6;
pub const MEMORY_OBJECT_RETURN_NONE: u32 = 0;
pub const MEMORY_OBJECT_RETURN_DIRTY: u32 = 1;
pub const MEMORY_OBJECT_RETURN_ALL: u32 = 2;
pub const MEMORY_OBJECT_RETURN_ANYTHING: u32 = 3;
pub const MEMORY_OBJECT_DATA_FLUSH: u32 = 1;
pub const MEMORY_OBJECT_DATA_NO_CHANGE: u32 = 2;
pub const MEMORY_OBJECT_DATA_PURGE: u32 = 4;
pub const MEMORY_OBJECT_COPY_SYNC: u32 = 8;
pub const MEMORY_OBJECT_DATA_SYNC: u32 = 16;
pub const MEMORY_OBJECT_IO_SYNC: u32 = 32;
pub const MEMORY_OBJECT_DATA_FLUSH_ALL: u32 = 64;
pub const MEMORY_OBJECT_INFO_MAX: u32 = 1024;
pub const MEMORY_OBJECT_PERFORMANCE_INFO: u32 = 11;
pub const MEMORY_OBJECT_ATTRIBUTE_INFO: u32 = 14;
pub const MEMORY_OBJECT_BEHAVIOR_INFO: u32 = 15;
pub const MEMORY_OBJECT_TERMINATE_IDLE: u32 = 1;
pub const MEMORY_OBJECT_RESPECT_CACHE: u32 = 2;
pub const MEMORY_OBJECT_RELEASE_NO_OP: u32 = 4;
pub const MAP_MEM_NOOP: u32 = 0;
pub const MAP_MEM_COPYBACK: u32 = 1;
pub const MAP_MEM_IO: u32 = 2;
pub const MAP_MEM_WTHRU: u32 = 3;
pub const MAP_MEM_WCOMB: u32 = 4;
pub const MAP_MEM_INNERWBACK: u32 = 5;
pub const MAP_MEM_POSTED: u32 = 6;
pub const MAP_MEM_RT: u32 = 7;
pub const MAP_MEM_POSTED_REORDERED: u32 = 8;
pub const MAP_MEM_POSTED_COMBINED_REORDERED: u32 = 9;
pub const MAP_MEM_PROT_MASK: u32 = 255;
pub const MAP_MEM_LEDGER_TAGGED: u32 = 8192;
pub const MAP_MEM_PURGABLE_KERNEL_ONLY: u32 = 16384;
pub const MAP_MEM_GRAB_SECLUDED: u32 = 32768;
pub const MAP_MEM_ONLY: u32 = 65536;
pub const MAP_MEM_NAMED_CREATE: u32 = 131072;
pub const MAP_MEM_PURGABLE: u32 = 262144;
pub const MAP_MEM_NAMED_REUSE: u32 = 524288;
pub const MAP_MEM_USE_DATA_ADDR: u32 = 1048576;
pub const MAP_MEM_VM_COPY: u32 = 2097152;
pub const MAP_MEM_VM_SHARE: u32 = 4194304;
pub const MAP_MEM_4K_DATA_ADDR: u32 = 8388608;
pub const MAP_MEM_FLAGS_MASK: u32 = 16776960;
pub const MAP_MEM_FLAGS_USER: u32 = 16769024;
pub const MAP_MEM_FLAGS_ALL: u32 = 16769024;
pub const EXC_TYPES_COUNT: u32 = 14;
pub const EXC_MASK_MACHINE: u32 = 0;
pub const EXCEPTION_CODE_MAX: u32 = 2;
pub const EXC_ARM_UNDEFINED: u32 = 1;
pub const EXC_ARM_SME_DISALLOWED: u32 = 2;
pub const EXC_ARM_FP_UNDEFINED: u32 = 0;
pub const EXC_ARM_FP_IO: u32 = 1;
pub const EXC_ARM_FP_DZ: u32 = 2;
pub const EXC_ARM_FP_OF: u32 = 3;
pub const EXC_ARM_FP_UF: u32 = 4;
pub const EXC_ARM_FP_IX: u32 = 5;
pub const EXC_ARM_FP_ID: u32 = 6;
pub const EXC_ARM_DA_ALIGN: u32 = 257;
pub const EXC_ARM_DA_DEBUG: u32 = 258;
pub const EXC_ARM_SP_ALIGN: u32 = 259;
pub const EXC_ARM_SWP: u32 = 260;
pub const EXC_ARM_PAC_FAIL: u32 = 261;
pub const EXC_ARM_BREAKPOINT: u32 = 1;
pub const EXC_BAD_ACCESS: u32 = 1;
pub const EXC_BAD_INSTRUCTION: u32 = 2;
pub const EXC_ARITHMETIC: u32 = 3;
pub const EXC_EMULATION: u32 = 4;
pub const EXC_SOFTWARE: u32 = 5;
pub const EXC_BREAKPOINT: u32 = 6;
pub const EXC_SYSCALL: u32 = 7;
pub const EXC_MACH_SYSCALL: u32 = 8;
pub const EXC_RPC_ALERT: u32 = 9;
pub const EXC_CRASH: u32 = 10;
pub const EXC_RESOURCE: u32 = 11;
pub const EXC_GUARD: u32 = 12;
pub const EXC_CORPSE_NOTIFY: u32 = 13;
pub const EXCEPTION_DEFAULT: u32 = 1;
pub const EXCEPTION_STATE: u32 = 2;
pub const EXCEPTION_STATE_IDENTITY: u32 = 3;
pub const EXCEPTION_IDENTITY_PROTECTED: u32 = 4;
pub const EXCEPTION_STATE_IDENTITY_PROTECTED: u32 = 5;
pub const MACH_EXCEPTION_BACKTRACE_PREFERRED: u32 = 536870912;
pub const MACH_EXCEPTION_ERRORS: u32 = 1073741824;
pub const MACH_EXCEPTION_CODES: u32 = 2147483648;
pub const MACH_EXCEPTION_MASK: u32 = 3758096384;
pub const EXC_MASK_BAD_ACCESS: u32 = 2;
pub const EXC_MASK_BAD_INSTRUCTION: u32 = 4;
pub const EXC_MASK_ARITHMETIC: u32 = 8;
pub const EXC_MASK_EMULATION: u32 = 16;
pub const EXC_MASK_SOFTWARE: u32 = 32;
pub const EXC_MASK_BREAKPOINT: u32 = 64;
pub const EXC_MASK_SYSCALL: u32 = 128;
pub const EXC_MASK_MACH_SYSCALL: u32 = 256;
pub const EXC_MASK_RPC_ALERT: u32 = 512;
pub const EXC_MASK_CRASH: u32 = 1024;
pub const EXC_MASK_RESOURCE: u32 = 2048;
pub const EXC_MASK_GUARD: u32 = 4096;
pub const EXC_MASK_CORPSE_NOTIFY: u32 = 8192;
pub const EXC_MASK_ALL: u32 = 7166;
pub const FIRST_EXCEPTION: u32 = 1;
pub const EXC_SOFT_SIGNAL: u32 = 65539;
pub const EXC_MACF_MIN: u32 = 131072;
pub const EXC_MACF_MAX: u32 = 196607;
pub const ARM_THREAD_STATE_MAX: u32 = 1296;
pub const THREAD_STATE_MAX: u32 = 1296;
pub const ARM_THREAD_STATE: u32 = 1;
pub const ARM_UNIFIED_THREAD_STATE: u32 = 1;
pub const ARM_VFP_STATE: u32 = 2;
pub const ARM_EXCEPTION_STATE: u32 = 3;
pub const ARM_DEBUG_STATE: u32 = 4;
pub const THREAD_STATE_NONE: u32 = 5;
pub const ARM_THREAD_STATE64: u32 = 6;
pub const ARM_EXCEPTION_STATE64: u32 = 7;
pub const ARM_THREAD_STATE32: u32 = 9;
pub const ARM_EXCEPTION_STATE64_V2: u32 = 10;
pub const ARM_DEBUG_STATE32: u32 = 14;
pub const ARM_DEBUG_STATE64: u32 = 15;
pub const ARM_NEON_STATE: u32 = 16;
pub const ARM_NEON_STATE64: u32 = 17;
pub const ARM_CPMU_STATE64: u32 = 18;
pub const ARM_PAGEIN_STATE: u32 = 27;
pub const THREAD_STATE_FLAVORS: u32 = 29;
pub const MACHINE_THREAD_STATE: u32 = 1;
pub const THREAD_MACHINE_STATE_MAX: u32 = 1296;
pub const THREAD_STATE_FLAVOR_LIST: u32 = 0;
pub const THREAD_STATE_FLAVOR_LIST_NEW: u32 = 128;
pub const THREAD_STATE_FLAVOR_LIST_10_9: u32 = 129;
pub const THREAD_STATE_FLAVOR_LIST_10_13: u32 = 130;
pub const THREAD_STATE_FLAVOR_LIST_10_15: u32 = 131;
pub const THREAD_CONVERT_THREAD_STATE_TO_SELF: u32 = 1;
pub const THREAD_CONVERT_THREAD_STATE_FROM_SELF: u32 = 2;
pub const MACH_VOUCHER_ATTR_MAX_RAW_RECIPE_ARRAY_SIZE: u32 = 5120;
pub const MACH_VOUCHER_TRAP_STACK_LIMIT: u32 = 256;
pub const MACH_VOUCHER_IMPORTANCE_ATTR_ADD_EXTERNAL: u32 = 1;
pub const MACH_VOUCHER_IMPORTANCE_ATTR_DROP_EXTERNAL: u32 = 2;
pub const MACH_ACTIVITY_ID_COUNT_MAX: u32 = 16;
pub const PROCESSOR_CPU_STAT: u32 = 268435459;
pub const PROCESSOR_CPU_STAT64: u32 = 268435460;
pub const PROCESSOR_INFO_MAX: u32 = 1024;
pub const PROCESSOR_SET_INFO_MAX: u32 = 1024;
pub const PROCESSOR_BASIC_INFO: u32 = 1;
pub const PROCESSOR_CPU_LOAD_INFO: u32 = 2;
pub const PROCESSOR_PM_REGS_INFO: u32 = 268435457;
pub const PROCESSOR_TEMPERATURE: u32 = 268435458;
pub const LOAD_SCALE: u32 = 1000;
pub const PROCESSOR_SET_BASIC_INFO: u32 = 5;
pub const PROCESSOR_SET_LOAD_INFO: u32 = 4;
pub const POLICY_NULL: u32 = 0;
pub const POLICY_TIMESHARE: u32 = 1;
pub const POLICY_RR: u32 = 2;
pub const POLICY_FIFO: u32 = 4;
pub const POLICYCLASS_FIXEDPRI: u32 = 6;
pub const TASK_INFO_MAX: u32 = 1024;
pub const TASK_BASIC_INFO_32: u32 = 4;
pub const TASK_BASIC2_INFO_32: u32 = 6;
pub const TASK_EVENTS_INFO: u32 = 2;
pub const TASK_THREAD_TIMES_INFO: u32 = 3;
pub const TASK_ABSOLUTETIME_INFO: u32 = 1;
pub const TASK_KERNELMEMORY_INFO: u32 = 7;
pub const TASK_SECURITY_TOKEN: u32 = 13;
pub const TASK_AUDIT_TOKEN: u32 = 15;
pub const TASK_AFFINITY_TAG_INFO: u32 = 16;
pub const TASK_DYLD_INFO: u32 = 17;
pub const TASK_DYLD_ALL_IMAGE_INFO_32: u32 = 0;
pub const TASK_DYLD_ALL_IMAGE_INFO_64: u32 = 1;
pub const TASK_BASIC_INFO_64_2: u32 = 18;
pub const TASK_EXTMOD_INFO: u32 = 19;
pub const MACH_TASK_BASIC_INFO: u32 = 20;
pub const TASK_POWER_INFO: u32 = 21;
pub const TASK_VM_INFO: u32 = 22;
pub const TASK_VM_INFO_PURGEABLE: u32 = 23;
pub const TASK_TRACE_MEMORY_INFO: u32 = 24;
pub const TASK_WAIT_STATE_INFO: u32 = 25;
pub const TASK_POWER_INFO_V2: u32 = 26;
pub const TASK_VM_INFO_PURGEABLE_ACCOUNT: u32 = 27;
pub const TASK_FLAGS_INFO: u32 = 28;
pub const TF_LP64: u32 = 1;
pub const TF_64B_DATA: u32 = 2;
pub const TASK_DEBUG_INFO_INTERNAL: u32 = 29;
pub const TASK_EXC_GUARD_NONE: u32 = 0;
pub const TASK_EXC_GUARD_VM_DELIVER: u32 = 1;
pub const TASK_EXC_GUARD_VM_ONCE: u32 = 2;
pub const TASK_EXC_GUARD_VM_CORPSE: u32 = 4;
pub const TASK_EXC_GUARD_VM_FATAL: u32 = 8;
pub const TASK_EXC_GUARD_VM_ALL: u32 = 15;
pub const TASK_EXC_GUARD_MP_DELIVER: u32 = 16;
pub const TASK_EXC_GUARD_MP_ONCE: u32 = 32;
pub const TASK_EXC_GUARD_MP_CORPSE: u32 = 64;
pub const TASK_EXC_GUARD_MP_FATAL: u32 = 128;
pub const TASK_EXC_GUARD_MP_ALL: u32 = 240;
pub const TASK_EXC_GUARD_ALL: u32 = 255;
pub const TASK_CORPSE_FORKING_DISABLED_MEM_DIAG: u32 = 1;
pub const TASK_SCHED_TIMESHARE_INFO: u32 = 10;
pub const TASK_SCHED_RR_INFO: u32 = 11;
pub const TASK_SCHED_FIFO_INFO: u32 = 12;
pub const TASK_SCHED_INFO: u32 = 14;
pub const TASK_CATEGORY_POLICY: u32 = 1;
pub const TASK_SUPPRESSION_POLICY: u32 = 3;
pub const TASK_POLICY_STATE: u32 = 4;
pub const TASK_BASE_QOS_POLICY: u32 = 8;
pub const TASK_OVERRIDE_QOS_POLICY: u32 = 9;
pub const TASK_BASE_LATENCY_QOS_POLICY: u32 = 10;
pub const TASK_BASE_THROUGHPUT_QOS_POLICY: u32 = 11;
pub const PROC_FLAG_DARWINBG: u32 = 32768;
pub const PROC_FLAG_EXT_DARWINBG: u32 = 65536;
pub const PROC_FLAG_IOS_APPLEDAEMON: u32 = 131072;
pub const PROC_FLAG_IOS_IMPPROMOTION: u32 = 524288;
pub const PROC_FLAG_ADAPTIVE: u32 = 1048576;
pub const PROC_FLAG_ADAPTIVE_IMPORTANT: u32 = 2097152;
pub const PROC_FLAG_IMPORTANCE_DONOR: u32 = 4194304;
pub const PROC_FLAG_SUPPRESSED: u32 = 8388608;
pub const PROC_FLAG_APPLICATION: u32 = 16777216;
pub const PROC_FLAG_IOS_APPLICATION: u32 = 16777216;
pub const TASK_KERNEL_PORT: u32 = 1;
pub const TASK_HOST_PORT: u32 = 2;
pub const TASK_NAME_PORT: u32 = 3;
pub const TASK_BOOTSTRAP_PORT: u32 = 4;
pub const TASK_INSPECT_PORT: u32 = 5;
pub const TASK_READ_PORT: u32 = 6;
pub const TASK_ACCESS_PORT: u32 = 9;
pub const TASK_DEBUG_CONTROL_PORT: u32 = 10;
pub const TASK_RESOURCE_NOTIFY_PORT: u32 = 11;
pub const TASK_MAX_SPECIAL_PORT: u32 = 11;
pub const THREAD_INFO_MAX: u32 = 32;
pub const THREAD_BASIC_INFO: u32 = 3;
pub const THREAD_IDENTIFIER_INFO: u32 = 4;
pub const TH_USAGE_SCALE: u32 = 1000;
pub const TH_STATE_RUNNING: u32 = 1;
pub const TH_STATE_STOPPED: u32 = 2;
pub const TH_STATE_WAITING: u32 = 3;
pub const TH_STATE_UNINTERRUPTIBLE: u32 = 4;
pub const TH_STATE_HALTED: u32 = 5;
pub const TH_FLAGS_SWAPPED: u32 = 1;
pub const TH_FLAGS_IDLE: u32 = 2;
pub const TH_FLAGS_GLOBAL_FORCED_IDLE: u32 = 4;
pub const THREAD_EXTENDED_INFO: u32 = 5;
pub const MAXTHREADNAMESIZE: u32 = 64;
pub const THREAD_DEBUG_INFO_INTERNAL: u32 = 6;
pub const IO_NUM_PRIORITIES: u32 = 4;
pub const THREAD_SCHED_TIMESHARE_INFO: u32 = 10;
pub const THREAD_SCHED_RR_INFO: u32 = 11;
pub const THREAD_SCHED_FIFO_INFO: u32 = 12;
pub const THREAD_STANDARD_POLICY: u32 = 1;
pub const THREAD_STANDARD_POLICY_COUNT: u32 = 0;
pub const THREAD_EXTENDED_POLICY: u32 = 1;
pub const THREAD_TIME_CONSTRAINT_POLICY: u32 = 2;
pub const THREAD_PRECEDENCE_POLICY: u32 = 3;
pub const THREAD_AFFINITY_POLICY: u32 = 4;
pub const THREAD_AFFINITY_TAG_NULL: u32 = 0;
pub const THREAD_BACKGROUND_POLICY: u32 = 5;
pub const THREAD_BACKGROUND_POLICY_DARWIN_BG: u32 = 4096;
pub const THREAD_LATENCY_QOS_POLICY: u32 = 7;
pub const THREAD_THROUGHPUT_QOS_POLICY: u32 = 8;
pub const THREAD_KERNEL_PORT: u32 = 1;
pub const THREAD_INSPECT_PORT: u32 = 2;
pub const THREAD_READ_PORT: u32 = 3;
pub const THREAD_MAX_SPECIAL_PORT: u32 = 3;
pub const SYSTEM_CLOCK: u32 = 0;
pub const CALENDAR_CLOCK: u32 = 1;
pub const REALTIME_CLOCK: u32 = 0;
pub const CLOCK_GET_TIME_RES: u32 = 1;
pub const CLOCK_ALARM_CURRES: u32 = 3;
pub const CLOCK_ALARM_MINRES: u32 = 4;
pub const CLOCK_ALARM_MAXRES: u32 = 5;
pub const NSEC_PER_USEC: u32 = 1000;
pub const USEC_PER_SEC: u32 = 1000000;
pub const NSEC_PER_SEC: u32 = 1000000000;
pub const NSEC_PER_MSEC: u32 = 1000000;
pub const ALRMTYPE: u32 = 255;
pub const TIME_ABSOLUTE: u32 = 0;
pub const TIME_RELATIVE: u32 = 1;
pub const MATTR_CACHE: u32 = 1;
pub const MATTR_MIGRATE: u32 = 2;
pub const MATTR_REPLICATE: u32 = 4;
pub const MATTR_VAL_OFF: u32 = 0;
pub const MATTR_VAL_ON: u32 = 1;
pub const MATTR_VAL_GET: u32 = 2;
pub const MATTR_VAL_CACHE_FLUSH: u32 = 6;
pub const MATTR_VAL_DCACHE_FLUSH: u32 = 7;
pub const MATTR_VAL_ICACHE_FLUSH: u32 = 8;
pub const MATTR_VAL_CACHE_SYNC: u32 = 9;
pub const MATTR_VAL_GET_INFO: u32 = 10;
pub const VM_PURGABLE_NO_AGING_SHIFT: u32 = 16;
pub const VM_PURGABLE_NO_AGING_MASK: u32 = 65536;
pub const VM_PURGABLE_NO_AGING: u32 = 65536;
pub const VM_PURGABLE_DEBUG_SHIFT: u32 = 12;
pub const VM_PURGABLE_DEBUG_MASK: u32 = 12288;
pub const VM_PURGABLE_DEBUG_EMPTY: u32 = 4096;
pub const VM_PURGABLE_DEBUG_FAULT: u32 = 8192;
pub const VM_VOLATILE_GROUP_SHIFT: u32 = 8;
pub const VM_VOLATILE_GROUP_MASK: u32 = 1792;
pub const VM_VOLATILE_GROUP_0: u32 = 0;
pub const VM_VOLATILE_GROUP_1: u32 = 256;
pub const VM_VOLATILE_GROUP_2: u32 = 512;
pub const VM_VOLATILE_GROUP_3: u32 = 768;
pub const VM_VOLATILE_GROUP_4: u32 = 1024;
pub const VM_VOLATILE_GROUP_5: u32 = 1280;
pub const VM_VOLATILE_GROUP_6: u32 = 1536;
pub const VM_VOLATILE_GROUP_7: u32 = 1792;
pub const VM_PURGABLE_BEHAVIOR_SHIFT: u32 = 6;
pub const VM_PURGABLE_BEHAVIOR_MASK: u32 = 64;
pub const VM_PURGABLE_BEHAVIOR_FIFO: u32 = 0;
pub const VM_PURGABLE_BEHAVIOR_LIFO: u32 = 64;
pub const VM_PURGABLE_ORDERING_SHIFT: u32 = 5;
pub const VM_PURGABLE_ORDERING_MASK: u32 = 32;
pub const VM_PURGABLE_ORDERING_OBSOLETE: u32 = 32;
pub const VM_PURGABLE_ORDERING_NORMAL: u32 = 0;
pub const VM_VOLATILE_ORDER_SHIFT: u32 = 4;
pub const VM_VOLATILE_ORDER_MASK: u32 = 16;
pub const VM_VOLATILE_MAKE_FIRST_IN_GROUP: u32 = 16;
pub const VM_VOLATILE_MAKE_LAST_IN_GROUP: u32 = 0;
pub const VM_PURGABLE_STATE_MIN: u32 = 0;
pub const VM_PURGABLE_STATE_MAX: u32 = 3;
pub const VM_PURGABLE_STATE_MASK: u32 = 3;
pub const VM_PURGABLE_NONVOLATILE: u32 = 0;
pub const VM_PURGABLE_VOLATILE: u32 = 1;
pub const VM_PURGABLE_EMPTY: u32 = 2;
pub const VM_PURGABLE_DENY: u32 = 3;
pub const VM_PURGABLE_ALL_MASKS: u32 = 79731;
pub const BYTE_SIZE: u32 = 8;
pub const PAGE_MAX_SHIFT: u32 = 14;
pub const PAGE_MAX_SIZE: u32 = 16384;
pub const PAGE_MAX_MASK: u32 = 16383;
pub const PAGE_MIN_SHIFT: u32 = 12;
pub const PAGE_MIN_SIZE: u32 = 4096;
pub const PAGE_MIN_MASK: u32 = 4095;
pub const MACH_VM_MIN_ADDRESS_RAW: u32 = 0;
pub const MACH_VM_MAX_ADDRESS_RAW: u64 = 140737454800896;
pub const MACH_VM_MIN_GPU_CARVEOUT_ADDRESS_RAW: u64 = 68719476736;
pub const MACH_VM_MAX_GPU_CARVEOUT_ADDRESS_RAW: u64 = 481036337152;
pub const SWI_SYSCALL: u32 = 128;
pub const VM_REGION_INFO_MAX: u32 = 1024;
pub const VM_REGION_BASIC_INFO_64: u32 = 9;
pub const VM_REGION_BASIC_INFO: u32 = 10;
pub const SM_COW: u32 = 1;
pub const SM_PRIVATE: u32 = 2;
pub const SM_EMPTY: u32 = 3;
pub const SM_SHARED: u32 = 4;
pub const SM_TRUESHARED: u32 = 5;
pub const SM_PRIVATE_ALIASED: u32 = 6;
pub const SM_SHARED_ALIASED: u32 = 7;
pub const SM_LARGE_PAGE: u32 = 8;
pub const VM_REGION_EXTENDED_INFO: u32 = 13;
pub const VM_REGION_TOP_INFO: u32 = 12;
pub const VM_MAP_ENTRY_MAX: u32 = 256;
pub const VM_PAGE_INFO_BASIC: u32 = 1;
pub const KMOD_MAX_NAME: u32 = 64;
pub const KMOD_RETURN_SUCCESS: u32 = 0;
pub const KMOD_RETURN_FAILURE: u32 = 5;
pub const KMOD_INFO_VERSION: u32 = 1;
pub const TASK_FLAVOR_CONTROL: u32 = 0;
pub const TASK_FLAVOR_READ: u32 = 1;
pub const TASK_FLAVOR_INSPECT: u32 = 2;
pub const TASK_FLAVOR_NAME: u32 = 3;
pub const TASK_FLAVOR_MAX: u32 = 3;
pub const THREAD_FLAVOR_CONTROL: u32 = 0;
pub const THREAD_FLAVOR_READ: u32 = 1;
pub const THREAD_FLAVOR_INSPECT: u32 = 2;
pub const THREAD_FLAVOR_MAX: u32 = 2;
pub const NDR_PROTOCOL_2_0: u32 = 0;
pub const NDR_INT_BIG_ENDIAN: u32 = 0;
pub const NDR_INT_LITTLE_ENDIAN: u32 = 1;
pub const NDR_FLOAT_IEEE: u32 = 0;
pub const NDR_FLOAT_VAX: u32 = 1;
pub const NDR_FLOAT_CRAY: u32 = 2;
pub const NDR_FLOAT_IBM: u32 = 3;
pub const NDR_CHAR_ASCII: u32 = 0;
pub const NDR_CHAR_EBCDIC: u32 = 1;
pub const __NDR_convert__: u32 = 0;
pub const __NDR_convert__int_rep__: u32 = 0;
pub const __NDR_convert__char_rep__: u32 = 0;
pub const __NDR_convert__float_rep__: u32 = 0;
pub const MACH_NOTIFY_FIRST: u32 = 64;
pub const MACH_NOTIFY_PORT_DELETED: u32 = 65;
pub const MACH_NOTIFY_SEND_POSSIBLE: u32 = 66;
pub const MACH_NOTIFY_PORT_DESTROYED: u32 = 69;
pub const MACH_NOTIFY_NO_SENDERS: u32 = 70;
pub const MACH_NOTIFY_SEND_ONCE: u32 = 71;
pub const MACH_NOTIFY_DEAD_NAME: u32 = 72;
pub const MACH_NOTIFY_LAST: u32 = 77;
pub const __MigTypeCheck: u32 = 1;
pub const __MigPackStructs: u32 = 1;
pub const MIG_TYPE_ERROR: i32 = -300;
pub const MIG_REPLY_MISMATCH: i32 = -301;
pub const MIG_REMOTE_ERROR: i32 = -302;
pub const MIG_BAD_ID: i32 = -303;
pub const MIG_BAD_ARGUMENTS: i32 = -304;
pub const MIG_NO_REPLY: i32 = -305;
pub const MIG_EXCEPTION: i32 = -306;
pub const MIG_ARRAY_TOO_LARGE: i32 = -307;
pub const MIG_SERVER_DIED: i32 = -308;
pub const MIG_TRAILER_ERROR: i32 = -309;
pub const clock_priv_MSG_COUNT: u32 = 2;
pub const host_priv_MSG_COUNT: u32 = 26;
pub const ZONE_NAME_MAX_LEN: u32 = 80;
pub const MACH_ZONE_NAME_MAX_LEN: u32 = 80;
pub const MACH_MEMORY_INFO_NAME_MAX_LEN: u32 = 80;
pub const MAX_ZTRACE_DEPTH: u32 = 15;
pub const ZOP_ALLOC: u32 = 1;
pub const ZOP_FREE: u32 = 0;
pub const LOCKGROUP_MAX_NAME: u32 = 64;
pub const LOCKGROUP_ATTR_STAT: u32 = 1;
pub const MACH_CORE_FILEHEADER_SIGNATURE: u64 = 27973006578180434;
pub const MACH_CORE_FILEHEADER_V2_SIGNATURE: u64 = 7161089684267036482;
pub const MACH_CORE_FILEHEADER_MAXFILES: u32 = 16;
pub const MACH_CORE_FILEHEADER_NAMELEN: u32 = 16;
pub const MACH_CORE_FILEHEADER_V2_FLAG_LOG_ENCRYPTED_AEA: u32 = 1;
pub const MACH_CORE_FILEHEADER_V2_FLAG_EXISTING_COREFILE_KEY_FORMAT_NIST_P256: u32 = 256;
pub const MACH_CORE_FILEHEADER_V2_FLAG_NEXT_COREFILE_KEY_FORMAT_NIST_P256: u32 = 65536;
pub const MACH_CORE_FILEHEADER_V2_FLAGS_EXISTING_COREFILE_KEY_FORMAT_MASK: u32 = 256;
pub const MACH_CORE_FILEHEADER_V2_FLAGS_NEXT_COREFILE_KEY_FORMAT_MASK: u32 = 65536;
pub const MACH_CORE_DETAILS_V2_FLAG_ENCRYPTED_AEA: u32 = 1;
pub const MACH_CORE_DETAILS_V2_FLAG_COMPRESSED_ZLIB: u32 = 256;
pub const MACH_CORE_DETAILS_V2_FLAG_COMPRESSED_LZ4: u32 = 512;
pub const KOBJECT_DESCRIPTION_LENGTH: u32 = 512;
pub const host_security_MSG_COUNT: u32 = 2;
pub const processor_MSG_COUNT: u32 = 6;
pub const processor_set_MSG_COUNT: u32 = 11;
pub const SYNC_POLICY_FIFO: u32 = 0;
pub const SYNC_POLICY_FIXED_PRIORITY: u32 = 1;
pub const SYNC_POLICY_REVERSED: u32 = 2;
pub const SYNC_POLICY_ORDER_MASK: u32 = 3;
pub const SYNC_POLICY_LIFO: u32 = 2;
pub const task_MSG_COUNT: u32 = 66;
pub const thread_act_MSG_COUNT: u32 = 32;
pub const vm_map_MSG_COUNT: u32 = 33;
pub const mach_port_MSG_COUNT: u32 = 43;
pub const _MACH_INIT_: u32 = 1;
pub const NAME_SERVER_SLOT: u32 = 0;
pub const ENVIRONMENT_SLOT: u32 = 1;
pub const SERVICE_SLOT: u32 = 2;
pub const MACH_PORTS_SLOTS_USED: u32 = 3;
pub const mach_host_MSG_COUNT: u32 = 35;
pub const SWITCH_OPTION_NONE: u32 = 0;
pub const SWITCH_OPTION_DEPRESS: u32 = 1;
pub const SWITCH_OPTION_WAIT: u32 = 2;
pub const RPC_SIGBUF_SIZE: u32 = 8;
pub const _MACH_ERROR_: u32 = 1;
pub const code_emask: u32 = 16383;
pub const err_max_system: u32 = 63;
pub const VOUCHER_MACH_MSG_API_VERSION: u32 = 20140205;
pub const DYNAMIC_TARGETS_ENABLED: u32 = 0;
pub const TARGET_OS_MAC: u32 = 1;
pub const TARGET_OS_OSX: u32 = 1;
pub const TARGET_OS_IPHONE: u32 = 0;
pub const TARGET_OS_IOS: u32 = 0;
pub const TARGET_OS_WATCH: u32 = 0;
pub const TARGET_OS_TV: u32 = 0;
pub const TARGET_OS_MACCATALYST: u32 = 0;
pub const TARGET_OS_UIKITFORMAC: u32 = 0;
pub const TARGET_OS_SIMULATOR: u32 = 0;
pub const TARGET_OS_EMBEDDED: u32 = 0;
pub const TARGET_OS_UNIX: u32 = 0;
pub const TARGET_OS_RTKIT: u32 = 0;
pub const TARGET_RT_LITTLE_ENDIAN: u32 = 1;
pub const TARGET_RT_BIG_ENDIAN: u32 = 0;
pub const TARGET_RT_64_BIT: u32 = 1;
pub const TARGET_RT_MAC_CFM: u32 = 0;
pub const TARGET_RT_MAC_MACHO: u32 = 1;
pub const TARGET_CPU_ARM64: u32 = 1;
pub const TARGET_OS_VISION: u32 = 0;
pub const TARGET_OS_DRIVERKIT: u32 = 0;
pub const TARGET_OS_WIN32: u32 = 0;
pub const TARGET_OS_WINDOWS: u32 = 0;
pub const TARGET_OS_LINUX: u32 = 0;
pub const TARGET_CPU_PPC: u32 = 0;
pub const TARGET_CPU_PPC64: u32 = 0;
pub const TARGET_CPU_68K: u32 = 0;
pub const TARGET_CPU_X86: u32 = 0;
pub const TARGET_CPU_X86_64: u32 = 0;
pub const TARGET_CPU_ARM: u32 = 0;
pub const TARGET_CPU_MIPS: u32 = 0;
pub const TARGET_CPU_SPARC: u32 = 0;
pub const TARGET_CPU_ALPHA: u32 = 0;
pub const TARGET_IPHONE_SIMULATOR: u32 = 0;
pub const TARGET_OS_NANO: u32 = 0;
pub const UV_HAVE_KQUEUE: u32 = 1;
pub const UV__DT_FILE: u32 = 8;
pub const UV__DT_DIR: u32 = 4;
pub const UV__DT_LINK: u32 = 10;
pub const UV__DT_FIFO: u32 = 1;
pub const UV__DT_SOCKET: u32 = 12;
pub const UV__DT_CHAR: u32 = 2;
pub const UV__DT_BLOCK: u32 = 6;
pub const UV_FS_O_APPEND: u32 = 8;
pub const UV_FS_O_CREAT: u32 = 512;
pub const UV_FS_O_DIRECT: u32 = 0;
pub const UV_FS_O_DIRECTORY: u32 = 1048576;
pub const UV_FS_O_DSYNC: u32 = 4194304;
pub const UV_FS_O_EXCL: u32 = 2048;
pub const UV_FS_O_EXLOCK: u32 = 32;
pub const UV_FS_O_NOATIME: u32 = 0;
pub const UV_FS_O_NOCTTY: u32 = 131072;
pub const UV_FS_O_NOFOLLOW: u32 = 256;
pub const UV_FS_O_NONBLOCK: u32 = 4;
pub const UV_FS_O_RDONLY: u32 = 0;
pub const UV_FS_O_RDWR: u32 = 2;
pub const UV_FS_O_SYMLINK: u32 = 2097152;
pub const UV_FS_O_SYNC: u32 = 128;
pub const UV_FS_O_TRUNC: u32 = 1024;
pub const UV_FS_O_WRONLY: u32 = 1;
pub const UV_FS_O_FILEMAP: u32 = 0;
pub const UV_FS_O_RANDOM: u32 = 0;
pub const UV_FS_O_SHORT_LIVED: u32 = 0;
pub const UV_FS_O_SEQUENTIAL: u32 = 0;
pub const UV_FS_O_TEMPORARY: u32 = 0;
pub const UV_PRIORITY_LOW: u32 = 19;
pub const UV_PRIORITY_BELOW_NORMAL: u32 = 10;
pub const UV_PRIORITY_NORMAL: u32 = 0;
pub const UV_PRIORITY_ABOVE_NORMAL: i32 = -7;
pub const UV_PRIORITY_HIGH: i32 = -14;
pub const UV_PRIORITY_HIGHEST: i32 = -20;
pub const UV_MAXHOSTNAMESIZE: u32 = 257;
pub const UV_FS_COPYFILE_EXCL: u32 = 1;
pub const UV_FS_COPYFILE_FICLONE: u32 = 2;
pub const UV_FS_COPYFILE_FICLONE_FORCE: u32 = 4;
pub const UV_FS_SYMLINK_DIR: u32 = 1;
pub const UV_FS_SYMLINK_JUNCTION: u32 = 2;
pub const UV_IF_NAMESIZE: u32 = 17;
pub const BARE_MODULE_VERSION: u32 = 0;
pub const BARE_MODULE_FILENAME: &[u8; 1] = b"\0";
pub const BARE_PLATFORM: &[u8; 7] = b"darwin\0";
pub const BARE_ARCH: &[u8; 6] = b"arm64\0";
pub const BARE_SIMULATOR: u32 = 0;
pub const BARE_TARGET_SYSTEM: &[u8; 13] = b"darwin-arm64\0";
pub const BARE_VERSION_MAJOR: u32 = 1;
pub const BARE_VERSION_MINOR: u32 = 12;
pub const BARE_VERSION_PATCH: u32 = 3;
pub type __gnuc_va_list = __builtin_va_list;
pub type va_list = __builtin_va_list;
pub type wchar_t = ::std::os::raw::c_int;
pub type max_align_t = f64;
pub type int_least8_t = i8;
pub type int_least16_t = i16;
pub type int_least32_t = i32;
pub type int_least64_t = i64;
pub type uint_least8_t = u8;
pub type uint_least16_t = u16;
pub type uint_least32_t = u32;
pub type uint_least64_t = u64;
pub type int_fast8_t = i8;
pub type int_fast16_t = i16;
pub type int_fast32_t = i32;
pub type int_fast64_t = i64;
pub type uint_fast8_t = u8;
pub type uint_fast16_t = u16;
pub type uint_fast32_t = u32;
pub type uint_fast64_t = u64;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __darwin_intptr_t = ::std::os::raw::c_long;
pub type __darwin_natural_t = ::std::os::raw::c_uint;
pub type __darwin_ct_rune_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t {
    pub __mbstate8: [::std::os::raw::c_char; 128usize],
    pub _mbstateL: ::std::os::raw::c_longlong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __mbstate_t"][::std::mem::size_of::<__mbstate_t>() - 128usize];
    ["Alignment of __mbstate_t"][::std::mem::align_of::<__mbstate_t>() - 8usize];
    ["Offset of field: __mbstate_t::__mbstate8"]
        [::std::mem::offset_of!(__mbstate_t, __mbstate8) - 0usize];
    ["Offset of field: __mbstate_t::_mbstateL"]
        [::std::mem::offset_of!(__mbstate_t, _mbstateL) - 0usize];
};
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::std::os::raw::c_long;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::std::os::raw::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::std::os::raw::c_int;
pub type __darwin_clock_t = ::std::os::raw::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::std::os::raw::c_uint;
pub type __darwin_fsfilcnt_t = ::std::os::raw::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::std::os::raw::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::std::os::raw::c_char; 37usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __next: *mut __darwin_pthread_handler_rec,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_pthread_handler_rec"]
        [::std::mem::size_of::<__darwin_pthread_handler_rec>() - 24usize];
    ["Alignment of __darwin_pthread_handler_rec"]
        [::std::mem::align_of::<__darwin_pthread_handler_rec>() - 8usize];
    ["Offset of field: __darwin_pthread_handler_rec::__routine"]
        [::std::mem::offset_of!(__darwin_pthread_handler_rec, __routine) - 0usize];
    ["Offset of field: __darwin_pthread_handler_rec::__arg"]
        [::std::mem::offset_of!(__darwin_pthread_handler_rec, __arg) - 8usize];
    ["Offset of field: __darwin_pthread_handler_rec::__next"]
        [::std::mem::offset_of!(__darwin_pthread_handler_rec, __next) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_attr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_attr_t"][::std::mem::size_of::<_opaque_pthread_attr_t>() - 64usize];
    ["Alignment of _opaque_pthread_attr_t"]
        [::std::mem::align_of::<_opaque_pthread_attr_t>() - 8usize];
    ["Offset of field: _opaque_pthread_attr_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_attr_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_attr_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_attr_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_cond_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 40usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_cond_t"][::std::mem::size_of::<_opaque_pthread_cond_t>() - 48usize];
    ["Alignment of _opaque_pthread_cond_t"]
        [::std::mem::align_of::<_opaque_pthread_cond_t>() - 8usize];
    ["Offset of field: _opaque_pthread_cond_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_cond_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_cond_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_cond_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_condattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_condattr_t"]
        [::std::mem::size_of::<_opaque_pthread_condattr_t>() - 16usize];
    ["Alignment of _opaque_pthread_condattr_t"]
        [::std::mem::align_of::<_opaque_pthread_condattr_t>() - 8usize];
    ["Offset of field: _opaque_pthread_condattr_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_condattr_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_condattr_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_condattr_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_mutex_t"][::std::mem::size_of::<_opaque_pthread_mutex_t>() - 64usize];
    ["Alignment of _opaque_pthread_mutex_t"]
        [::std::mem::align_of::<_opaque_pthread_mutex_t>() - 8usize];
    ["Offset of field: _opaque_pthread_mutex_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_mutex_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_mutex_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_mutex_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutexattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_mutexattr_t"]
        [::std::mem::size_of::<_opaque_pthread_mutexattr_t>() - 16usize];
    ["Alignment of _opaque_pthread_mutexattr_t"]
        [::std::mem::align_of::<_opaque_pthread_mutexattr_t>() - 8usize];
    ["Offset of field: _opaque_pthread_mutexattr_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_mutexattr_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_mutexattr_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_mutexattr_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_once_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_once_t"][::std::mem::size_of::<_opaque_pthread_once_t>() - 16usize];
    ["Alignment of _opaque_pthread_once_t"]
        [::std::mem::align_of::<_opaque_pthread_once_t>() - 8usize];
    ["Offset of field: _opaque_pthread_once_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_once_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_once_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_once_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlock_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 192usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_rwlock_t"]
        [::std::mem::size_of::<_opaque_pthread_rwlock_t>() - 200usize];
    ["Alignment of _opaque_pthread_rwlock_t"]
        [::std::mem::align_of::<_opaque_pthread_rwlock_t>() - 8usize];
    ["Offset of field: _opaque_pthread_rwlock_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_rwlock_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_rwlock_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_rwlock_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlockattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_rwlockattr_t"]
        [::std::mem::size_of::<_opaque_pthread_rwlockattr_t>() - 24usize];
    ["Alignment of _opaque_pthread_rwlockattr_t"]
        [::std::mem::align_of::<_opaque_pthread_rwlockattr_t>() - 8usize];
    ["Offset of field: _opaque_pthread_rwlockattr_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_rwlockattr_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_rwlockattr_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_rwlockattr_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_t {
    pub __sig: ::std::os::raw::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque: [::std::os::raw::c_char; 8176usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_t"][::std::mem::size_of::<_opaque_pthread_t>() - 8192usize];
    ["Alignment of _opaque_pthread_t"][::std::mem::align_of::<_opaque_pthread_t>() - 8usize];
    ["Offset of field: _opaque_pthread_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_t::__cleanup_stack"]
        [::std::mem::offset_of!(_opaque_pthread_t, __cleanup_stack) - 8usize];
    ["Offset of field: _opaque_pthread_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_t, __opaque) - 16usize];
};
pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::std::os::raw::c_ulong;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = _opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
pub type rsize_t = ::std::os::raw::c_ulong;
pub type utf8_t = ::std::os::raw::c_uchar;
pub type utf16_t = uint_least16_t;
pub type utf32_t = uint_least32_t;
pub type latin1_t = ::std::os::raw::c_uchar;
pub type ascii_t = ::std::os::raw::c_uchar;
unsafe extern "C" {
    #[doc = " UTF-8"]
    pub fn utf8_validate(data: *const utf8_t, len: usize) -> bool;
}
unsafe extern "C" {
    pub fn utf8_length_from_utf16le(data: *const utf16_t, len: usize) -> usize;
}
unsafe extern "C" {
    pub fn utf8_length_from_utf32(data: *const utf32_t, len: usize) -> usize;
}
unsafe extern "C" {
    pub fn utf8_length_from_latin1(data: *const latin1_t, len: usize) -> usize;
}
unsafe extern "C" {
    pub fn utf8_convert_to_utf16le(data: *const utf8_t, len: usize, result: *mut utf16_t) -> usize;
}
unsafe extern "C" {
    pub fn utf8_convert_to_utf32(data: *const utf8_t, len: usize, result: *mut utf32_t) -> usize;
}
unsafe extern "C" {
    pub fn utf8_convert_to_latin1(data: *const utf8_t, len: usize, result: *mut latin1_t) -> usize;
}
unsafe extern "C" {
    #[doc = " UTF-16"]
    pub fn utf16le_validate(data: *const utf16_t, len: usize) -> bool;
}
unsafe extern "C" {
    pub fn utf16_length_from_utf8(data: *const utf8_t, len: usize) -> usize;
}
unsafe extern "C" {
    pub fn utf16_length_from_utf32(data: *const utf32_t, len: usize) -> usize;
}
unsafe extern "C" {
    pub fn utf16_length_from_latin1(data: *const latin1_t, len: usize) -> usize;
}
unsafe extern "C" {
    pub fn utf16le_convert_to_utf8(data: *const utf16_t, len: usize, result: *mut utf8_t) -> usize;
}
unsafe extern "C" {
    pub fn utf16le_convert_to_utf32(
        data: *const utf16_t,
        len: usize,
        result: *mut utf32_t,
    ) -> usize;
}
unsafe extern "C" {
    pub fn utf16le_convert_to_latin1(
        data: *const utf16_t,
        len: usize,
        result: *mut latin1_t,
    ) -> usize;
}
unsafe extern "C" {
    #[doc = " UTF-32"]
    pub fn utf32_validate(data: *const utf32_t, len: usize) -> bool;
}
unsafe extern "C" {
    pub fn utf32_length_from_utf8(data: *const utf8_t, len: usize) -> usize;
}
unsafe extern "C" {
    pub fn utf32_length_from_utf16le(data: *const utf16_t, len: usize) -> usize;
}
unsafe extern "C" {
    pub fn utf32_length_from_latin1(data: *const latin1_t, len: usize) -> usize;
}
unsafe extern "C" {
    pub fn utf32_convert_to_utf8(data: *const utf32_t, len: usize, result: *mut utf8_t) -> usize;
}
unsafe extern "C" {
    pub fn utf32_convert_to_utf16le(
        data: *const utf32_t,
        len: usize,
        result: *mut utf16_t,
    ) -> usize;
}
unsafe extern "C" {
    pub fn utf32_convert_to_latin1(
        data: *const utf32_t,
        len: usize,
        result: *mut latin1_t,
    ) -> usize;
}
unsafe extern "C" {
    #[doc = " Latin-1"]
    pub fn latin1_length_from_utf8(data: *const utf8_t, len: usize) -> usize;
}
unsafe extern "C" {
    pub fn latin1_length_from_utf16le(data: *const utf16_t, len: usize) -> usize;
}
unsafe extern "C" {
    pub fn latin1_length_from_utf32(data: *const utf32_t, len: usize) -> usize;
}
unsafe extern "C" {
    pub fn latin1_convert_to_utf8(data: *const latin1_t, len: usize, result: *mut utf8_t) -> usize;
}
unsafe extern "C" {
    pub fn latin1_convert_to_utf16le(
        data: *const latin1_t,
        len: usize,
        result: *mut utf16_t,
    ) -> usize;
}
unsafe extern "C" {
    pub fn latin1_convert_to_utf32(
        data: *const latin1_t,
        len: usize,
        result: *mut utf32_t,
    ) -> usize;
}
unsafe extern "C" {
    #[doc = " ASCII"]
    pub fn ascii_validate(data: *const ascii_t, len: usize) -> bool;
}
unsafe extern "C" {
    pub fn __assert_rtn(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
    ) -> !;
}
pub type __darwin_nl_item = ::std::os::raw::c_int;
pub type __darwin_wctrans_t = ::std::os::raw::c_int;
pub type __darwin_wctype_t = __uint32_t;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulonglong;
pub type register_t = i64;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = i64;
pub type user_long_t = i64;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = i64;
pub type user_off_t = i64;
pub type syscall_arg_t = u_int64_t;
unsafe extern "C" {
    pub fn renameat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn renamex_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn renameatx_np(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn printf(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
pub type fpos_t = __darwin_off_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sbuf {
    pub _base: *mut ::std::os::raw::c_uchar,
    pub _size: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sbuf"][::std::mem::size_of::<__sbuf>() - 16usize];
    ["Alignment of __sbuf"][::std::mem::align_of::<__sbuf>() - 8usize];
    ["Offset of field: __sbuf::_base"][::std::mem::offset_of!(__sbuf, _base) - 0usize];
    ["Offset of field: __sbuf::_size"][::std::mem::offset_of!(__sbuf, _size) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILEX {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILE {
    pub _p: *mut ::std::os::raw::c_uchar,
    pub _r: ::std::os::raw::c_int,
    pub _w: ::std::os::raw::c_int,
    pub _flags: ::std::os::raw::c_short,
    pub _file: ::std::os::raw::c_short,
    pub _bf: __sbuf,
    pub _lbfsize: ::std::os::raw::c_int,
    pub _cookie: *mut ::std::os::raw::c_void,
    pub _close: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub _read: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *mut ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _seek: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: fpos_t,
            arg3: ::std::os::raw::c_int,
        ) -> fpos_t,
    >,
    pub _write: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *const ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _ub: __sbuf,
    pub _extra: *mut __sFILEX,
    pub _ur: ::std::os::raw::c_int,
    pub _ubuf: [::std::os::raw::c_uchar; 3usize],
    pub _nbuf: [::std::os::raw::c_uchar; 1usize],
    pub _lb: __sbuf,
    pub _blksize: ::std::os::raw::c_int,
    pub _offset: fpos_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sFILE"][::std::mem::size_of::<__sFILE>() - 152usize];
    ["Alignment of __sFILE"][::std::mem::align_of::<__sFILE>() - 8usize];
    ["Offset of field: __sFILE::_p"][::std::mem::offset_of!(__sFILE, _p) - 0usize];
    ["Offset of field: __sFILE::_r"][::std::mem::offset_of!(__sFILE, _r) - 8usize];
    ["Offset of field: __sFILE::_w"][::std::mem::offset_of!(__sFILE, _w) - 12usize];
    ["Offset of field: __sFILE::_flags"][::std::mem::offset_of!(__sFILE, _flags) - 16usize];
    ["Offset of field: __sFILE::_file"][::std::mem::offset_of!(__sFILE, _file) - 18usize];
    ["Offset of field: __sFILE::_bf"][::std::mem::offset_of!(__sFILE, _bf) - 24usize];
    ["Offset of field: __sFILE::_lbfsize"][::std::mem::offset_of!(__sFILE, _lbfsize) - 40usize];
    ["Offset of field: __sFILE::_cookie"][::std::mem::offset_of!(__sFILE, _cookie) - 48usize];
    ["Offset of field: __sFILE::_close"][::std::mem::offset_of!(__sFILE, _close) - 56usize];
    ["Offset of field: __sFILE::_read"][::std::mem::offset_of!(__sFILE, _read) - 64usize];
    ["Offset of field: __sFILE::_seek"][::std::mem::offset_of!(__sFILE, _seek) - 72usize];
    ["Offset of field: __sFILE::_write"][::std::mem::offset_of!(__sFILE, _write) - 80usize];
    ["Offset of field: __sFILE::_ub"][::std::mem::offset_of!(__sFILE, _ub) - 88usize];
    ["Offset of field: __sFILE::_extra"][::std::mem::offset_of!(__sFILE, _extra) - 104usize];
    ["Offset of field: __sFILE::_ur"][::std::mem::offset_of!(__sFILE, _ur) - 112usize];
    ["Offset of field: __sFILE::_ubuf"][::std::mem::offset_of!(__sFILE, _ubuf) - 116usize];
    ["Offset of field: __sFILE::_nbuf"][::std::mem::offset_of!(__sFILE, _nbuf) - 119usize];
    ["Offset of field: __sFILE::_lb"][::std::mem::offset_of!(__sFILE, _lb) - 120usize];
    ["Offset of field: __sFILE::_blksize"][::std::mem::offset_of!(__sFILE, _blksize) - 136usize];
    ["Offset of field: __sFILE::_offset"][::std::mem::offset_of!(__sFILE, _offset) - 144usize];
};
pub type FILE = __sFILE;
unsafe extern "C" {
    pub static mut __stdinp: *mut FILE;
}
unsafe extern "C" {
    pub static mut __stdoutp: *mut FILE;
}
unsafe extern "C" {
    pub static mut __stderrp: *mut FILE;
}
unsafe extern "C" {
    pub fn clearerr(arg1: *mut FILE);
}
unsafe extern "C" {
    pub fn fclose(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn feof(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ferror(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fflush(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fgetc(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fgetpos(arg1: *mut FILE, arg2: *mut fpos_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fgets(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn fprintf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fputc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fputs(arg1: *const ::std::os::raw::c_char, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __nitems: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn freopen(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut FILE,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn fscanf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fseek(
        arg1: *mut FILE,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fsetpos(arg1: *mut FILE, arg2: *const fpos_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ftell(arg1: *mut FILE) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __nitems: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn getc(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn gets(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn perror(arg1: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn putc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn putchar(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn puts(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn remove(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn rewind(arg1: *mut FILE);
}
unsafe extern "C" {
    pub fn scanf(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setbuf(arg1: *mut FILE, arg2: *mut ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn setvbuf(
        arg1: *mut FILE,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sscanf(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
unsafe extern "C" {
    pub fn tmpnam(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ungetc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vfprintf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vprintf(
        arg1: *const ::std::os::raw::c_char,
        arg2: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vsprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ctermid(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn fdopen(arg1: ::std::os::raw::c_int, arg2: *const ::std::os::raw::c_char) -> *mut FILE;
}
unsafe extern "C" {
    pub fn fileno(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pclose(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn popen(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn __srget(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __svfscanf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __swbuf(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn flockfile(arg1: *mut FILE);
}
unsafe extern "C" {
    pub fn ftrylockfile(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn funlockfile(arg1: *mut FILE);
}
unsafe extern "C" {
    pub fn getc_unlocked(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn putc_unlocked(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn putchar_unlocked(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getw(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn putw(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __prefix: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type off_t = __darwin_off_t;
unsafe extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __offset: off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ftello(__stream: *mut FILE) -> off_t;
}
unsafe extern "C" {
    pub fn snprintf(
        __str: *mut ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vfscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        arg1: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        arg1: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vsnprintf(
        __str: *mut ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        arg1: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vsscanf(
        __str: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        arg1: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dprintf(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vdprintf(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getdelim(
        __linep: *mut *mut ::std::os::raw::c_char,
        __linecapp: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> isize;
}
unsafe extern "C" {
    pub fn getline(
        __linep: *mut *mut ::std::os::raw::c_char,
        __linecapp: *mut usize,
        __stream: *mut FILE,
    ) -> isize;
}
unsafe extern "C" {
    pub fn fmemopen(
        __buf: *mut ::std::os::raw::c_void,
        __size: usize,
        __mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn open_memstream(
        __bufp: *mut *mut ::std::os::raw::c_char,
        __sizep: *mut usize,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub static sys_nerr: ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub static sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
unsafe extern "C" {
    pub fn asprintf(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ctermid_r(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn fgetln(arg1: *mut FILE, arg2: *mut usize) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn fmtcheck(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn fpurge(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setbuffer(
        arg1: *mut FILE,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn setlinebuf(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vasprintf(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn funopen(
        arg1: *const ::std::os::raw::c_void,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_char,
                arg3: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_char,
                arg3: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        arg4: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: fpos_t,
                arg3: ::std::os::raw::c_int,
            ) -> fpos_t,
        >,
        arg5: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
        >,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn __sprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: usize,
        arg4: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __snprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: ::std::os::raw::c_int,
        arg4: usize,
        arg5: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __vsprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: usize,
        arg4: *const ::std::os::raw::c_char,
        arg5: va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __vsnprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: ::std::os::raw::c_int,
        arg4: usize,
        arg5: *const ::std::os::raw::c_char,
        arg6: va_list,
    ) -> ::std::os::raw::c_int;
}
pub const idtype_t_P_ALL: idtype_t = 0;
pub const idtype_t_P_PID: idtype_t = 1;
pub const idtype_t_P_PGID: idtype_t = 2;
pub type idtype_t = ::std::os::raw::c_uint;
pub type pid_t = __darwin_pid_t;
pub type id_t = __darwin_id_t;
pub type sig_atomic_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_exception_state {
    pub __exception: __uint32_t,
    pub __fsr: __uint32_t,
    pub __far: __uint32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_arm_exception_state"]
        [::std::mem::size_of::<__darwin_arm_exception_state>() - 12usize];
    ["Alignment of __darwin_arm_exception_state"]
        [::std::mem::align_of::<__darwin_arm_exception_state>() - 4usize];
    ["Offset of field: __darwin_arm_exception_state::__exception"]
        [::std::mem::offset_of!(__darwin_arm_exception_state, __exception) - 0usize];
    ["Offset of field: __darwin_arm_exception_state::__fsr"]
        [::std::mem::offset_of!(__darwin_arm_exception_state, __fsr) - 4usize];
    ["Offset of field: __darwin_arm_exception_state::__far"]
        [::std::mem::offset_of!(__darwin_arm_exception_state, __far) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_exception_state64 {
    pub __far: __uint64_t,
    pub __esr: __uint32_t,
    pub __exception: __uint32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_arm_exception_state64"]
        [::std::mem::size_of::<__darwin_arm_exception_state64>() - 16usize];
    ["Alignment of __darwin_arm_exception_state64"]
        [::std::mem::align_of::<__darwin_arm_exception_state64>() - 8usize];
    ["Offset of field: __darwin_arm_exception_state64::__far"]
        [::std::mem::offset_of!(__darwin_arm_exception_state64, __far) - 0usize];
    ["Offset of field: __darwin_arm_exception_state64::__esr"]
        [::std::mem::offset_of!(__darwin_arm_exception_state64, __esr) - 8usize];
    ["Offset of field: __darwin_arm_exception_state64::__exception"]
        [::std::mem::offset_of!(__darwin_arm_exception_state64, __exception) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_exception_state64_v2 {
    pub __far: __uint64_t,
    pub __esr: __uint64_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_arm_exception_state64_v2"]
        [::std::mem::size_of::<__darwin_arm_exception_state64_v2>() - 16usize];
    ["Alignment of __darwin_arm_exception_state64_v2"]
        [::std::mem::align_of::<__darwin_arm_exception_state64_v2>() - 8usize];
    ["Offset of field: __darwin_arm_exception_state64_v2::__far"]
        [::std::mem::offset_of!(__darwin_arm_exception_state64_v2, __far) - 0usize];
    ["Offset of field: __darwin_arm_exception_state64_v2::__esr"]
        [::std::mem::offset_of!(__darwin_arm_exception_state64_v2, __esr) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_thread_state {
    pub __r: [__uint32_t; 13usize],
    pub __sp: __uint32_t,
    pub __lr: __uint32_t,
    pub __pc: __uint32_t,
    pub __cpsr: __uint32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_arm_thread_state"]
        [::std::mem::size_of::<__darwin_arm_thread_state>() - 68usize];
    ["Alignment of __darwin_arm_thread_state"]
        [::std::mem::align_of::<__darwin_arm_thread_state>() - 4usize];
    ["Offset of field: __darwin_arm_thread_state::__r"]
        [::std::mem::offset_of!(__darwin_arm_thread_state, __r) - 0usize];
    ["Offset of field: __darwin_arm_thread_state::__sp"]
        [::std::mem::offset_of!(__darwin_arm_thread_state, __sp) - 52usize];
    ["Offset of field: __darwin_arm_thread_state::__lr"]
        [::std::mem::offset_of!(__darwin_arm_thread_state, __lr) - 56usize];
    ["Offset of field: __darwin_arm_thread_state::__pc"]
        [::std::mem::offset_of!(__darwin_arm_thread_state, __pc) - 60usize];
    ["Offset of field: __darwin_arm_thread_state::__cpsr"]
        [::std::mem::offset_of!(__darwin_arm_thread_state, __cpsr) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_thread_state64 {
    pub __x: [__uint64_t; 29usize],
    pub __fp: __uint64_t,
    pub __lr: __uint64_t,
    pub __sp: __uint64_t,
    pub __pc: __uint64_t,
    pub __cpsr: __uint32_t,
    pub __pad: __uint32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_arm_thread_state64"]
        [::std::mem::size_of::<__darwin_arm_thread_state64>() - 272usize];
    ["Alignment of __darwin_arm_thread_state64"]
        [::std::mem::align_of::<__darwin_arm_thread_state64>() - 8usize];
    ["Offset of field: __darwin_arm_thread_state64::__x"]
        [::std::mem::offset_of!(__darwin_arm_thread_state64, __x) - 0usize];
    ["Offset of field: __darwin_arm_thread_state64::__fp"]
        [::std::mem::offset_of!(__darwin_arm_thread_state64, __fp) - 232usize];
    ["Offset of field: __darwin_arm_thread_state64::__lr"]
        [::std::mem::offset_of!(__darwin_arm_thread_state64, __lr) - 240usize];
    ["Offset of field: __darwin_arm_thread_state64::__sp"]
        [::std::mem::offset_of!(__darwin_arm_thread_state64, __sp) - 248usize];
    ["Offset of field: __darwin_arm_thread_state64::__pc"]
        [::std::mem::offset_of!(__darwin_arm_thread_state64, __pc) - 256usize];
    ["Offset of field: __darwin_arm_thread_state64::__cpsr"]
        [::std::mem::offset_of!(__darwin_arm_thread_state64, __cpsr) - 264usize];
    ["Offset of field: __darwin_arm_thread_state64::__pad"]
        [::std::mem::offset_of!(__darwin_arm_thread_state64, __pad) - 268usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_vfp_state {
    pub __r: [__uint32_t; 64usize],
    pub __fpscr: __uint32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_arm_vfp_state"][::std::mem::size_of::<__darwin_arm_vfp_state>() - 260usize];
    ["Alignment of __darwin_arm_vfp_state"]
        [::std::mem::align_of::<__darwin_arm_vfp_state>() - 4usize];
    ["Offset of field: __darwin_arm_vfp_state::__r"]
        [::std::mem::offset_of!(__darwin_arm_vfp_state, __r) - 0usize];
    ["Offset of field: __darwin_arm_vfp_state::__fpscr"]
        [::std::mem::offset_of!(__darwin_arm_vfp_state, __fpscr) - 256usize];
};
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_neon_state64 {
    pub __v: [__uint128_t; 32usize],
    pub __fpsr: __uint32_t,
    pub __fpcr: __uint32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_arm_neon_state64"]
        [::std::mem::size_of::<__darwin_arm_neon_state64>() - 528usize];
    ["Alignment of __darwin_arm_neon_state64"]
        [::std::mem::align_of::<__darwin_arm_neon_state64>() - 16usize];
    ["Offset of field: __darwin_arm_neon_state64::__v"]
        [::std::mem::offset_of!(__darwin_arm_neon_state64, __v) - 0usize];
    ["Offset of field: __darwin_arm_neon_state64::__fpsr"]
        [::std::mem::offset_of!(__darwin_arm_neon_state64, __fpsr) - 512usize];
    ["Offset of field: __darwin_arm_neon_state64::__fpcr"]
        [::std::mem::offset_of!(__darwin_arm_neon_state64, __fpcr) - 516usize];
};
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_neon_state {
    pub __v: [__uint128_t; 16usize],
    pub __fpsr: __uint32_t,
    pub __fpcr: __uint32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_arm_neon_state"]
        [::std::mem::size_of::<__darwin_arm_neon_state>() - 272usize];
    ["Alignment of __darwin_arm_neon_state"]
        [::std::mem::align_of::<__darwin_arm_neon_state>() - 16usize];
    ["Offset of field: __darwin_arm_neon_state::__v"]
        [::std::mem::offset_of!(__darwin_arm_neon_state, __v) - 0usize];
    ["Offset of field: __darwin_arm_neon_state::__fpsr"]
        [::std::mem::offset_of!(__darwin_arm_neon_state, __fpsr) - 256usize];
    ["Offset of field: __darwin_arm_neon_state::__fpcr"]
        [::std::mem::offset_of!(__darwin_arm_neon_state, __fpcr) - 260usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __arm_pagein_state {
    pub __pagein_error: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __arm_pagein_state"][::std::mem::size_of::<__arm_pagein_state>() - 4usize];
    ["Alignment of __arm_pagein_state"][::std::mem::align_of::<__arm_pagein_state>() - 4usize];
    ["Offset of field: __arm_pagein_state::__pagein_error"]
        [::std::mem::offset_of!(__arm_pagein_state, __pagein_error) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __arm_legacy_debug_state {
    pub __bvr: [__uint32_t; 16usize],
    pub __bcr: [__uint32_t; 16usize],
    pub __wvr: [__uint32_t; 16usize],
    pub __wcr: [__uint32_t; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __arm_legacy_debug_state"]
        [::std::mem::size_of::<__arm_legacy_debug_state>() - 256usize];
    ["Alignment of __arm_legacy_debug_state"]
        [::std::mem::align_of::<__arm_legacy_debug_state>() - 4usize];
    ["Offset of field: __arm_legacy_debug_state::__bvr"]
        [::std::mem::offset_of!(__arm_legacy_debug_state, __bvr) - 0usize];
    ["Offset of field: __arm_legacy_debug_state::__bcr"]
        [::std::mem::offset_of!(__arm_legacy_debug_state, __bcr) - 64usize];
    ["Offset of field: __arm_legacy_debug_state::__wvr"]
        [::std::mem::offset_of!(__arm_legacy_debug_state, __wvr) - 128usize];
    ["Offset of field: __arm_legacy_debug_state::__wcr"]
        [::std::mem::offset_of!(__arm_legacy_debug_state, __wcr) - 192usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_debug_state32 {
    pub __bvr: [__uint32_t; 16usize],
    pub __bcr: [__uint32_t; 16usize],
    pub __wvr: [__uint32_t; 16usize],
    pub __wcr: [__uint32_t; 16usize],
    pub __mdscr_el1: __uint64_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_arm_debug_state32"]
        [::std::mem::size_of::<__darwin_arm_debug_state32>() - 264usize];
    ["Alignment of __darwin_arm_debug_state32"]
        [::std::mem::align_of::<__darwin_arm_debug_state32>() - 8usize];
    ["Offset of field: __darwin_arm_debug_state32::__bvr"]
        [::std::mem::offset_of!(__darwin_arm_debug_state32, __bvr) - 0usize];
    ["Offset of field: __darwin_arm_debug_state32::__bcr"]
        [::std::mem::offset_of!(__darwin_arm_debug_state32, __bcr) - 64usize];
    ["Offset of field: __darwin_arm_debug_state32::__wvr"]
        [::std::mem::offset_of!(__darwin_arm_debug_state32, __wvr) - 128usize];
    ["Offset of field: __darwin_arm_debug_state32::__wcr"]
        [::std::mem::offset_of!(__darwin_arm_debug_state32, __wcr) - 192usize];
    ["Offset of field: __darwin_arm_debug_state32::__mdscr_el1"]
        [::std::mem::offset_of!(__darwin_arm_debug_state32, __mdscr_el1) - 256usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_debug_state64 {
    pub __bvr: [__uint64_t; 16usize],
    pub __bcr: [__uint64_t; 16usize],
    pub __wvr: [__uint64_t; 16usize],
    pub __wcr: [__uint64_t; 16usize],
    pub __mdscr_el1: __uint64_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_arm_debug_state64"]
        [::std::mem::size_of::<__darwin_arm_debug_state64>() - 520usize];
    ["Alignment of __darwin_arm_debug_state64"]
        [::std::mem::align_of::<__darwin_arm_debug_state64>() - 8usize];
    ["Offset of field: __darwin_arm_debug_state64::__bvr"]
        [::std::mem::offset_of!(__darwin_arm_debug_state64, __bvr) - 0usize];
    ["Offset of field: __darwin_arm_debug_state64::__bcr"]
        [::std::mem::offset_of!(__darwin_arm_debug_state64, __bcr) - 128usize];
    ["Offset of field: __darwin_arm_debug_state64::__wvr"]
        [::std::mem::offset_of!(__darwin_arm_debug_state64, __wvr) - 256usize];
    ["Offset of field: __darwin_arm_debug_state64::__wcr"]
        [::std::mem::offset_of!(__darwin_arm_debug_state64, __wcr) - 384usize];
    ["Offset of field: __darwin_arm_debug_state64::__mdscr_el1"]
        [::std::mem::offset_of!(__darwin_arm_debug_state64, __mdscr_el1) - 512usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_cpmu_state64 {
    pub __ctrs: [__uint64_t; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_arm_cpmu_state64"]
        [::std::mem::size_of::<__darwin_arm_cpmu_state64>() - 128usize];
    ["Alignment of __darwin_arm_cpmu_state64"]
        [::std::mem::align_of::<__darwin_arm_cpmu_state64>() - 8usize];
    ["Offset of field: __darwin_arm_cpmu_state64::__ctrs"]
        [::std::mem::offset_of!(__darwin_arm_cpmu_state64, __ctrs) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext32 {
    pub __es: __darwin_arm_exception_state,
    pub __ss: __darwin_arm_thread_state,
    pub __fs: __darwin_arm_vfp_state,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_mcontext32"][::std::mem::size_of::<__darwin_mcontext32>() - 340usize];
    ["Alignment of __darwin_mcontext32"][::std::mem::align_of::<__darwin_mcontext32>() - 4usize];
    ["Offset of field: __darwin_mcontext32::__es"]
        [::std::mem::offset_of!(__darwin_mcontext32, __es) - 0usize];
    ["Offset of field: __darwin_mcontext32::__ss"]
        [::std::mem::offset_of!(__darwin_mcontext32, __ss) - 12usize];
    ["Offset of field: __darwin_mcontext32::__fs"]
        [::std::mem::offset_of!(__darwin_mcontext32, __fs) - 80usize];
};
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext64 {
    pub __es: __darwin_arm_exception_state64,
    pub __ss: __darwin_arm_thread_state64,
    pub __ns: __darwin_arm_neon_state64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_mcontext64"][::std::mem::size_of::<__darwin_mcontext64>() - 816usize];
    ["Alignment of __darwin_mcontext64"][::std::mem::align_of::<__darwin_mcontext64>() - 16usize];
    ["Offset of field: __darwin_mcontext64::__es"]
        [::std::mem::offset_of!(__darwin_mcontext64, __es) - 0usize];
    ["Offset of field: __darwin_mcontext64::__ss"]
        [::std::mem::offset_of!(__darwin_mcontext64, __ss) - 16usize];
    ["Offset of field: __darwin_mcontext64::__ns"]
        [::std::mem::offset_of!(__darwin_mcontext64, __ns) - 288usize];
};
pub type mcontext_t = *mut __darwin_mcontext64;
pub type pthread_attr_t = __darwin_pthread_attr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_sigaltstack {
    pub ss_sp: *mut ::std::os::raw::c_void,
    pub ss_size: __darwin_size_t,
    pub ss_flags: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_sigaltstack"][::std::mem::size_of::<__darwin_sigaltstack>() - 24usize];
    ["Alignment of __darwin_sigaltstack"][::std::mem::align_of::<__darwin_sigaltstack>() - 8usize];
    ["Offset of field: __darwin_sigaltstack::ss_sp"]
        [::std::mem::offset_of!(__darwin_sigaltstack, ss_sp) - 0usize];
    ["Offset of field: __darwin_sigaltstack::ss_size"]
        [::std::mem::offset_of!(__darwin_sigaltstack, ss_size) - 8usize];
    ["Offset of field: __darwin_sigaltstack::ss_flags"]
        [::std::mem::offset_of!(__darwin_sigaltstack, ss_flags) - 16usize];
};
pub type stack_t = __darwin_sigaltstack;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_ucontext {
    pub uc_onstack: ::std::os::raw::c_int,
    pub uc_sigmask: __darwin_sigset_t,
    pub uc_stack: __darwin_sigaltstack,
    pub uc_link: *mut __darwin_ucontext,
    pub uc_mcsize: __darwin_size_t,
    pub uc_mcontext: *mut __darwin_mcontext64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_ucontext"][::std::mem::size_of::<__darwin_ucontext>() - 56usize];
    ["Alignment of __darwin_ucontext"][::std::mem::align_of::<__darwin_ucontext>() - 8usize];
    ["Offset of field: __darwin_ucontext::uc_onstack"]
        [::std::mem::offset_of!(__darwin_ucontext, uc_onstack) - 0usize];
    ["Offset of field: __darwin_ucontext::uc_sigmask"]
        [::std::mem::offset_of!(__darwin_ucontext, uc_sigmask) - 4usize];
    ["Offset of field: __darwin_ucontext::uc_stack"]
        [::std::mem::offset_of!(__darwin_ucontext, uc_stack) - 8usize];
    ["Offset of field: __darwin_ucontext::uc_link"]
        [::std::mem::offset_of!(__darwin_ucontext, uc_link) - 32usize];
    ["Offset of field: __darwin_ucontext::uc_mcsize"]
        [::std::mem::offset_of!(__darwin_ucontext, uc_mcsize) - 40usize];
    ["Offset of field: __darwin_ucontext::uc_mcontext"]
        [::std::mem::offset_of!(__darwin_ucontext, uc_mcontext) - 48usize];
};
pub type ucontext_t = __darwin_ucontext;
pub type sigset_t = __darwin_sigset_t;
pub type uid_t = __darwin_uid_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigval {
    pub sival_int: ::std::os::raw::c_int,
    pub sival_ptr: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sigval"][::std::mem::size_of::<sigval>() - 8usize];
    ["Alignment of sigval"][::std::mem::align_of::<sigval>() - 8usize];
    ["Offset of field: sigval::sival_int"][::std::mem::offset_of!(sigval, sival_int) - 0usize];
    ["Offset of field: sigval::sival_ptr"][::std::mem::offset_of!(sigval, sival_ptr) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigevent {
    pub sigev_notify: ::std::os::raw::c_int,
    pub sigev_signo: ::std::os::raw::c_int,
    pub sigev_value: sigval,
    pub sigev_notify_function: ::std::option::Option<unsafe extern "C" fn(arg1: sigval)>,
    pub sigev_notify_attributes: *mut pthread_attr_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sigevent"][::std::mem::size_of::<sigevent>() - 32usize];
    ["Alignment of sigevent"][::std::mem::align_of::<sigevent>() - 8usize];
    ["Offset of field: sigevent::sigev_notify"]
        [::std::mem::offset_of!(sigevent, sigev_notify) - 0usize];
    ["Offset of field: sigevent::sigev_signo"]
        [::std::mem::offset_of!(sigevent, sigev_signo) - 4usize];
    ["Offset of field: sigevent::sigev_value"]
        [::std::mem::offset_of!(sigevent, sigev_value) - 8usize];
    ["Offset of field: sigevent::sigev_notify_function"]
        [::std::mem::offset_of!(sigevent, sigev_notify_function) - 16usize];
    ["Offset of field: sigevent::sigev_notify_attributes"]
        [::std::mem::offset_of!(sigevent, sigev_notify_attributes) - 24usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __siginfo {
    pub si_signo: ::std::os::raw::c_int,
    pub si_errno: ::std::os::raw::c_int,
    pub si_code: ::std::os::raw::c_int,
    pub si_pid: pid_t,
    pub si_uid: uid_t,
    pub si_status: ::std::os::raw::c_int,
    pub si_addr: *mut ::std::os::raw::c_void,
    pub si_value: sigval,
    pub si_band: ::std::os::raw::c_long,
    pub __pad: [::std::os::raw::c_ulong; 7usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __siginfo"][::std::mem::size_of::<__siginfo>() - 104usize];
    ["Alignment of __siginfo"][::std::mem::align_of::<__siginfo>() - 8usize];
    ["Offset of field: __siginfo::si_signo"][::std::mem::offset_of!(__siginfo, si_signo) - 0usize];
    ["Offset of field: __siginfo::si_errno"][::std::mem::offset_of!(__siginfo, si_errno) - 4usize];
    ["Offset of field: __siginfo::si_code"][::std::mem::offset_of!(__siginfo, si_code) - 8usize];
    ["Offset of field: __siginfo::si_pid"][::std::mem::offset_of!(__siginfo, si_pid) - 12usize];
    ["Offset of field: __siginfo::si_uid"][::std::mem::offset_of!(__siginfo, si_uid) - 16usize];
    ["Offset of field: __siginfo::si_status"]
        [::std::mem::offset_of!(__siginfo, si_status) - 20usize];
    ["Offset of field: __siginfo::si_addr"][::std::mem::offset_of!(__siginfo, si_addr) - 24usize];
    ["Offset of field: __siginfo::si_value"][::std::mem::offset_of!(__siginfo, si_value) - 32usize];
    ["Offset of field: __siginfo::si_band"][::std::mem::offset_of!(__siginfo, si_band) - 40usize];
    ["Offset of field: __siginfo::__pad"][::std::mem::offset_of!(__siginfo, __pad) - 48usize];
};
pub type siginfo_t = __siginfo;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __sigaction_u {
    pub __sa_handler: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    pub __sa_sigaction: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: *mut __siginfo,
            arg3: *mut ::std::os::raw::c_void,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sigaction_u"][::std::mem::size_of::<__sigaction_u>() - 8usize];
    ["Alignment of __sigaction_u"][::std::mem::align_of::<__sigaction_u>() - 8usize];
    ["Offset of field: __sigaction_u::__sa_handler"]
        [::std::mem::offset_of!(__sigaction_u, __sa_handler) - 0usize];
    ["Offset of field: __sigaction_u::__sa_sigaction"]
        [::std::mem::offset_of!(__sigaction_u, __sa_sigaction) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __sigaction {
    pub __sigaction_u: __sigaction_u,
    pub sa_tramp: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: ::std::os::raw::c_int,
            arg3: ::std::os::raw::c_int,
            arg4: *mut siginfo_t,
            arg5: *mut ::std::os::raw::c_void,
        ),
    >,
    pub sa_mask: sigset_t,
    pub sa_flags: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sigaction"][::std::mem::size_of::<__sigaction>() - 24usize];
    ["Alignment of __sigaction"][::std::mem::align_of::<__sigaction>() - 8usize];
    ["Offset of field: __sigaction::__sigaction_u"]
        [::std::mem::offset_of!(__sigaction, __sigaction_u) - 0usize];
    ["Offset of field: __sigaction::sa_tramp"]
        [::std::mem::offset_of!(__sigaction, sa_tramp) - 8usize];
    ["Offset of field: __sigaction::sa_mask"]
        [::std::mem::offset_of!(__sigaction, sa_mask) - 16usize];
    ["Offset of field: __sigaction::sa_flags"]
        [::std::mem::offset_of!(__sigaction, sa_flags) - 20usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigaction {
    pub __sigaction_u: __sigaction_u,
    pub sa_mask: sigset_t,
    pub sa_flags: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sigaction"][::std::mem::size_of::<sigaction>() - 16usize];
    ["Alignment of sigaction"][::std::mem::align_of::<sigaction>() - 8usize];
    ["Offset of field: sigaction::__sigaction_u"]
        [::std::mem::offset_of!(sigaction, __sigaction_u) - 0usize];
    ["Offset of field: sigaction::sa_mask"][::std::mem::offset_of!(sigaction, sa_mask) - 8usize];
    ["Offset of field: sigaction::sa_flags"][::std::mem::offset_of!(sigaction, sa_flags) - 12usize];
};
pub type sig_t = ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigvec {
    pub sv_handler: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    pub sv_mask: ::std::os::raw::c_int,
    pub sv_flags: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sigvec"][::std::mem::size_of::<sigvec>() - 16usize];
    ["Alignment of sigvec"][::std::mem::align_of::<sigvec>() - 8usize];
    ["Offset of field: sigvec::sv_handler"][::std::mem::offset_of!(sigvec, sv_handler) - 0usize];
    ["Offset of field: sigvec::sv_mask"][::std::mem::offset_of!(sigvec, sv_mask) - 8usize];
    ["Offset of field: sigvec::sv_flags"][::std::mem::offset_of!(sigvec, sv_flags) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigstack {
    pub ss_sp: *mut ::std::os::raw::c_char,
    pub ss_onstack: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sigstack"][::std::mem::size_of::<sigstack>() - 16usize];
    ["Alignment of sigstack"][::std::mem::align_of::<sigstack>() - 8usize];
    ["Offset of field: sigstack::ss_sp"][::std::mem::offset_of!(sigstack, ss_sp) - 0usize];
    ["Offset of field: sigstack::ss_onstack"]
        [::std::mem::offset_of!(sigstack, ss_onstack) - 8usize];
};
unsafe extern "C" {
    pub fn signal(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
        ),
    >;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __darwin_time_t,
    pub tv_usec: __darwin_suseconds_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timeval"][::std::mem::size_of::<timeval>() - 16usize];
    ["Alignment of timeval"][::std::mem::align_of::<timeval>() - 8usize];
    ["Offset of field: timeval::tv_sec"][::std::mem::offset_of!(timeval, tv_sec) - 0usize];
    ["Offset of field: timeval::tv_usec"][::std::mem::offset_of!(timeval, tv_usec) - 8usize];
};
pub type rlim_t = __uint64_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage {
    pub ru_utime: timeval,
    pub ru_stime: timeval,
    pub ru_maxrss: ::std::os::raw::c_long,
    pub ru_ixrss: ::std::os::raw::c_long,
    pub ru_idrss: ::std::os::raw::c_long,
    pub ru_isrss: ::std::os::raw::c_long,
    pub ru_minflt: ::std::os::raw::c_long,
    pub ru_majflt: ::std::os::raw::c_long,
    pub ru_nswap: ::std::os::raw::c_long,
    pub ru_inblock: ::std::os::raw::c_long,
    pub ru_oublock: ::std::os::raw::c_long,
    pub ru_msgsnd: ::std::os::raw::c_long,
    pub ru_msgrcv: ::std::os::raw::c_long,
    pub ru_nsignals: ::std::os::raw::c_long,
    pub ru_nvcsw: ::std::os::raw::c_long,
    pub ru_nivcsw: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rusage"][::std::mem::size_of::<rusage>() - 144usize];
    ["Alignment of rusage"][::std::mem::align_of::<rusage>() - 8usize];
    ["Offset of field: rusage::ru_utime"][::std::mem::offset_of!(rusage, ru_utime) - 0usize];
    ["Offset of field: rusage::ru_stime"][::std::mem::offset_of!(rusage, ru_stime) - 16usize];
    ["Offset of field: rusage::ru_maxrss"][::std::mem::offset_of!(rusage, ru_maxrss) - 32usize];
    ["Offset of field: rusage::ru_ixrss"][::std::mem::offset_of!(rusage, ru_ixrss) - 40usize];
    ["Offset of field: rusage::ru_idrss"][::std::mem::offset_of!(rusage, ru_idrss) - 48usize];
    ["Offset of field: rusage::ru_isrss"][::std::mem::offset_of!(rusage, ru_isrss) - 56usize];
    ["Offset of field: rusage::ru_minflt"][::std::mem::offset_of!(rusage, ru_minflt) - 64usize];
    ["Offset of field: rusage::ru_majflt"][::std::mem::offset_of!(rusage, ru_majflt) - 72usize];
    ["Offset of field: rusage::ru_nswap"][::std::mem::offset_of!(rusage, ru_nswap) - 80usize];
    ["Offset of field: rusage::ru_inblock"][::std::mem::offset_of!(rusage, ru_inblock) - 88usize];
    ["Offset of field: rusage::ru_oublock"][::std::mem::offset_of!(rusage, ru_oublock) - 96usize];
    ["Offset of field: rusage::ru_msgsnd"][::std::mem::offset_of!(rusage, ru_msgsnd) - 104usize];
    ["Offset of field: rusage::ru_msgrcv"][::std::mem::offset_of!(rusage, ru_msgrcv) - 112usize];
    ["Offset of field: rusage::ru_nsignals"]
        [::std::mem::offset_of!(rusage, ru_nsignals) - 120usize];
    ["Offset of field: rusage::ru_nvcsw"][::std::mem::offset_of!(rusage, ru_nvcsw) - 128usize];
    ["Offset of field: rusage::ru_nivcsw"][::std::mem::offset_of!(rusage, ru_nivcsw) - 136usize];
};
pub type rusage_info_t = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v0 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rusage_info_v0"][::std::mem::size_of::<rusage_info_v0>() - 96usize];
    ["Alignment of rusage_info_v0"][::std::mem::align_of::<rusage_info_v0>() - 8usize];
    ["Offset of field: rusage_info_v0::ri_uuid"]
        [::std::mem::offset_of!(rusage_info_v0, ri_uuid) - 0usize];
    ["Offset of field: rusage_info_v0::ri_user_time"]
        [::std::mem::offset_of!(rusage_info_v0, ri_user_time) - 16usize];
    ["Offset of field: rusage_info_v0::ri_system_time"]
        [::std::mem::offset_of!(rusage_info_v0, ri_system_time) - 24usize];
    ["Offset of field: rusage_info_v0::ri_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v0, ri_pkg_idle_wkups) - 32usize];
    ["Offset of field: rusage_info_v0::ri_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v0, ri_interrupt_wkups) - 40usize];
    ["Offset of field: rusage_info_v0::ri_pageins"]
        [::std::mem::offset_of!(rusage_info_v0, ri_pageins) - 48usize];
    ["Offset of field: rusage_info_v0::ri_wired_size"]
        [::std::mem::offset_of!(rusage_info_v0, ri_wired_size) - 56usize];
    ["Offset of field: rusage_info_v0::ri_resident_size"]
        [::std::mem::offset_of!(rusage_info_v0, ri_resident_size) - 64usize];
    ["Offset of field: rusage_info_v0::ri_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v0, ri_phys_footprint) - 72usize];
    ["Offset of field: rusage_info_v0::ri_proc_start_abstime"]
        [::std::mem::offset_of!(rusage_info_v0, ri_proc_start_abstime) - 80usize];
    ["Offset of field: rusage_info_v0::ri_proc_exit_abstime"]
        [::std::mem::offset_of!(rusage_info_v0, ri_proc_exit_abstime) - 88usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v1 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rusage_info_v1"][::std::mem::size_of::<rusage_info_v1>() - 144usize];
    ["Alignment of rusage_info_v1"][::std::mem::align_of::<rusage_info_v1>() - 8usize];
    ["Offset of field: rusage_info_v1::ri_uuid"]
        [::std::mem::offset_of!(rusage_info_v1, ri_uuid) - 0usize];
    ["Offset of field: rusage_info_v1::ri_user_time"]
        [::std::mem::offset_of!(rusage_info_v1, ri_user_time) - 16usize];
    ["Offset of field: rusage_info_v1::ri_system_time"]
        [::std::mem::offset_of!(rusage_info_v1, ri_system_time) - 24usize];
    ["Offset of field: rusage_info_v1::ri_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v1, ri_pkg_idle_wkups) - 32usize];
    ["Offset of field: rusage_info_v1::ri_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v1, ri_interrupt_wkups) - 40usize];
    ["Offset of field: rusage_info_v1::ri_pageins"]
        [::std::mem::offset_of!(rusage_info_v1, ri_pageins) - 48usize];
    ["Offset of field: rusage_info_v1::ri_wired_size"]
        [::std::mem::offset_of!(rusage_info_v1, ri_wired_size) - 56usize];
    ["Offset of field: rusage_info_v1::ri_resident_size"]
        [::std::mem::offset_of!(rusage_info_v1, ri_resident_size) - 64usize];
    ["Offset of field: rusage_info_v1::ri_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v1, ri_phys_footprint) - 72usize];
    ["Offset of field: rusage_info_v1::ri_proc_start_abstime"]
        [::std::mem::offset_of!(rusage_info_v1, ri_proc_start_abstime) - 80usize];
    ["Offset of field: rusage_info_v1::ri_proc_exit_abstime"]
        [::std::mem::offset_of!(rusage_info_v1, ri_proc_exit_abstime) - 88usize];
    ["Offset of field: rusage_info_v1::ri_child_user_time"]
        [::std::mem::offset_of!(rusage_info_v1, ri_child_user_time) - 96usize];
    ["Offset of field: rusage_info_v1::ri_child_system_time"]
        [::std::mem::offset_of!(rusage_info_v1, ri_child_system_time) - 104usize];
    ["Offset of field: rusage_info_v1::ri_child_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v1, ri_child_pkg_idle_wkups) - 112usize];
    ["Offset of field: rusage_info_v1::ri_child_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v1, ri_child_interrupt_wkups) - 120usize];
    ["Offset of field: rusage_info_v1::ri_child_pageins"]
        [::std::mem::offset_of!(rusage_info_v1, ri_child_pageins) - 128usize];
    ["Offset of field: rusage_info_v1::ri_child_elapsed_abstime"]
        [::std::mem::offset_of!(rusage_info_v1, ri_child_elapsed_abstime) - 136usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v2 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rusage_info_v2"][::std::mem::size_of::<rusage_info_v2>() - 160usize];
    ["Alignment of rusage_info_v2"][::std::mem::align_of::<rusage_info_v2>() - 8usize];
    ["Offset of field: rusage_info_v2::ri_uuid"]
        [::std::mem::offset_of!(rusage_info_v2, ri_uuid) - 0usize];
    ["Offset of field: rusage_info_v2::ri_user_time"]
        [::std::mem::offset_of!(rusage_info_v2, ri_user_time) - 16usize];
    ["Offset of field: rusage_info_v2::ri_system_time"]
        [::std::mem::offset_of!(rusage_info_v2, ri_system_time) - 24usize];
    ["Offset of field: rusage_info_v2::ri_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v2, ri_pkg_idle_wkups) - 32usize];
    ["Offset of field: rusage_info_v2::ri_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v2, ri_interrupt_wkups) - 40usize];
    ["Offset of field: rusage_info_v2::ri_pageins"]
        [::std::mem::offset_of!(rusage_info_v2, ri_pageins) - 48usize];
    ["Offset of field: rusage_info_v2::ri_wired_size"]
        [::std::mem::offset_of!(rusage_info_v2, ri_wired_size) - 56usize];
    ["Offset of field: rusage_info_v2::ri_resident_size"]
        [::std::mem::offset_of!(rusage_info_v2, ri_resident_size) - 64usize];
    ["Offset of field: rusage_info_v2::ri_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v2, ri_phys_footprint) - 72usize];
    ["Offset of field: rusage_info_v2::ri_proc_start_abstime"]
        [::std::mem::offset_of!(rusage_info_v2, ri_proc_start_abstime) - 80usize];
    ["Offset of field: rusage_info_v2::ri_proc_exit_abstime"]
        [::std::mem::offset_of!(rusage_info_v2, ri_proc_exit_abstime) - 88usize];
    ["Offset of field: rusage_info_v2::ri_child_user_time"]
        [::std::mem::offset_of!(rusage_info_v2, ri_child_user_time) - 96usize];
    ["Offset of field: rusage_info_v2::ri_child_system_time"]
        [::std::mem::offset_of!(rusage_info_v2, ri_child_system_time) - 104usize];
    ["Offset of field: rusage_info_v2::ri_child_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v2, ri_child_pkg_idle_wkups) - 112usize];
    ["Offset of field: rusage_info_v2::ri_child_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v2, ri_child_interrupt_wkups) - 120usize];
    ["Offset of field: rusage_info_v2::ri_child_pageins"]
        [::std::mem::offset_of!(rusage_info_v2, ri_child_pageins) - 128usize];
    ["Offset of field: rusage_info_v2::ri_child_elapsed_abstime"]
        [::std::mem::offset_of!(rusage_info_v2, ri_child_elapsed_abstime) - 136usize];
    ["Offset of field: rusage_info_v2::ri_diskio_bytesread"]
        [::std::mem::offset_of!(rusage_info_v2, ri_diskio_bytesread) - 144usize];
    ["Offset of field: rusage_info_v2::ri_diskio_byteswritten"]
        [::std::mem::offset_of!(rusage_info_v2, ri_diskio_byteswritten) - 152usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v3 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rusage_info_v3"][::std::mem::size_of::<rusage_info_v3>() - 232usize];
    ["Alignment of rusage_info_v3"][::std::mem::align_of::<rusage_info_v3>() - 8usize];
    ["Offset of field: rusage_info_v3::ri_uuid"]
        [::std::mem::offset_of!(rusage_info_v3, ri_uuid) - 0usize];
    ["Offset of field: rusage_info_v3::ri_user_time"]
        [::std::mem::offset_of!(rusage_info_v3, ri_user_time) - 16usize];
    ["Offset of field: rusage_info_v3::ri_system_time"]
        [::std::mem::offset_of!(rusage_info_v3, ri_system_time) - 24usize];
    ["Offset of field: rusage_info_v3::ri_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v3, ri_pkg_idle_wkups) - 32usize];
    ["Offset of field: rusage_info_v3::ri_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v3, ri_interrupt_wkups) - 40usize];
    ["Offset of field: rusage_info_v3::ri_pageins"]
        [::std::mem::offset_of!(rusage_info_v3, ri_pageins) - 48usize];
    ["Offset of field: rusage_info_v3::ri_wired_size"]
        [::std::mem::offset_of!(rusage_info_v3, ri_wired_size) - 56usize];
    ["Offset of field: rusage_info_v3::ri_resident_size"]
        [::std::mem::offset_of!(rusage_info_v3, ri_resident_size) - 64usize];
    ["Offset of field: rusage_info_v3::ri_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v3, ri_phys_footprint) - 72usize];
    ["Offset of field: rusage_info_v3::ri_proc_start_abstime"]
        [::std::mem::offset_of!(rusage_info_v3, ri_proc_start_abstime) - 80usize];
    ["Offset of field: rusage_info_v3::ri_proc_exit_abstime"]
        [::std::mem::offset_of!(rusage_info_v3, ri_proc_exit_abstime) - 88usize];
    ["Offset of field: rusage_info_v3::ri_child_user_time"]
        [::std::mem::offset_of!(rusage_info_v3, ri_child_user_time) - 96usize];
    ["Offset of field: rusage_info_v3::ri_child_system_time"]
        [::std::mem::offset_of!(rusage_info_v3, ri_child_system_time) - 104usize];
    ["Offset of field: rusage_info_v3::ri_child_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v3, ri_child_pkg_idle_wkups) - 112usize];
    ["Offset of field: rusage_info_v3::ri_child_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v3, ri_child_interrupt_wkups) - 120usize];
    ["Offset of field: rusage_info_v3::ri_child_pageins"]
        [::std::mem::offset_of!(rusage_info_v3, ri_child_pageins) - 128usize];
    ["Offset of field: rusage_info_v3::ri_child_elapsed_abstime"]
        [::std::mem::offset_of!(rusage_info_v3, ri_child_elapsed_abstime) - 136usize];
    ["Offset of field: rusage_info_v3::ri_diskio_bytesread"]
        [::std::mem::offset_of!(rusage_info_v3, ri_diskio_bytesread) - 144usize];
    ["Offset of field: rusage_info_v3::ri_diskio_byteswritten"]
        [::std::mem::offset_of!(rusage_info_v3, ri_diskio_byteswritten) - 152usize];
    ["Offset of field: rusage_info_v3::ri_cpu_time_qos_default"]
        [::std::mem::offset_of!(rusage_info_v3, ri_cpu_time_qos_default) - 160usize];
    ["Offset of field: rusage_info_v3::ri_cpu_time_qos_maintenance"]
        [::std::mem::offset_of!(rusage_info_v3, ri_cpu_time_qos_maintenance) - 168usize];
    ["Offset of field: rusage_info_v3::ri_cpu_time_qos_background"]
        [::std::mem::offset_of!(rusage_info_v3, ri_cpu_time_qos_background) - 176usize];
    ["Offset of field: rusage_info_v3::ri_cpu_time_qos_utility"]
        [::std::mem::offset_of!(rusage_info_v3, ri_cpu_time_qos_utility) - 184usize];
    ["Offset of field: rusage_info_v3::ri_cpu_time_qos_legacy"]
        [::std::mem::offset_of!(rusage_info_v3, ri_cpu_time_qos_legacy) - 192usize];
    ["Offset of field: rusage_info_v3::ri_cpu_time_qos_user_initiated"]
        [::std::mem::offset_of!(rusage_info_v3, ri_cpu_time_qos_user_initiated) - 200usize];
    ["Offset of field: rusage_info_v3::ri_cpu_time_qos_user_interactive"]
        [::std::mem::offset_of!(rusage_info_v3, ri_cpu_time_qos_user_interactive) - 208usize];
    ["Offset of field: rusage_info_v3::ri_billed_system_time"]
        [::std::mem::offset_of!(rusage_info_v3, ri_billed_system_time) - 216usize];
    ["Offset of field: rusage_info_v3::ri_serviced_system_time"]
        [::std::mem::offset_of!(rusage_info_v3, ri_serviced_system_time) - 224usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v4 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
    pub ri_logical_writes: u64,
    pub ri_lifetime_max_phys_footprint: u64,
    pub ri_instructions: u64,
    pub ri_cycles: u64,
    pub ri_billed_energy: u64,
    pub ri_serviced_energy: u64,
    pub ri_interval_max_phys_footprint: u64,
    pub ri_runnable_time: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rusage_info_v4"][::std::mem::size_of::<rusage_info_v4>() - 296usize];
    ["Alignment of rusage_info_v4"][::std::mem::align_of::<rusage_info_v4>() - 8usize];
    ["Offset of field: rusage_info_v4::ri_uuid"]
        [::std::mem::offset_of!(rusage_info_v4, ri_uuid) - 0usize];
    ["Offset of field: rusage_info_v4::ri_user_time"]
        [::std::mem::offset_of!(rusage_info_v4, ri_user_time) - 16usize];
    ["Offset of field: rusage_info_v4::ri_system_time"]
        [::std::mem::offset_of!(rusage_info_v4, ri_system_time) - 24usize];
    ["Offset of field: rusage_info_v4::ri_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v4, ri_pkg_idle_wkups) - 32usize];
    ["Offset of field: rusage_info_v4::ri_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v4, ri_interrupt_wkups) - 40usize];
    ["Offset of field: rusage_info_v4::ri_pageins"]
        [::std::mem::offset_of!(rusage_info_v4, ri_pageins) - 48usize];
    ["Offset of field: rusage_info_v4::ri_wired_size"]
        [::std::mem::offset_of!(rusage_info_v4, ri_wired_size) - 56usize];
    ["Offset of field: rusage_info_v4::ri_resident_size"]
        [::std::mem::offset_of!(rusage_info_v4, ri_resident_size) - 64usize];
    ["Offset of field: rusage_info_v4::ri_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v4, ri_phys_footprint) - 72usize];
    ["Offset of field: rusage_info_v4::ri_proc_start_abstime"]
        [::std::mem::offset_of!(rusage_info_v4, ri_proc_start_abstime) - 80usize];
    ["Offset of field: rusage_info_v4::ri_proc_exit_abstime"]
        [::std::mem::offset_of!(rusage_info_v4, ri_proc_exit_abstime) - 88usize];
    ["Offset of field: rusage_info_v4::ri_child_user_time"]
        [::std::mem::offset_of!(rusage_info_v4, ri_child_user_time) - 96usize];
    ["Offset of field: rusage_info_v4::ri_child_system_time"]
        [::std::mem::offset_of!(rusage_info_v4, ri_child_system_time) - 104usize];
    ["Offset of field: rusage_info_v4::ri_child_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v4, ri_child_pkg_idle_wkups) - 112usize];
    ["Offset of field: rusage_info_v4::ri_child_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v4, ri_child_interrupt_wkups) - 120usize];
    ["Offset of field: rusage_info_v4::ri_child_pageins"]
        [::std::mem::offset_of!(rusage_info_v4, ri_child_pageins) - 128usize];
    ["Offset of field: rusage_info_v4::ri_child_elapsed_abstime"]
        [::std::mem::offset_of!(rusage_info_v4, ri_child_elapsed_abstime) - 136usize];
    ["Offset of field: rusage_info_v4::ri_diskio_bytesread"]
        [::std::mem::offset_of!(rusage_info_v4, ri_diskio_bytesread) - 144usize];
    ["Offset of field: rusage_info_v4::ri_diskio_byteswritten"]
        [::std::mem::offset_of!(rusage_info_v4, ri_diskio_byteswritten) - 152usize];
    ["Offset of field: rusage_info_v4::ri_cpu_time_qos_default"]
        [::std::mem::offset_of!(rusage_info_v4, ri_cpu_time_qos_default) - 160usize];
    ["Offset of field: rusage_info_v4::ri_cpu_time_qos_maintenance"]
        [::std::mem::offset_of!(rusage_info_v4, ri_cpu_time_qos_maintenance) - 168usize];
    ["Offset of field: rusage_info_v4::ri_cpu_time_qos_background"]
        [::std::mem::offset_of!(rusage_info_v4, ri_cpu_time_qos_background) - 176usize];
    ["Offset of field: rusage_info_v4::ri_cpu_time_qos_utility"]
        [::std::mem::offset_of!(rusage_info_v4, ri_cpu_time_qos_utility) - 184usize];
    ["Offset of field: rusage_info_v4::ri_cpu_time_qos_legacy"]
        [::std::mem::offset_of!(rusage_info_v4, ri_cpu_time_qos_legacy) - 192usize];
    ["Offset of field: rusage_info_v4::ri_cpu_time_qos_user_initiated"]
        [::std::mem::offset_of!(rusage_info_v4, ri_cpu_time_qos_user_initiated) - 200usize];
    ["Offset of field: rusage_info_v4::ri_cpu_time_qos_user_interactive"]
        [::std::mem::offset_of!(rusage_info_v4, ri_cpu_time_qos_user_interactive) - 208usize];
    ["Offset of field: rusage_info_v4::ri_billed_system_time"]
        [::std::mem::offset_of!(rusage_info_v4, ri_billed_system_time) - 216usize];
    ["Offset of field: rusage_info_v4::ri_serviced_system_time"]
        [::std::mem::offset_of!(rusage_info_v4, ri_serviced_system_time) - 224usize];
    ["Offset of field: rusage_info_v4::ri_logical_writes"]
        [::std::mem::offset_of!(rusage_info_v4, ri_logical_writes) - 232usize];
    ["Offset of field: rusage_info_v4::ri_lifetime_max_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v4, ri_lifetime_max_phys_footprint) - 240usize];
    ["Offset of field: rusage_info_v4::ri_instructions"]
        [::std::mem::offset_of!(rusage_info_v4, ri_instructions) - 248usize];
    ["Offset of field: rusage_info_v4::ri_cycles"]
        [::std::mem::offset_of!(rusage_info_v4, ri_cycles) - 256usize];
    ["Offset of field: rusage_info_v4::ri_billed_energy"]
        [::std::mem::offset_of!(rusage_info_v4, ri_billed_energy) - 264usize];
    ["Offset of field: rusage_info_v4::ri_serviced_energy"]
        [::std::mem::offset_of!(rusage_info_v4, ri_serviced_energy) - 272usize];
    ["Offset of field: rusage_info_v4::ri_interval_max_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v4, ri_interval_max_phys_footprint) - 280usize];
    ["Offset of field: rusage_info_v4::ri_runnable_time"]
        [::std::mem::offset_of!(rusage_info_v4, ri_runnable_time) - 288usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v5 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
    pub ri_logical_writes: u64,
    pub ri_lifetime_max_phys_footprint: u64,
    pub ri_instructions: u64,
    pub ri_cycles: u64,
    pub ri_billed_energy: u64,
    pub ri_serviced_energy: u64,
    pub ri_interval_max_phys_footprint: u64,
    pub ri_runnable_time: u64,
    pub ri_flags: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rusage_info_v5"][::std::mem::size_of::<rusage_info_v5>() - 304usize];
    ["Alignment of rusage_info_v5"][::std::mem::align_of::<rusage_info_v5>() - 8usize];
    ["Offset of field: rusage_info_v5::ri_uuid"]
        [::std::mem::offset_of!(rusage_info_v5, ri_uuid) - 0usize];
    ["Offset of field: rusage_info_v5::ri_user_time"]
        [::std::mem::offset_of!(rusage_info_v5, ri_user_time) - 16usize];
    ["Offset of field: rusage_info_v5::ri_system_time"]
        [::std::mem::offset_of!(rusage_info_v5, ri_system_time) - 24usize];
    ["Offset of field: rusage_info_v5::ri_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v5, ri_pkg_idle_wkups) - 32usize];
    ["Offset of field: rusage_info_v5::ri_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v5, ri_interrupt_wkups) - 40usize];
    ["Offset of field: rusage_info_v5::ri_pageins"]
        [::std::mem::offset_of!(rusage_info_v5, ri_pageins) - 48usize];
    ["Offset of field: rusage_info_v5::ri_wired_size"]
        [::std::mem::offset_of!(rusage_info_v5, ri_wired_size) - 56usize];
    ["Offset of field: rusage_info_v5::ri_resident_size"]
        [::std::mem::offset_of!(rusage_info_v5, ri_resident_size) - 64usize];
    ["Offset of field: rusage_info_v5::ri_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v5, ri_phys_footprint) - 72usize];
    ["Offset of field: rusage_info_v5::ri_proc_start_abstime"]
        [::std::mem::offset_of!(rusage_info_v5, ri_proc_start_abstime) - 80usize];
    ["Offset of field: rusage_info_v5::ri_proc_exit_abstime"]
        [::std::mem::offset_of!(rusage_info_v5, ri_proc_exit_abstime) - 88usize];
    ["Offset of field: rusage_info_v5::ri_child_user_time"]
        [::std::mem::offset_of!(rusage_info_v5, ri_child_user_time) - 96usize];
    ["Offset of field: rusage_info_v5::ri_child_system_time"]
        [::std::mem::offset_of!(rusage_info_v5, ri_child_system_time) - 104usize];
    ["Offset of field: rusage_info_v5::ri_child_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v5, ri_child_pkg_idle_wkups) - 112usize];
    ["Offset of field: rusage_info_v5::ri_child_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v5, ri_child_interrupt_wkups) - 120usize];
    ["Offset of field: rusage_info_v5::ri_child_pageins"]
        [::std::mem::offset_of!(rusage_info_v5, ri_child_pageins) - 128usize];
    ["Offset of field: rusage_info_v5::ri_child_elapsed_abstime"]
        [::std::mem::offset_of!(rusage_info_v5, ri_child_elapsed_abstime) - 136usize];
    ["Offset of field: rusage_info_v5::ri_diskio_bytesread"]
        [::std::mem::offset_of!(rusage_info_v5, ri_diskio_bytesread) - 144usize];
    ["Offset of field: rusage_info_v5::ri_diskio_byteswritten"]
        [::std::mem::offset_of!(rusage_info_v5, ri_diskio_byteswritten) - 152usize];
    ["Offset of field: rusage_info_v5::ri_cpu_time_qos_default"]
        [::std::mem::offset_of!(rusage_info_v5, ri_cpu_time_qos_default) - 160usize];
    ["Offset of field: rusage_info_v5::ri_cpu_time_qos_maintenance"]
        [::std::mem::offset_of!(rusage_info_v5, ri_cpu_time_qos_maintenance) - 168usize];
    ["Offset of field: rusage_info_v5::ri_cpu_time_qos_background"]
        [::std::mem::offset_of!(rusage_info_v5, ri_cpu_time_qos_background) - 176usize];
    ["Offset of field: rusage_info_v5::ri_cpu_time_qos_utility"]
        [::std::mem::offset_of!(rusage_info_v5, ri_cpu_time_qos_utility) - 184usize];
    ["Offset of field: rusage_info_v5::ri_cpu_time_qos_legacy"]
        [::std::mem::offset_of!(rusage_info_v5, ri_cpu_time_qos_legacy) - 192usize];
    ["Offset of field: rusage_info_v5::ri_cpu_time_qos_user_initiated"]
        [::std::mem::offset_of!(rusage_info_v5, ri_cpu_time_qos_user_initiated) - 200usize];
    ["Offset of field: rusage_info_v5::ri_cpu_time_qos_user_interactive"]
        [::std::mem::offset_of!(rusage_info_v5, ri_cpu_time_qos_user_interactive) - 208usize];
    ["Offset of field: rusage_info_v5::ri_billed_system_time"]
        [::std::mem::offset_of!(rusage_info_v5, ri_billed_system_time) - 216usize];
    ["Offset of field: rusage_info_v5::ri_serviced_system_time"]
        [::std::mem::offset_of!(rusage_info_v5, ri_serviced_system_time) - 224usize];
    ["Offset of field: rusage_info_v5::ri_logical_writes"]
        [::std::mem::offset_of!(rusage_info_v5, ri_logical_writes) - 232usize];
    ["Offset of field: rusage_info_v5::ri_lifetime_max_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v5, ri_lifetime_max_phys_footprint) - 240usize];
    ["Offset of field: rusage_info_v5::ri_instructions"]
        [::std::mem::offset_of!(rusage_info_v5, ri_instructions) - 248usize];
    ["Offset of field: rusage_info_v5::ri_cycles"]
        [::std::mem::offset_of!(rusage_info_v5, ri_cycles) - 256usize];
    ["Offset of field: rusage_info_v5::ri_billed_energy"]
        [::std::mem::offset_of!(rusage_info_v5, ri_billed_energy) - 264usize];
    ["Offset of field: rusage_info_v5::ri_serviced_energy"]
        [::std::mem::offset_of!(rusage_info_v5, ri_serviced_energy) - 272usize];
    ["Offset of field: rusage_info_v5::ri_interval_max_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v5, ri_interval_max_phys_footprint) - 280usize];
    ["Offset of field: rusage_info_v5::ri_runnable_time"]
        [::std::mem::offset_of!(rusage_info_v5, ri_runnable_time) - 288usize];
    ["Offset of field: rusage_info_v5::ri_flags"]
        [::std::mem::offset_of!(rusage_info_v5, ri_flags) - 296usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v6 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
    pub ri_logical_writes: u64,
    pub ri_lifetime_max_phys_footprint: u64,
    pub ri_instructions: u64,
    pub ri_cycles: u64,
    pub ri_billed_energy: u64,
    pub ri_serviced_energy: u64,
    pub ri_interval_max_phys_footprint: u64,
    pub ri_runnable_time: u64,
    pub ri_flags: u64,
    pub ri_user_ptime: u64,
    pub ri_system_ptime: u64,
    pub ri_pinstructions: u64,
    pub ri_pcycles: u64,
    pub ri_energy_nj: u64,
    pub ri_penergy_nj: u64,
    pub ri_secure_time_in_system: u64,
    pub ri_secure_ptime_in_system: u64,
    pub ri_neural_footprint: u64,
    pub ri_lifetime_max_neural_footprint: u64,
    pub ri_interval_max_neural_footprint: u64,
    pub ri_reserved: [u64; 9usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rusage_info_v6"][::std::mem::size_of::<rusage_info_v6>() - 464usize];
    ["Alignment of rusage_info_v6"][::std::mem::align_of::<rusage_info_v6>() - 8usize];
    ["Offset of field: rusage_info_v6::ri_uuid"]
        [::std::mem::offset_of!(rusage_info_v6, ri_uuid) - 0usize];
    ["Offset of field: rusage_info_v6::ri_user_time"]
        [::std::mem::offset_of!(rusage_info_v6, ri_user_time) - 16usize];
    ["Offset of field: rusage_info_v6::ri_system_time"]
        [::std::mem::offset_of!(rusage_info_v6, ri_system_time) - 24usize];
    ["Offset of field: rusage_info_v6::ri_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v6, ri_pkg_idle_wkups) - 32usize];
    ["Offset of field: rusage_info_v6::ri_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v6, ri_interrupt_wkups) - 40usize];
    ["Offset of field: rusage_info_v6::ri_pageins"]
        [::std::mem::offset_of!(rusage_info_v6, ri_pageins) - 48usize];
    ["Offset of field: rusage_info_v6::ri_wired_size"]
        [::std::mem::offset_of!(rusage_info_v6, ri_wired_size) - 56usize];
    ["Offset of field: rusage_info_v6::ri_resident_size"]
        [::std::mem::offset_of!(rusage_info_v6, ri_resident_size) - 64usize];
    ["Offset of field: rusage_info_v6::ri_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v6, ri_phys_footprint) - 72usize];
    ["Offset of field: rusage_info_v6::ri_proc_start_abstime"]
        [::std::mem::offset_of!(rusage_info_v6, ri_proc_start_abstime) - 80usize];
    ["Offset of field: rusage_info_v6::ri_proc_exit_abstime"]
        [::std::mem::offset_of!(rusage_info_v6, ri_proc_exit_abstime) - 88usize];
    ["Offset of field: rusage_info_v6::ri_child_user_time"]
        [::std::mem::offset_of!(rusage_info_v6, ri_child_user_time) - 96usize];
    ["Offset of field: rusage_info_v6::ri_child_system_time"]
        [::std::mem::offset_of!(rusage_info_v6, ri_child_system_time) - 104usize];
    ["Offset of field: rusage_info_v6::ri_child_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v6, ri_child_pkg_idle_wkups) - 112usize];
    ["Offset of field: rusage_info_v6::ri_child_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v6, ri_child_interrupt_wkups) - 120usize];
    ["Offset of field: rusage_info_v6::ri_child_pageins"]
        [::std::mem::offset_of!(rusage_info_v6, ri_child_pageins) - 128usize];
    ["Offset of field: rusage_info_v6::ri_child_elapsed_abstime"]
        [::std::mem::offset_of!(rusage_info_v6, ri_child_elapsed_abstime) - 136usize];
    ["Offset of field: rusage_info_v6::ri_diskio_bytesread"]
        [::std::mem::offset_of!(rusage_info_v6, ri_diskio_bytesread) - 144usize];
    ["Offset of field: rusage_info_v6::ri_diskio_byteswritten"]
        [::std::mem::offset_of!(rusage_info_v6, ri_diskio_byteswritten) - 152usize];
    ["Offset of field: rusage_info_v6::ri_cpu_time_qos_default"]
        [::std::mem::offset_of!(rusage_info_v6, ri_cpu_time_qos_default) - 160usize];
    ["Offset of field: rusage_info_v6::ri_cpu_time_qos_maintenance"]
        [::std::mem::offset_of!(rusage_info_v6, ri_cpu_time_qos_maintenance) - 168usize];
    ["Offset of field: rusage_info_v6::ri_cpu_time_qos_background"]
        [::std::mem::offset_of!(rusage_info_v6, ri_cpu_time_qos_background) - 176usize];
    ["Offset of field: rusage_info_v6::ri_cpu_time_qos_utility"]
        [::std::mem::offset_of!(rusage_info_v6, ri_cpu_time_qos_utility) - 184usize];
    ["Offset of field: rusage_info_v6::ri_cpu_time_qos_legacy"]
        [::std::mem::offset_of!(rusage_info_v6, ri_cpu_time_qos_legacy) - 192usize];
    ["Offset of field: rusage_info_v6::ri_cpu_time_qos_user_initiated"]
        [::std::mem::offset_of!(rusage_info_v6, ri_cpu_time_qos_user_initiated) - 200usize];
    ["Offset of field: rusage_info_v6::ri_cpu_time_qos_user_interactive"]
        [::std::mem::offset_of!(rusage_info_v6, ri_cpu_time_qos_user_interactive) - 208usize];
    ["Offset of field: rusage_info_v6::ri_billed_system_time"]
        [::std::mem::offset_of!(rusage_info_v6, ri_billed_system_time) - 216usize];
    ["Offset of field: rusage_info_v6::ri_serviced_system_time"]
        [::std::mem::offset_of!(rusage_info_v6, ri_serviced_system_time) - 224usize];
    ["Offset of field: rusage_info_v6::ri_logical_writes"]
        [::std::mem::offset_of!(rusage_info_v6, ri_logical_writes) - 232usize];
    ["Offset of field: rusage_info_v6::ri_lifetime_max_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v6, ri_lifetime_max_phys_footprint) - 240usize];
    ["Offset of field: rusage_info_v6::ri_instructions"]
        [::std::mem::offset_of!(rusage_info_v6, ri_instructions) - 248usize];
    ["Offset of field: rusage_info_v6::ri_cycles"]
        [::std::mem::offset_of!(rusage_info_v6, ri_cycles) - 256usize];
    ["Offset of field: rusage_info_v6::ri_billed_energy"]
        [::std::mem::offset_of!(rusage_info_v6, ri_billed_energy) - 264usize];
    ["Offset of field: rusage_info_v6::ri_serviced_energy"]
        [::std::mem::offset_of!(rusage_info_v6, ri_serviced_energy) - 272usize];
    ["Offset of field: rusage_info_v6::ri_interval_max_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v6, ri_interval_max_phys_footprint) - 280usize];
    ["Offset of field: rusage_info_v6::ri_runnable_time"]
        [::std::mem::offset_of!(rusage_info_v6, ri_runnable_time) - 288usize];
    ["Offset of field: rusage_info_v6::ri_flags"]
        [::std::mem::offset_of!(rusage_info_v6, ri_flags) - 296usize];
    ["Offset of field: rusage_info_v6::ri_user_ptime"]
        [::std::mem::offset_of!(rusage_info_v6, ri_user_ptime) - 304usize];
    ["Offset of field: rusage_info_v6::ri_system_ptime"]
        [::std::mem::offset_of!(rusage_info_v6, ri_system_ptime) - 312usize];
    ["Offset of field: rusage_info_v6::ri_pinstructions"]
        [::std::mem::offset_of!(rusage_info_v6, ri_pinstructions) - 320usize];
    ["Offset of field: rusage_info_v6::ri_pcycles"]
        [::std::mem::offset_of!(rusage_info_v6, ri_pcycles) - 328usize];
    ["Offset of field: rusage_info_v6::ri_energy_nj"]
        [::std::mem::offset_of!(rusage_info_v6, ri_energy_nj) - 336usize];
    ["Offset of field: rusage_info_v6::ri_penergy_nj"]
        [::std::mem::offset_of!(rusage_info_v6, ri_penergy_nj) - 344usize];
    ["Offset of field: rusage_info_v6::ri_secure_time_in_system"]
        [::std::mem::offset_of!(rusage_info_v6, ri_secure_time_in_system) - 352usize];
    ["Offset of field: rusage_info_v6::ri_secure_ptime_in_system"]
        [::std::mem::offset_of!(rusage_info_v6, ri_secure_ptime_in_system) - 360usize];
    ["Offset of field: rusage_info_v6::ri_neural_footprint"]
        [::std::mem::offset_of!(rusage_info_v6, ri_neural_footprint) - 368usize];
    ["Offset of field: rusage_info_v6::ri_lifetime_max_neural_footprint"]
        [::std::mem::offset_of!(rusage_info_v6, ri_lifetime_max_neural_footprint) - 376usize];
    ["Offset of field: rusage_info_v6::ri_interval_max_neural_footprint"]
        [::std::mem::offset_of!(rusage_info_v6, ri_interval_max_neural_footprint) - 384usize];
    ["Offset of field: rusage_info_v6::ri_reserved"]
        [::std::mem::offset_of!(rusage_info_v6, ri_reserved) - 392usize];
};
pub type rusage_info_current = rusage_info_v6;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rlimit {
    pub rlim_cur: rlim_t,
    pub rlim_max: rlim_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rlimit"][::std::mem::size_of::<rlimit>() - 16usize];
    ["Alignment of rlimit"][::std::mem::align_of::<rlimit>() - 8usize];
    ["Offset of field: rlimit::rlim_cur"][::std::mem::offset_of!(rlimit, rlim_cur) - 0usize];
    ["Offset of field: rlimit::rlim_max"][::std::mem::offset_of!(rlimit, rlim_max) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proc_rlimit_control_wakeupmon {
    pub wm_flags: u32,
    pub wm_rate: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of proc_rlimit_control_wakeupmon"]
        [::std::mem::size_of::<proc_rlimit_control_wakeupmon>() - 8usize];
    ["Alignment of proc_rlimit_control_wakeupmon"]
        [::std::mem::align_of::<proc_rlimit_control_wakeupmon>() - 4usize];
    ["Offset of field: proc_rlimit_control_wakeupmon::wm_flags"]
        [::std::mem::offset_of!(proc_rlimit_control_wakeupmon, wm_flags) - 0usize];
    ["Offset of field: proc_rlimit_control_wakeupmon::wm_rate"]
        [::std::mem::offset_of!(proc_rlimit_control_wakeupmon, wm_rate) - 4usize];
};
unsafe extern "C" {
    pub fn getpriority(arg1: ::std::os::raw::c_int, arg2: id_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getiopolicy_np(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getrlimit(arg1: ::std::os::raw::c_int, arg2: *mut rlimit) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getrusage(arg1: ::std::os::raw::c_int, arg2: *mut rusage) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setpriority(
        arg1: ::std::os::raw::c_int,
        arg2: id_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setiopolicy_np(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setrlimit(arg1: ::std::os::raw::c_int, arg2: *const rlimit) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union wait {
    pub w_status: ::std::os::raw::c_int,
    pub w_T: wait__bindgen_ty_1,
    pub w_S: wait__bindgen_ty_2,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct wait__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of wait__bindgen_ty_1"][::std::mem::size_of::<wait__bindgen_ty_1>() - 4usize];
    ["Alignment of wait__bindgen_ty_1"][::std::mem::align_of::<wait__bindgen_ty_1>() - 4usize];
};
impl wait__bindgen_ty_1 {
    #[inline]
    pub fn w_Termsig(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 7u8) as u32) }
    }
    #[inline]
    pub fn set_w_Termsig(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn w_Termsig_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                7u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_w_Termsig_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                7u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn w_Coredump(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_w_Coredump(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn w_Coredump_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                7usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_w_Coredump_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                7usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn w_Retcode(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_w_Retcode(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn w_Retcode_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_w_Retcode_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn w_Filler(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_w_Filler(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn w_Filler_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                16u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_w_Filler_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        w_Termsig: ::std::os::raw::c_uint,
        w_Coredump: ::std::os::raw::c_uint,
        w_Retcode: ::std::os::raw::c_uint,
        w_Filler: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 7u8, {
            let w_Termsig: u32 = unsafe { ::std::mem::transmute(w_Termsig) };
            w_Termsig as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let w_Coredump: u32 = unsafe { ::std::mem::transmute(w_Coredump) };
            w_Coredump as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let w_Retcode: u32 = unsafe { ::std::mem::transmute(w_Retcode) };
            w_Retcode as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let w_Filler: u32 = unsafe { ::std::mem::transmute(w_Filler) };
            w_Filler as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct wait__bindgen_ty_2 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of wait__bindgen_ty_2"][::std::mem::size_of::<wait__bindgen_ty_2>() - 4usize];
    ["Alignment of wait__bindgen_ty_2"][::std::mem::align_of::<wait__bindgen_ty_2>() - 4usize];
};
impl wait__bindgen_ty_2 {
    #[inline]
    pub fn w_Stopval(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_w_Stopval(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn w_Stopval_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_w_Stopval_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn w_Stopsig(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_w_Stopsig(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn w_Stopsig_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_w_Stopsig_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn w_Filler(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_w_Filler(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn w_Filler_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                16u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_w_Filler_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        w_Stopval: ::std::os::raw::c_uint,
        w_Stopsig: ::std::os::raw::c_uint,
        w_Filler: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let w_Stopval: u32 = unsafe { ::std::mem::transmute(w_Stopval) };
            w_Stopval as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let w_Stopsig: u32 = unsafe { ::std::mem::transmute(w_Stopsig) };
            w_Stopsig as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let w_Filler: u32 = unsafe { ::std::mem::transmute(w_Filler) };
            w_Filler as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of wait"][::std::mem::size_of::<wait>() - 4usize];
    ["Alignment of wait"][::std::mem::align_of::<wait>() - 4usize];
    ["Offset of field: wait::w_status"][::std::mem::offset_of!(wait, w_status) - 0usize];
    ["Offset of field: wait::w_T"][::std::mem::offset_of!(wait, w_T) - 0usize];
    ["Offset of field: wait::w_S"][::std::mem::offset_of!(wait, w_S) - 0usize];
};
unsafe extern "C" {
    pub fn wait(arg1: *mut ::std::os::raw::c_int) -> pid_t;
}
unsafe extern "C" {
    pub fn waitpid(
        arg1: pid_t,
        arg2: *mut ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> pid_t;
}
unsafe extern "C" {
    pub fn waitid(
        arg1: idtype_t,
        arg2: id_t,
        arg3: *mut siginfo_t,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn wait3(
        arg1: *mut ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut rusage,
    ) -> pid_t;
}
unsafe extern "C" {
    pub fn wait4(
        arg1: pid_t,
        arg2: *mut ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut rusage,
    ) -> pid_t;
}
unsafe extern "C" {
    pub fn alloca(arg1: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
pub type ct_rune_t = __darwin_ct_rune_t;
pub type rune_t = __darwin_rune_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of div_t"][::std::mem::size_of::<div_t>() - 8usize];
    ["Alignment of div_t"][::std::mem::align_of::<div_t>() - 4usize];
    ["Offset of field: div_t::quot"][::std::mem::offset_of!(div_t, quot) - 0usize];
    ["Offset of field: div_t::rem"][::std::mem::offset_of!(div_t, rem) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ldiv_t"][::std::mem::size_of::<ldiv_t>() - 16usize];
    ["Alignment of ldiv_t"][::std::mem::align_of::<ldiv_t>() - 8usize];
    ["Offset of field: ldiv_t::quot"][::std::mem::offset_of!(ldiv_t, quot) - 0usize];
    ["Offset of field: ldiv_t::rem"][::std::mem::offset_of!(ldiv_t, rem) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lldiv_t"][::std::mem::size_of::<lldiv_t>() - 16usize];
    ["Alignment of lldiv_t"][::std::mem::align_of::<lldiv_t>() - 8usize];
    ["Offset of field: lldiv_t::quot"][::std::mem::offset_of!(lldiv_t, quot) - 0usize];
    ["Offset of field: lldiv_t::rem"][::std::mem::offset_of!(lldiv_t, rem) - 8usize];
};
unsafe extern "C" {
    pub static mut __mb_cur_max: ::std::os::raw::c_int;
}
pub type malloc_type_id_t = ::std::os::raw::c_ulonglong;
unsafe extern "C" {
    pub fn malloc_type_malloc(
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn malloc_type_calloc(
        count: usize,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn malloc_type_free(ptr: *mut ::std::os::raw::c_void, type_id: malloc_type_id_t);
}
unsafe extern "C" {
    pub fn malloc_type_realloc(
        ptr: *mut ::std::os::raw::c_void,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn malloc_type_valloc(
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn malloc_type_aligned_alloc(
        alignment: usize,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn malloc_type_posix_memalign(
        memptr: *mut *mut ::std::os::raw::c_void,
        alignment: usize,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _malloc_zone_t {
    _unused: [u8; 0],
}
pub type malloc_zone_t = _malloc_zone_t;
unsafe extern "C" {
    pub fn malloc_type_zone_malloc(
        zone: *mut malloc_zone_t,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn malloc_type_zone_calloc(
        zone: *mut malloc_zone_t,
        count: usize,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn malloc_type_zone_free(
        zone: *mut malloc_zone_t,
        ptr: *mut ::std::os::raw::c_void,
        type_id: malloc_type_id_t,
    );
}
unsafe extern "C" {
    pub fn malloc_type_zone_realloc(
        zone: *mut malloc_zone_t,
        ptr: *mut ::std::os::raw::c_void,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn malloc_type_zone_valloc(
        zone: *mut malloc_zone_t,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn malloc_type_zone_memalign(
        zone: *mut malloc_zone_t,
        alignment: usize,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn malloc(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn calloc(
        __count: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn free(arg1: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn realloc(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn reallocf(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn valloc(__size: usize) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn aligned_alloc(
        __alignment: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: usize,
        __size: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn abort() -> !;
}
unsafe extern "C" {
    pub fn abs(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn atexit(arg1: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn at_quick_exit(
        arg1: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn atof(arg1: *const ::std::os::raw::c_char) -> f64;
}
unsafe extern "C" {
    pub fn atoi(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn atol(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn atoll(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn bsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn div(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> div_t;
}
unsafe extern "C" {
    pub fn exit(arg1: ::std::os::raw::c_int) -> !;
}
unsafe extern "C" {
    pub fn getenv(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn labs(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn ldiv(arg1: ::std::os::raw::c_long, arg2: ::std::os::raw::c_long) -> ldiv_t;
}
unsafe extern "C" {
    pub fn llabs(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn lldiv(arg1: ::std::os::raw::c_longlong, arg2: ::std::os::raw::c_longlong) -> lldiv_t;
}
unsafe extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: usize) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mbstowcs(arg1: *mut wchar_t, arg2: *const ::std::os::raw::c_char, arg3: usize) -> usize;
}
unsafe extern "C" {
    pub fn mbtowc(
        arg1: *mut wchar_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn qsort(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
unsafe extern "C" {
    pub fn quick_exit(arg1: ::std::os::raw::c_int) -> !;
}
unsafe extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn srand(arg1: ::std::os::raw::c_uint);
}
unsafe extern "C" {
    pub fn strtod(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
unsafe extern "C" {
    pub fn strtof(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
unsafe extern "C" {
    pub fn strtol(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn strtold(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
unsafe extern "C" {
    pub fn strtoll(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn strtoul(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn strtoull(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn system(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn wcstombs(arg1: *mut ::std::os::raw::c_char, arg2: *const wchar_t, arg3: usize) -> usize;
}
unsafe extern "C" {
    pub fn wctomb(arg1: *mut ::std::os::raw::c_char, arg2: wchar_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _Exit(arg1: ::std::os::raw::c_int) -> !;
}
unsafe extern "C" {
    pub fn a64l(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn drand48() -> f64;
}
unsafe extern "C" {
    pub fn ecvt(
        arg1: f64,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn erand48(arg1: *mut ::std::os::raw::c_ushort) -> f64;
}
unsafe extern "C" {
    pub fn fcvt(
        arg1: f64,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn gcvt(
        arg1: f64,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn getsubopt(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const *mut ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn grantpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn initstate(
        arg1: ::std::os::raw::c_uint,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn jrand48(arg1: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn l64a(arg1: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn lcong48(arg1: *mut ::std::os::raw::c_ushort);
}
unsafe extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn mktemp(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn mkstemp(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn nrand48(arg1: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn posix_openpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ptsname(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ptsname_r(
        fildes: ::std::os::raw::c_int,
        buffer: *mut ::std::os::raw::c_char,
        buflen: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn putenv(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn rand_r(arg1: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}_realpath$DARWIN_EXTSN"]
    pub fn realpath(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn seed48(arg1: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
}
unsafe extern "C" {
    pub fn setenv(
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __overwrite: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setkey(arg1: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn setstate(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn srand48(arg1: ::std::os::raw::c_long);
}
unsafe extern "C" {
    pub fn srandom(arg1: ::std::os::raw::c_uint);
}
unsafe extern "C" {
    pub fn unlockpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn unsetenv(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
pub type dev_t = __darwin_dev_t;
pub type mode_t = __darwin_mode_t;
unsafe extern "C" {
    pub fn arc4random() -> u32;
}
unsafe extern "C" {
    pub fn arc4random_addrandom(arg1: *mut ::std::os::raw::c_uchar, arg2: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn arc4random_buf(__buf: *mut ::std::os::raw::c_void, __nbytes: usize);
}
unsafe extern "C" {
    pub fn arc4random_stir();
}
unsafe extern "C" {
    pub fn arc4random_uniform(__upper_bound: u32) -> u32;
}
unsafe extern "C" {
    pub fn atexit_b(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn bsearch_b(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn cgetcap(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn cgetclose() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn cgetent(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn cgetfirst(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn cgetmatch(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn cgetnext(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn cgetnum(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn cgetset(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn cgetstr(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn cgetustr(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn daemon(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn devname(arg1: dev_t, arg2: mode_t) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn devname_r(
        arg1: dev_t,
        arg2: mode_t,
        buf: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn getbsize(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_long,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn getloadavg(arg1: *mut f64, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getprogname() -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn setprogname(arg1: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn heapsort(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn heapsort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mergesort(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mergesort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn psort(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
unsafe extern "C" {
    pub fn psort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn psort_r(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        arg1: *mut ::std::os::raw::c_void,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
                arg3: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
unsafe extern "C" {
    pub fn qsort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn qsort_r(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        arg1: *mut ::std::os::raw::c_void,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
                arg3: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
unsafe extern "C" {
    pub fn radixsort(
        __base: *mut *const ::std::os::raw::c_uchar,
        __nel: ::std::os::raw::c_int,
        __table: *const ::std::os::raw::c_uchar,
        __endbyte: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn rpmatch(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sradixsort(
        __base: *mut *const ::std::os::raw::c_uchar,
        __nel: ::std::os::raw::c_int,
        __table: *const ::std::os::raw::c_uchar,
        __endbyte: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sranddev();
}
unsafe extern "C" {
    pub fn srandomdev();
}
unsafe extern "C" {
    pub fn strtonum(
        __numstr: *const ::std::os::raw::c_char,
        __minval: ::std::os::raw::c_longlong,
        __maxval: ::std::os::raw::c_longlong,
        __errstrp: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn strtoq(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn strtouq(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub static mut suboptarg: *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn memchr(
        __s: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn memcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn memcpy(
        __dst: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn memmove(
        __dst: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __len: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn memset(
        __b: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __len: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn strcat(
        __s1: *mut ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strcmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strcoll(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strcpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strcspn(
        __s: *const ::std::os::raw::c_char,
        __charset: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn strerror(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strlen(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn strncat(
        __s1: *mut ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strncmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strncpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strpbrk(
        __s: *const ::std::os::raw::c_char,
        __charset: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strrchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strspn(
        __s: *const ::std::os::raw::c_char,
        __charset: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn strstr(
        __big: *const ::std::os::raw::c_char,
        __little: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strtok(
        __str: *mut ::std::os::raw::c_char,
        __sep: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strxfrm(
        __s1: *mut ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn strtok_r(
        __str: *mut ::std::os::raw::c_char,
        __sep: *const ::std::os::raw::c_char,
        __lasts: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strerror_r(
        __errnum: ::std::os::raw::c_int,
        __strerrbuf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strdup(__s1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn memccpy(
        __dst: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn stpcpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn stpncpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strndup(
        __s1: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strnlen(__s1: *const ::std::os::raw::c_char, __n: usize) -> usize;
}
unsafe extern "C" {
    pub fn strsignal(__sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
pub type errno_t = ::std::os::raw::c_int;
unsafe extern "C" {
    pub fn memset_s(
        __s: *mut ::std::os::raw::c_void,
        __smax: rsize_t,
        __c: ::std::os::raw::c_int,
        __n: rsize_t,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn memmem(
        __big: *const ::std::os::raw::c_void,
        __big_len: usize,
        __little: *const ::std::os::raw::c_void,
        __little_len: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn memset_pattern4(
        __b: *mut ::std::os::raw::c_void,
        __pattern4: *const ::std::os::raw::c_void,
        __len: usize,
    );
}
unsafe extern "C" {
    pub fn memset_pattern8(
        __b: *mut ::std::os::raw::c_void,
        __pattern8: *const ::std::os::raw::c_void,
        __len: usize,
    );
}
unsafe extern "C" {
    pub fn memset_pattern16(
        __b: *mut ::std::os::raw::c_void,
        __pattern16: *const ::std::os::raw::c_void,
        __len: usize,
    );
}
unsafe extern "C" {
    pub fn strcasestr(
        __big: *const ::std::os::raw::c_char,
        __little: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strnstr(
        __big: *const ::std::os::raw::c_char,
        __little: *const ::std::os::raw::c_char,
        __len: usize,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strlcat(
        __dst: *mut ::std::os::raw::c_char,
        __source: *const ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn strlcpy(
        __dst: *mut ::std::os::raw::c_char,
        __source: *const ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn strmode(__mode: ::std::os::raw::c_int, __bp: *mut ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn strsep(
        __stringp: *mut *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn swab(
        arg1: *const ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
        arg3: isize,
    );
}
unsafe extern "C" {
    pub fn timingsafe_bcmp(
        __b1: *const ::std::os::raw::c_void,
        __b2: *const ::std::os::raw::c_void,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strsignal_r(
        __sig: ::std::os::raw::c_int,
        __strsignalbuf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn bcmp(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn bcopy(
        arg1: *const ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize,
    );
}
unsafe extern "C" {
    pub fn bzero(arg1: *mut ::std::os::raw::c_void, arg2: ::std::os::raw::c_ulong);
}
unsafe extern "C" {
    pub fn index(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn rindex(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ffs(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strcasecmp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strncasecmp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ffsl(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ffsll(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fls(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn flsl(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn flsll(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
#[doc = " UTF-8"]
pub type utf8_string_t = utf8_string_s;
pub type utf8_string_view_t = utf8_string_view_s;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct utf8_string_s {
    pub data: *mut utf8_t,
    pub len: usize,
    pub __bindgen_anon_1: utf8_string_s__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union utf8_string_s__bindgen_ty_1 {
    pub cap: usize,
    pub buf: [utf8_t; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of utf8_string_s__bindgen_ty_1"]
        [::std::mem::size_of::<utf8_string_s__bindgen_ty_1>() - 8usize];
    ["Alignment of utf8_string_s__bindgen_ty_1"]
        [::std::mem::align_of::<utf8_string_s__bindgen_ty_1>() - 8usize];
    ["Offset of field: utf8_string_s__bindgen_ty_1::cap"]
        [::std::mem::offset_of!(utf8_string_s__bindgen_ty_1, cap) - 0usize];
    ["Offset of field: utf8_string_s__bindgen_ty_1::buf"]
        [::std::mem::offset_of!(utf8_string_s__bindgen_ty_1, buf) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of utf8_string_s"][::std::mem::size_of::<utf8_string_s>() - 24usize];
    ["Alignment of utf8_string_s"][::std::mem::align_of::<utf8_string_s>() - 8usize];
    ["Offset of field: utf8_string_s::data"][::std::mem::offset_of!(utf8_string_s, data) - 0usize];
    ["Offset of field: utf8_string_s::len"][::std::mem::offset_of!(utf8_string_s, len) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct utf8_string_view_s {
    pub data: *const utf8_t,
    pub len: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of utf8_string_view_s"][::std::mem::size_of::<utf8_string_view_s>() - 16usize];
    ["Alignment of utf8_string_view_s"][::std::mem::align_of::<utf8_string_view_s>() - 8usize];
    ["Offset of field: utf8_string_view_s::data"]
        [::std::mem::offset_of!(utf8_string_view_s, data) - 0usize];
    ["Offset of field: utf8_string_view_s::len"]
        [::std::mem::offset_of!(utf8_string_view_s, len) - 8usize];
};
unsafe extern "C" {
    pub fn __error() -> *mut ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uv__queue {
    pub next: *mut uv__queue,
    pub prev: *mut uv__queue,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uv__queue"][::std::mem::size_of::<uv__queue>() - 16usize];
    ["Alignment of uv__queue"][::std::mem::align_of::<uv__queue>() - 8usize];
    ["Offset of field: uv__queue::next"][::std::mem::offset_of!(uv__queue, next) - 0usize];
    ["Offset of field: uv__queue::prev"][::std::mem::offset_of!(uv__queue, prev) - 8usize];
};
pub type u_char = ::std::os::raw::c_uchar;
pub type u_short = ::std::os::raw::c_ushort;
pub type u_int = ::std::os::raw::c_uint;
pub type u_long = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_quad_t = u_int64_t;
pub type quad_t = i64;
pub type qaddr_t = *mut quad_t;
pub type caddr_t = *mut ::std::os::raw::c_char;
pub type daddr_t = i32;
pub type fixpt_t = u_int32_t;
pub type blkcnt_t = __darwin_blkcnt_t;
pub type blksize_t = __darwin_blksize_t;
pub type gid_t = __darwin_gid_t;
pub type in_addr_t = __uint32_t;
pub type in_port_t = __uint16_t;
pub type ino_t = __darwin_ino_t;
pub type ino64_t = __darwin_ino64_t;
pub type key_t = __int32_t;
pub type nlink_t = __uint16_t;
pub type segsz_t = i32;
pub type swblk_t = i32;
pub type clock_t = __darwin_clock_t;
pub type time_t = __darwin_time_t;
pub type useconds_t = __darwin_useconds_t;
pub type suseconds_t = __darwin_suseconds_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub fds_bits: [__int32_t; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fd_set"][::std::mem::size_of::<fd_set>() - 128usize];
    ["Alignment of fd_set"][::std::mem::align_of::<fd_set>() - 4usize];
    ["Offset of field: fd_set::fds_bits"][::std::mem::offset_of!(fd_set, fds_bits) - 0usize];
};
unsafe extern "C" {
    pub fn __darwin_check_fd_set_overflow(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type fd_mask = __int32_t;
pub type pthread_cond_t = __darwin_pthread_cond_t;
pub type pthread_condattr_t = __darwin_pthread_condattr_t;
pub type pthread_mutex_t = __darwin_pthread_mutex_t;
pub type pthread_mutexattr_t = __darwin_pthread_mutexattr_t;
pub type pthread_once_t = __darwin_pthread_once_t;
pub type pthread_rwlock_t = __darwin_pthread_rwlock_t;
pub type pthread_rwlockattr_t = __darwin_pthread_rwlockattr_t;
pub type pthread_t = __darwin_pthread_t;
pub type pthread_key_t = __darwin_pthread_key_t;
pub type fsblkcnt_t = __darwin_fsblkcnt_t;
pub type fsfilcnt_t = __darwin_fsfilcnt_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __darwin_time_t,
    pub tv_nsec: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timespec"][::std::mem::size_of::<timespec>() - 16usize];
    ["Alignment of timespec"][::std::mem::align_of::<timespec>() - 8usize];
    ["Offset of field: timespec::tv_sec"][::std::mem::offset_of!(timespec, tv_sec) - 0usize];
    ["Offset of field: timespec::tv_nsec"][::std::mem::offset_of!(timespec, tv_nsec) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ostat {
    pub st_dev: __uint16_t,
    pub st_ino: ino_t,
    pub st_mode: mode_t,
    pub st_nlink: nlink_t,
    pub st_uid: __uint16_t,
    pub st_gid: __uint16_t,
    pub st_rdev: __uint16_t,
    pub st_size: __int32_t,
    pub st_atimespec: timespec,
    pub st_mtimespec: timespec,
    pub st_ctimespec: timespec,
    pub st_blksize: __int32_t,
    pub st_blocks: __int32_t,
    pub st_flags: __uint32_t,
    pub st_gen: __uint32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ostat"][::std::mem::size_of::<ostat>() - 96usize];
    ["Alignment of ostat"][::std::mem::align_of::<ostat>() - 8usize];
    ["Offset of field: ostat::st_dev"][::std::mem::offset_of!(ostat, st_dev) - 0usize];
    ["Offset of field: ostat::st_ino"][::std::mem::offset_of!(ostat, st_ino) - 8usize];
    ["Offset of field: ostat::st_mode"][::std::mem::offset_of!(ostat, st_mode) - 16usize];
    ["Offset of field: ostat::st_nlink"][::std::mem::offset_of!(ostat, st_nlink) - 18usize];
    ["Offset of field: ostat::st_uid"][::std::mem::offset_of!(ostat, st_uid) - 20usize];
    ["Offset of field: ostat::st_gid"][::std::mem::offset_of!(ostat, st_gid) - 22usize];
    ["Offset of field: ostat::st_rdev"][::std::mem::offset_of!(ostat, st_rdev) - 24usize];
    ["Offset of field: ostat::st_size"][::std::mem::offset_of!(ostat, st_size) - 28usize];
    ["Offset of field: ostat::st_atimespec"][::std::mem::offset_of!(ostat, st_atimespec) - 32usize];
    ["Offset of field: ostat::st_mtimespec"][::std::mem::offset_of!(ostat, st_mtimespec) - 48usize];
    ["Offset of field: ostat::st_ctimespec"][::std::mem::offset_of!(ostat, st_ctimespec) - 64usize];
    ["Offset of field: ostat::st_blksize"][::std::mem::offset_of!(ostat, st_blksize) - 80usize];
    ["Offset of field: ostat::st_blocks"][::std::mem::offset_of!(ostat, st_blocks) - 84usize];
    ["Offset of field: ostat::st_flags"][::std::mem::offset_of!(ostat, st_flags) - 88usize];
    ["Offset of field: ostat::st_gen"][::std::mem::offset_of!(ostat, st_gen) - 92usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stat {
    pub st_dev: dev_t,
    pub st_mode: mode_t,
    pub st_nlink: nlink_t,
    pub st_ino: __darwin_ino64_t,
    pub st_uid: uid_t,
    pub st_gid: gid_t,
    pub st_rdev: dev_t,
    pub st_atimespec: timespec,
    pub st_mtimespec: timespec,
    pub st_ctimespec: timespec,
    pub st_birthtimespec: timespec,
    pub st_size: off_t,
    pub st_blocks: blkcnt_t,
    pub st_blksize: blksize_t,
    pub st_flags: __uint32_t,
    pub st_gen: __uint32_t,
    pub st_lspare: __int32_t,
    pub st_qspare: [__int64_t; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of stat"][::std::mem::size_of::<stat>() - 144usize];
    ["Alignment of stat"][::std::mem::align_of::<stat>() - 8usize];
    ["Offset of field: stat::st_dev"][::std::mem::offset_of!(stat, st_dev) - 0usize];
    ["Offset of field: stat::st_mode"][::std::mem::offset_of!(stat, st_mode) - 4usize];
    ["Offset of field: stat::st_nlink"][::std::mem::offset_of!(stat, st_nlink) - 6usize];
    ["Offset of field: stat::st_ino"][::std::mem::offset_of!(stat, st_ino) - 8usize];
    ["Offset of field: stat::st_uid"][::std::mem::offset_of!(stat, st_uid) - 16usize];
    ["Offset of field: stat::st_gid"][::std::mem::offset_of!(stat, st_gid) - 20usize];
    ["Offset of field: stat::st_rdev"][::std::mem::offset_of!(stat, st_rdev) - 24usize];
    ["Offset of field: stat::st_atimespec"][::std::mem::offset_of!(stat, st_atimespec) - 32usize];
    ["Offset of field: stat::st_mtimespec"][::std::mem::offset_of!(stat, st_mtimespec) - 48usize];
    ["Offset of field: stat::st_ctimespec"][::std::mem::offset_of!(stat, st_ctimespec) - 64usize];
    ["Offset of field: stat::st_birthtimespec"]
        [::std::mem::offset_of!(stat, st_birthtimespec) - 80usize];
    ["Offset of field: stat::st_size"][::std::mem::offset_of!(stat, st_size) - 96usize];
    ["Offset of field: stat::st_blocks"][::std::mem::offset_of!(stat, st_blocks) - 104usize];
    ["Offset of field: stat::st_blksize"][::std::mem::offset_of!(stat, st_blksize) - 112usize];
    ["Offset of field: stat::st_flags"][::std::mem::offset_of!(stat, st_flags) - 116usize];
    ["Offset of field: stat::st_gen"][::std::mem::offset_of!(stat, st_gen) - 120usize];
    ["Offset of field: stat::st_lspare"][::std::mem::offset_of!(stat, st_lspare) - 124usize];
    ["Offset of field: stat::st_qspare"][::std::mem::offset_of!(stat, st_qspare) - 128usize];
};
unsafe extern "C" {
    pub fn chmod(arg1: *const ::std::os::raw::c_char, arg2: mode_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fchmod(arg1: ::std::os::raw::c_int, arg2: mode_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fstat(arg1: ::std::os::raw::c_int, arg2: *mut stat) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lstat(arg1: *const ::std::os::raw::c_char, arg2: *mut stat) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mkdir(arg1: *const ::std::os::raw::c_char, arg2: mode_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mkfifo(arg1: *const ::std::os::raw::c_char, arg2: mode_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn stat(arg1: *const ::std::os::raw::c_char, arg2: *mut stat) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mknod(
        arg1: *const ::std::os::raw::c_char,
        arg2: mode_t,
        arg3: dev_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn umask(arg1: mode_t) -> mode_t;
}
unsafe extern "C" {
    pub fn fchmodat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: mode_t,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fstatat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut stat,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mkdirat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: mode_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mkfifoat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: mode_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mknodat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: mode_t,
        arg4: dev_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn futimens(__fd: ::std::os::raw::c_int, __times: *const timespec)
        -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn utimensat(
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __times: *const timespec,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _filesec {
    _unused: [u8; 0],
}
pub type filesec_t = *mut _filesec;
unsafe extern "C" {
    pub fn chflags(arg1: *const ::std::os::raw::c_char, arg2: __uint32_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn chmodx_np(arg1: *const ::std::os::raw::c_char, arg2: filesec_t)
        -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fchflags(arg1: ::std::os::raw::c_int, arg2: __uint32_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fchmodx_np(arg1: ::std::os::raw::c_int, arg2: filesec_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fstatx_np(
        arg1: ::std::os::raw::c_int,
        arg2: *mut stat,
        arg3: filesec_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lchflags(arg1: *const ::std::os::raw::c_char, arg2: __uint32_t)
        -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lchmod(arg1: *const ::std::os::raw::c_char, arg2: mode_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lstatx_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut stat,
        arg3: filesec_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mkdirx_np(arg1: *const ::std::os::raw::c_char, arg2: filesec_t)
        -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mkfifox_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: filesec_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn statx_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut stat,
        arg3: filesec_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn umaskx_np(arg1: filesec_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct flock {
    pub l_start: off_t,
    pub l_len: off_t,
    pub l_pid: pid_t,
    pub l_type: ::std::os::raw::c_short,
    pub l_whence: ::std::os::raw::c_short,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of flock"][::std::mem::size_of::<flock>() - 24usize];
    ["Alignment of flock"][::std::mem::align_of::<flock>() - 8usize];
    ["Offset of field: flock::l_start"][::std::mem::offset_of!(flock, l_start) - 0usize];
    ["Offset of field: flock::l_len"][::std::mem::offset_of!(flock, l_len) - 8usize];
    ["Offset of field: flock::l_pid"][::std::mem::offset_of!(flock, l_pid) - 16usize];
    ["Offset of field: flock::l_type"][::std::mem::offset_of!(flock, l_type) - 20usize];
    ["Offset of field: flock::l_whence"][::std::mem::offset_of!(flock, l_whence) - 22usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct flocktimeout {
    pub fl: flock,
    pub timeout: timespec,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of flocktimeout"][::std::mem::size_of::<flocktimeout>() - 40usize];
    ["Alignment of flocktimeout"][::std::mem::align_of::<flocktimeout>() - 8usize];
    ["Offset of field: flocktimeout::fl"][::std::mem::offset_of!(flocktimeout, fl) - 0usize];
    ["Offset of field: flocktimeout::timeout"]
        [::std::mem::offset_of!(flocktimeout, timeout) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct radvisory {
    pub ra_offset: off_t,
    pub ra_count: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of radvisory"][::std::mem::size_of::<radvisory>() - 16usize];
    ["Alignment of radvisory"][::std::mem::align_of::<radvisory>() - 8usize];
    ["Offset of field: radvisory::ra_offset"]
        [::std::mem::offset_of!(radvisory, ra_offset) - 0usize];
    ["Offset of field: radvisory::ra_count"][::std::mem::offset_of!(radvisory, ra_count) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fsignatures {
    pub fs_file_start: off_t,
    pub fs_blob_start: *mut ::std::os::raw::c_void,
    pub fs_blob_size: usize,
    pub fs_fsignatures_size: usize,
    pub fs_cdhash: [::std::os::raw::c_char; 20usize],
    pub fs_hash_type: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fsignatures"][::std::mem::size_of::<fsignatures>() - 56usize];
    ["Alignment of fsignatures"][::std::mem::align_of::<fsignatures>() - 8usize];
    ["Offset of field: fsignatures::fs_file_start"]
        [::std::mem::offset_of!(fsignatures, fs_file_start) - 0usize];
    ["Offset of field: fsignatures::fs_blob_start"]
        [::std::mem::offset_of!(fsignatures, fs_blob_start) - 8usize];
    ["Offset of field: fsignatures::fs_blob_size"]
        [::std::mem::offset_of!(fsignatures, fs_blob_size) - 16usize];
    ["Offset of field: fsignatures::fs_fsignatures_size"]
        [::std::mem::offset_of!(fsignatures, fs_fsignatures_size) - 24usize];
    ["Offset of field: fsignatures::fs_cdhash"]
        [::std::mem::offset_of!(fsignatures, fs_cdhash) - 32usize];
    ["Offset of field: fsignatures::fs_hash_type"]
        [::std::mem::offset_of!(fsignatures, fs_hash_type) - 52usize];
};
pub type fsignatures_t = fsignatures;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fsupplement {
    pub fs_file_start: off_t,
    pub fs_blob_start: off_t,
    pub fs_blob_size: usize,
    pub fs_orig_fd: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fsupplement"][::std::mem::size_of::<fsupplement>() - 32usize];
    ["Alignment of fsupplement"][::std::mem::align_of::<fsupplement>() - 8usize];
    ["Offset of field: fsupplement::fs_file_start"]
        [::std::mem::offset_of!(fsupplement, fs_file_start) - 0usize];
    ["Offset of field: fsupplement::fs_blob_start"]
        [::std::mem::offset_of!(fsupplement, fs_blob_start) - 8usize];
    ["Offset of field: fsupplement::fs_blob_size"]
        [::std::mem::offset_of!(fsupplement, fs_blob_size) - 16usize];
    ["Offset of field: fsupplement::fs_orig_fd"]
        [::std::mem::offset_of!(fsupplement, fs_orig_fd) - 24usize];
};
pub type fsupplement_t = fsupplement;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fchecklv {
    pub lv_file_start: off_t,
    pub lv_error_message_size: usize,
    pub lv_error_message: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fchecklv"][::std::mem::size_of::<fchecklv>() - 24usize];
    ["Alignment of fchecklv"][::std::mem::align_of::<fchecklv>() - 8usize];
    ["Offset of field: fchecklv::lv_file_start"]
        [::std::mem::offset_of!(fchecklv, lv_file_start) - 0usize];
    ["Offset of field: fchecklv::lv_error_message_size"]
        [::std::mem::offset_of!(fchecklv, lv_error_message_size) - 8usize];
    ["Offset of field: fchecklv::lv_error_message"]
        [::std::mem::offset_of!(fchecklv, lv_error_message) - 16usize];
};
pub type fchecklv_t = fchecklv;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fgetsigsinfo {
    pub fg_file_start: off_t,
    pub fg_info_request: ::std::os::raw::c_int,
    pub fg_sig_is_platform: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fgetsigsinfo"][::std::mem::size_of::<fgetsigsinfo>() - 16usize];
    ["Alignment of fgetsigsinfo"][::std::mem::align_of::<fgetsigsinfo>() - 8usize];
    ["Offset of field: fgetsigsinfo::fg_file_start"]
        [::std::mem::offset_of!(fgetsigsinfo, fg_file_start) - 0usize];
    ["Offset of field: fgetsigsinfo::fg_info_request"]
        [::std::mem::offset_of!(fgetsigsinfo, fg_info_request) - 8usize];
    ["Offset of field: fgetsigsinfo::fg_sig_is_platform"]
        [::std::mem::offset_of!(fgetsigsinfo, fg_sig_is_platform) - 12usize];
};
pub type fgetsigsinfo_t = fgetsigsinfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fstore {
    pub fst_flags: ::std::os::raw::c_uint,
    pub fst_posmode: ::std::os::raw::c_int,
    pub fst_offset: off_t,
    pub fst_length: off_t,
    pub fst_bytesalloc: off_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fstore"][::std::mem::size_of::<fstore>() - 32usize];
    ["Alignment of fstore"][::std::mem::align_of::<fstore>() - 8usize];
    ["Offset of field: fstore::fst_flags"][::std::mem::offset_of!(fstore, fst_flags) - 0usize];
    ["Offset of field: fstore::fst_posmode"][::std::mem::offset_of!(fstore, fst_posmode) - 4usize];
    ["Offset of field: fstore::fst_offset"][::std::mem::offset_of!(fstore, fst_offset) - 8usize];
    ["Offset of field: fstore::fst_length"][::std::mem::offset_of!(fstore, fst_length) - 16usize];
    ["Offset of field: fstore::fst_bytesalloc"]
        [::std::mem::offset_of!(fstore, fst_bytesalloc) - 24usize];
};
pub type fstore_t = fstore;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fpunchhole {
    pub fp_flags: ::std::os::raw::c_uint,
    pub reserved: ::std::os::raw::c_uint,
    pub fp_offset: off_t,
    pub fp_length: off_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fpunchhole"][::std::mem::size_of::<fpunchhole>() - 24usize];
    ["Alignment of fpunchhole"][::std::mem::align_of::<fpunchhole>() - 8usize];
    ["Offset of field: fpunchhole::fp_flags"]
        [::std::mem::offset_of!(fpunchhole, fp_flags) - 0usize];
    ["Offset of field: fpunchhole::reserved"]
        [::std::mem::offset_of!(fpunchhole, reserved) - 4usize];
    ["Offset of field: fpunchhole::fp_offset"]
        [::std::mem::offset_of!(fpunchhole, fp_offset) - 8usize];
    ["Offset of field: fpunchhole::fp_length"]
        [::std::mem::offset_of!(fpunchhole, fp_length) - 16usize];
};
pub type fpunchhole_t = fpunchhole;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ftrimactivefile {
    pub fta_offset: off_t,
    pub fta_length: off_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ftrimactivefile"][::std::mem::size_of::<ftrimactivefile>() - 16usize];
    ["Alignment of ftrimactivefile"][::std::mem::align_of::<ftrimactivefile>() - 8usize];
    ["Offset of field: ftrimactivefile::fta_offset"]
        [::std::mem::offset_of!(ftrimactivefile, fta_offset) - 0usize];
    ["Offset of field: ftrimactivefile::fta_length"]
        [::std::mem::offset_of!(ftrimactivefile, fta_length) - 8usize];
};
pub type ftrimactivefile_t = ftrimactivefile;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fspecread {
    pub fsr_flags: ::std::os::raw::c_uint,
    pub reserved: ::std::os::raw::c_uint,
    pub fsr_offset: off_t,
    pub fsr_length: off_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fspecread"][::std::mem::size_of::<fspecread>() - 24usize];
    ["Alignment of fspecread"][::std::mem::align_of::<fspecread>() - 8usize];
    ["Offset of field: fspecread::fsr_flags"]
        [::std::mem::offset_of!(fspecread, fsr_flags) - 0usize];
    ["Offset of field: fspecread::reserved"][::std::mem::offset_of!(fspecread, reserved) - 4usize];
    ["Offset of field: fspecread::fsr_offset"]
        [::std::mem::offset_of!(fspecread, fsr_offset) - 8usize];
    ["Offset of field: fspecread::fsr_length"]
        [::std::mem::offset_of!(fspecread, fsr_length) - 16usize];
};
pub type fspecread_t = fspecread;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fattributiontag {
    pub ft_flags: ::std::os::raw::c_uint,
    pub ft_hash: ::std::os::raw::c_ulonglong,
    pub ft_attribution_name: [::std::os::raw::c_char; 255usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fattributiontag"][::std::mem::size_of::<fattributiontag>() - 272usize];
    ["Alignment of fattributiontag"][::std::mem::align_of::<fattributiontag>() - 8usize];
    ["Offset of field: fattributiontag::ft_flags"]
        [::std::mem::offset_of!(fattributiontag, ft_flags) - 0usize];
    ["Offset of field: fattributiontag::ft_hash"]
        [::std::mem::offset_of!(fattributiontag, ft_hash) - 8usize];
    ["Offset of field: fattributiontag::ft_attribution_name"]
        [::std::mem::offset_of!(fattributiontag, ft_attribution_name) - 16usize];
};
pub type fattributiontag_t = fattributiontag;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct log2phys {
    pub l2p_flags: ::std::os::raw::c_uint,
    pub l2p_contigbytes: off_t,
    pub l2p_devoffset: off_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of log2phys"][::std::mem::size_of::<log2phys>() - 20usize];
    ["Alignment of log2phys"][::std::mem::align_of::<log2phys>() - 4usize];
    ["Offset of field: log2phys::l2p_flags"][::std::mem::offset_of!(log2phys, l2p_flags) - 0usize];
    ["Offset of field: log2phys::l2p_contigbytes"]
        [::std::mem::offset_of!(log2phys, l2p_contigbytes) - 4usize];
    ["Offset of field: log2phys::l2p_devoffset"]
        [::std::mem::offset_of!(log2phys, l2p_devoffset) - 12usize];
};
pub const filesec_property_t_FILESEC_OWNER: filesec_property_t = 1;
pub const filesec_property_t_FILESEC_GROUP: filesec_property_t = 2;
pub const filesec_property_t_FILESEC_UUID: filesec_property_t = 3;
pub const filesec_property_t_FILESEC_MODE: filesec_property_t = 4;
pub const filesec_property_t_FILESEC_ACL: filesec_property_t = 5;
pub const filesec_property_t_FILESEC_GRPUUID: filesec_property_t = 6;
pub const filesec_property_t_FILESEC_ACL_RAW: filesec_property_t = 100;
pub const filesec_property_t_FILESEC_ACL_ALLOCSIZE: filesec_property_t = 101;
pub type filesec_property_t = ::std::os::raw::c_uint;
unsafe extern "C" {
    pub fn open(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn openat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn creat(arg1: *const ::std::os::raw::c_char, arg2: mode_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fcntl(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn openx_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: filesec_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn open_dprotected_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn openat_dprotected_np(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn openat_authenticated_np(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn flock(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn filesec_init() -> filesec_t;
}
unsafe extern "C" {
    pub fn filesec_dup(arg1: filesec_t) -> filesec_t;
}
unsafe extern "C" {
    pub fn filesec_free(arg1: filesec_t);
}
unsafe extern "C" {
    pub fn filesec_get_property(
        arg1: filesec_t,
        arg2: filesec_property_t,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn filesec_query_property(
        arg1: filesec_t,
        arg2: filesec_property_t,
        arg3: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn filesec_set_property(
        arg1: filesec_t,
        arg2: filesec_property_t,
        arg3: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn filesec_unset_property(
        arg1: filesec_t,
        arg2: filesec_property_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dirent {
    pub d_ino: __uint64_t,
    pub d_seekoff: __uint64_t,
    pub d_reclen: __uint16_t,
    pub d_namlen: __uint16_t,
    pub d_type: __uint8_t,
    pub d_name: [::std::os::raw::c_char; 1024usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dirent"][::std::mem::size_of::<dirent>() - 1048usize];
    ["Alignment of dirent"][::std::mem::align_of::<dirent>() - 8usize];
    ["Offset of field: dirent::d_ino"][::std::mem::offset_of!(dirent, d_ino) - 0usize];
    ["Offset of field: dirent::d_seekoff"][::std::mem::offset_of!(dirent, d_seekoff) - 8usize];
    ["Offset of field: dirent::d_reclen"][::std::mem::offset_of!(dirent, d_reclen) - 16usize];
    ["Offset of field: dirent::d_namlen"][::std::mem::offset_of!(dirent, d_namlen) - 18usize];
    ["Offset of field: dirent::d_type"][::std::mem::offset_of!(dirent, d_type) - 20usize];
    ["Offset of field: dirent::d_name"][::std::mem::offset_of!(dirent, d_name) - 21usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _telldir {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DIR {
    pub __dd_fd: ::std::os::raw::c_int,
    pub __dd_loc: ::std::os::raw::c_long,
    pub __dd_size: ::std::os::raw::c_long,
    pub __dd_buf: *mut ::std::os::raw::c_char,
    pub __dd_len: ::std::os::raw::c_int,
    pub __dd_seek: ::std::os::raw::c_long,
    pub __padding: ::std::os::raw::c_long,
    pub __dd_flags: ::std::os::raw::c_int,
    pub __dd_lock: __darwin_pthread_mutex_t,
    pub __dd_td: *mut _telldir,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DIR"][::std::mem::size_of::<DIR>() - 136usize];
    ["Alignment of DIR"][::std::mem::align_of::<DIR>() - 8usize];
    ["Offset of field: DIR::__dd_fd"][::std::mem::offset_of!(DIR, __dd_fd) - 0usize];
    ["Offset of field: DIR::__dd_loc"][::std::mem::offset_of!(DIR, __dd_loc) - 8usize];
    ["Offset of field: DIR::__dd_size"][::std::mem::offset_of!(DIR, __dd_size) - 16usize];
    ["Offset of field: DIR::__dd_buf"][::std::mem::offset_of!(DIR, __dd_buf) - 24usize];
    ["Offset of field: DIR::__dd_len"][::std::mem::offset_of!(DIR, __dd_len) - 32usize];
    ["Offset of field: DIR::__dd_seek"][::std::mem::offset_of!(DIR, __dd_seek) - 40usize];
    ["Offset of field: DIR::__padding"][::std::mem::offset_of!(DIR, __padding) - 48usize];
    ["Offset of field: DIR::__dd_flags"][::std::mem::offset_of!(DIR, __dd_flags) - 56usize];
    ["Offset of field: DIR::__dd_lock"][::std::mem::offset_of!(DIR, __dd_lock) - 64usize];
    ["Offset of field: DIR::__dd_td"][::std::mem::offset_of!(DIR, __dd_td) - 128usize];
};
unsafe extern "C" {
    pub fn closedir(arg1: *mut DIR) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn opendir(arg1: *const ::std::os::raw::c_char) -> *mut DIR;
}
unsafe extern "C" {
    pub fn readdir(arg1: *mut DIR) -> *mut dirent;
}
unsafe extern "C" {
    pub fn readdir_r(
        arg1: *mut DIR,
        arg2: *mut dirent,
        arg3: *mut *mut dirent,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn rewinddir(arg1: *mut DIR);
}
unsafe extern "C" {
    pub fn seekdir(arg1: *mut DIR, arg2: ::std::os::raw::c_long);
}
unsafe extern "C" {
    pub fn telldir(arg1: *mut DIR) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn fdopendir(arg1: ::std::os::raw::c_int) -> *mut DIR;
}
unsafe extern "C" {
    pub fn alphasort(arg1: *mut *const dirent, arg2: *mut *const dirent) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dirfd(dirp: *mut DIR) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn scandir(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut *mut dirent,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(arg1: *const dirent) -> ::std::os::raw::c_int,
        >,
        arg4: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut *const dirent,
                arg2: *mut *const dirent,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn scandir_b(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut *mut dirent,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}_getdirentries_is_not_available_when_64_bit_inodes_are_in_effect"]
    pub fn getdirentries(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __opendir2(arg1: *const ::std::os::raw::c_char, arg2: ::std::os::raw::c_int)
        -> *mut DIR;
}
pub type sa_family_t = __uint8_t;
pub type socklen_t = __darwin_socklen_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iovec {
    pub iov_base: *mut ::std::os::raw::c_void,
    pub iov_len: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of iovec"][::std::mem::size_of::<iovec>() - 16usize];
    ["Alignment of iovec"][::std::mem::align_of::<iovec>() - 8usize];
    ["Offset of field: iovec::iov_base"][::std::mem::offset_of!(iovec, iov_base) - 0usize];
    ["Offset of field: iovec::iov_len"][::std::mem::offset_of!(iovec, iov_len) - 8usize];
};
pub type sae_associd_t = __uint32_t;
pub type sae_connid_t = __uint32_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sa_endpoints {
    pub sae_srcif: ::std::os::raw::c_uint,
    pub sae_srcaddr: *const sockaddr,
    pub sae_srcaddrlen: socklen_t,
    pub sae_dstaddr: *const sockaddr,
    pub sae_dstaddrlen: socklen_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sa_endpoints"][::std::mem::size_of::<sa_endpoints>() - 40usize];
    ["Alignment of sa_endpoints"][::std::mem::align_of::<sa_endpoints>() - 8usize];
    ["Offset of field: sa_endpoints::sae_srcif"]
        [::std::mem::offset_of!(sa_endpoints, sae_srcif) - 0usize];
    ["Offset of field: sa_endpoints::sae_srcaddr"]
        [::std::mem::offset_of!(sa_endpoints, sae_srcaddr) - 8usize];
    ["Offset of field: sa_endpoints::sae_srcaddrlen"]
        [::std::mem::offset_of!(sa_endpoints, sae_srcaddrlen) - 16usize];
    ["Offset of field: sa_endpoints::sae_dstaddr"]
        [::std::mem::offset_of!(sa_endpoints, sae_dstaddr) - 24usize];
    ["Offset of field: sa_endpoints::sae_dstaddrlen"]
        [::std::mem::offset_of!(sa_endpoints, sae_dstaddrlen) - 32usize];
};
pub type sa_endpoints_t = sa_endpoints;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct linger {
    pub l_onoff: ::std::os::raw::c_int,
    pub l_linger: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of linger"][::std::mem::size_of::<linger>() - 8usize];
    ["Alignment of linger"][::std::mem::align_of::<linger>() - 4usize];
    ["Offset of field: linger::l_onoff"][::std::mem::offset_of!(linger, l_onoff) - 0usize];
    ["Offset of field: linger::l_linger"][::std::mem::offset_of!(linger, l_linger) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct so_np_extensions {
    pub npx_flags: u_int32_t,
    pub npx_mask: u_int32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of so_np_extensions"][::std::mem::size_of::<so_np_extensions>() - 8usize];
    ["Alignment of so_np_extensions"][::std::mem::align_of::<so_np_extensions>() - 4usize];
    ["Offset of field: so_np_extensions::npx_flags"]
        [::std::mem::offset_of!(so_np_extensions, npx_flags) - 0usize];
    ["Offset of field: so_np_extensions::npx_mask"]
        [::std::mem::offset_of!(so_np_extensions, npx_mask) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr {
    pub sa_len: __uint8_t,
    pub sa_family: sa_family_t,
    pub sa_data: [::std::os::raw::c_char; 14usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sockaddr"][::std::mem::size_of::<sockaddr>() - 16usize];
    ["Alignment of sockaddr"][::std::mem::align_of::<sockaddr>() - 1usize];
    ["Offset of field: sockaddr::sa_len"][::std::mem::offset_of!(sockaddr, sa_len) - 0usize];
    ["Offset of field: sockaddr::sa_family"][::std::mem::offset_of!(sockaddr, sa_family) - 1usize];
    ["Offset of field: sockaddr::sa_data"][::std::mem::offset_of!(sockaddr, sa_data) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sockaddr_header {
    pub sa_len: __uint8_t,
    pub sa_family: sa_family_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sockaddr_header"][::std::mem::size_of::<__sockaddr_header>() - 2usize];
    ["Alignment of __sockaddr_header"][::std::mem::align_of::<__sockaddr_header>() - 1usize];
    ["Offset of field: __sockaddr_header::sa_len"]
        [::std::mem::offset_of!(__sockaddr_header, sa_len) - 0usize];
    ["Offset of field: __sockaddr_header::sa_family"]
        [::std::mem::offset_of!(__sockaddr_header, sa_family) - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockproto {
    pub sp_family: __uint16_t,
    pub sp_protocol: __uint16_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sockproto"][::std::mem::size_of::<sockproto>() - 4usize];
    ["Alignment of sockproto"][::std::mem::align_of::<sockproto>() - 2usize];
    ["Offset of field: sockproto::sp_family"]
        [::std::mem::offset_of!(sockproto, sp_family) - 0usize];
    ["Offset of field: sockproto::sp_protocol"]
        [::std::mem::offset_of!(sockproto, sp_protocol) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_storage {
    pub ss_len: __uint8_t,
    pub ss_family: sa_family_t,
    pub __ss_pad1: [::std::os::raw::c_char; 6usize],
    pub __ss_align: __int64_t,
    pub __ss_pad2: [::std::os::raw::c_char; 112usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sockaddr_storage"][::std::mem::size_of::<sockaddr_storage>() - 128usize];
    ["Alignment of sockaddr_storage"][::std::mem::align_of::<sockaddr_storage>() - 8usize];
    ["Offset of field: sockaddr_storage::ss_len"]
        [::std::mem::offset_of!(sockaddr_storage, ss_len) - 0usize];
    ["Offset of field: sockaddr_storage::ss_family"]
        [::std::mem::offset_of!(sockaddr_storage, ss_family) - 1usize];
    ["Offset of field: sockaddr_storage::__ss_pad1"]
        [::std::mem::offset_of!(sockaddr_storage, __ss_pad1) - 2usize];
    ["Offset of field: sockaddr_storage::__ss_align"]
        [::std::mem::offset_of!(sockaddr_storage, __ss_align) - 8usize];
    ["Offset of field: sockaddr_storage::__ss_pad2"]
        [::std::mem::offset_of!(sockaddr_storage, __ss_pad2) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msghdr {
    pub msg_name: *mut ::std::os::raw::c_void,
    pub msg_namelen: socklen_t,
    pub msg_iov: *mut iovec,
    pub msg_iovlen: ::std::os::raw::c_int,
    pub msg_control: *mut ::std::os::raw::c_void,
    pub msg_controllen: socklen_t,
    pub msg_flags: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of msghdr"][::std::mem::size_of::<msghdr>() - 48usize];
    ["Alignment of msghdr"][::std::mem::align_of::<msghdr>() - 8usize];
    ["Offset of field: msghdr::msg_name"][::std::mem::offset_of!(msghdr, msg_name) - 0usize];
    ["Offset of field: msghdr::msg_namelen"][::std::mem::offset_of!(msghdr, msg_namelen) - 8usize];
    ["Offset of field: msghdr::msg_iov"][::std::mem::offset_of!(msghdr, msg_iov) - 16usize];
    ["Offset of field: msghdr::msg_iovlen"][::std::mem::offset_of!(msghdr, msg_iovlen) - 24usize];
    ["Offset of field: msghdr::msg_control"][::std::mem::offset_of!(msghdr, msg_control) - 32usize];
    ["Offset of field: msghdr::msg_controllen"]
        [::std::mem::offset_of!(msghdr, msg_controllen) - 40usize];
    ["Offset of field: msghdr::msg_flags"][::std::mem::offset_of!(msghdr, msg_flags) - 44usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cmsghdr {
    pub cmsg_len: socklen_t,
    pub cmsg_level: ::std::os::raw::c_int,
    pub cmsg_type: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cmsghdr"][::std::mem::size_of::<cmsghdr>() - 12usize];
    ["Alignment of cmsghdr"][::std::mem::align_of::<cmsghdr>() - 4usize];
    ["Offset of field: cmsghdr::cmsg_len"][::std::mem::offset_of!(cmsghdr, cmsg_len) - 0usize];
    ["Offset of field: cmsghdr::cmsg_level"][::std::mem::offset_of!(cmsghdr, cmsg_level) - 4usize];
    ["Offset of field: cmsghdr::cmsg_type"][::std::mem::offset_of!(cmsghdr, cmsg_type) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sf_hdtr {
    pub headers: *mut iovec,
    pub hdr_cnt: ::std::os::raw::c_int,
    pub trailers: *mut iovec,
    pub trl_cnt: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sf_hdtr"][::std::mem::size_of::<sf_hdtr>() - 32usize];
    ["Alignment of sf_hdtr"][::std::mem::align_of::<sf_hdtr>() - 8usize];
    ["Offset of field: sf_hdtr::headers"][::std::mem::offset_of!(sf_hdtr, headers) - 0usize];
    ["Offset of field: sf_hdtr::hdr_cnt"][::std::mem::offset_of!(sf_hdtr, hdr_cnt) - 8usize];
    ["Offset of field: sf_hdtr::trailers"][::std::mem::offset_of!(sf_hdtr, trailers) - 16usize];
    ["Offset of field: sf_hdtr::trl_cnt"][::std::mem::offset_of!(sf_hdtr, trl_cnt) - 24usize];
};
unsafe extern "C" {
    pub fn accept(
        arg1: ::std::os::raw::c_int,
        arg2: *mut sockaddr,
        arg3: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn bind(
        arg1: ::std::os::raw::c_int,
        arg2: *const sockaddr,
        arg3: socklen_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn connect(
        arg1: ::std::os::raw::c_int,
        arg2: *const sockaddr,
        arg3: socklen_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getpeername(
        arg1: ::std::os::raw::c_int,
        arg2: *mut sockaddr,
        arg3: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getsockname(
        arg1: ::std::os::raw::c_int,
        arg2: *mut sockaddr,
        arg3: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getsockopt(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_void,
        arg5: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn listen(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn recv(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize,
        arg4: ::std::os::raw::c_int,
    ) -> isize;
}
unsafe extern "C" {
    pub fn recvfrom(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize,
        arg4: ::std::os::raw::c_int,
        arg5: *mut sockaddr,
        arg6: *mut socklen_t,
    ) -> isize;
}
unsafe extern "C" {
    pub fn recvmsg(
        arg1: ::std::os::raw::c_int,
        arg2: *mut msghdr,
        arg3: ::std::os::raw::c_int,
    ) -> isize;
}
unsafe extern "C" {
    pub fn send(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_void,
        arg3: usize,
        arg4: ::std::os::raw::c_int,
    ) -> isize;
}
unsafe extern "C" {
    pub fn sendmsg(
        arg1: ::std::os::raw::c_int,
        arg2: *const msghdr,
        arg3: ::std::os::raw::c_int,
    ) -> isize;
}
unsafe extern "C" {
    pub fn sendto(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_void,
        arg3: usize,
        arg4: ::std::os::raw::c_int,
        arg5: *const sockaddr,
        arg6: socklen_t,
    ) -> isize;
}
unsafe extern "C" {
    pub fn setsockopt(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_void,
        arg5: socklen_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn shutdown(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sockatmark(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn socket(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn socketpair(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sendfile(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: off_t,
        arg4: *mut off_t,
        arg5: *mut sf_hdtr,
        arg6: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pfctlinput(arg1: ::std::os::raw::c_int, arg2: *mut sockaddr);
}
unsafe extern "C" {
    pub fn connectx(
        arg1: ::std::os::raw::c_int,
        arg2: *const sa_endpoints_t,
        arg3: sae_associd_t,
        arg4: ::std::os::raw::c_uint,
        arg5: *const iovec,
        arg6: ::std::os::raw::c_uint,
        arg7: *mut usize,
        arg8: *mut sae_connid_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn disconnectx(
        arg1: ::std::os::raw::c_int,
        arg2: sae_associd_t,
        arg3: sae_connid_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in_addr {
    pub s_addr: in_addr_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of in_addr"][::std::mem::size_of::<in_addr>() - 4usize];
    ["Alignment of in_addr"][::std::mem::align_of::<in_addr>() - 4usize];
    ["Offset of field: in_addr::s_addr"][::std::mem::offset_of!(in_addr, s_addr) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_in {
    pub sin_len: __uint8_t,
    pub sin_family: sa_family_t,
    pub sin_port: in_port_t,
    pub sin_addr: in_addr,
    pub sin_zero: [::std::os::raw::c_char; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sockaddr_in"][::std::mem::size_of::<sockaddr_in>() - 16usize];
    ["Alignment of sockaddr_in"][::std::mem::align_of::<sockaddr_in>() - 4usize];
    ["Offset of field: sockaddr_in::sin_len"]
        [::std::mem::offset_of!(sockaddr_in, sin_len) - 0usize];
    ["Offset of field: sockaddr_in::sin_family"]
        [::std::mem::offset_of!(sockaddr_in, sin_family) - 1usize];
    ["Offset of field: sockaddr_in::sin_port"]
        [::std::mem::offset_of!(sockaddr_in, sin_port) - 2usize];
    ["Offset of field: sockaddr_in::sin_addr"]
        [::std::mem::offset_of!(sockaddr_in, sin_addr) - 4usize];
    ["Offset of field: sockaddr_in::sin_zero"]
        [::std::mem::offset_of!(sockaddr_in, sin_zero) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_opts {
    pub ip_dst: in_addr,
    pub ip_opts: [::std::os::raw::c_char; 40usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ip_opts"][::std::mem::size_of::<ip_opts>() - 44usize];
    ["Alignment of ip_opts"][::std::mem::align_of::<ip_opts>() - 4usize];
    ["Offset of field: ip_opts::ip_dst"][::std::mem::offset_of!(ip_opts, ip_dst) - 0usize];
    ["Offset of field: ip_opts::ip_opts"][::std::mem::offset_of!(ip_opts, ip_opts) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_mreq {
    pub imr_multiaddr: in_addr,
    pub imr_interface: in_addr,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ip_mreq"][::std::mem::size_of::<ip_mreq>() - 8usize];
    ["Alignment of ip_mreq"][::std::mem::align_of::<ip_mreq>() - 4usize];
    ["Offset of field: ip_mreq::imr_multiaddr"]
        [::std::mem::offset_of!(ip_mreq, imr_multiaddr) - 0usize];
    ["Offset of field: ip_mreq::imr_interface"]
        [::std::mem::offset_of!(ip_mreq, imr_interface) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_mreqn {
    pub imr_multiaddr: in_addr,
    pub imr_address: in_addr,
    pub imr_ifindex: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ip_mreqn"][::std::mem::size_of::<ip_mreqn>() - 12usize];
    ["Alignment of ip_mreqn"][::std::mem::align_of::<ip_mreqn>() - 4usize];
    ["Offset of field: ip_mreqn::imr_multiaddr"]
        [::std::mem::offset_of!(ip_mreqn, imr_multiaddr) - 0usize];
    ["Offset of field: ip_mreqn::imr_address"]
        [::std::mem::offset_of!(ip_mreqn, imr_address) - 4usize];
    ["Offset of field: ip_mreqn::imr_ifindex"]
        [::std::mem::offset_of!(ip_mreqn, imr_ifindex) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_mreq_source {
    pub imr_multiaddr: in_addr,
    pub imr_sourceaddr: in_addr,
    pub imr_interface: in_addr,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ip_mreq_source"][::std::mem::size_of::<ip_mreq_source>() - 12usize];
    ["Alignment of ip_mreq_source"][::std::mem::align_of::<ip_mreq_source>() - 4usize];
    ["Offset of field: ip_mreq_source::imr_multiaddr"]
        [::std::mem::offset_of!(ip_mreq_source, imr_multiaddr) - 0usize];
    ["Offset of field: ip_mreq_source::imr_sourceaddr"]
        [::std::mem::offset_of!(ip_mreq_source, imr_sourceaddr) - 4usize];
    ["Offset of field: ip_mreq_source::imr_interface"]
        [::std::mem::offset_of!(ip_mreq_source, imr_interface) - 8usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct group_req {
    pub gr_interface: u32,
    pub gr_group: sockaddr_storage,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of group_req"][::std::mem::size_of::<group_req>() - 132usize];
    ["Alignment of group_req"][::std::mem::align_of::<group_req>() - 4usize];
    ["Offset of field: group_req::gr_interface"]
        [::std::mem::offset_of!(group_req, gr_interface) - 0usize];
    ["Offset of field: group_req::gr_group"][::std::mem::offset_of!(group_req, gr_group) - 4usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct group_source_req {
    pub gsr_interface: u32,
    pub gsr_group: sockaddr_storage,
    pub gsr_source: sockaddr_storage,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of group_source_req"][::std::mem::size_of::<group_source_req>() - 260usize];
    ["Alignment of group_source_req"][::std::mem::align_of::<group_source_req>() - 4usize];
    ["Offset of field: group_source_req::gsr_interface"]
        [::std::mem::offset_of!(group_source_req, gsr_interface) - 0usize];
    ["Offset of field: group_source_req::gsr_group"]
        [::std::mem::offset_of!(group_source_req, gsr_group) - 4usize];
    ["Offset of field: group_source_req::gsr_source"]
        [::std::mem::offset_of!(group_source_req, gsr_source) - 132usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __msfilterreq {
    pub msfr_ifindex: u32,
    pub msfr_fmode: u32,
    pub msfr_nsrcs: u32,
    pub __msfr_align: u32,
    pub msfr_group: sockaddr_storage,
    pub msfr_srcs: *mut sockaddr_storage,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __msfilterreq"][::std::mem::size_of::<__msfilterreq>() - 152usize];
    ["Alignment of __msfilterreq"][::std::mem::align_of::<__msfilterreq>() - 4usize];
    ["Offset of field: __msfilterreq::msfr_ifindex"]
        [::std::mem::offset_of!(__msfilterreq, msfr_ifindex) - 0usize];
    ["Offset of field: __msfilterreq::msfr_fmode"]
        [::std::mem::offset_of!(__msfilterreq, msfr_fmode) - 4usize];
    ["Offset of field: __msfilterreq::msfr_nsrcs"]
        [::std::mem::offset_of!(__msfilterreq, msfr_nsrcs) - 8usize];
    ["Offset of field: __msfilterreq::__msfr_align"]
        [::std::mem::offset_of!(__msfilterreq, __msfr_align) - 12usize];
    ["Offset of field: __msfilterreq::msfr_group"]
        [::std::mem::offset_of!(__msfilterreq, msfr_group) - 16usize];
    ["Offset of field: __msfilterreq::msfr_srcs"]
        [::std::mem::offset_of!(__msfilterreq, msfr_srcs) - 144usize];
};
unsafe extern "C" {
    pub fn setipv4sourcefilter(
        arg1: ::std::os::raw::c_int,
        arg2: in_addr,
        arg3: in_addr,
        arg4: u32,
        arg5: u32,
        arg6: *mut in_addr,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getipv4sourcefilter(
        arg1: ::std::os::raw::c_int,
        arg2: in_addr,
        arg3: in_addr,
        arg4: *mut u32,
        arg5: *mut u32,
        arg6: *mut in_addr,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setsourcefilter(
        arg1: ::std::os::raw::c_int,
        arg2: u32,
        arg3: *mut sockaddr,
        arg4: socklen_t,
        arg5: u32,
        arg6: u32,
        arg7: *mut sockaddr_storage,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getsourcefilter(
        arg1: ::std::os::raw::c_int,
        arg2: u32,
        arg3: *mut sockaddr,
        arg4: socklen_t,
        arg5: *mut u32,
        arg6: *mut u32,
        arg7: *mut sockaddr_storage,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in_pktinfo {
    pub ipi_ifindex: ::std::os::raw::c_uint,
    pub ipi_spec_dst: in_addr,
    pub ipi_addr: in_addr,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of in_pktinfo"][::std::mem::size_of::<in_pktinfo>() - 12usize];
    ["Alignment of in_pktinfo"][::std::mem::align_of::<in_pktinfo>() - 4usize];
    ["Offset of field: in_pktinfo::ipi_ifindex"]
        [::std::mem::offset_of!(in_pktinfo, ipi_ifindex) - 0usize];
    ["Offset of field: in_pktinfo::ipi_spec_dst"]
        [::std::mem::offset_of!(in_pktinfo, ipi_spec_dst) - 4usize];
    ["Offset of field: in_pktinfo::ipi_addr"]
        [::std::mem::offset_of!(in_pktinfo, ipi_addr) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct in6_addr {
    pub __u6_addr: in6_addr__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union in6_addr__bindgen_ty_1 {
    pub __u6_addr8: [__uint8_t; 16usize],
    pub __u6_addr16: [__uint16_t; 8usize],
    pub __u6_addr32: [__uint32_t; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of in6_addr__bindgen_ty_1"][::std::mem::size_of::<in6_addr__bindgen_ty_1>() - 16usize];
    ["Alignment of in6_addr__bindgen_ty_1"]
        [::std::mem::align_of::<in6_addr__bindgen_ty_1>() - 4usize];
    ["Offset of field: in6_addr__bindgen_ty_1::__u6_addr8"]
        [::std::mem::offset_of!(in6_addr__bindgen_ty_1, __u6_addr8) - 0usize];
    ["Offset of field: in6_addr__bindgen_ty_1::__u6_addr16"]
        [::std::mem::offset_of!(in6_addr__bindgen_ty_1, __u6_addr16) - 0usize];
    ["Offset of field: in6_addr__bindgen_ty_1::__u6_addr32"]
        [::std::mem::offset_of!(in6_addr__bindgen_ty_1, __u6_addr32) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of in6_addr"][::std::mem::size_of::<in6_addr>() - 16usize];
    ["Alignment of in6_addr"][::std::mem::align_of::<in6_addr>() - 4usize];
    ["Offset of field: in6_addr::__u6_addr"][::std::mem::offset_of!(in6_addr, __u6_addr) - 0usize];
};
pub type in6_addr_t = in6_addr;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sockaddr_in6 {
    pub sin6_len: __uint8_t,
    pub sin6_family: sa_family_t,
    pub sin6_port: in_port_t,
    pub sin6_flowinfo: __uint32_t,
    pub sin6_addr: in6_addr,
    pub sin6_scope_id: __uint32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sockaddr_in6"][::std::mem::size_of::<sockaddr_in6>() - 28usize];
    ["Alignment of sockaddr_in6"][::std::mem::align_of::<sockaddr_in6>() - 4usize];
    ["Offset of field: sockaddr_in6::sin6_len"]
        [::std::mem::offset_of!(sockaddr_in6, sin6_len) - 0usize];
    ["Offset of field: sockaddr_in6::sin6_family"]
        [::std::mem::offset_of!(sockaddr_in6, sin6_family) - 1usize];
    ["Offset of field: sockaddr_in6::sin6_port"]
        [::std::mem::offset_of!(sockaddr_in6, sin6_port) - 2usize];
    ["Offset of field: sockaddr_in6::sin6_flowinfo"]
        [::std::mem::offset_of!(sockaddr_in6, sin6_flowinfo) - 4usize];
    ["Offset of field: sockaddr_in6::sin6_addr"]
        [::std::mem::offset_of!(sockaddr_in6, sin6_addr) - 8usize];
    ["Offset of field: sockaddr_in6::sin6_scope_id"]
        [::std::mem::offset_of!(sockaddr_in6, sin6_scope_id) - 24usize];
};
unsafe extern "C" {
    pub static in6addr_any: in6_addr;
}
unsafe extern "C" {
    pub static in6addr_loopback: in6_addr;
}
unsafe extern "C" {
    pub static in6addr_nodelocal_allnodes: in6_addr;
}
unsafe extern "C" {
    pub static in6addr_linklocal_allnodes: in6_addr;
}
unsafe extern "C" {
    pub static in6addr_linklocal_allrouters: in6_addr;
}
unsafe extern "C" {
    pub static in6addr_linklocal_allv2routers: in6_addr;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ipv6_mreq {
    pub ipv6mr_multiaddr: in6_addr,
    pub ipv6mr_interface: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ipv6_mreq"][::std::mem::size_of::<ipv6_mreq>() - 20usize];
    ["Alignment of ipv6_mreq"][::std::mem::align_of::<ipv6_mreq>() - 4usize];
    ["Offset of field: ipv6_mreq::ipv6mr_multiaddr"]
        [::std::mem::offset_of!(ipv6_mreq, ipv6mr_multiaddr) - 0usize];
    ["Offset of field: ipv6_mreq::ipv6mr_interface"]
        [::std::mem::offset_of!(ipv6_mreq, ipv6mr_interface) - 16usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct in6_pktinfo {
    pub ipi6_addr: in6_addr,
    pub ipi6_ifindex: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of in6_pktinfo"][::std::mem::size_of::<in6_pktinfo>() - 20usize];
    ["Alignment of in6_pktinfo"][::std::mem::align_of::<in6_pktinfo>() - 4usize];
    ["Offset of field: in6_pktinfo::ipi6_addr"]
        [::std::mem::offset_of!(in6_pktinfo, ipi6_addr) - 0usize];
    ["Offset of field: in6_pktinfo::ipi6_ifindex"]
        [::std::mem::offset_of!(in6_pktinfo, ipi6_ifindex) - 16usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ip6_mtuinfo {
    pub ip6m_addr: sockaddr_in6,
    pub ip6m_mtu: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ip6_mtuinfo"][::std::mem::size_of::<ip6_mtuinfo>() - 32usize];
    ["Alignment of ip6_mtuinfo"][::std::mem::align_of::<ip6_mtuinfo>() - 4usize];
    ["Offset of field: ip6_mtuinfo::ip6m_addr"]
        [::std::mem::offset_of!(ip6_mtuinfo, ip6m_addr) - 0usize];
    ["Offset of field: ip6_mtuinfo::ip6m_mtu"]
        [::std::mem::offset_of!(ip6_mtuinfo, ip6m_mtu) - 28usize];
};
unsafe extern "C" {
    pub fn inet6_option_space(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn inet6_option_init(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *mut *mut cmsghdr,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn inet6_option_append(
        arg1: *mut cmsghdr,
        arg2: *const __uint8_t,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn inet6_option_alloc(
        arg1: *mut cmsghdr,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> *mut __uint8_t;
}
unsafe extern "C" {
    pub fn inet6_option_next(
        arg1: *const cmsghdr,
        arg2: *mut *mut __uint8_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn inet6_option_find(
        arg1: *const cmsghdr,
        arg2: *mut *mut __uint8_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn inet6_rthdr_space(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> usize;
}
unsafe extern "C" {
    pub fn inet6_rthdr_init(
        arg1: *mut ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_int,
    ) -> *mut cmsghdr;
}
unsafe extern "C" {
    pub fn inet6_rthdr_add(
        arg1: *mut cmsghdr,
        arg2: *const in6_addr,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn inet6_rthdr_lasthop(
        arg1: *mut cmsghdr,
        arg2: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn inet6_rthdr_segments(arg1: *const cmsghdr) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn inet6_rthdr_getaddr(arg1: *mut cmsghdr, arg2: ::std::os::raw::c_int) -> *mut in6_addr;
}
unsafe extern "C" {
    pub fn inet6_rthdr_getflags(
        arg1: *const cmsghdr,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn inet6_opt_init(
        arg1: *mut ::std::os::raw::c_void,
        arg2: socklen_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn inet6_opt_append(
        arg1: *mut ::std::os::raw::c_void,
        arg2: socklen_t,
        arg3: ::std::os::raw::c_int,
        arg4: __uint8_t,
        arg5: socklen_t,
        arg6: __uint8_t,
        arg7: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn inet6_opt_finish(
        arg1: *mut ::std::os::raw::c_void,
        arg2: socklen_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn inet6_opt_set_val(
        arg1: *mut ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_void,
        arg4: socklen_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn inet6_opt_next(
        arg1: *mut ::std::os::raw::c_void,
        arg2: socklen_t,
        arg3: ::std::os::raw::c_int,
        arg4: *mut __uint8_t,
        arg5: *mut socklen_t,
        arg6: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn inet6_opt_find(
        arg1: *mut ::std::os::raw::c_void,
        arg2: socklen_t,
        arg3: ::std::os::raw::c_int,
        arg4: __uint8_t,
        arg5: *mut socklen_t,
        arg6: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn inet6_opt_get_val(
        arg1: *mut ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_void,
        arg4: socklen_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn inet6_rth_space(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> socklen_t;
}
unsafe extern "C" {
    pub fn inet6_rth_init(
        arg1: *mut ::std::os::raw::c_void,
        arg2: socklen_t,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn inet6_rth_add(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *const in6_addr,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn inet6_rth_reverse(
        arg1: *const ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn inet6_rth_segments(arg1: *const ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn inet6_rth_getaddr(
        arg1: *const ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_int,
    ) -> *mut in6_addr;
}
unsafe extern "C" {
    pub fn bindresvport(
        arg1: ::std::os::raw::c_int,
        arg2: *mut sockaddr_in,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn bindresvport_sa(
        arg1: ::std::os::raw::c_int,
        arg2: *mut sockaddr,
    ) -> ::std::os::raw::c_int;
}
pub type tcp_seq = __uint32_t;
pub type tcp_cc = __uint32_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tcphdr {
    pub th_sport: ::std::os::raw::c_ushort,
    pub th_dport: ::std::os::raw::c_ushort,
    pub th_seq: tcp_seq,
    pub th_ack: tcp_seq,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub th_flags: ::std::os::raw::c_uchar,
    pub th_win: ::std::os::raw::c_ushort,
    pub th_sum: ::std::os::raw::c_ushort,
    pub th_urp: ::std::os::raw::c_ushort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tcphdr"][::std::mem::size_of::<tcphdr>() - 20usize];
    ["Alignment of tcphdr"][::std::mem::align_of::<tcphdr>() - 4usize];
    ["Offset of field: tcphdr::th_sport"][::std::mem::offset_of!(tcphdr, th_sport) - 0usize];
    ["Offset of field: tcphdr::th_dport"][::std::mem::offset_of!(tcphdr, th_dport) - 2usize];
    ["Offset of field: tcphdr::th_seq"][::std::mem::offset_of!(tcphdr, th_seq) - 4usize];
    ["Offset of field: tcphdr::th_ack"][::std::mem::offset_of!(tcphdr, th_ack) - 8usize];
    ["Offset of field: tcphdr::th_flags"][::std::mem::offset_of!(tcphdr, th_flags) - 13usize];
    ["Offset of field: tcphdr::th_win"][::std::mem::offset_of!(tcphdr, th_win) - 14usize];
    ["Offset of field: tcphdr::th_sum"][::std::mem::offset_of!(tcphdr, th_sum) - 16usize];
    ["Offset of field: tcphdr::th_urp"][::std::mem::offset_of!(tcphdr, th_urp) - 18usize];
};
impl tcphdr {
    #[inline]
    pub fn th_x2(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_th_x2(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn th_x2_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                4u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_th_x2_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn th_off(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_th_off(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn th_off_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                4u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_th_off_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        th_x2: ::std::os::raw::c_uint,
        th_off: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let th_x2: u32 = unsafe { ::std::mem::transmute(th_x2) };
            th_x2 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let th_off: u32 = unsafe { ::std::mem::transmute(th_off) };
            th_off as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tcp_connection_info {
    pub tcpi_state: u_int8_t,
    pub tcpi_snd_wscale: u_int8_t,
    pub tcpi_rcv_wscale: u_int8_t,
    pub __pad1: u_int8_t,
    pub tcpi_options: u_int32_t,
    pub tcpi_flags: u_int32_t,
    pub tcpi_rto: u_int32_t,
    pub tcpi_maxseg: u_int32_t,
    pub tcpi_snd_ssthresh: u_int32_t,
    pub tcpi_snd_cwnd: u_int32_t,
    pub tcpi_snd_wnd: u_int32_t,
    pub tcpi_snd_sbbytes: u_int32_t,
    pub tcpi_rcv_wnd: u_int32_t,
    pub tcpi_rttcur: u_int32_t,
    pub tcpi_srtt: u_int32_t,
    pub tcpi_rttvar: u_int32_t,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub tcpi_txpackets: u_int64_t,
    pub tcpi_txbytes: u_int64_t,
    pub tcpi_txretransmitbytes: u_int64_t,
    pub tcpi_rxpackets: u_int64_t,
    pub tcpi_rxbytes: u_int64_t,
    pub tcpi_rxoutoforderbytes: u_int64_t,
    pub tcpi_txretransmitpackets: u_int64_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tcp_connection_info"][::std::mem::size_of::<tcp_connection_info>() - 112usize];
    ["Alignment of tcp_connection_info"][::std::mem::align_of::<tcp_connection_info>() - 8usize];
    ["Offset of field: tcp_connection_info::tcpi_state"]
        [::std::mem::offset_of!(tcp_connection_info, tcpi_state) - 0usize];
    ["Offset of field: tcp_connection_info::tcpi_snd_wscale"]
        [::std::mem::offset_of!(tcp_connection_info, tcpi_snd_wscale) - 1usize];
    ["Offset of field: tcp_connection_info::tcpi_rcv_wscale"]
        [::std::mem::offset_of!(tcp_connection_info, tcpi_rcv_wscale) - 2usize];
    ["Offset of field: tcp_connection_info::__pad1"]
        [::std::mem::offset_of!(tcp_connection_info, __pad1) - 3usize];
    ["Offset of field: tcp_connection_info::tcpi_options"]
        [::std::mem::offset_of!(tcp_connection_info, tcpi_options) - 4usize];
    ["Offset of field: tcp_connection_info::tcpi_flags"]
        [::std::mem::offset_of!(tcp_connection_info, tcpi_flags) - 8usize];
    ["Offset of field: tcp_connection_info::tcpi_rto"]
        [::std::mem::offset_of!(tcp_connection_info, tcpi_rto) - 12usize];
    ["Offset of field: tcp_connection_info::tcpi_maxseg"]
        [::std::mem::offset_of!(tcp_connection_info, tcpi_maxseg) - 16usize];
    ["Offset of field: tcp_connection_info::tcpi_snd_ssthresh"]
        [::std::mem::offset_of!(tcp_connection_info, tcpi_snd_ssthresh) - 20usize];
    ["Offset of field: tcp_connection_info::tcpi_snd_cwnd"]
        [::std::mem::offset_of!(tcp_connection_info, tcpi_snd_cwnd) - 24usize];
    ["Offset of field: tcp_connection_info::tcpi_snd_wnd"]
        [::std::mem::offset_of!(tcp_connection_info, tcpi_snd_wnd) - 28usize];
    ["Offset of field: tcp_connection_info::tcpi_snd_sbbytes"]
        [::std::mem::offset_of!(tcp_connection_info, tcpi_snd_sbbytes) - 32usize];
    ["Offset of field: tcp_connection_info::tcpi_rcv_wnd"]
        [::std::mem::offset_of!(tcp_connection_info, tcpi_rcv_wnd) - 36usize];
    ["Offset of field: tcp_connection_info::tcpi_rttcur"]
        [::std::mem::offset_of!(tcp_connection_info, tcpi_rttcur) - 40usize];
    ["Offset of field: tcp_connection_info::tcpi_srtt"]
        [::std::mem::offset_of!(tcp_connection_info, tcpi_srtt) - 44usize];
    ["Offset of field: tcp_connection_info::tcpi_rttvar"]
        [::std::mem::offset_of!(tcp_connection_info, tcpi_rttvar) - 48usize];
    ["Offset of field: tcp_connection_info::tcpi_txpackets"]
        [::std::mem::offset_of!(tcp_connection_info, tcpi_txpackets) - 56usize];
    ["Offset of field: tcp_connection_info::tcpi_txbytes"]
        [::std::mem::offset_of!(tcp_connection_info, tcpi_txbytes) - 64usize];
    ["Offset of field: tcp_connection_info::tcpi_txretransmitbytes"]
        [::std::mem::offset_of!(tcp_connection_info, tcpi_txretransmitbytes) - 72usize];
    ["Offset of field: tcp_connection_info::tcpi_rxpackets"]
        [::std::mem::offset_of!(tcp_connection_info, tcpi_rxpackets) - 80usize];
    ["Offset of field: tcp_connection_info::tcpi_rxbytes"]
        [::std::mem::offset_of!(tcp_connection_info, tcpi_rxbytes) - 88usize];
    ["Offset of field: tcp_connection_info::tcpi_rxoutoforderbytes"]
        [::std::mem::offset_of!(tcp_connection_info, tcpi_rxoutoforderbytes) - 96usize];
    ["Offset of field: tcp_connection_info::tcpi_txretransmitpackets"]
        [::std::mem::offset_of!(tcp_connection_info, tcpi_txretransmitpackets) - 104usize];
};
impl tcp_connection_info {
    #[inline]
    pub fn tcpi_tfo_cookie_req(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tcpi_tfo_cookie_req(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn tcpi_tfo_cookie_req_raw(this: *const Self) -> u_int32_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_tcpi_tfo_cookie_req_raw(this: *mut Self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn tcpi_tfo_cookie_rcv(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tcpi_tfo_cookie_rcv(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn tcpi_tfo_cookie_rcv_raw(this: *const Self) -> u_int32_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_tcpi_tfo_cookie_rcv_raw(this: *mut Self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn tcpi_tfo_syn_loss(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tcpi_tfo_syn_loss(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn tcpi_tfo_syn_loss_raw(this: *const Self) -> u_int32_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_tcpi_tfo_syn_loss_raw(this: *mut Self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn tcpi_tfo_syn_data_sent(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tcpi_tfo_syn_data_sent(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn tcpi_tfo_syn_data_sent_raw(this: *const Self) -> u_int32_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_tcpi_tfo_syn_data_sent_raw(this: *mut Self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn tcpi_tfo_syn_data_acked(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tcpi_tfo_syn_data_acked(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn tcpi_tfo_syn_data_acked_raw(this: *const Self) -> u_int32_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_tcpi_tfo_syn_data_acked_raw(this: *mut Self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn tcpi_tfo_syn_data_rcv(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tcpi_tfo_syn_data_rcv(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn tcpi_tfo_syn_data_rcv_raw(this: *const Self) -> u_int32_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                5usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_tcpi_tfo_syn_data_rcv_raw(this: *mut Self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                5usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn tcpi_tfo_cookie_req_rcv(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tcpi_tfo_cookie_req_rcv(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn tcpi_tfo_cookie_req_rcv_raw(this: *const Self) -> u_int32_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                6usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_tcpi_tfo_cookie_req_rcv_raw(this: *mut Self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                6usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn tcpi_tfo_cookie_sent(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tcpi_tfo_cookie_sent(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn tcpi_tfo_cookie_sent_raw(this: *const Self) -> u_int32_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                7usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_tcpi_tfo_cookie_sent_raw(this: *mut Self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                7usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn tcpi_tfo_cookie_invalid(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tcpi_tfo_cookie_invalid(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn tcpi_tfo_cookie_invalid_raw(this: *const Self) -> u_int32_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_tcpi_tfo_cookie_invalid_raw(this: *mut Self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn tcpi_tfo_cookie_wrong(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tcpi_tfo_cookie_wrong(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn tcpi_tfo_cookie_wrong_raw(this: *const Self) -> u_int32_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                9usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_tcpi_tfo_cookie_wrong_raw(this: *mut Self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                9usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn tcpi_tfo_no_cookie_rcv(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tcpi_tfo_no_cookie_rcv(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn tcpi_tfo_no_cookie_rcv_raw(this: *const Self) -> u_int32_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                10usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_tcpi_tfo_no_cookie_rcv_raw(this: *mut Self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                10usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn tcpi_tfo_heuristics_disable(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tcpi_tfo_heuristics_disable(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn tcpi_tfo_heuristics_disable_raw(this: *const Self) -> u_int32_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                11usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_tcpi_tfo_heuristics_disable_raw(this: *mut Self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                11usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn tcpi_tfo_send_blackhole(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tcpi_tfo_send_blackhole(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn tcpi_tfo_send_blackhole_raw(this: *const Self) -> u_int32_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                12usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_tcpi_tfo_send_blackhole_raw(this: *mut Self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                12usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn tcpi_tfo_recv_blackhole(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tcpi_tfo_recv_blackhole(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn tcpi_tfo_recv_blackhole_raw(this: *const Self) -> u_int32_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                13usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_tcpi_tfo_recv_blackhole_raw(this: *mut Self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                13usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn tcpi_tfo_onebyte_proxy(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tcpi_tfo_onebyte_proxy(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn tcpi_tfo_onebyte_proxy_raw(this: *const Self) -> u_int32_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                14usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_tcpi_tfo_onebyte_proxy_raw(this: *mut Self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                14usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn __pad2(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 17u8) as u32) }
    }
    #[inline]
    pub fn set___pad2(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 17u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn __pad2_raw(this: *const Self) -> u_int32_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                15usize,
                17u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set___pad2_raw(this: *mut Self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                15usize,
                17u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        tcpi_tfo_cookie_req: u_int32_t,
        tcpi_tfo_cookie_rcv: u_int32_t,
        tcpi_tfo_syn_loss: u_int32_t,
        tcpi_tfo_syn_data_sent: u_int32_t,
        tcpi_tfo_syn_data_acked: u_int32_t,
        tcpi_tfo_syn_data_rcv: u_int32_t,
        tcpi_tfo_cookie_req_rcv: u_int32_t,
        tcpi_tfo_cookie_sent: u_int32_t,
        tcpi_tfo_cookie_invalid: u_int32_t,
        tcpi_tfo_cookie_wrong: u_int32_t,
        tcpi_tfo_no_cookie_rcv: u_int32_t,
        tcpi_tfo_heuristics_disable: u_int32_t,
        tcpi_tfo_send_blackhole: u_int32_t,
        tcpi_tfo_recv_blackhole: u_int32_t,
        tcpi_tfo_onebyte_proxy: u_int32_t,
        __pad2: u_int32_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let tcpi_tfo_cookie_req: u32 = unsafe { ::std::mem::transmute(tcpi_tfo_cookie_req) };
            tcpi_tfo_cookie_req as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let tcpi_tfo_cookie_rcv: u32 = unsafe { ::std::mem::transmute(tcpi_tfo_cookie_rcv) };
            tcpi_tfo_cookie_rcv as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let tcpi_tfo_syn_loss: u32 = unsafe { ::std::mem::transmute(tcpi_tfo_syn_loss) };
            tcpi_tfo_syn_loss as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let tcpi_tfo_syn_data_sent: u32 =
                unsafe { ::std::mem::transmute(tcpi_tfo_syn_data_sent) };
            tcpi_tfo_syn_data_sent as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let tcpi_tfo_syn_data_acked: u32 =
                unsafe { ::std::mem::transmute(tcpi_tfo_syn_data_acked) };
            tcpi_tfo_syn_data_acked as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let tcpi_tfo_syn_data_rcv: u32 =
                unsafe { ::std::mem::transmute(tcpi_tfo_syn_data_rcv) };
            tcpi_tfo_syn_data_rcv as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let tcpi_tfo_cookie_req_rcv: u32 =
                unsafe { ::std::mem::transmute(tcpi_tfo_cookie_req_rcv) };
            tcpi_tfo_cookie_req_rcv as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let tcpi_tfo_cookie_sent: u32 = unsafe { ::std::mem::transmute(tcpi_tfo_cookie_sent) };
            tcpi_tfo_cookie_sent as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let tcpi_tfo_cookie_invalid: u32 =
                unsafe { ::std::mem::transmute(tcpi_tfo_cookie_invalid) };
            tcpi_tfo_cookie_invalid as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let tcpi_tfo_cookie_wrong: u32 =
                unsafe { ::std::mem::transmute(tcpi_tfo_cookie_wrong) };
            tcpi_tfo_cookie_wrong as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let tcpi_tfo_no_cookie_rcv: u32 =
                unsafe { ::std::mem::transmute(tcpi_tfo_no_cookie_rcv) };
            tcpi_tfo_no_cookie_rcv as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let tcpi_tfo_heuristics_disable: u32 =
                unsafe { ::std::mem::transmute(tcpi_tfo_heuristics_disable) };
            tcpi_tfo_heuristics_disable as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let tcpi_tfo_send_blackhole: u32 =
                unsafe { ::std::mem::transmute(tcpi_tfo_send_blackhole) };
            tcpi_tfo_send_blackhole as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let tcpi_tfo_recv_blackhole: u32 =
                unsafe { ::std::mem::transmute(tcpi_tfo_recv_blackhole) };
            tcpi_tfo_recv_blackhole as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let tcpi_tfo_onebyte_proxy: u32 =
                unsafe { ::std::mem::transmute(tcpi_tfo_onebyte_proxy) };
            tcpi_tfo_onebyte_proxy as u64
        });
        __bindgen_bitfield_unit.set(15usize, 17u8, {
            let __pad2: u32 = unsafe { ::std::mem::transmute(__pad2) };
            __pad2 as u64
        });
        __bindgen_bitfield_unit
    }
}
unsafe extern "C" {
    pub fn inet_addr(arg1: *const ::std::os::raw::c_char) -> in_addr_t;
}
unsafe extern "C" {
    pub fn inet_ntoa(arg1: in_addr) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn inet_ntop(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_char,
        arg4: socklen_t,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn inet_pton(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ascii2addr(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn addr2ascii(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn inet_aton(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut in_addr,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn inet_lnaof(arg1: in_addr) -> in_addr_t;
}
unsafe extern "C" {
    pub fn inet_makeaddr(arg1: in_addr_t, arg2: in_addr_t) -> in_addr;
}
unsafe extern "C" {
    pub fn inet_netof(arg1: in_addr) -> in_addr_t;
}
unsafe extern "C" {
    pub fn inet_network(arg1: *const ::std::os::raw::c_char) -> in_addr_t;
}
unsafe extern "C" {
    pub fn inet_net_ntop(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_char,
        arg5: __darwin_size_t,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn inet_net_pton(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_void,
        arg4: __darwin_size_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn inet_neta(
        arg1: in_addr_t,
        arg2: *mut ::std::os::raw::c_char,
        arg3: __darwin_size_t,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn inet_nsap_addr(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_uchar,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    pub fn inet_nsap_ntoa(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_uchar,
        arg3: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub static mut h_errno: ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hostent {
    pub h_name: *mut ::std::os::raw::c_char,
    pub h_aliases: *mut *mut ::std::os::raw::c_char,
    pub h_addrtype: ::std::os::raw::c_int,
    pub h_length: ::std::os::raw::c_int,
    pub h_addr_list: *mut *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hostent"][::std::mem::size_of::<hostent>() - 32usize];
    ["Alignment of hostent"][::std::mem::align_of::<hostent>() - 8usize];
    ["Offset of field: hostent::h_name"][::std::mem::offset_of!(hostent, h_name) - 0usize];
    ["Offset of field: hostent::h_aliases"][::std::mem::offset_of!(hostent, h_aliases) - 8usize];
    ["Offset of field: hostent::h_addrtype"][::std::mem::offset_of!(hostent, h_addrtype) - 16usize];
    ["Offset of field: hostent::h_length"][::std::mem::offset_of!(hostent, h_length) - 20usize];
    ["Offset of field: hostent::h_addr_list"]
        [::std::mem::offset_of!(hostent, h_addr_list) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct netent {
    pub n_name: *mut ::std::os::raw::c_char,
    pub n_aliases: *mut *mut ::std::os::raw::c_char,
    pub n_addrtype: ::std::os::raw::c_int,
    pub n_net: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of netent"][::std::mem::size_of::<netent>() - 24usize];
    ["Alignment of netent"][::std::mem::align_of::<netent>() - 8usize];
    ["Offset of field: netent::n_name"][::std::mem::offset_of!(netent, n_name) - 0usize];
    ["Offset of field: netent::n_aliases"][::std::mem::offset_of!(netent, n_aliases) - 8usize];
    ["Offset of field: netent::n_addrtype"][::std::mem::offset_of!(netent, n_addrtype) - 16usize];
    ["Offset of field: netent::n_net"][::std::mem::offset_of!(netent, n_net) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct servent {
    pub s_name: *mut ::std::os::raw::c_char,
    pub s_aliases: *mut *mut ::std::os::raw::c_char,
    pub s_port: ::std::os::raw::c_int,
    pub s_proto: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of servent"][::std::mem::size_of::<servent>() - 32usize];
    ["Alignment of servent"][::std::mem::align_of::<servent>() - 8usize];
    ["Offset of field: servent::s_name"][::std::mem::offset_of!(servent, s_name) - 0usize];
    ["Offset of field: servent::s_aliases"][::std::mem::offset_of!(servent, s_aliases) - 8usize];
    ["Offset of field: servent::s_port"][::std::mem::offset_of!(servent, s_port) - 16usize];
    ["Offset of field: servent::s_proto"][::std::mem::offset_of!(servent, s_proto) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct protoent {
    pub p_name: *mut ::std::os::raw::c_char,
    pub p_aliases: *mut *mut ::std::os::raw::c_char,
    pub p_proto: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of protoent"][::std::mem::size_of::<protoent>() - 24usize];
    ["Alignment of protoent"][::std::mem::align_of::<protoent>() - 8usize];
    ["Offset of field: protoent::p_name"][::std::mem::offset_of!(protoent, p_name) - 0usize];
    ["Offset of field: protoent::p_aliases"][::std::mem::offset_of!(protoent, p_aliases) - 8usize];
    ["Offset of field: protoent::p_proto"][::std::mem::offset_of!(protoent, p_proto) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct addrinfo {
    pub ai_flags: ::std::os::raw::c_int,
    pub ai_family: ::std::os::raw::c_int,
    pub ai_socktype: ::std::os::raw::c_int,
    pub ai_protocol: ::std::os::raw::c_int,
    pub ai_addrlen: socklen_t,
    pub ai_canonname: *mut ::std::os::raw::c_char,
    pub ai_addr: *mut sockaddr,
    pub ai_next: *mut addrinfo,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of addrinfo"][::std::mem::size_of::<addrinfo>() - 48usize];
    ["Alignment of addrinfo"][::std::mem::align_of::<addrinfo>() - 8usize];
    ["Offset of field: addrinfo::ai_flags"][::std::mem::offset_of!(addrinfo, ai_flags) - 0usize];
    ["Offset of field: addrinfo::ai_family"][::std::mem::offset_of!(addrinfo, ai_family) - 4usize];
    ["Offset of field: addrinfo::ai_socktype"]
        [::std::mem::offset_of!(addrinfo, ai_socktype) - 8usize];
    ["Offset of field: addrinfo::ai_protocol"]
        [::std::mem::offset_of!(addrinfo, ai_protocol) - 12usize];
    ["Offset of field: addrinfo::ai_addrlen"]
        [::std::mem::offset_of!(addrinfo, ai_addrlen) - 16usize];
    ["Offset of field: addrinfo::ai_canonname"]
        [::std::mem::offset_of!(addrinfo, ai_canonname) - 24usize];
    ["Offset of field: addrinfo::ai_addr"][::std::mem::offset_of!(addrinfo, ai_addr) - 32usize];
    ["Offset of field: addrinfo::ai_next"][::std::mem::offset_of!(addrinfo, ai_next) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rpcent {
    pub r_name: *mut ::std::os::raw::c_char,
    pub r_aliases: *mut *mut ::std::os::raw::c_char,
    pub r_number: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rpcent"][::std::mem::size_of::<rpcent>() - 24usize];
    ["Alignment of rpcent"][::std::mem::align_of::<rpcent>() - 8usize];
    ["Offset of field: rpcent::r_name"][::std::mem::offset_of!(rpcent, r_name) - 0usize];
    ["Offset of field: rpcent::r_aliases"][::std::mem::offset_of!(rpcent, r_aliases) - 8usize];
    ["Offset of field: rpcent::r_number"][::std::mem::offset_of!(rpcent, r_number) - 16usize];
};
unsafe extern "C" {
    pub fn endhostent();
}
unsafe extern "C" {
    pub fn endnetent();
}
unsafe extern "C" {
    pub fn endprotoent();
}
unsafe extern "C" {
    pub fn endservent();
}
unsafe extern "C" {
    pub fn freeaddrinfo(arg1: *mut addrinfo);
}
unsafe extern "C" {
    pub fn gai_strerror(arg1: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn getaddrinfo(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const addrinfo,
        arg4: *mut *mut addrinfo,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn gethostbyaddr(
        arg1: *const ::std::os::raw::c_void,
        arg2: socklen_t,
        arg3: ::std::os::raw::c_int,
    ) -> *mut hostent;
}
unsafe extern "C" {
    pub fn gethostbyname(arg1: *const ::std::os::raw::c_char) -> *mut hostent;
}
unsafe extern "C" {
    pub fn gethostent() -> *mut hostent;
}
unsafe extern "C" {
    pub fn getnameinfo(
        arg1: *const sockaddr,
        arg2: socklen_t,
        arg3: *mut ::std::os::raw::c_char,
        arg4: socklen_t,
        arg5: *mut ::std::os::raw::c_char,
        arg6: socklen_t,
        arg7: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getnetbyaddr(arg1: u32, arg2: ::std::os::raw::c_int) -> *mut netent;
}
unsafe extern "C" {
    pub fn getnetbyname(arg1: *const ::std::os::raw::c_char) -> *mut netent;
}
unsafe extern "C" {
    pub fn getnetent() -> *mut netent;
}
unsafe extern "C" {
    pub fn getprotobyname(arg1: *const ::std::os::raw::c_char) -> *mut protoent;
}
unsafe extern "C" {
    pub fn getprotobynumber(arg1: ::std::os::raw::c_int) -> *mut protoent;
}
unsafe extern "C" {
    pub fn getprotoent() -> *mut protoent;
}
unsafe extern "C" {
    pub fn getservbyname(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut servent;
}
unsafe extern "C" {
    pub fn getservbyport(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut servent;
}
unsafe extern "C" {
    pub fn getservent() -> *mut servent;
}
unsafe extern "C" {
    pub fn sethostent(arg1: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn setnetent(arg1: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn setprotoent(arg1: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn setservent(arg1: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn freehostent(arg1: *mut hostent);
}
unsafe extern "C" {
    pub fn gethostbyname2(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> *mut hostent;
}
unsafe extern "C" {
    pub fn getipnodebyaddr(
        arg1: *const ::std::os::raw::c_void,
        arg2: usize,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> *mut hostent;
}
unsafe extern "C" {
    pub fn getipnodebyname(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> *mut hostent;
}
unsafe extern "C" {
    pub fn getrpcbyname(name: *const ::std::os::raw::c_char) -> *mut rpcent;
}
unsafe extern "C" {
    pub fn getrpcbynumber(number: ::std::os::raw::c_int) -> *mut rpcent;
}
unsafe extern "C" {
    pub fn getrpcent() -> *mut rpcent;
}
unsafe extern "C" {
    pub fn setrpcent(stayopen: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn endrpcent();
}
unsafe extern "C" {
    pub fn herror(arg1: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn hstrerror(arg1: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn innetgr(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getnetgrent(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn endnetgrent();
}
unsafe extern "C" {
    pub fn setnetgrent(arg1: *const ::std::os::raw::c_char);
}
pub type tcflag_t = ::std::os::raw::c_ulong;
pub type cc_t = ::std::os::raw::c_uchar;
pub type speed_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct termios {
    pub c_iflag: tcflag_t,
    pub c_oflag: tcflag_t,
    pub c_cflag: tcflag_t,
    pub c_lflag: tcflag_t,
    pub c_cc: [cc_t; 20usize],
    pub c_ispeed: speed_t,
    pub c_ospeed: speed_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of termios"][::std::mem::size_of::<termios>() - 72usize];
    ["Alignment of termios"][::std::mem::align_of::<termios>() - 8usize];
    ["Offset of field: termios::c_iflag"][::std::mem::offset_of!(termios, c_iflag) - 0usize];
    ["Offset of field: termios::c_oflag"][::std::mem::offset_of!(termios, c_oflag) - 8usize];
    ["Offset of field: termios::c_cflag"][::std::mem::offset_of!(termios, c_cflag) - 16usize];
    ["Offset of field: termios::c_lflag"][::std::mem::offset_of!(termios, c_lflag) - 24usize];
    ["Offset of field: termios::c_cc"][::std::mem::offset_of!(termios, c_cc) - 32usize];
    ["Offset of field: termios::c_ispeed"][::std::mem::offset_of!(termios, c_ispeed) - 56usize];
    ["Offset of field: termios::c_ospeed"][::std::mem::offset_of!(termios, c_ospeed) - 64usize];
};
unsafe extern "C" {
    pub fn cfgetispeed(arg1: *const termios) -> speed_t;
}
unsafe extern "C" {
    pub fn cfgetospeed(arg1: *const termios) -> speed_t;
}
unsafe extern "C" {
    pub fn cfsetispeed(arg1: *mut termios, arg2: speed_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn cfsetospeed(arg1: *mut termios, arg2: speed_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn tcgetattr(arg1: ::std::os::raw::c_int, arg2: *mut termios) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn tcsetattr(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *const termios,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn tcdrain(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn tcflow(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn tcflush(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn tcsendbreak(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn cfmakeraw(arg1: *mut termios);
}
unsafe extern "C" {
    pub fn cfsetspeed(arg1: *mut termios, arg2: speed_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct winsize {
    pub ws_row: ::std::os::raw::c_ushort,
    pub ws_col: ::std::os::raw::c_ushort,
    pub ws_xpixel: ::std::os::raw::c_ushort,
    pub ws_ypixel: ::std::os::raw::c_ushort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of winsize"][::std::mem::size_of::<winsize>() - 8usize];
    ["Alignment of winsize"][::std::mem::align_of::<winsize>() - 2usize];
    ["Offset of field: winsize::ws_row"][::std::mem::offset_of!(winsize, ws_row) - 0usize];
    ["Offset of field: winsize::ws_col"][::std::mem::offset_of!(winsize, ws_col) - 2usize];
    ["Offset of field: winsize::ws_xpixel"][::std::mem::offset_of!(winsize, ws_xpixel) - 4usize];
    ["Offset of field: winsize::ws_ypixel"][::std::mem::offset_of!(winsize, ws_ypixel) - 6usize];
};
unsafe extern "C" {
    pub fn tcgetsid(arg1: ::std::os::raw::c_int) -> pid_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct passwd {
    pub pw_name: *mut ::std::os::raw::c_char,
    pub pw_passwd: *mut ::std::os::raw::c_char,
    pub pw_uid: uid_t,
    pub pw_gid: gid_t,
    pub pw_change: __darwin_time_t,
    pub pw_class: *mut ::std::os::raw::c_char,
    pub pw_gecos: *mut ::std::os::raw::c_char,
    pub pw_dir: *mut ::std::os::raw::c_char,
    pub pw_shell: *mut ::std::os::raw::c_char,
    pub pw_expire: __darwin_time_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of passwd"][::std::mem::size_of::<passwd>() - 72usize];
    ["Alignment of passwd"][::std::mem::align_of::<passwd>() - 8usize];
    ["Offset of field: passwd::pw_name"][::std::mem::offset_of!(passwd, pw_name) - 0usize];
    ["Offset of field: passwd::pw_passwd"][::std::mem::offset_of!(passwd, pw_passwd) - 8usize];
    ["Offset of field: passwd::pw_uid"][::std::mem::offset_of!(passwd, pw_uid) - 16usize];
    ["Offset of field: passwd::pw_gid"][::std::mem::offset_of!(passwd, pw_gid) - 20usize];
    ["Offset of field: passwd::pw_change"][::std::mem::offset_of!(passwd, pw_change) - 24usize];
    ["Offset of field: passwd::pw_class"][::std::mem::offset_of!(passwd, pw_class) - 32usize];
    ["Offset of field: passwd::pw_gecos"][::std::mem::offset_of!(passwd, pw_gecos) - 40usize];
    ["Offset of field: passwd::pw_dir"][::std::mem::offset_of!(passwd, pw_dir) - 48usize];
    ["Offset of field: passwd::pw_shell"][::std::mem::offset_of!(passwd, pw_shell) - 56usize];
    ["Offset of field: passwd::pw_expire"][::std::mem::offset_of!(passwd, pw_expire) - 64usize];
};
unsafe extern "C" {
    pub fn getpwuid(arg1: uid_t) -> *mut passwd;
}
unsafe extern "C" {
    pub fn getpwnam(arg1: *const ::std::os::raw::c_char) -> *mut passwd;
}
unsafe extern "C" {
    pub fn getpwuid_r(
        arg1: uid_t,
        arg2: *mut passwd,
        arg3: *mut ::std::os::raw::c_char,
        arg4: usize,
        arg5: *mut *mut passwd,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getpwnam_r(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut passwd,
        arg3: *mut ::std::os::raw::c_char,
        arg4: usize,
        arg5: *mut *mut passwd,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getpwent() -> *mut passwd;
}
unsafe extern "C" {
    pub fn setpwent();
}
unsafe extern "C" {
    pub fn endpwent();
}
pub type uuid_t = __darwin_uuid_t;
pub type uuid_string_t = __darwin_uuid_string_t;
unsafe extern "C" {
    pub static UUID_NULL: uuid_t;
}
unsafe extern "C" {
    pub fn uuid_clear(uu: *mut ::std::os::raw::c_uchar);
}
unsafe extern "C" {
    pub fn uuid_compare(
        uu1: *const ::std::os::raw::c_uchar,
        uu2: *const ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uuid_copy(dst: *mut ::std::os::raw::c_uchar, src: *const ::std::os::raw::c_uchar);
}
unsafe extern "C" {
    pub fn uuid_generate(out: *mut ::std::os::raw::c_uchar);
}
unsafe extern "C" {
    pub fn uuid_generate_random(out: *mut ::std::os::raw::c_uchar);
}
unsafe extern "C" {
    pub fn uuid_generate_time(out: *mut ::std::os::raw::c_uchar);
}
unsafe extern "C" {
    pub fn uuid_is_null(uu: *const ::std::os::raw::c_uchar) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uuid_parse(
        in_: *const ::std::os::raw::c_char,
        uu: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uuid_unparse(uu: *const ::std::os::raw::c_uchar, out: *mut ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn uuid_unparse_lower(uu: *const ::std::os::raw::c_uchar, out: *mut ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn uuid_unparse_upper(uu: *const ::std::os::raw::c_uchar, out: *mut ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn setpassent(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn user_from_uid(arg1: uid_t, arg2: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn getpwuuid(arg1: *mut ::std::os::raw::c_uchar) -> *mut passwd;
}
unsafe extern "C" {
    pub fn getpwuuid_r(
        arg1: *mut ::std::os::raw::c_uchar,
        arg2: *mut passwd,
        arg3: *mut ::std::os::raw::c_char,
        arg4: usize,
        arg5: *mut *mut passwd,
    ) -> ::std::os::raw::c_int;
}
pub type sem_t = ::std::os::raw::c_int;
unsafe extern "C" {
    pub fn sem_close(arg1: *mut sem_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sem_destroy(arg1: *mut sem_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sem_getvalue(
        arg1: *mut sem_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sem_init(
        arg1: *mut sem_t,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sem_open(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        ...
    ) -> *mut sem_t;
}
unsafe extern "C" {
    pub fn sem_post(arg1: *mut sem_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sem_trywait(arg1: *mut sem_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sem_unlink(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sem_wait(arg1: *mut sem_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sched_param {
    pub sched_priority: ::std::os::raw::c_int,
    pub __opaque: [::std::os::raw::c_char; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sched_param"][::std::mem::size_of::<sched_param>() - 8usize];
    ["Alignment of sched_param"][::std::mem::align_of::<sched_param>() - 4usize];
    ["Offset of field: sched_param::sched_priority"]
        [::std::mem::offset_of!(sched_param, sched_priority) - 0usize];
    ["Offset of field: sched_param::__opaque"]
        [::std::mem::offset_of!(sched_param, __opaque) - 4usize];
};
unsafe extern "C" {
    pub fn sched_yield() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sched_get_priority_min(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sched_get_priority_max(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tm"][::std::mem::size_of::<tm>() - 56usize];
    ["Alignment of tm"][::std::mem::align_of::<tm>() - 8usize];
    ["Offset of field: tm::tm_sec"][::std::mem::offset_of!(tm, tm_sec) - 0usize];
    ["Offset of field: tm::tm_min"][::std::mem::offset_of!(tm, tm_min) - 4usize];
    ["Offset of field: tm::tm_hour"][::std::mem::offset_of!(tm, tm_hour) - 8usize];
    ["Offset of field: tm::tm_mday"][::std::mem::offset_of!(tm, tm_mday) - 12usize];
    ["Offset of field: tm::tm_mon"][::std::mem::offset_of!(tm, tm_mon) - 16usize];
    ["Offset of field: tm::tm_year"][::std::mem::offset_of!(tm, tm_year) - 20usize];
    ["Offset of field: tm::tm_wday"][::std::mem::offset_of!(tm, tm_wday) - 24usize];
    ["Offset of field: tm::tm_yday"][::std::mem::offset_of!(tm, tm_yday) - 28usize];
    ["Offset of field: tm::tm_isdst"][::std::mem::offset_of!(tm, tm_isdst) - 32usize];
    ["Offset of field: tm::tm_gmtoff"][::std::mem::offset_of!(tm, tm_gmtoff) - 40usize];
    ["Offset of field: tm::tm_zone"][::std::mem::offset_of!(tm, tm_zone) - 48usize];
};
unsafe extern "C" {
    pub static mut tzname: [*mut ::std::os::raw::c_char; 0usize];
}
unsafe extern "C" {
    pub static mut getdate_err: ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub static mut timezone: ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub static mut daylight: ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn asctime(arg1: *const tm) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn clock() -> clock_t;
}
unsafe extern "C" {
    pub fn ctime(arg1: *const time_t) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn difftime(arg1: time_t, arg2: time_t) -> f64;
}
unsafe extern "C" {
    pub fn getdate(arg1: *const ::std::os::raw::c_char) -> *mut tm;
}
unsafe extern "C" {
    pub fn gmtime(arg1: *const time_t) -> *mut tm;
}
unsafe extern "C" {
    pub fn localtime(arg1: *const time_t) -> *mut tm;
}
unsafe extern "C" {
    pub fn mktime(arg1: *mut tm) -> time_t;
}
unsafe extern "C" {
    pub fn strftime(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const tm,
    ) -> usize;
}
unsafe extern "C" {
    pub fn strptime(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut tm,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn time(arg1: *mut time_t) -> time_t;
}
unsafe extern "C" {
    pub fn tzset();
}
unsafe extern "C" {
    pub fn asctime_r(
        arg1: *const tm,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ctime_r(
        arg1: *const time_t,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn gmtime_r(arg1: *const time_t, arg2: *mut tm) -> *mut tm;
}
unsafe extern "C" {
    pub fn localtime_r(arg1: *const time_t, arg2: *mut tm) -> *mut tm;
}
unsafe extern "C" {
    pub fn posix2time(arg1: time_t) -> time_t;
}
unsafe extern "C" {
    pub fn tzsetwall();
}
unsafe extern "C" {
    pub fn time2posix(arg1: time_t) -> time_t;
}
unsafe extern "C" {
    pub fn timelocal(arg1: *mut tm) -> time_t;
}
unsafe extern "C" {
    pub fn timegm(arg1: *mut tm) -> time_t;
}
unsafe extern "C" {
    pub fn nanosleep(__rqtp: *const timespec, __rmtp: *mut timespec) -> ::std::os::raw::c_int;
}
pub const clockid_t__CLOCK_REALTIME: clockid_t = 0;
pub const clockid_t__CLOCK_MONOTONIC: clockid_t = 6;
pub const clockid_t__CLOCK_MONOTONIC_RAW: clockid_t = 4;
pub const clockid_t__CLOCK_MONOTONIC_RAW_APPROX: clockid_t = 5;
pub const clockid_t__CLOCK_UPTIME_RAW: clockid_t = 8;
pub const clockid_t__CLOCK_UPTIME_RAW_APPROX: clockid_t = 9;
pub const clockid_t__CLOCK_PROCESS_CPUTIME_ID: clockid_t = 12;
pub const clockid_t__CLOCK_THREAD_CPUTIME_ID: clockid_t = 16;
pub type clockid_t = ::std::os::raw::c_uint;
unsafe extern "C" {
    pub fn clock_getres(__clock_id: clockid_t, __res: *mut timespec) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn clock_gettime(__clock_id: clockid_t, __tp: *mut timespec) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn clock_gettime_nsec_np(__clock_id: clockid_t) -> __uint64_t;
}
unsafe extern "C" {
    pub fn clock_settime(__clock_id: clockid_t, __tp: *const timespec) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn timespec_get(ts: *mut timespec, base: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
pub const QOS_CLASS_USER_INTERACTIVE: _bindgen_ty_1 = 33;
pub const QOS_CLASS_USER_INITIATED: _bindgen_ty_1 = 25;
pub const QOS_CLASS_DEFAULT: _bindgen_ty_1 = 21;
pub const QOS_CLASS_UTILITY: _bindgen_ty_1 = 17;
pub const QOS_CLASS_BACKGROUND: _bindgen_ty_1 = 9;
pub const QOS_CLASS_UNSPECIFIED: _bindgen_ty_1 = 0;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
pub type qos_class_t = ::std::os::raw::c_uint;
unsafe extern "C" {
    pub fn qos_class_self() -> qos_class_t;
}
unsafe extern "C" {
    pub fn qos_class_main() -> qos_class_t;
}
unsafe extern "C" {
    pub fn pthread_attr_set_qos_class_np(
        __attr: *mut pthread_attr_t,
        __qos_class: qos_class_t,
        __relative_priority: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_get_qos_class_np(
        __attr: *mut pthread_attr_t,
        __qos_class: *mut qos_class_t,
        __relative_priority: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_set_qos_class_self_np(
        __qos_class: qos_class_t,
        __relative_priority: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_get_qos_class_np(
        __pthread: pthread_t,
        __qos_class: *mut qos_class_t,
        __relative_priority: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_override_s {
    _unused: [u8; 0],
}
pub type pthread_override_t = *mut pthread_override_s;
unsafe extern "C" {
    pub fn pthread_override_qos_class_start_np(
        __pthread: pthread_t,
        __qos_class: qos_class_t,
        __relative_priority: ::std::os::raw::c_int,
    ) -> pthread_override_t;
}
unsafe extern "C" {
    pub fn pthread_override_qos_class_end_np(
        __override: pthread_override_t,
    ) -> ::std::os::raw::c_int;
}
pub type mach_port_t = __darwin_mach_port_t;
unsafe extern "C" {
    pub fn pthread_atfork(
        arg1: ::std::option::Option<unsafe extern "C" fn()>,
        arg2: ::std::option::Option<unsafe extern "C" fn()>,
        arg3: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_destroy(arg1: *mut pthread_attr_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_getdetachstate(
        arg1: *const pthread_attr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_getguardsize(
        arg1: *const pthread_attr_t,
        arg2: *mut usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_getinheritsched(
        arg1: *const pthread_attr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_getschedparam(
        arg1: *const pthread_attr_t,
        arg2: *mut sched_param,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_getschedpolicy(
        arg1: *const pthread_attr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_getscope(
        arg1: *const pthread_attr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_getstack(
        arg1: *const pthread_attr_t,
        arg2: *mut *mut ::std::os::raw::c_void,
        arg3: *mut usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_getstackaddr(
        arg1: *const pthread_attr_t,
        arg2: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_getstacksize(
        arg1: *const pthread_attr_t,
        arg2: *mut usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_init(arg1: *mut pthread_attr_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_setdetachstate(
        arg1: *mut pthread_attr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_setguardsize(
        arg1: *mut pthread_attr_t,
        arg2: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_setinheritsched(
        arg1: *mut pthread_attr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_setschedparam(
        arg1: *mut pthread_attr_t,
        arg2: *const sched_param,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_setschedpolicy(
        arg1: *mut pthread_attr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_setscope(
        arg1: *mut pthread_attr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_setstack(
        arg1: *mut pthread_attr_t,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_setstackaddr(
        arg1: *mut pthread_attr_t,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_setstacksize(
        arg1: *mut pthread_attr_t,
        arg2: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_cancel(arg1: pthread_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_cond_broadcast(arg1: *mut pthread_cond_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_cond_destroy(arg1: *mut pthread_cond_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_cond_init(
        arg1: *mut pthread_cond_t,
        arg2: *const pthread_condattr_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_cond_signal(arg1: *mut pthread_cond_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_cond_timedwait(
        arg1: *mut pthread_cond_t,
        arg2: *mut pthread_mutex_t,
        arg3: *const timespec,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_cond_wait(
        arg1: *mut pthread_cond_t,
        arg2: *mut pthread_mutex_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_condattr_destroy(arg1: *mut pthread_condattr_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_condattr_init(arg1: *mut pthread_condattr_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_condattr_getpshared(
        arg1: *const pthread_condattr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_condattr_setpshared(
        arg1: *mut pthread_condattr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_create(
        arg1: *mut pthread_t,
        arg2: *const pthread_attr_t,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
        >,
        arg4: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_detach(arg1: pthread_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_equal(arg1: pthread_t, arg2: pthread_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_exit(arg1: *mut ::std::os::raw::c_void) -> !;
}
unsafe extern "C" {
    pub fn pthread_getconcurrency() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_getschedparam(
        arg1: pthread_t,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut sched_param,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_getspecific(arg1: pthread_key_t) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn pthread_join(
        arg1: pthread_t,
        arg2: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_key_create(
        arg1: *mut pthread_key_t,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_key_delete(arg1: pthread_key_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutex_destroy(arg1: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutex_getprioceiling(
        arg1: *const pthread_mutex_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutex_init(
        arg1: *mut pthread_mutex_t,
        arg2: *const pthread_mutexattr_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutex_lock(arg1: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutex_setprioceiling(
        arg1: *mut pthread_mutex_t,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutex_trylock(arg1: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutex_unlock(arg1: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutexattr_destroy(arg1: *mut pthread_mutexattr_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutexattr_getprioceiling(
        arg1: *const pthread_mutexattr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutexattr_getprotocol(
        arg1: *const pthread_mutexattr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutexattr_getpshared(
        arg1: *const pthread_mutexattr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutexattr_gettype(
        arg1: *const pthread_mutexattr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutexattr_getpolicy_np(
        arg1: *const pthread_mutexattr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutexattr_init(arg1: *mut pthread_mutexattr_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutexattr_setprioceiling(
        arg1: *mut pthread_mutexattr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutexattr_setprotocol(
        arg1: *mut pthread_mutexattr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutexattr_setpshared(
        arg1: *mut pthread_mutexattr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutexattr_settype(
        arg1: *mut pthread_mutexattr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutexattr_setpolicy_np(
        arg1: *mut pthread_mutexattr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_once(
        arg1: *mut pthread_once_t,
        arg2: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_rwlock_destroy(arg1: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_rwlock_init(
        arg1: *mut pthread_rwlock_t,
        arg2: *const pthread_rwlockattr_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_rwlock_rdlock(arg1: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_rwlock_tryrdlock(arg1: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_rwlock_trywrlock(arg1: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_rwlock_wrlock(arg1: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_rwlock_unlock(arg1: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_rwlockattr_destroy(arg1: *mut pthread_rwlockattr_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_rwlockattr_getpshared(
        arg1: *const pthread_rwlockattr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_rwlockattr_init(arg1: *mut pthread_rwlockattr_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_rwlockattr_setpshared(
        arg1: *mut pthread_rwlockattr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_self() -> pthread_t;
}
unsafe extern "C" {
    pub fn pthread_setcancelstate(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_setcanceltype(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_setconcurrency(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_setschedparam(
        arg1: pthread_t,
        arg2: ::std::os::raw::c_int,
        arg3: *const sched_param,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_setspecific(
        arg1: pthread_key_t,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_testcancel();
}
unsafe extern "C" {
    pub fn pthread_is_threaded_np() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_threadid_np(arg1: pthread_t, arg2: *mut __uint64_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_getname_np(
        arg1: pthread_t,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_setname_np(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_main_np() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mach_thread_np(arg1: pthread_t) -> mach_port_t;
}
unsafe extern "C" {
    pub fn pthread_get_stacksize_np(arg1: pthread_t) -> usize;
}
unsafe extern "C" {
    pub fn pthread_get_stackaddr_np(arg1: pthread_t) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn pthread_cond_signal_thread_np(
        arg1: *mut pthread_cond_t,
        arg2: pthread_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_cond_timedwait_relative_np(
        arg1: *mut pthread_cond_t,
        arg2: *mut pthread_mutex_t,
        arg3: *const timespec,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_create_suspended_np(
        arg1: *mut pthread_t,
        arg2: *const pthread_attr_t,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
        >,
        arg4: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_kill(arg1: pthread_t, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_from_mach_thread_np(arg1: mach_port_t) -> pthread_t;
}
unsafe extern "C" {
    pub fn pthread_sigmask(
        arg1: ::std::os::raw::c_int,
        arg2: *const sigset_t,
        arg3: *mut sigset_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_yield_np();
}
unsafe extern "C" {
    pub fn pthread_jit_write_protect_np(enabled: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn pthread_jit_write_protect_supported_np() -> ::std::os::raw::c_int;
}
pub type pthread_jit_write_callback_t = ::std::option::Option<
    unsafe extern "C" fn(ctx: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
unsafe extern "C" {
    pub fn pthread_jit_write_with_callback_np(
        callback: pthread_jit_write_callback_t,
        ctx: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_jit_write_freeze_callbacks_np();
}
unsafe extern "C" {
    pub fn pthread_cpu_number_np(cpu_number_out: *mut usize) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub static sys_signame: [*const ::std::os::raw::c_char; 32usize];
}
unsafe extern "C" {
    pub static sys_siglist: [*const ::std::os::raw::c_char; 32usize];
}
unsafe extern "C" {
    pub fn raise(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn bsd_signal(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
        ),
    >;
}
unsafe extern "C" {
    pub fn kill(arg1: pid_t, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn killpg(arg1: pid_t, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sigaction(
        arg1: ::std::os::raw::c_int,
        arg2: *const sigaction,
        arg3: *mut sigaction,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sigaddset(arg1: *mut sigset_t, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sigaltstack(arg1: *const stack_t, arg2: *mut stack_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sigdelset(arg1: *mut sigset_t, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sigemptyset(arg1: *mut sigset_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sigfillset(arg1: *mut sigset_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sighold(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sigignore(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn siginterrupt(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sigismember(arg1: *const sigset_t, arg2: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sigpause(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sigpending(arg1: *mut sigset_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sigprocmask(
        arg1: ::std::os::raw::c_int,
        arg2: *const sigset_t,
        arg3: *mut sigset_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sigrelse(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sigset(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
        ),
    >;
}
unsafe extern "C" {
    pub fn sigsuspend(arg1: *const sigset_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sigwait(
        arg1: *const sigset_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn psignal(arg1: ::std::os::raw::c_int, arg2: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn sigblock(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sigsetmask(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sigvec(
        arg1: ::std::os::raw::c_int,
        arg2: *mut sigvec,
        arg3: *mut sigvec,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uv__work {
    pub work: ::std::option::Option<unsafe extern "C" fn(w: *mut uv__work)>,
    pub done: ::std::option::Option<
        unsafe extern "C" fn(w: *mut uv__work, status: ::std::os::raw::c_int),
    >,
    pub loop_: *mut uv_loop_s,
    pub wq: uv__queue,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uv__work"][::std::mem::size_of::<uv__work>() - 40usize];
    ["Alignment of uv__work"][::std::mem::align_of::<uv__work>() - 8usize];
    ["Offset of field: uv__work::work"][::std::mem::offset_of!(uv__work, work) - 0usize];
    ["Offset of field: uv__work::done"][::std::mem::offset_of!(uv__work, done) - 8usize];
    ["Offset of field: uv__work::loop_"][::std::mem::offset_of!(uv__work, loop_) - 16usize];
    ["Offset of field: uv__work::wq"][::std::mem::offset_of!(uv__work, wq) - 24usize];
};
pub type boolean_t = ::std::os::raw::c_int;
pub type kern_return_t = ::std::os::raw::c_int;
pub type natural_t = __darwin_natural_t;
pub type integer_t = ::std::os::raw::c_int;
pub type vm_offset_t = usize;
pub type vm_size_t = usize;
pub type mach_vm_address_t = u64;
pub type mach_vm_offset_t = u64;
pub type mach_vm_size_t = u64;
pub type vm_map_offset_t = u64;
pub type vm_map_address_t = u64;
pub type vm_map_size_t = u64;
pub type vm32_offset_t = u32;
pub type vm32_address_t = u32;
pub type vm32_size_t = u32;
pub type mach_port_context_t = vm_offset_t;
pub type mach_port_name_t = natural_t;
pub type mach_port_name_array_t = *mut mach_port_name_t;
pub type mach_port_array_t = *mut mach_port_t;
pub type mach_port_right_t = natural_t;
pub type mach_port_type_t = natural_t;
pub type mach_port_type_array_t = *mut mach_port_type_t;
pub type mach_port_urefs_t = natural_t;
pub type mach_port_delta_t = integer_t;
pub type mach_port_seqno_t = natural_t;
pub type mach_port_mscount_t = natural_t;
pub type mach_port_msgcount_t = natural_t;
pub type mach_port_rights_t = natural_t;
pub type mach_port_srights_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_port_status {
    pub mps_pset: mach_port_rights_t,
    pub mps_seqno: mach_port_seqno_t,
    pub mps_mscount: mach_port_mscount_t,
    pub mps_qlimit: mach_port_msgcount_t,
    pub mps_msgcount: mach_port_msgcount_t,
    pub mps_sorights: mach_port_rights_t,
    pub mps_srights: boolean_t,
    pub mps_pdrequest: boolean_t,
    pub mps_nsrequest: boolean_t,
    pub mps_flags: natural_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_port_status"][::std::mem::size_of::<mach_port_status>() - 40usize];
    ["Alignment of mach_port_status"][::std::mem::align_of::<mach_port_status>() - 4usize];
    ["Offset of field: mach_port_status::mps_pset"]
        [::std::mem::offset_of!(mach_port_status, mps_pset) - 0usize];
    ["Offset of field: mach_port_status::mps_seqno"]
        [::std::mem::offset_of!(mach_port_status, mps_seqno) - 4usize];
    ["Offset of field: mach_port_status::mps_mscount"]
        [::std::mem::offset_of!(mach_port_status, mps_mscount) - 8usize];
    ["Offset of field: mach_port_status::mps_qlimit"]
        [::std::mem::offset_of!(mach_port_status, mps_qlimit) - 12usize];
    ["Offset of field: mach_port_status::mps_msgcount"]
        [::std::mem::offset_of!(mach_port_status, mps_msgcount) - 16usize];
    ["Offset of field: mach_port_status::mps_sorights"]
        [::std::mem::offset_of!(mach_port_status, mps_sorights) - 20usize];
    ["Offset of field: mach_port_status::mps_srights"]
        [::std::mem::offset_of!(mach_port_status, mps_srights) - 24usize];
    ["Offset of field: mach_port_status::mps_pdrequest"]
        [::std::mem::offset_of!(mach_port_status, mps_pdrequest) - 28usize];
    ["Offset of field: mach_port_status::mps_nsrequest"]
        [::std::mem::offset_of!(mach_port_status, mps_nsrequest) - 32usize];
    ["Offset of field: mach_port_status::mps_flags"]
        [::std::mem::offset_of!(mach_port_status, mps_flags) - 36usize];
};
pub type mach_port_status_t = mach_port_status;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_port_limits {
    pub mpl_qlimit: mach_port_msgcount_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_port_limits"][::std::mem::size_of::<mach_port_limits>() - 4usize];
    ["Alignment of mach_port_limits"][::std::mem::align_of::<mach_port_limits>() - 4usize];
    ["Offset of field: mach_port_limits::mpl_qlimit"]
        [::std::mem::offset_of!(mach_port_limits, mpl_qlimit) - 0usize];
};
pub type mach_port_limits_t = mach_port_limits;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_port_info_ext {
    pub mpie_status: mach_port_status_t,
    pub mpie_boost_cnt: mach_port_msgcount_t,
    pub reserved: [u32; 6usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_port_info_ext"][::std::mem::size_of::<mach_port_info_ext>() - 68usize];
    ["Alignment of mach_port_info_ext"][::std::mem::align_of::<mach_port_info_ext>() - 4usize];
    ["Offset of field: mach_port_info_ext::mpie_status"]
        [::std::mem::offset_of!(mach_port_info_ext, mpie_status) - 0usize];
    ["Offset of field: mach_port_info_ext::mpie_boost_cnt"]
        [::std::mem::offset_of!(mach_port_info_ext, mpie_boost_cnt) - 40usize];
    ["Offset of field: mach_port_info_ext::reserved"]
        [::std::mem::offset_of!(mach_port_info_ext, reserved) - 44usize];
};
pub type mach_port_info_ext_t = mach_port_info_ext;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_port_guard_info {
    pub mpgi_guard: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_port_guard_info"][::std::mem::size_of::<mach_port_guard_info>() - 8usize];
    ["Alignment of mach_port_guard_info"][::std::mem::align_of::<mach_port_guard_info>() - 8usize];
    ["Offset of field: mach_port_guard_info::mpgi_guard"]
        [::std::mem::offset_of!(mach_port_guard_info, mpgi_guard) - 0usize];
};
pub type mach_port_guard_info_t = mach_port_guard_info;
pub type mach_port_info_t = *mut integer_t;
pub type mach_port_flavor_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_port_qos {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub len: natural_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_port_qos"][::std::mem::size_of::<mach_port_qos>() - 8usize];
    ["Alignment of mach_port_qos"][::std::mem::align_of::<mach_port_qos>() - 4usize];
    ["Offset of field: mach_port_qos::len"][::std::mem::offset_of!(mach_port_qos, len) - 4usize];
};
impl mach_port_qos {
    #[inline]
    pub fn name(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_name(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn name_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_name_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn prealloc(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_prealloc(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn prealloc_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_prealloc_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn pad1(&self) -> boolean_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 30u8) as u32) }
    }
    #[inline]
    pub fn set_pad1(&mut self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 30u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn pad1_raw(this: *const Self) -> boolean_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                30u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_pad1_raw(this: *mut Self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                30u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        name: ::std::os::raw::c_uint,
        prealloc: ::std::os::raw::c_uint,
        pad1: boolean_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let name: u32 = unsafe { ::std::mem::transmute(name) };
            name as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let prealloc: u32 = unsafe { ::std::mem::transmute(prealloc) };
            prealloc as u64
        });
        __bindgen_bitfield_unit.set(2usize, 30u8, {
            let pad1: u32 = unsafe { ::std::mem::transmute(pad1) };
            pad1 as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type mach_port_qos_t = mach_port_qos;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_service_port_info {
    pub mspi_string_name: [::std::os::raw::c_char; 255usize],
    pub mspi_domain_type: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_service_port_info"][::std::mem::size_of::<mach_service_port_info>() - 256usize];
    ["Alignment of mach_service_port_info"]
        [::std::mem::align_of::<mach_service_port_info>() - 1usize];
    ["Offset of field: mach_service_port_info::mspi_string_name"]
        [::std::mem::offset_of!(mach_service_port_info, mspi_string_name) - 0usize];
    ["Offset of field: mach_service_port_info::mspi_domain_type"]
        [::std::mem::offset_of!(mach_service_port_info, mspi_domain_type) - 255usize];
};
pub type mach_service_port_info_data_t = mach_service_port_info;
pub type mach_service_port_info_t = *mut mach_service_port_info;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mach_port_options {
    pub flags: u32,
    pub mpl: mach_port_limits_t,
    pub __bindgen_anon_1: mach_port_options__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union mach_port_options__bindgen_ty_1 {
    pub reserved: [u64; 2usize],
    pub work_interval_port: mach_port_name_t,
    pub service_port_info: mach_service_port_info_t,
    pub service_port_name: mach_port_name_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_port_options__bindgen_ty_1"]
        [::std::mem::size_of::<mach_port_options__bindgen_ty_1>() - 16usize];
    ["Alignment of mach_port_options__bindgen_ty_1"]
        [::std::mem::align_of::<mach_port_options__bindgen_ty_1>() - 8usize];
    ["Offset of field: mach_port_options__bindgen_ty_1::reserved"]
        [::std::mem::offset_of!(mach_port_options__bindgen_ty_1, reserved) - 0usize];
    ["Offset of field: mach_port_options__bindgen_ty_1::work_interval_port"]
        [::std::mem::offset_of!(mach_port_options__bindgen_ty_1, work_interval_port) - 0usize];
    ["Offset of field: mach_port_options__bindgen_ty_1::service_port_info"]
        [::std::mem::offset_of!(mach_port_options__bindgen_ty_1, service_port_info) - 0usize];
    ["Offset of field: mach_port_options__bindgen_ty_1::service_port_name"]
        [::std::mem::offset_of!(mach_port_options__bindgen_ty_1, service_port_name) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_port_options"][::std::mem::size_of::<mach_port_options>() - 24usize];
    ["Alignment of mach_port_options"][::std::mem::align_of::<mach_port_options>() - 8usize];
    ["Offset of field: mach_port_options::flags"]
        [::std::mem::offset_of!(mach_port_options, flags) - 0usize];
    ["Offset of field: mach_port_options::mpl"]
        [::std::mem::offset_of!(mach_port_options, mpl) - 4usize];
};
pub type mach_port_options_t = mach_port_options;
pub type mach_port_options_ptr_t = *mut mach_port_options_t;
pub const mach_port_guard_exception_codes_kGUARD_EXC_DESTROY: mach_port_guard_exception_codes = 1;
pub const mach_port_guard_exception_codes_kGUARD_EXC_MOD_REFS: mach_port_guard_exception_codes = 2;
pub const mach_port_guard_exception_codes_kGUARD_EXC_INVALID_OPTIONS:
    mach_port_guard_exception_codes = 3;
pub const mach_port_guard_exception_codes_kGUARD_EXC_SET_CONTEXT: mach_port_guard_exception_codes =
    4;
pub const mach_port_guard_exception_codes_kGUARD_EXC_THREAD_SET_STATE:
    mach_port_guard_exception_codes = 5;
pub const mach_port_guard_exception_codes_kGUARD_EXC_EXCEPTION_BEHAVIOR_ENFORCE:
    mach_port_guard_exception_codes = 6;
pub const mach_port_guard_exception_codes_kGUARD_EXC_UNGUARDED: mach_port_guard_exception_codes = 8;
pub const mach_port_guard_exception_codes_kGUARD_EXC_INCORRECT_GUARD:
    mach_port_guard_exception_codes = 16;
pub const mach_port_guard_exception_codes_kGUARD_EXC_IMMOVABLE: mach_port_guard_exception_codes =
    32;
pub const mach_port_guard_exception_codes_kGUARD_EXC_STRICT_REPLY: mach_port_guard_exception_codes =
    64;
pub const mach_port_guard_exception_codes_kGUARD_EXC_MSG_FILTERED: mach_port_guard_exception_codes =
    128;
pub const mach_port_guard_exception_codes_kGUARD_EXC_INVALID_RIGHT:
    mach_port_guard_exception_codes = 256;
pub const mach_port_guard_exception_codes_kGUARD_EXC_INVALID_NAME: mach_port_guard_exception_codes =
    512;
pub const mach_port_guard_exception_codes_kGUARD_EXC_INVALID_VALUE:
    mach_port_guard_exception_codes = 1024;
pub const mach_port_guard_exception_codes_kGUARD_EXC_INVALID_ARGUMENT:
    mach_port_guard_exception_codes = 2048;
pub const mach_port_guard_exception_codes_kGUARD_EXC_RIGHT_EXISTS: mach_port_guard_exception_codes =
    4096;
pub const mach_port_guard_exception_codes_kGUARD_EXC_KERN_NO_SPACE:
    mach_port_guard_exception_codes = 8192;
pub const mach_port_guard_exception_codes_kGUARD_EXC_KERN_FAILURE: mach_port_guard_exception_codes =
    16384;
pub const mach_port_guard_exception_codes_kGUARD_EXC_KERN_RESOURCE:
    mach_port_guard_exception_codes = 32768;
pub const mach_port_guard_exception_codes_kGUARD_EXC_SEND_INVALID_REPLY:
    mach_port_guard_exception_codes = 65536;
pub const mach_port_guard_exception_codes_kGUARD_EXC_SEND_INVALID_VOUCHER:
    mach_port_guard_exception_codes = 131072;
pub const mach_port_guard_exception_codes_kGUARD_EXC_SEND_INVALID_RIGHT:
    mach_port_guard_exception_codes = 262144;
pub const mach_port_guard_exception_codes_kGUARD_EXC_RCV_INVALID_NAME:
    mach_port_guard_exception_codes = 524288;
pub const mach_port_guard_exception_codes_kGUARD_EXC_RCV_GUARDED_DESC:
    mach_port_guard_exception_codes = 1048576;
pub const mach_port_guard_exception_codes_kGUARD_EXC_MOD_REFS_NON_FATAL:
    mach_port_guard_exception_codes = 2097152;
pub const mach_port_guard_exception_codes_kGUARD_EXC_IMMOVABLE_NON_FATAL:
    mach_port_guard_exception_codes = 4194304;
pub const mach_port_guard_exception_codes_kGUARD_EXC_REQUIRE_REPLY_PORT_SEMANTICS:
    mach_port_guard_exception_codes = 8388608;
pub type mach_port_guard_exception_codes = ::std::os::raw::c_uint;
pub type pointer_t = vm_offset_t;
pub type vm_address_t = vm_offset_t;
pub type addr64_t = u64;
pub type reg64_t = u32;
pub type ppnum_t = u32;
pub type vm_map_t = mach_port_t;
pub type vm_map_read_t = mach_port_t;
pub type vm_map_inspect_t = mach_port_t;
pub type upl_t = mach_port_t;
pub type vm_named_entry_t = mach_port_t;
pub type vm_object_offset_t = u64;
pub type vm_object_size_t = u64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_vm_range {
    pub min_address: mach_vm_offset_t,
    pub max_address: mach_vm_offset_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_vm_range"][::std::mem::size_of::<mach_vm_range>() - 16usize];
    ["Alignment of mach_vm_range"][::std::mem::align_of::<mach_vm_range>() - 8usize];
    ["Offset of field: mach_vm_range::min_address"]
        [::std::mem::offset_of!(mach_vm_range, min_address) - 0usize];
    ["Offset of field: mach_vm_range::max_address"]
        [::std::mem::offset_of!(mach_vm_range, max_address) - 8usize];
};
pub type mach_vm_range_t = *mut mach_vm_range;
pub const mach_vm_range_flavor_t_MACH_VM_RANGE_FLAVOR_INVALID: mach_vm_range_flavor_t = 0;
pub const mach_vm_range_flavor_t_MACH_VM_RANGE_FLAVOR_V1: mach_vm_range_flavor_t = 1;
pub type mach_vm_range_flavor_t = u32;
pub const mach_vm_range_flags_t_MACH_VM_RANGE_NONE: mach_vm_range_flags_t = 0;
pub type mach_vm_range_flags_t = u64;
pub const mach_vm_range_tag_t_MACH_VM_RANGE_DEFAULT: mach_vm_range_tag_t = 0;
pub const mach_vm_range_tag_t_MACH_VM_RANGE_DATA: mach_vm_range_tag_t = 1;
pub const mach_vm_range_tag_t_MACH_VM_RANGE_FIXED: mach_vm_range_tag_t = 2;
pub type mach_vm_range_tag_t = u16;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mach_vm_range_recipe_v1_t {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
    pub range: mach_vm_range,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_vm_range_recipe_v1_t"]
        [::std::mem::size_of::<mach_vm_range_recipe_v1_t>() - 24usize];
    ["Alignment of mach_vm_range_recipe_v1_t"]
        [::std::mem::align_of::<mach_vm_range_recipe_v1_t>() - 1usize];
    ["Offset of field: mach_vm_range_recipe_v1_t::range"]
        [::std::mem::offset_of!(mach_vm_range_recipe_v1_t, range) - 8usize];
};
impl mach_vm_range_recipe_v1_t {
    #[inline]
    pub fn flags(&self) -> mach_vm_range_flags_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 48u8) as u64) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: mach_vm_range_flags_t) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 48u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn flags_raw(this: *const Self) -> mach_vm_range_flags_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                48u8,
            ) as u64)
        }
    }
    #[inline]
    pub unsafe fn set_flags_raw(this: *mut Self, val: mach_vm_range_flags_t) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                48u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn range_tag(&self) -> mach_vm_range_tag_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(48usize, 8u8) as u16) }
    }
    #[inline]
    pub fn set_range_tag(&mut self, val: mach_vm_range_tag_t) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(48usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn range_tag_raw(this: *const Self) -> mach_vm_range_tag_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                48usize,
                8u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_range_tag_raw(this: *mut Self, val: mach_vm_range_tag_t) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                48usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn vm_tag(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(56usize, 8u8) as u8) }
    }
    #[inline]
    pub fn set_vm_tag(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(56usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn vm_tag_raw(this: *const Self) -> u8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                56usize,
                8u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_vm_tag_raw(this: *mut Self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                56usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        flags: mach_vm_range_flags_t,
        range_tag: mach_vm_range_tag_t,
        vm_tag: u8,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 48u8, {
            let flags: u64 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit.set(48usize, 8u8, {
            let range_tag: u16 = unsafe { ::std::mem::transmute(range_tag) };
            range_tag as u64
        });
        __bindgen_bitfield_unit.set(56usize, 8u8, {
            let vm_tag: u8 = unsafe { ::std::mem::transmute(vm_tag) };
            vm_tag as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type mach_vm_range_recipe_t = mach_vm_range_recipe_v1_t;
pub type mach_vm_range_recipes_raw_t = *mut u8;
pub type mach_msg_timeout_t = natural_t;
pub type mach_msg_bits_t = ::std::os::raw::c_uint;
pub type mach_msg_size_t = natural_t;
pub type mach_msg_id_t = integer_t;
pub type mach_msg_priority_t = ::std::os::raw::c_uint;
pub type mach_msg_type_name_t = ::std::os::raw::c_uint;
pub type mach_msg_copy_options_t = ::std::os::raw::c_uint;
pub type mach_msg_guard_flags_t = ::std::os::raw::c_uint;
pub type mach_msg_descriptor_type_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_type_descriptor_t {
    pub pad1: natural_t,
    pub pad2: mach_msg_size_t,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_type_descriptor_t"]
        [::std::mem::size_of::<mach_msg_type_descriptor_t>() - 12usize];
    ["Alignment of mach_msg_type_descriptor_t"]
        [::std::mem::align_of::<mach_msg_type_descriptor_t>() - 4usize];
    ["Offset of field: mach_msg_type_descriptor_t::pad1"]
        [::std::mem::offset_of!(mach_msg_type_descriptor_t, pad1) - 0usize];
    ["Offset of field: mach_msg_type_descriptor_t::pad2"]
        [::std::mem::offset_of!(mach_msg_type_descriptor_t, pad2) - 4usize];
};
impl mach_msg_type_descriptor_t {
    #[inline]
    pub fn pad3(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 24u8) as u32) }
    }
    #[inline]
    pub fn set_pad3(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 24u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn pad3_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                24u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_pad3_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                24u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn type__raw(this: *const Self) -> mach_msg_descriptor_type_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                24usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_type_raw(this: *mut Self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                24usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        pad3: ::std::os::raw::c_uint,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 24u8, {
            let pad3: u32 = unsafe { ::std::mem::transmute(pad3) };
            pad3 as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_port_descriptor_t {
    pub name: mach_port_t,
    pub pad1: mach_msg_size_t,
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_port_descriptor_t"]
        [::std::mem::size_of::<mach_msg_port_descriptor_t>() - 12usize];
    ["Alignment of mach_msg_port_descriptor_t"]
        [::std::mem::align_of::<mach_msg_port_descriptor_t>() - 4usize];
    ["Offset of field: mach_msg_port_descriptor_t::name"]
        [::std::mem::offset_of!(mach_msg_port_descriptor_t, name) - 0usize];
    ["Offset of field: mach_msg_port_descriptor_t::pad1"]
        [::std::mem::offset_of!(mach_msg_port_descriptor_t, pad1) - 4usize];
};
impl mach_msg_port_descriptor_t {
    #[inline]
    pub fn pad2(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_pad2(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn pad2_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                16u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_pad2_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn disposition_raw(this: *const Self) -> mach_msg_type_name_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_disposition_raw(this: *mut Self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn type__raw(this: *const Self) -> mach_msg_descriptor_type_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                24usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_type_raw(this: *mut Self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                24usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        pad2: ::std::os::raw::c_uint,
        disposition: mach_msg_type_name_t,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let pad2: u32 = unsafe { ::std::mem::transmute(pad2) };
            pad2 as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let disposition: u32 = unsafe { ::std::mem::transmute(disposition) };
            disposition as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_ool_descriptor32_t {
    pub address: u32,
    pub size: mach_msg_size_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_ool_descriptor32_t"]
        [::std::mem::size_of::<mach_msg_ool_descriptor32_t>() - 12usize];
    ["Alignment of mach_msg_ool_descriptor32_t"]
        [::std::mem::align_of::<mach_msg_ool_descriptor32_t>() - 4usize];
    ["Offset of field: mach_msg_ool_descriptor32_t::address"]
        [::std::mem::offset_of!(mach_msg_ool_descriptor32_t, address) - 0usize];
    ["Offset of field: mach_msg_ool_descriptor32_t::size"]
        [::std::mem::offset_of!(mach_msg_ool_descriptor32_t, size) - 4usize];
};
impl mach_msg_ool_descriptor32_t {
    #[inline]
    pub fn deallocate(&self) -> boolean_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_deallocate(&mut self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn deallocate_raw(this: *const Self) -> boolean_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_deallocate_raw(this: *mut Self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn copy(&self) -> mach_msg_copy_options_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_copy(&mut self, val: mach_msg_copy_options_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn copy_raw(this: *const Self) -> mach_msg_copy_options_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_copy_raw(this: *mut Self, val: mach_msg_copy_options_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn pad1(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_pad1(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn pad1_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_pad1_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn type__raw(this: *const Self) -> mach_msg_descriptor_type_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                24usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_type_raw(this: *mut Self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                24usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        deallocate: boolean_t,
        copy: mach_msg_copy_options_t,
        pad1: ::std::os::raw::c_uint,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let deallocate: u32 = unsafe { ::std::mem::transmute(deallocate) };
            deallocate as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let copy: u32 = unsafe { ::std::mem::transmute(copy) };
            copy as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let pad1: u32 = unsafe { ::std::mem::transmute(pad1) };
            pad1 as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_ool_descriptor64_t {
    pub address: u64,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub size: mach_msg_size_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_ool_descriptor64_t"]
        [::std::mem::size_of::<mach_msg_ool_descriptor64_t>() - 16usize];
    ["Alignment of mach_msg_ool_descriptor64_t"]
        [::std::mem::align_of::<mach_msg_ool_descriptor64_t>() - 4usize];
    ["Offset of field: mach_msg_ool_descriptor64_t::address"]
        [::std::mem::offset_of!(mach_msg_ool_descriptor64_t, address) - 0usize];
    ["Offset of field: mach_msg_ool_descriptor64_t::size"]
        [::std::mem::offset_of!(mach_msg_ool_descriptor64_t, size) - 12usize];
};
impl mach_msg_ool_descriptor64_t {
    #[inline]
    pub fn deallocate(&self) -> boolean_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_deallocate(&mut self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn deallocate_raw(this: *const Self) -> boolean_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_deallocate_raw(this: *mut Self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn copy(&self) -> mach_msg_copy_options_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_copy(&mut self, val: mach_msg_copy_options_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn copy_raw(this: *const Self) -> mach_msg_copy_options_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_copy_raw(this: *mut Self, val: mach_msg_copy_options_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn pad1(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_pad1(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn pad1_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_pad1_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn type__raw(this: *const Self) -> mach_msg_descriptor_type_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                24usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_type_raw(this: *mut Self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                24usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        deallocate: boolean_t,
        copy: mach_msg_copy_options_t,
        pad1: ::std::os::raw::c_uint,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let deallocate: u32 = unsafe { ::std::mem::transmute(deallocate) };
            deallocate as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let copy: u32 = unsafe { ::std::mem::transmute(copy) };
            copy as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let pad1: u32 = unsafe { ::std::mem::transmute(pad1) };
            pad1 as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_ool_descriptor_t {
    pub address: *mut ::std::os::raw::c_void,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub size: mach_msg_size_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_ool_descriptor_t"]
        [::std::mem::size_of::<mach_msg_ool_descriptor_t>() - 16usize];
    ["Alignment of mach_msg_ool_descriptor_t"]
        [::std::mem::align_of::<mach_msg_ool_descriptor_t>() - 4usize];
    ["Offset of field: mach_msg_ool_descriptor_t::address"]
        [::std::mem::offset_of!(mach_msg_ool_descriptor_t, address) - 0usize];
    ["Offset of field: mach_msg_ool_descriptor_t::size"]
        [::std::mem::offset_of!(mach_msg_ool_descriptor_t, size) - 12usize];
};
impl mach_msg_ool_descriptor_t {
    #[inline]
    pub fn deallocate(&self) -> boolean_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_deallocate(&mut self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn deallocate_raw(this: *const Self) -> boolean_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_deallocate_raw(this: *mut Self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn copy(&self) -> mach_msg_copy_options_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_copy(&mut self, val: mach_msg_copy_options_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn copy_raw(this: *const Self) -> mach_msg_copy_options_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_copy_raw(this: *mut Self, val: mach_msg_copy_options_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn pad1(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_pad1(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn pad1_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_pad1_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn type__raw(this: *const Self) -> mach_msg_descriptor_type_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                24usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_type_raw(this: *mut Self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                24usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        deallocate: boolean_t,
        copy: mach_msg_copy_options_t,
        pad1: ::std::os::raw::c_uint,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let deallocate: u32 = unsafe { ::std::mem::transmute(deallocate) };
            deallocate as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let copy: u32 = unsafe { ::std::mem::transmute(copy) };
            copy as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let pad1: u32 = unsafe { ::std::mem::transmute(pad1) };
            pad1 as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_ool_ports_descriptor32_t {
    pub address: u32,
    pub count: mach_msg_size_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_ool_ports_descriptor32_t"]
        [::std::mem::size_of::<mach_msg_ool_ports_descriptor32_t>() - 12usize];
    ["Alignment of mach_msg_ool_ports_descriptor32_t"]
        [::std::mem::align_of::<mach_msg_ool_ports_descriptor32_t>() - 4usize];
    ["Offset of field: mach_msg_ool_ports_descriptor32_t::address"]
        [::std::mem::offset_of!(mach_msg_ool_ports_descriptor32_t, address) - 0usize];
    ["Offset of field: mach_msg_ool_ports_descriptor32_t::count"]
        [::std::mem::offset_of!(mach_msg_ool_ports_descriptor32_t, count) - 4usize];
};
impl mach_msg_ool_ports_descriptor32_t {
    #[inline]
    pub fn deallocate(&self) -> boolean_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_deallocate(&mut self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn deallocate_raw(this: *const Self) -> boolean_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_deallocate_raw(this: *mut Self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn copy(&self) -> mach_msg_copy_options_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_copy(&mut self, val: mach_msg_copy_options_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn copy_raw(this: *const Self) -> mach_msg_copy_options_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_copy_raw(this: *mut Self, val: mach_msg_copy_options_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn disposition_raw(this: *const Self) -> mach_msg_type_name_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_disposition_raw(this: *mut Self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn type__raw(this: *const Self) -> mach_msg_descriptor_type_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                24usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_type_raw(this: *mut Self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                24usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        deallocate: boolean_t,
        copy: mach_msg_copy_options_t,
        disposition: mach_msg_type_name_t,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let deallocate: u32 = unsafe { ::std::mem::transmute(deallocate) };
            deallocate as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let copy: u32 = unsafe { ::std::mem::transmute(copy) };
            copy as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let disposition: u32 = unsafe { ::std::mem::transmute(disposition) };
            disposition as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_ool_ports_descriptor64_t {
    pub address: u64,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub count: mach_msg_size_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_ool_ports_descriptor64_t"]
        [::std::mem::size_of::<mach_msg_ool_ports_descriptor64_t>() - 16usize];
    ["Alignment of mach_msg_ool_ports_descriptor64_t"]
        [::std::mem::align_of::<mach_msg_ool_ports_descriptor64_t>() - 4usize];
    ["Offset of field: mach_msg_ool_ports_descriptor64_t::address"]
        [::std::mem::offset_of!(mach_msg_ool_ports_descriptor64_t, address) - 0usize];
    ["Offset of field: mach_msg_ool_ports_descriptor64_t::count"]
        [::std::mem::offset_of!(mach_msg_ool_ports_descriptor64_t, count) - 12usize];
};
impl mach_msg_ool_ports_descriptor64_t {
    #[inline]
    pub fn deallocate(&self) -> boolean_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_deallocate(&mut self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn deallocate_raw(this: *const Self) -> boolean_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_deallocate_raw(this: *mut Self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn copy(&self) -> mach_msg_copy_options_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_copy(&mut self, val: mach_msg_copy_options_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn copy_raw(this: *const Self) -> mach_msg_copy_options_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_copy_raw(this: *mut Self, val: mach_msg_copy_options_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn disposition_raw(this: *const Self) -> mach_msg_type_name_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_disposition_raw(this: *mut Self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn type__raw(this: *const Self) -> mach_msg_descriptor_type_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                24usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_type_raw(this: *mut Self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                24usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        deallocate: boolean_t,
        copy: mach_msg_copy_options_t,
        disposition: mach_msg_type_name_t,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let deallocate: u32 = unsafe { ::std::mem::transmute(deallocate) };
            deallocate as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let copy: u32 = unsafe { ::std::mem::transmute(copy) };
            copy as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let disposition: u32 = unsafe { ::std::mem::transmute(disposition) };
            disposition as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_ool_ports_descriptor_t {
    pub address: *mut ::std::os::raw::c_void,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub count: mach_msg_size_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_ool_ports_descriptor_t"]
        [::std::mem::size_of::<mach_msg_ool_ports_descriptor_t>() - 16usize];
    ["Alignment of mach_msg_ool_ports_descriptor_t"]
        [::std::mem::align_of::<mach_msg_ool_ports_descriptor_t>() - 4usize];
    ["Offset of field: mach_msg_ool_ports_descriptor_t::address"]
        [::std::mem::offset_of!(mach_msg_ool_ports_descriptor_t, address) - 0usize];
    ["Offset of field: mach_msg_ool_ports_descriptor_t::count"]
        [::std::mem::offset_of!(mach_msg_ool_ports_descriptor_t, count) - 12usize];
};
impl mach_msg_ool_ports_descriptor_t {
    #[inline]
    pub fn deallocate(&self) -> boolean_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_deallocate(&mut self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn deallocate_raw(this: *const Self) -> boolean_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_deallocate_raw(this: *mut Self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn copy(&self) -> mach_msg_copy_options_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_copy(&mut self, val: mach_msg_copy_options_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn copy_raw(this: *const Self) -> mach_msg_copy_options_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_copy_raw(this: *mut Self, val: mach_msg_copy_options_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn disposition_raw(this: *const Self) -> mach_msg_type_name_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_disposition_raw(this: *mut Self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn type__raw(this: *const Self) -> mach_msg_descriptor_type_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                24usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_type_raw(this: *mut Self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                24usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        deallocate: boolean_t,
        copy: mach_msg_copy_options_t,
        disposition: mach_msg_type_name_t,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let deallocate: u32 = unsafe { ::std::mem::transmute(deallocate) };
            deallocate as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let copy: u32 = unsafe { ::std::mem::transmute(copy) };
            copy as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let disposition: u32 = unsafe { ::std::mem::transmute(disposition) };
            disposition as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_guarded_port_descriptor32_t {
    pub context: u32,
    pub name: mach_port_name_t,
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_guarded_port_descriptor32_t"]
        [::std::mem::size_of::<mach_msg_guarded_port_descriptor32_t>() - 12usize];
    ["Alignment of mach_msg_guarded_port_descriptor32_t"]
        [::std::mem::align_of::<mach_msg_guarded_port_descriptor32_t>() - 4usize];
    ["Offset of field: mach_msg_guarded_port_descriptor32_t::context"]
        [::std::mem::offset_of!(mach_msg_guarded_port_descriptor32_t, context) - 0usize];
    ["Offset of field: mach_msg_guarded_port_descriptor32_t::name"]
        [::std::mem::offset_of!(mach_msg_guarded_port_descriptor32_t, name) - 4usize];
};
impl mach_msg_guarded_port_descriptor32_t {
    #[inline]
    pub fn flags(&self) -> mach_msg_guard_flags_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: mach_msg_guard_flags_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn flags_raw(this: *const Self) -> mach_msg_guard_flags_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                16u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_flags_raw(this: *mut Self, val: mach_msg_guard_flags_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn disposition_raw(this: *const Self) -> mach_msg_type_name_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_disposition_raw(this: *mut Self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn type__raw(this: *const Self) -> mach_msg_descriptor_type_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                24usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_type_raw(this: *mut Self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                24usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        flags: mach_msg_guard_flags_t,
        disposition: mach_msg_type_name_t,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let disposition: u32 = unsafe { ::std::mem::transmute(disposition) };
            disposition as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_guarded_port_descriptor64_t {
    pub context: u64,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub name: mach_port_name_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_guarded_port_descriptor64_t"]
        [::std::mem::size_of::<mach_msg_guarded_port_descriptor64_t>() - 16usize];
    ["Alignment of mach_msg_guarded_port_descriptor64_t"]
        [::std::mem::align_of::<mach_msg_guarded_port_descriptor64_t>() - 4usize];
    ["Offset of field: mach_msg_guarded_port_descriptor64_t::context"]
        [::std::mem::offset_of!(mach_msg_guarded_port_descriptor64_t, context) - 0usize];
    ["Offset of field: mach_msg_guarded_port_descriptor64_t::name"]
        [::std::mem::offset_of!(mach_msg_guarded_port_descriptor64_t, name) - 12usize];
};
impl mach_msg_guarded_port_descriptor64_t {
    #[inline]
    pub fn flags(&self) -> mach_msg_guard_flags_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: mach_msg_guard_flags_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn flags_raw(this: *const Self) -> mach_msg_guard_flags_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                16u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_flags_raw(this: *mut Self, val: mach_msg_guard_flags_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn disposition_raw(this: *const Self) -> mach_msg_type_name_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_disposition_raw(this: *mut Self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn type__raw(this: *const Self) -> mach_msg_descriptor_type_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                24usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_type_raw(this: *mut Self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                24usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        flags: mach_msg_guard_flags_t,
        disposition: mach_msg_type_name_t,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let disposition: u32 = unsafe { ::std::mem::transmute(disposition) };
            disposition as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_guarded_port_descriptor_t {
    pub context: mach_port_context_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub name: mach_port_name_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_guarded_port_descriptor_t"]
        [::std::mem::size_of::<mach_msg_guarded_port_descriptor_t>() - 16usize];
    ["Alignment of mach_msg_guarded_port_descriptor_t"]
        [::std::mem::align_of::<mach_msg_guarded_port_descriptor_t>() - 4usize];
    ["Offset of field: mach_msg_guarded_port_descriptor_t::context"]
        [::std::mem::offset_of!(mach_msg_guarded_port_descriptor_t, context) - 0usize];
    ["Offset of field: mach_msg_guarded_port_descriptor_t::name"]
        [::std::mem::offset_of!(mach_msg_guarded_port_descriptor_t, name) - 12usize];
};
impl mach_msg_guarded_port_descriptor_t {
    #[inline]
    pub fn flags(&self) -> mach_msg_guard_flags_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: mach_msg_guard_flags_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn flags_raw(this: *const Self) -> mach_msg_guard_flags_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                16u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_flags_raw(this: *mut Self, val: mach_msg_guard_flags_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn disposition_raw(this: *const Self) -> mach_msg_type_name_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_disposition_raw(this: *mut Self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn type__raw(this: *const Self) -> mach_msg_descriptor_type_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                24usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_type_raw(this: *mut Self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                24usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        flags: mach_msg_guard_flags_t,
        disposition: mach_msg_type_name_t,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let disposition: u32 = unsafe { ::std::mem::transmute(disposition) };
            disposition as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union mach_msg_descriptor_t {
    pub port: mach_msg_port_descriptor_t,
    pub out_of_line: mach_msg_ool_descriptor_t,
    pub ool_ports: mach_msg_ool_ports_descriptor_t,
    pub type_: mach_msg_type_descriptor_t,
    pub guarded_port: mach_msg_guarded_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_descriptor_t"][::std::mem::size_of::<mach_msg_descriptor_t>() - 16usize];
    ["Alignment of mach_msg_descriptor_t"]
        [::std::mem::align_of::<mach_msg_descriptor_t>() - 4usize];
    ["Offset of field: mach_msg_descriptor_t::port"]
        [::std::mem::offset_of!(mach_msg_descriptor_t, port) - 0usize];
    ["Offset of field: mach_msg_descriptor_t::out_of_line"]
        [::std::mem::offset_of!(mach_msg_descriptor_t, out_of_line) - 0usize];
    ["Offset of field: mach_msg_descriptor_t::ool_ports"]
        [::std::mem::offset_of!(mach_msg_descriptor_t, ool_ports) - 0usize];
    ["Offset of field: mach_msg_descriptor_t::type_"]
        [::std::mem::offset_of!(mach_msg_descriptor_t, type_) - 0usize];
    ["Offset of field: mach_msg_descriptor_t::guarded_port"]
        [::std::mem::offset_of!(mach_msg_descriptor_t, guarded_port) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_body_t {
    pub msgh_descriptor_count: mach_msg_size_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_body_t"][::std::mem::size_of::<mach_msg_body_t>() - 4usize];
    ["Alignment of mach_msg_body_t"][::std::mem::align_of::<mach_msg_body_t>() - 4usize];
    ["Offset of field: mach_msg_body_t::msgh_descriptor_count"]
        [::std::mem::offset_of!(mach_msg_body_t, msgh_descriptor_count) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_header_t {
    pub msgh_bits: mach_msg_bits_t,
    pub msgh_size: mach_msg_size_t,
    pub msgh_remote_port: mach_port_t,
    pub msgh_local_port: mach_port_t,
    pub msgh_voucher_port: mach_port_name_t,
    pub msgh_id: mach_msg_id_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_header_t"][::std::mem::size_of::<mach_msg_header_t>() - 24usize];
    ["Alignment of mach_msg_header_t"][::std::mem::align_of::<mach_msg_header_t>() - 4usize];
    ["Offset of field: mach_msg_header_t::msgh_bits"]
        [::std::mem::offset_of!(mach_msg_header_t, msgh_bits) - 0usize];
    ["Offset of field: mach_msg_header_t::msgh_size"]
        [::std::mem::offset_of!(mach_msg_header_t, msgh_size) - 4usize];
    ["Offset of field: mach_msg_header_t::msgh_remote_port"]
        [::std::mem::offset_of!(mach_msg_header_t, msgh_remote_port) - 8usize];
    ["Offset of field: mach_msg_header_t::msgh_local_port"]
        [::std::mem::offset_of!(mach_msg_header_t, msgh_local_port) - 12usize];
    ["Offset of field: mach_msg_header_t::msgh_voucher_port"]
        [::std::mem::offset_of!(mach_msg_header_t, msgh_voucher_port) - 16usize];
    ["Offset of field: mach_msg_header_t::msgh_id"]
        [::std::mem::offset_of!(mach_msg_header_t, msgh_id) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_base_t {
    pub header: mach_msg_header_t,
    pub body: mach_msg_body_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_base_t"][::std::mem::size_of::<mach_msg_base_t>() - 28usize];
    ["Alignment of mach_msg_base_t"][::std::mem::align_of::<mach_msg_base_t>() - 4usize];
    ["Offset of field: mach_msg_base_t::header"]
        [::std::mem::offset_of!(mach_msg_base_t, header) - 0usize];
    ["Offset of field: mach_msg_base_t::body"]
        [::std::mem::offset_of!(mach_msg_base_t, body) - 24usize];
};
pub type mach_msg_trailer_type_t = ::std::os::raw::c_uint;
pub type mach_msg_trailer_size_t = ::std::os::raw::c_uint;
pub type mach_msg_trailer_info_t = *mut ::std::os::raw::c_char;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_trailer_t"][::std::mem::size_of::<mach_msg_trailer_t>() - 8usize];
    ["Alignment of mach_msg_trailer_t"][::std::mem::align_of::<mach_msg_trailer_t>() - 4usize];
    ["Offset of field: mach_msg_trailer_t::msgh_trailer_type"]
        [::std::mem::offset_of!(mach_msg_trailer_t, msgh_trailer_type) - 0usize];
    ["Offset of field: mach_msg_trailer_t::msgh_trailer_size"]
        [::std::mem::offset_of!(mach_msg_trailer_t, msgh_trailer_size) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_seqno_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_seqno_trailer_t"]
        [::std::mem::size_of::<mach_msg_seqno_trailer_t>() - 12usize];
    ["Alignment of mach_msg_seqno_trailer_t"]
        [::std::mem::align_of::<mach_msg_seqno_trailer_t>() - 4usize];
    ["Offset of field: mach_msg_seqno_trailer_t::msgh_trailer_type"]
        [::std::mem::offset_of!(mach_msg_seqno_trailer_t, msgh_trailer_type) - 0usize];
    ["Offset of field: mach_msg_seqno_trailer_t::msgh_trailer_size"]
        [::std::mem::offset_of!(mach_msg_seqno_trailer_t, msgh_trailer_size) - 4usize];
    ["Offset of field: mach_msg_seqno_trailer_t::msgh_seqno"]
        [::std::mem::offset_of!(mach_msg_seqno_trailer_t, msgh_seqno) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct security_token_t {
    pub val: [::std::os::raw::c_uint; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of security_token_t"][::std::mem::size_of::<security_token_t>() - 8usize];
    ["Alignment of security_token_t"][::std::mem::align_of::<security_token_t>() - 4usize];
    ["Offset of field: security_token_t::val"]
        [::std::mem::offset_of!(security_token_t, val) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_security_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
    pub msgh_sender: security_token_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_security_trailer_t"]
        [::std::mem::size_of::<mach_msg_security_trailer_t>() - 20usize];
    ["Alignment of mach_msg_security_trailer_t"]
        [::std::mem::align_of::<mach_msg_security_trailer_t>() - 4usize];
    ["Offset of field: mach_msg_security_trailer_t::msgh_trailer_type"]
        [::std::mem::offset_of!(mach_msg_security_trailer_t, msgh_trailer_type) - 0usize];
    ["Offset of field: mach_msg_security_trailer_t::msgh_trailer_size"]
        [::std::mem::offset_of!(mach_msg_security_trailer_t, msgh_trailer_size) - 4usize];
    ["Offset of field: mach_msg_security_trailer_t::msgh_seqno"]
        [::std::mem::offset_of!(mach_msg_security_trailer_t, msgh_seqno) - 8usize];
    ["Offset of field: mach_msg_security_trailer_t::msgh_sender"]
        [::std::mem::offset_of!(mach_msg_security_trailer_t, msgh_sender) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct audit_token_t {
    pub val: [::std::os::raw::c_uint; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of audit_token_t"][::std::mem::size_of::<audit_token_t>() - 32usize];
    ["Alignment of audit_token_t"][::std::mem::align_of::<audit_token_t>() - 4usize];
    ["Offset of field: audit_token_t::val"][::std::mem::offset_of!(audit_token_t, val) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_audit_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
    pub msgh_sender: security_token_t,
    pub msgh_audit: audit_token_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_audit_trailer_t"]
        [::std::mem::size_of::<mach_msg_audit_trailer_t>() - 52usize];
    ["Alignment of mach_msg_audit_trailer_t"]
        [::std::mem::align_of::<mach_msg_audit_trailer_t>() - 4usize];
    ["Offset of field: mach_msg_audit_trailer_t::msgh_trailer_type"]
        [::std::mem::offset_of!(mach_msg_audit_trailer_t, msgh_trailer_type) - 0usize];
    ["Offset of field: mach_msg_audit_trailer_t::msgh_trailer_size"]
        [::std::mem::offset_of!(mach_msg_audit_trailer_t, msgh_trailer_size) - 4usize];
    ["Offset of field: mach_msg_audit_trailer_t::msgh_seqno"]
        [::std::mem::offset_of!(mach_msg_audit_trailer_t, msgh_seqno) - 8usize];
    ["Offset of field: mach_msg_audit_trailer_t::msgh_sender"]
        [::std::mem::offset_of!(mach_msg_audit_trailer_t, msgh_sender) - 12usize];
    ["Offset of field: mach_msg_audit_trailer_t::msgh_audit"]
        [::std::mem::offset_of!(mach_msg_audit_trailer_t, msgh_audit) - 20usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_context_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
    pub msgh_sender: security_token_t,
    pub msgh_audit: audit_token_t,
    pub msgh_context: mach_port_context_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_context_trailer_t"]
        [::std::mem::size_of::<mach_msg_context_trailer_t>() - 60usize];
    ["Alignment of mach_msg_context_trailer_t"]
        [::std::mem::align_of::<mach_msg_context_trailer_t>() - 4usize];
    ["Offset of field: mach_msg_context_trailer_t::msgh_trailer_type"]
        [::std::mem::offset_of!(mach_msg_context_trailer_t, msgh_trailer_type) - 0usize];
    ["Offset of field: mach_msg_context_trailer_t::msgh_trailer_size"]
        [::std::mem::offset_of!(mach_msg_context_trailer_t, msgh_trailer_size) - 4usize];
    ["Offset of field: mach_msg_context_trailer_t::msgh_seqno"]
        [::std::mem::offset_of!(mach_msg_context_trailer_t, msgh_seqno) - 8usize];
    ["Offset of field: mach_msg_context_trailer_t::msgh_sender"]
        [::std::mem::offset_of!(mach_msg_context_trailer_t, msgh_sender) - 12usize];
    ["Offset of field: mach_msg_context_trailer_t::msgh_audit"]
        [::std::mem::offset_of!(mach_msg_context_trailer_t, msgh_audit) - 20usize];
    ["Offset of field: mach_msg_context_trailer_t::msgh_context"]
        [::std::mem::offset_of!(mach_msg_context_trailer_t, msgh_context) - 52usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msg_labels_t {
    pub sender: mach_port_name_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of msg_labels_t"][::std::mem::size_of::<msg_labels_t>() - 4usize];
    ["Alignment of msg_labels_t"][::std::mem::align_of::<msg_labels_t>() - 4usize];
    ["Offset of field: msg_labels_t::sender"]
        [::std::mem::offset_of!(msg_labels_t, sender) - 0usize];
};
pub type mach_msg_filter_id = ::std::os::raw::c_int;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_mac_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
    pub msgh_sender: security_token_t,
    pub msgh_audit: audit_token_t,
    pub msgh_context: mach_port_context_t,
    pub msgh_ad: mach_msg_filter_id,
    pub msgh_labels: msg_labels_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_mac_trailer_t"][::std::mem::size_of::<mach_msg_mac_trailer_t>() - 68usize];
    ["Alignment of mach_msg_mac_trailer_t"]
        [::std::mem::align_of::<mach_msg_mac_trailer_t>() - 4usize];
    ["Offset of field: mach_msg_mac_trailer_t::msgh_trailer_type"]
        [::std::mem::offset_of!(mach_msg_mac_trailer_t, msgh_trailer_type) - 0usize];
    ["Offset of field: mach_msg_mac_trailer_t::msgh_trailer_size"]
        [::std::mem::offset_of!(mach_msg_mac_trailer_t, msgh_trailer_size) - 4usize];
    ["Offset of field: mach_msg_mac_trailer_t::msgh_seqno"]
        [::std::mem::offset_of!(mach_msg_mac_trailer_t, msgh_seqno) - 8usize];
    ["Offset of field: mach_msg_mac_trailer_t::msgh_sender"]
        [::std::mem::offset_of!(mach_msg_mac_trailer_t, msgh_sender) - 12usize];
    ["Offset of field: mach_msg_mac_trailer_t::msgh_audit"]
        [::std::mem::offset_of!(mach_msg_mac_trailer_t, msgh_audit) - 20usize];
    ["Offset of field: mach_msg_mac_trailer_t::msgh_context"]
        [::std::mem::offset_of!(mach_msg_mac_trailer_t, msgh_context) - 52usize];
    ["Offset of field: mach_msg_mac_trailer_t::msgh_ad"]
        [::std::mem::offset_of!(mach_msg_mac_trailer_t, msgh_ad) - 60usize];
    ["Offset of field: mach_msg_mac_trailer_t::msgh_labels"]
        [::std::mem::offset_of!(mach_msg_mac_trailer_t, msgh_labels) - 64usize];
};
pub type mach_msg_max_trailer_t = mach_msg_mac_trailer_t;
pub type mach_msg_format_0_trailer_t = mach_msg_security_trailer_t;
unsafe extern "C" {
    pub static KERNEL_SECURITY_TOKEN: security_token_t;
}
unsafe extern "C" {
    pub static KERNEL_AUDIT_TOKEN: audit_token_t;
}
pub type mach_msg_options_t = integer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_empty_send_t {
    pub header: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_empty_send_t"][::std::mem::size_of::<mach_msg_empty_send_t>() - 24usize];
    ["Alignment of mach_msg_empty_send_t"]
        [::std::mem::align_of::<mach_msg_empty_send_t>() - 4usize];
    ["Offset of field: mach_msg_empty_send_t::header"]
        [::std::mem::offset_of!(mach_msg_empty_send_t, header) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_empty_rcv_t {
    pub header: mach_msg_header_t,
    pub trailer: mach_msg_trailer_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_empty_rcv_t"][::std::mem::size_of::<mach_msg_empty_rcv_t>() - 32usize];
    ["Alignment of mach_msg_empty_rcv_t"][::std::mem::align_of::<mach_msg_empty_rcv_t>() - 4usize];
    ["Offset of field: mach_msg_empty_rcv_t::header"]
        [::std::mem::offset_of!(mach_msg_empty_rcv_t, header) - 0usize];
    ["Offset of field: mach_msg_empty_rcv_t::trailer"]
        [::std::mem::offset_of!(mach_msg_empty_rcv_t, trailer) - 24usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union mach_msg_empty_t {
    pub send: mach_msg_empty_send_t,
    pub rcv: mach_msg_empty_rcv_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_empty_t"][::std::mem::size_of::<mach_msg_empty_t>() - 32usize];
    ["Alignment of mach_msg_empty_t"][::std::mem::align_of::<mach_msg_empty_t>() - 4usize];
    ["Offset of field: mach_msg_empty_t::send"]
        [::std::mem::offset_of!(mach_msg_empty_t, send) - 0usize];
    ["Offset of field: mach_msg_empty_t::rcv"]
        [::std::mem::offset_of!(mach_msg_empty_t, rcv) - 0usize];
};
pub type mach_msg_type_size_t = natural_t;
pub type mach_msg_type_number_t = natural_t;
pub type mach_msg_option_t = integer_t;
pub type mach_msg_return_t = kern_return_t;
unsafe extern "C" {
    pub fn mach_msg_overwrite(
        msg: *mut mach_msg_header_t,
        option: mach_msg_option_t,
        send_size: mach_msg_size_t,
        rcv_size: mach_msg_size_t,
        rcv_name: mach_port_name_t,
        timeout: mach_msg_timeout_t,
        notify: mach_port_name_t,
        rcv_msg: *mut mach_msg_header_t,
        rcv_limit: mach_msg_size_t,
    ) -> mach_msg_return_t;
}
unsafe extern "C" {
    pub fn mach_msg(
        msg: *mut mach_msg_header_t,
        option: mach_msg_option_t,
        send_size: mach_msg_size_t,
        rcv_size: mach_msg_size_t,
        rcv_name: mach_port_name_t,
        timeout: mach_msg_timeout_t,
        notify: mach_port_name_t,
    ) -> mach_msg_return_t;
}
unsafe extern "C" {
    pub fn mach_voucher_deallocate(voucher: mach_port_name_t) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_statistics {
    pub free_count: natural_t,
    pub active_count: natural_t,
    pub inactive_count: natural_t,
    pub wire_count: natural_t,
    pub zero_fill_count: natural_t,
    pub reactivations: natural_t,
    pub pageins: natural_t,
    pub pageouts: natural_t,
    pub faults: natural_t,
    pub cow_faults: natural_t,
    pub lookups: natural_t,
    pub hits: natural_t,
    pub purgeable_count: natural_t,
    pub purges: natural_t,
    pub speculative_count: natural_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vm_statistics"][::std::mem::size_of::<vm_statistics>() - 60usize];
    ["Alignment of vm_statistics"][::std::mem::align_of::<vm_statistics>() - 4usize];
    ["Offset of field: vm_statistics::free_count"]
        [::std::mem::offset_of!(vm_statistics, free_count) - 0usize];
    ["Offset of field: vm_statistics::active_count"]
        [::std::mem::offset_of!(vm_statistics, active_count) - 4usize];
    ["Offset of field: vm_statistics::inactive_count"]
        [::std::mem::offset_of!(vm_statistics, inactive_count) - 8usize];
    ["Offset of field: vm_statistics::wire_count"]
        [::std::mem::offset_of!(vm_statistics, wire_count) - 12usize];
    ["Offset of field: vm_statistics::zero_fill_count"]
        [::std::mem::offset_of!(vm_statistics, zero_fill_count) - 16usize];
    ["Offset of field: vm_statistics::reactivations"]
        [::std::mem::offset_of!(vm_statistics, reactivations) - 20usize];
    ["Offset of field: vm_statistics::pageins"]
        [::std::mem::offset_of!(vm_statistics, pageins) - 24usize];
    ["Offset of field: vm_statistics::pageouts"]
        [::std::mem::offset_of!(vm_statistics, pageouts) - 28usize];
    ["Offset of field: vm_statistics::faults"]
        [::std::mem::offset_of!(vm_statistics, faults) - 32usize];
    ["Offset of field: vm_statistics::cow_faults"]
        [::std::mem::offset_of!(vm_statistics, cow_faults) - 36usize];
    ["Offset of field: vm_statistics::lookups"]
        [::std::mem::offset_of!(vm_statistics, lookups) - 40usize];
    ["Offset of field: vm_statistics::hits"][::std::mem::offset_of!(vm_statistics, hits) - 44usize];
    ["Offset of field: vm_statistics::purgeable_count"]
        [::std::mem::offset_of!(vm_statistics, purgeable_count) - 48usize];
    ["Offset of field: vm_statistics::purges"]
        [::std::mem::offset_of!(vm_statistics, purges) - 52usize];
    ["Offset of field: vm_statistics::speculative_count"]
        [::std::mem::offset_of!(vm_statistics, speculative_count) - 56usize];
};
pub type vm_statistics_t = *mut vm_statistics;
pub type vm_statistics_data_t = vm_statistics;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_statistics64 {
    pub free_count: natural_t,
    pub active_count: natural_t,
    pub inactive_count: natural_t,
    pub wire_count: natural_t,
    pub zero_fill_count: u64,
    pub reactivations: u64,
    pub pageins: u64,
    pub pageouts: u64,
    pub faults: u64,
    pub cow_faults: u64,
    pub lookups: u64,
    pub hits: u64,
    pub purges: u64,
    pub purgeable_count: natural_t,
    pub speculative_count: natural_t,
    pub decompressions: u64,
    pub compressions: u64,
    pub swapins: u64,
    pub swapouts: u64,
    pub compressor_page_count: natural_t,
    pub throttled_count: natural_t,
    pub external_page_count: natural_t,
    pub internal_page_count: natural_t,
    pub total_uncompressed_pages_in_compressor: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vm_statistics64"][::std::mem::size_of::<vm_statistics64>() - 152usize];
    ["Alignment of vm_statistics64"][::std::mem::align_of::<vm_statistics64>() - 8usize];
    ["Offset of field: vm_statistics64::free_count"]
        [::std::mem::offset_of!(vm_statistics64, free_count) - 0usize];
    ["Offset of field: vm_statistics64::active_count"]
        [::std::mem::offset_of!(vm_statistics64, active_count) - 4usize];
    ["Offset of field: vm_statistics64::inactive_count"]
        [::std::mem::offset_of!(vm_statistics64, inactive_count) - 8usize];
    ["Offset of field: vm_statistics64::wire_count"]
        [::std::mem::offset_of!(vm_statistics64, wire_count) - 12usize];
    ["Offset of field: vm_statistics64::zero_fill_count"]
        [::std::mem::offset_of!(vm_statistics64, zero_fill_count) - 16usize];
    ["Offset of field: vm_statistics64::reactivations"]
        [::std::mem::offset_of!(vm_statistics64, reactivations) - 24usize];
    ["Offset of field: vm_statistics64::pageins"]
        [::std::mem::offset_of!(vm_statistics64, pageins) - 32usize];
    ["Offset of field: vm_statistics64::pageouts"]
        [::std::mem::offset_of!(vm_statistics64, pageouts) - 40usize];
    ["Offset of field: vm_statistics64::faults"]
        [::std::mem::offset_of!(vm_statistics64, faults) - 48usize];
    ["Offset of field: vm_statistics64::cow_faults"]
        [::std::mem::offset_of!(vm_statistics64, cow_faults) - 56usize];
    ["Offset of field: vm_statistics64::lookups"]
        [::std::mem::offset_of!(vm_statistics64, lookups) - 64usize];
    ["Offset of field: vm_statistics64::hits"]
        [::std::mem::offset_of!(vm_statistics64, hits) - 72usize];
    ["Offset of field: vm_statistics64::purges"]
        [::std::mem::offset_of!(vm_statistics64, purges) - 80usize];
    ["Offset of field: vm_statistics64::purgeable_count"]
        [::std::mem::offset_of!(vm_statistics64, purgeable_count) - 88usize];
    ["Offset of field: vm_statistics64::speculative_count"]
        [::std::mem::offset_of!(vm_statistics64, speculative_count) - 92usize];
    ["Offset of field: vm_statistics64::decompressions"]
        [::std::mem::offset_of!(vm_statistics64, decompressions) - 96usize];
    ["Offset of field: vm_statistics64::compressions"]
        [::std::mem::offset_of!(vm_statistics64, compressions) - 104usize];
    ["Offset of field: vm_statistics64::swapins"]
        [::std::mem::offset_of!(vm_statistics64, swapins) - 112usize];
    ["Offset of field: vm_statistics64::swapouts"]
        [::std::mem::offset_of!(vm_statistics64, swapouts) - 120usize];
    ["Offset of field: vm_statistics64::compressor_page_count"]
        [::std::mem::offset_of!(vm_statistics64, compressor_page_count) - 128usize];
    ["Offset of field: vm_statistics64::throttled_count"]
        [::std::mem::offset_of!(vm_statistics64, throttled_count) - 132usize];
    ["Offset of field: vm_statistics64::external_page_count"]
        [::std::mem::offset_of!(vm_statistics64, external_page_count) - 136usize];
    ["Offset of field: vm_statistics64::internal_page_count"]
        [::std::mem::offset_of!(vm_statistics64, internal_page_count) - 140usize];
    ["Offset of field: vm_statistics64::total_uncompressed_pages_in_compressor"][::std::mem::offset_of!(
        vm_statistics64,
        total_uncompressed_pages_in_compressor
    ) - 144usize];
};
pub type vm_statistics64_t = *mut vm_statistics64;
pub type vm_statistics64_data_t = vm_statistics64;
unsafe extern "C" {
    pub fn vm_stats(
        info: *mut ::std::os::raw::c_void,
        count: *mut ::std::os::raw::c_uint,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_extmod_statistics {
    pub task_for_pid_count: i64,
    pub task_for_pid_caller_count: i64,
    pub thread_creation_count: i64,
    pub thread_creation_caller_count: i64,
    pub thread_set_state_count: i64,
    pub thread_set_state_caller_count: i64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vm_extmod_statistics"][::std::mem::size_of::<vm_extmod_statistics>() - 48usize];
    ["Alignment of vm_extmod_statistics"][::std::mem::align_of::<vm_extmod_statistics>() - 8usize];
    ["Offset of field: vm_extmod_statistics::task_for_pid_count"]
        [::std::mem::offset_of!(vm_extmod_statistics, task_for_pid_count) - 0usize];
    ["Offset of field: vm_extmod_statistics::task_for_pid_caller_count"]
        [::std::mem::offset_of!(vm_extmod_statistics, task_for_pid_caller_count) - 8usize];
    ["Offset of field: vm_extmod_statistics::thread_creation_count"]
        [::std::mem::offset_of!(vm_extmod_statistics, thread_creation_count) - 16usize];
    ["Offset of field: vm_extmod_statistics::thread_creation_caller_count"]
        [::std::mem::offset_of!(vm_extmod_statistics, thread_creation_caller_count) - 24usize];
    ["Offset of field: vm_extmod_statistics::thread_set_state_count"]
        [::std::mem::offset_of!(vm_extmod_statistics, thread_set_state_count) - 32usize];
    ["Offset of field: vm_extmod_statistics::thread_set_state_caller_count"]
        [::std::mem::offset_of!(vm_extmod_statistics, thread_set_state_caller_count) - 40usize];
};
pub type vm_extmod_statistics_t = *mut vm_extmod_statistics;
pub type vm_extmod_statistics_data_t = vm_extmod_statistics;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_purgeable_stat {
    pub count: u64,
    pub size: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vm_purgeable_stat"][::std::mem::size_of::<vm_purgeable_stat>() - 16usize];
    ["Alignment of vm_purgeable_stat"][::std::mem::align_of::<vm_purgeable_stat>() - 8usize];
    ["Offset of field: vm_purgeable_stat::count"]
        [::std::mem::offset_of!(vm_purgeable_stat, count) - 0usize];
    ["Offset of field: vm_purgeable_stat::size"]
        [::std::mem::offset_of!(vm_purgeable_stat, size) - 8usize];
};
pub type vm_purgeable_stat_t = vm_purgeable_stat;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_purgeable_info {
    pub fifo_data: [vm_purgeable_stat_t; 8usize],
    pub obsolete_data: vm_purgeable_stat_t,
    pub lifo_data: [vm_purgeable_stat_t; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vm_purgeable_info"][::std::mem::size_of::<vm_purgeable_info>() - 272usize];
    ["Alignment of vm_purgeable_info"][::std::mem::align_of::<vm_purgeable_info>() - 8usize];
    ["Offset of field: vm_purgeable_info::fifo_data"]
        [::std::mem::offset_of!(vm_purgeable_info, fifo_data) - 0usize];
    ["Offset of field: vm_purgeable_info::obsolete_data"]
        [::std::mem::offset_of!(vm_purgeable_info, obsolete_data) - 128usize];
    ["Offset of field: vm_purgeable_info::lifo_data"]
        [::std::mem::offset_of!(vm_purgeable_info, lifo_data) - 144usize];
};
pub type vm_purgeable_info_t = *mut vm_purgeable_info;
pub const virtual_memory_guard_exception_codes_kGUARD_EXC_DEALLOC_GAP:
    virtual_memory_guard_exception_codes = 1;
pub const virtual_memory_guard_exception_codes_kGUARD_EXC_RECLAIM_COPYIO_FAILURE:
    virtual_memory_guard_exception_codes = 2;
pub const virtual_memory_guard_exception_codes_kGUARD_EXC_RECLAIM_INDEX_FAILURE:
    virtual_memory_guard_exception_codes = 4;
pub const virtual_memory_guard_exception_codes_kGUARD_EXC_RECLAIM_DEALLOCATE_FAILURE:
    virtual_memory_guard_exception_codes = 8;
pub type virtual_memory_guard_exception_codes = ::std::os::raw::c_uint;
pub type cpu_type_t = integer_t;
pub type cpu_subtype_t = integer_t;
pub type cpu_threadtype_t = integer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct time_value {
    pub seconds: integer_t,
    pub microseconds: integer_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of time_value"][::std::mem::size_of::<time_value>() - 8usize];
    ["Alignment of time_value"][::std::mem::align_of::<time_value>() - 4usize];
    ["Offset of field: time_value::seconds"][::std::mem::offset_of!(time_value, seconds) - 0usize];
    ["Offset of field: time_value::microseconds"]
        [::std::mem::offset_of!(time_value, microseconds) - 4usize];
};
pub type time_value_t = time_value;
pub type host_info_t = *mut integer_t;
pub type host_info64_t = *mut integer_t;
pub type host_info_data_t = [integer_t; 1024usize];
pub type kernel_version_t = [::std::os::raw::c_char; 512usize];
pub type kernel_boot_info_t = [::std::os::raw::c_char; 4096usize];
pub type host_flavor_t = integer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct host_can_has_debugger_info {
    pub can_has_debugger: boolean_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of host_can_has_debugger_info"]
        [::std::mem::size_of::<host_can_has_debugger_info>() - 4usize];
    ["Alignment of host_can_has_debugger_info"]
        [::std::mem::align_of::<host_can_has_debugger_info>() - 4usize];
    ["Offset of field: host_can_has_debugger_info::can_has_debugger"]
        [::std::mem::offset_of!(host_can_has_debugger_info, can_has_debugger) - 0usize];
};
pub type host_can_has_debugger_info_data_t = host_can_has_debugger_info;
pub type host_can_has_debugger_info_t = *mut host_can_has_debugger_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct host_basic_info {
    pub max_cpus: integer_t,
    pub avail_cpus: integer_t,
    pub memory_size: natural_t,
    pub cpu_type: cpu_type_t,
    pub cpu_subtype: cpu_subtype_t,
    pub cpu_threadtype: cpu_threadtype_t,
    pub physical_cpu: integer_t,
    pub physical_cpu_max: integer_t,
    pub logical_cpu: integer_t,
    pub logical_cpu_max: integer_t,
    pub max_mem: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of host_basic_info"][::std::mem::size_of::<host_basic_info>() - 48usize];
    ["Alignment of host_basic_info"][::std::mem::align_of::<host_basic_info>() - 4usize];
    ["Offset of field: host_basic_info::max_cpus"]
        [::std::mem::offset_of!(host_basic_info, max_cpus) - 0usize];
    ["Offset of field: host_basic_info::avail_cpus"]
        [::std::mem::offset_of!(host_basic_info, avail_cpus) - 4usize];
    ["Offset of field: host_basic_info::memory_size"]
        [::std::mem::offset_of!(host_basic_info, memory_size) - 8usize];
    ["Offset of field: host_basic_info::cpu_type"]
        [::std::mem::offset_of!(host_basic_info, cpu_type) - 12usize];
    ["Offset of field: host_basic_info::cpu_subtype"]
        [::std::mem::offset_of!(host_basic_info, cpu_subtype) - 16usize];
    ["Offset of field: host_basic_info::cpu_threadtype"]
        [::std::mem::offset_of!(host_basic_info, cpu_threadtype) - 20usize];
    ["Offset of field: host_basic_info::physical_cpu"]
        [::std::mem::offset_of!(host_basic_info, physical_cpu) - 24usize];
    ["Offset of field: host_basic_info::physical_cpu_max"]
        [::std::mem::offset_of!(host_basic_info, physical_cpu_max) - 28usize];
    ["Offset of field: host_basic_info::logical_cpu"]
        [::std::mem::offset_of!(host_basic_info, logical_cpu) - 32usize];
    ["Offset of field: host_basic_info::logical_cpu_max"]
        [::std::mem::offset_of!(host_basic_info, logical_cpu_max) - 36usize];
    ["Offset of field: host_basic_info::max_mem"]
        [::std::mem::offset_of!(host_basic_info, max_mem) - 40usize];
};
pub type host_basic_info_data_t = host_basic_info;
pub type host_basic_info_t = *mut host_basic_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct host_sched_info {
    pub min_timeout: integer_t,
    pub min_quantum: integer_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of host_sched_info"][::std::mem::size_of::<host_sched_info>() - 8usize];
    ["Alignment of host_sched_info"][::std::mem::align_of::<host_sched_info>() - 4usize];
    ["Offset of field: host_sched_info::min_timeout"]
        [::std::mem::offset_of!(host_sched_info, min_timeout) - 0usize];
    ["Offset of field: host_sched_info::min_quantum"]
        [::std::mem::offset_of!(host_sched_info, min_quantum) - 4usize];
};
pub type host_sched_info_data_t = host_sched_info;
pub type host_sched_info_t = *mut host_sched_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kernel_resource_sizes {
    pub task: natural_t,
    pub thread: natural_t,
    pub port: natural_t,
    pub memory_region: natural_t,
    pub memory_object: natural_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kernel_resource_sizes"][::std::mem::size_of::<kernel_resource_sizes>() - 20usize];
    ["Alignment of kernel_resource_sizes"]
        [::std::mem::align_of::<kernel_resource_sizes>() - 4usize];
    ["Offset of field: kernel_resource_sizes::task"]
        [::std::mem::offset_of!(kernel_resource_sizes, task) - 0usize];
    ["Offset of field: kernel_resource_sizes::thread"]
        [::std::mem::offset_of!(kernel_resource_sizes, thread) - 4usize];
    ["Offset of field: kernel_resource_sizes::port"]
        [::std::mem::offset_of!(kernel_resource_sizes, port) - 8usize];
    ["Offset of field: kernel_resource_sizes::memory_region"]
        [::std::mem::offset_of!(kernel_resource_sizes, memory_region) - 12usize];
    ["Offset of field: kernel_resource_sizes::memory_object"]
        [::std::mem::offset_of!(kernel_resource_sizes, memory_object) - 16usize];
};
pub type kernel_resource_sizes_data_t = kernel_resource_sizes;
pub type kernel_resource_sizes_t = *mut kernel_resource_sizes;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct host_priority_info {
    pub kernel_priority: integer_t,
    pub system_priority: integer_t,
    pub server_priority: integer_t,
    pub user_priority: integer_t,
    pub depress_priority: integer_t,
    pub idle_priority: integer_t,
    pub minimum_priority: integer_t,
    pub maximum_priority: integer_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of host_priority_info"][::std::mem::size_of::<host_priority_info>() - 32usize];
    ["Alignment of host_priority_info"][::std::mem::align_of::<host_priority_info>() - 4usize];
    ["Offset of field: host_priority_info::kernel_priority"]
        [::std::mem::offset_of!(host_priority_info, kernel_priority) - 0usize];
    ["Offset of field: host_priority_info::system_priority"]
        [::std::mem::offset_of!(host_priority_info, system_priority) - 4usize];
    ["Offset of field: host_priority_info::server_priority"]
        [::std::mem::offset_of!(host_priority_info, server_priority) - 8usize];
    ["Offset of field: host_priority_info::user_priority"]
        [::std::mem::offset_of!(host_priority_info, user_priority) - 12usize];
    ["Offset of field: host_priority_info::depress_priority"]
        [::std::mem::offset_of!(host_priority_info, depress_priority) - 16usize];
    ["Offset of field: host_priority_info::idle_priority"]
        [::std::mem::offset_of!(host_priority_info, idle_priority) - 20usize];
    ["Offset of field: host_priority_info::minimum_priority"]
        [::std::mem::offset_of!(host_priority_info, minimum_priority) - 24usize];
    ["Offset of field: host_priority_info::maximum_priority"]
        [::std::mem::offset_of!(host_priority_info, maximum_priority) - 28usize];
};
pub type host_priority_info_data_t = host_priority_info;
pub type host_priority_info_t = *mut host_priority_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct host_load_info {
    pub avenrun: [integer_t; 3usize],
    pub mach_factor: [integer_t; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of host_load_info"][::std::mem::size_of::<host_load_info>() - 24usize];
    ["Alignment of host_load_info"][::std::mem::align_of::<host_load_info>() - 4usize];
    ["Offset of field: host_load_info::avenrun"]
        [::std::mem::offset_of!(host_load_info, avenrun) - 0usize];
    ["Offset of field: host_load_info::mach_factor"]
        [::std::mem::offset_of!(host_load_info, mach_factor) - 12usize];
};
pub type host_load_info_data_t = host_load_info;
pub type host_load_info_t = *mut host_load_info;
pub type host_purgable_info_data_t = vm_purgeable_info;
pub type host_purgable_info_t = *mut vm_purgeable_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct host_cpu_load_info {
    pub cpu_ticks: [natural_t; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of host_cpu_load_info"][::std::mem::size_of::<host_cpu_load_info>() - 16usize];
    ["Alignment of host_cpu_load_info"][::std::mem::align_of::<host_cpu_load_info>() - 4usize];
    ["Offset of field: host_cpu_load_info::cpu_ticks"]
        [::std::mem::offset_of!(host_cpu_load_info, cpu_ticks) - 0usize];
};
pub type host_cpu_load_info_data_t = host_cpu_load_info;
pub type host_cpu_load_info_t = *mut host_cpu_load_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct host_preferred_user_arch {
    pub cpu_type: cpu_type_t,
    pub cpu_subtype: cpu_subtype_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of host_preferred_user_arch"]
        [::std::mem::size_of::<host_preferred_user_arch>() - 8usize];
    ["Alignment of host_preferred_user_arch"]
        [::std::mem::align_of::<host_preferred_user_arch>() - 4usize];
    ["Offset of field: host_preferred_user_arch::cpu_type"]
        [::std::mem::offset_of!(host_preferred_user_arch, cpu_type) - 0usize];
    ["Offset of field: host_preferred_user_arch::cpu_subtype"]
        [::std::mem::offset_of!(host_preferred_user_arch, cpu_subtype) - 4usize];
};
pub type host_preferred_user_arch_data_t = host_preferred_user_arch;
pub type host_preferred_user_arch_t = *mut host_preferred_user_arch;
pub type vm_prot_t = ::std::os::raw::c_int;
pub type vm_sync_t = ::std::os::raw::c_uint;
pub type memory_object_offset_t = ::std::os::raw::c_ulonglong;
pub type memory_object_size_t = ::std::os::raw::c_ulonglong;
pub type memory_object_cluster_size_t = natural_t;
pub type memory_object_fault_info_t = *mut natural_t;
pub type vm_object_id_t = ::std::os::raw::c_ulonglong;
pub type memory_object_t = mach_port_t;
pub type memory_object_control_t = mach_port_t;
pub type memory_object_array_t = *mut memory_object_t;
pub type memory_object_name_t = mach_port_t;
pub type memory_object_default_t = mach_port_t;
pub type memory_object_copy_strategy_t = ::std::os::raw::c_int;
pub type memory_object_return_t = ::std::os::raw::c_int;
pub type memory_object_info_t = *mut ::std::os::raw::c_int;
pub type memory_object_flavor_t = ::std::os::raw::c_int;
pub type memory_object_info_data_t = [::std::os::raw::c_int; 1024usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct memory_object_perf_info {
    pub cluster_size: memory_object_cluster_size_t,
    pub may_cache: boolean_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of memory_object_perf_info"][::std::mem::size_of::<memory_object_perf_info>() - 8usize];
    ["Alignment of memory_object_perf_info"]
        [::std::mem::align_of::<memory_object_perf_info>() - 4usize];
    ["Offset of field: memory_object_perf_info::cluster_size"]
        [::std::mem::offset_of!(memory_object_perf_info, cluster_size) - 0usize];
    ["Offset of field: memory_object_perf_info::may_cache"]
        [::std::mem::offset_of!(memory_object_perf_info, may_cache) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct memory_object_attr_info {
    pub copy_strategy: memory_object_copy_strategy_t,
    pub cluster_size: memory_object_cluster_size_t,
    pub may_cache_object: boolean_t,
    pub temporary: boolean_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of memory_object_attr_info"][::std::mem::size_of::<memory_object_attr_info>() - 16usize];
    ["Alignment of memory_object_attr_info"]
        [::std::mem::align_of::<memory_object_attr_info>() - 4usize];
    ["Offset of field: memory_object_attr_info::copy_strategy"]
        [::std::mem::offset_of!(memory_object_attr_info, copy_strategy) - 0usize];
    ["Offset of field: memory_object_attr_info::cluster_size"]
        [::std::mem::offset_of!(memory_object_attr_info, cluster_size) - 4usize];
    ["Offset of field: memory_object_attr_info::may_cache_object"]
        [::std::mem::offset_of!(memory_object_attr_info, may_cache_object) - 8usize];
    ["Offset of field: memory_object_attr_info::temporary"]
        [::std::mem::offset_of!(memory_object_attr_info, temporary) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct memory_object_behave_info {
    pub copy_strategy: memory_object_copy_strategy_t,
    pub temporary: boolean_t,
    pub invalidate: boolean_t,
    pub silent_overwrite: boolean_t,
    pub advisory_pageout: boolean_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of memory_object_behave_info"]
        [::std::mem::size_of::<memory_object_behave_info>() - 20usize];
    ["Alignment of memory_object_behave_info"]
        [::std::mem::align_of::<memory_object_behave_info>() - 4usize];
    ["Offset of field: memory_object_behave_info::copy_strategy"]
        [::std::mem::offset_of!(memory_object_behave_info, copy_strategy) - 0usize];
    ["Offset of field: memory_object_behave_info::temporary"]
        [::std::mem::offset_of!(memory_object_behave_info, temporary) - 4usize];
    ["Offset of field: memory_object_behave_info::invalidate"]
        [::std::mem::offset_of!(memory_object_behave_info, invalidate) - 8usize];
    ["Offset of field: memory_object_behave_info::silent_overwrite"]
        [::std::mem::offset_of!(memory_object_behave_info, silent_overwrite) - 12usize];
    ["Offset of field: memory_object_behave_info::advisory_pageout"]
        [::std::mem::offset_of!(memory_object_behave_info, advisory_pageout) - 16usize];
};
pub type memory_object_behave_info_t = *mut memory_object_behave_info;
pub type memory_object_behave_info_data_t = memory_object_behave_info;
pub type memory_object_perf_info_t = *mut memory_object_perf_info;
pub type memory_object_perf_info_data_t = memory_object_perf_info;
pub type memory_object_attr_info_t = *mut memory_object_attr_info;
pub type memory_object_attr_info_data_t = memory_object_attr_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct arm_state_hdr {
    pub flavor: u32,
    pub count: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of arm_state_hdr"][::std::mem::size_of::<arm_state_hdr>() - 8usize];
    ["Alignment of arm_state_hdr"][::std::mem::align_of::<arm_state_hdr>() - 4usize];
    ["Offset of field: arm_state_hdr::flavor"]
        [::std::mem::offset_of!(arm_state_hdr, flavor) - 0usize];
    ["Offset of field: arm_state_hdr::count"]
        [::std::mem::offset_of!(arm_state_hdr, count) - 4usize];
};
pub type arm_state_hdr_t = arm_state_hdr;
pub type arm_thread_state_t = __darwin_arm_thread_state;
pub type arm_thread_state32_t = __darwin_arm_thread_state;
pub type arm_thread_state64_t = __darwin_arm_thread_state64;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct arm_unified_thread_state {
    pub ash: arm_state_hdr_t,
    pub uts: arm_unified_thread_state__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union arm_unified_thread_state__bindgen_ty_1 {
    pub ts_32: arm_thread_state32_t,
    pub ts_64: arm_thread_state64_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of arm_unified_thread_state__bindgen_ty_1"]
        [::std::mem::size_of::<arm_unified_thread_state__bindgen_ty_1>() - 272usize];
    ["Alignment of arm_unified_thread_state__bindgen_ty_1"]
        [::std::mem::align_of::<arm_unified_thread_state__bindgen_ty_1>() - 8usize];
    ["Offset of field: arm_unified_thread_state__bindgen_ty_1::ts_32"]
        [::std::mem::offset_of!(arm_unified_thread_state__bindgen_ty_1, ts_32) - 0usize];
    ["Offset of field: arm_unified_thread_state__bindgen_ty_1::ts_64"]
        [::std::mem::offset_of!(arm_unified_thread_state__bindgen_ty_1, ts_64) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of arm_unified_thread_state"]
        [::std::mem::size_of::<arm_unified_thread_state>() - 280usize];
    ["Alignment of arm_unified_thread_state"]
        [::std::mem::align_of::<arm_unified_thread_state>() - 8usize];
    ["Offset of field: arm_unified_thread_state::ash"]
        [::std::mem::offset_of!(arm_unified_thread_state, ash) - 0usize];
    ["Offset of field: arm_unified_thread_state::uts"]
        [::std::mem::offset_of!(arm_unified_thread_state, uts) - 8usize];
};
pub type arm_unified_thread_state_t = arm_unified_thread_state;
pub type arm_vfp_state_t = __darwin_arm_vfp_state;
pub type arm_neon_state_t = __darwin_arm_neon_state;
pub type arm_neon_state32_t = __darwin_arm_neon_state;
pub type arm_neon_state64_t = __darwin_arm_neon_state64;
pub type arm_exception_state_t = __darwin_arm_exception_state;
pub type arm_exception_state32_t = __darwin_arm_exception_state;
pub type arm_exception_state64_t = __darwin_arm_exception_state64;
pub type arm_exception_state64_v2_t = __darwin_arm_exception_state64_v2;
pub type arm_debug_state32_t = __darwin_arm_debug_state32;
pub type arm_debug_state64_t = __darwin_arm_debug_state64;
pub type arm_pagein_state_t = __arm_pagein_state;
pub type arm_debug_state_t = __arm_legacy_debug_state;
pub type thread_state_t = *mut natural_t;
pub type thread_state_data_t = [natural_t; 1296usize];
pub type thread_state_flavor_t = ::std::os::raw::c_int;
pub type thread_state_flavor_array_t = *mut thread_state_flavor_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipc_info_space {
    pub iis_genno_mask: natural_t,
    pub iis_table_size: natural_t,
    pub iis_table_next: natural_t,
    pub iis_tree_size: natural_t,
    pub iis_tree_small: natural_t,
    pub iis_tree_hash: natural_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ipc_info_space"][::std::mem::size_of::<ipc_info_space>() - 24usize];
    ["Alignment of ipc_info_space"][::std::mem::align_of::<ipc_info_space>() - 4usize];
    ["Offset of field: ipc_info_space::iis_genno_mask"]
        [::std::mem::offset_of!(ipc_info_space, iis_genno_mask) - 0usize];
    ["Offset of field: ipc_info_space::iis_table_size"]
        [::std::mem::offset_of!(ipc_info_space, iis_table_size) - 4usize];
    ["Offset of field: ipc_info_space::iis_table_next"]
        [::std::mem::offset_of!(ipc_info_space, iis_table_next) - 8usize];
    ["Offset of field: ipc_info_space::iis_tree_size"]
        [::std::mem::offset_of!(ipc_info_space, iis_tree_size) - 12usize];
    ["Offset of field: ipc_info_space::iis_tree_small"]
        [::std::mem::offset_of!(ipc_info_space, iis_tree_small) - 16usize];
    ["Offset of field: ipc_info_space::iis_tree_hash"]
        [::std::mem::offset_of!(ipc_info_space, iis_tree_hash) - 20usize];
};
pub type ipc_info_space_t = ipc_info_space;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipc_info_space_basic {
    pub iisb_genno_mask: natural_t,
    pub iisb_table_size: natural_t,
    pub iisb_table_next: natural_t,
    pub iisb_table_inuse: natural_t,
    pub iisb_reserved: [natural_t; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ipc_info_space_basic"][::std::mem::size_of::<ipc_info_space_basic>() - 24usize];
    ["Alignment of ipc_info_space_basic"][::std::mem::align_of::<ipc_info_space_basic>() - 4usize];
    ["Offset of field: ipc_info_space_basic::iisb_genno_mask"]
        [::std::mem::offset_of!(ipc_info_space_basic, iisb_genno_mask) - 0usize];
    ["Offset of field: ipc_info_space_basic::iisb_table_size"]
        [::std::mem::offset_of!(ipc_info_space_basic, iisb_table_size) - 4usize];
    ["Offset of field: ipc_info_space_basic::iisb_table_next"]
        [::std::mem::offset_of!(ipc_info_space_basic, iisb_table_next) - 8usize];
    ["Offset of field: ipc_info_space_basic::iisb_table_inuse"]
        [::std::mem::offset_of!(ipc_info_space_basic, iisb_table_inuse) - 12usize];
    ["Offset of field: ipc_info_space_basic::iisb_reserved"]
        [::std::mem::offset_of!(ipc_info_space_basic, iisb_reserved) - 16usize];
};
pub type ipc_info_space_basic_t = ipc_info_space_basic;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipc_info_name {
    pub iin_name: mach_port_name_t,
    pub iin_collision: integer_t,
    pub iin_type: mach_port_type_t,
    pub iin_urefs: mach_port_urefs_t,
    pub iin_object: natural_t,
    pub iin_next: natural_t,
    pub iin_hash: natural_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ipc_info_name"][::std::mem::size_of::<ipc_info_name>() - 28usize];
    ["Alignment of ipc_info_name"][::std::mem::align_of::<ipc_info_name>() - 4usize];
    ["Offset of field: ipc_info_name::iin_name"]
        [::std::mem::offset_of!(ipc_info_name, iin_name) - 0usize];
    ["Offset of field: ipc_info_name::iin_collision"]
        [::std::mem::offset_of!(ipc_info_name, iin_collision) - 4usize];
    ["Offset of field: ipc_info_name::iin_type"]
        [::std::mem::offset_of!(ipc_info_name, iin_type) - 8usize];
    ["Offset of field: ipc_info_name::iin_urefs"]
        [::std::mem::offset_of!(ipc_info_name, iin_urefs) - 12usize];
    ["Offset of field: ipc_info_name::iin_object"]
        [::std::mem::offset_of!(ipc_info_name, iin_object) - 16usize];
    ["Offset of field: ipc_info_name::iin_next"]
        [::std::mem::offset_of!(ipc_info_name, iin_next) - 20usize];
    ["Offset of field: ipc_info_name::iin_hash"]
        [::std::mem::offset_of!(ipc_info_name, iin_hash) - 24usize];
};
pub type ipc_info_name_t = ipc_info_name;
pub type ipc_info_name_array_t = *mut ipc_info_name_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipc_info_tree_name {
    pub iitn_name: ipc_info_name_t,
    pub iitn_lchild: mach_port_name_t,
    pub iitn_rchild: mach_port_name_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ipc_info_tree_name"][::std::mem::size_of::<ipc_info_tree_name>() - 36usize];
    ["Alignment of ipc_info_tree_name"][::std::mem::align_of::<ipc_info_tree_name>() - 4usize];
    ["Offset of field: ipc_info_tree_name::iitn_name"]
        [::std::mem::offset_of!(ipc_info_tree_name, iitn_name) - 0usize];
    ["Offset of field: ipc_info_tree_name::iitn_lchild"]
        [::std::mem::offset_of!(ipc_info_tree_name, iitn_lchild) - 28usize];
    ["Offset of field: ipc_info_tree_name::iitn_rchild"]
        [::std::mem::offset_of!(ipc_info_tree_name, iitn_rchild) - 32usize];
};
pub type ipc_info_tree_name_t = ipc_info_tree_name;
pub type ipc_info_tree_name_array_t = *mut ipc_info_tree_name_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipc_info_port {
    pub iip_port_object: natural_t,
    pub iip_receiver_object: natural_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ipc_info_port"][::std::mem::size_of::<ipc_info_port>() - 8usize];
    ["Alignment of ipc_info_port"][::std::mem::align_of::<ipc_info_port>() - 4usize];
    ["Offset of field: ipc_info_port::iip_port_object"]
        [::std::mem::offset_of!(ipc_info_port, iip_port_object) - 0usize];
    ["Offset of field: ipc_info_port::iip_receiver_object"]
        [::std::mem::offset_of!(ipc_info_port, iip_receiver_object) - 4usize];
};
pub type ipc_info_port_t = ipc_info_port;
pub type exception_handler_info_array_t = *mut ipc_info_port_t;
pub type exception_type_t = ::std::os::raw::c_int;
pub type exception_data_type_t = integer_t;
pub type mach_exception_data_type_t = i64;
pub type exception_behavior_t = ::std::os::raw::c_int;
pub type exception_data_t = *mut exception_data_type_t;
pub type mach_exception_data_t = *mut mach_exception_data_type_t;
pub type exception_mask_t = ::std::os::raw::c_uint;
pub type exception_mask_array_t = *mut exception_mask_t;
pub type exception_behavior_array_t = *mut exception_behavior_t;
pub type exception_flavor_array_t = *mut thread_state_flavor_t;
pub type exception_port_array_t = *mut mach_port_t;
pub type exception_port_info_array_t = *mut ipc_info_port_t;
pub type mach_exception_code_t = mach_exception_data_type_t;
pub type mach_exception_subcode_t = mach_exception_data_type_t;
pub type mach_voucher_t = mach_port_t;
pub type mach_voucher_name_t = mach_port_name_t;
pub type mach_voucher_name_array_t = *mut mach_voucher_name_t;
pub type ipc_voucher_t = mach_voucher_t;
pub type mach_voucher_selector_t = u32;
pub type mach_voucher_attr_key_t = u32;
pub type mach_voucher_attr_key_array_t = *mut mach_voucher_attr_key_t;
pub type mach_voucher_attr_content_t = *mut u8;
pub type mach_voucher_attr_content_size_t = u32;
pub type mach_voucher_attr_command_t = u32;
pub type mach_voucher_attr_recipe_command_t = u32;
pub type mach_voucher_attr_recipe_command_array_t = *mut mach_voucher_attr_recipe_command_t;
#[repr(C, packed)]
pub struct mach_voucher_attr_recipe_data {
    pub key: mach_voucher_attr_key_t,
    pub command: mach_voucher_attr_recipe_command_t,
    pub previous_voucher: mach_voucher_name_t,
    pub content_size: mach_voucher_attr_content_size_t,
    pub content: __IncompleteArrayField<u8>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_voucher_attr_recipe_data"]
        [::std::mem::size_of::<mach_voucher_attr_recipe_data>() - 16usize];
    ["Alignment of mach_voucher_attr_recipe_data"]
        [::std::mem::align_of::<mach_voucher_attr_recipe_data>() - 1usize];
    ["Offset of field: mach_voucher_attr_recipe_data::key"]
        [::std::mem::offset_of!(mach_voucher_attr_recipe_data, key) - 0usize];
    ["Offset of field: mach_voucher_attr_recipe_data::command"]
        [::std::mem::offset_of!(mach_voucher_attr_recipe_data, command) - 4usize];
    ["Offset of field: mach_voucher_attr_recipe_data::previous_voucher"]
        [::std::mem::offset_of!(mach_voucher_attr_recipe_data, previous_voucher) - 8usize];
    ["Offset of field: mach_voucher_attr_recipe_data::content_size"]
        [::std::mem::offset_of!(mach_voucher_attr_recipe_data, content_size) - 12usize];
    ["Offset of field: mach_voucher_attr_recipe_data::content"]
        [::std::mem::offset_of!(mach_voucher_attr_recipe_data, content) - 16usize];
};
pub type mach_voucher_attr_recipe_data_t = mach_voucher_attr_recipe_data;
pub type mach_voucher_attr_recipe_t = *mut mach_voucher_attr_recipe_data_t;
pub type mach_voucher_attr_recipe_size_t = mach_msg_type_number_t;
pub type mach_voucher_attr_raw_recipe_t = *mut u8;
pub type mach_voucher_attr_raw_recipe_array_t = mach_voucher_attr_raw_recipe_t;
pub type mach_voucher_attr_raw_recipe_size_t = mach_msg_type_number_t;
pub type mach_voucher_attr_raw_recipe_array_size_t = mach_msg_type_number_t;
pub type mach_voucher_attr_manager_t = mach_port_t;
pub type mach_voucher_attr_control_t = mach_port_t;
pub type ipc_voucher_attr_manager_t = mach_port_t;
pub type ipc_voucher_attr_control_t = mach_port_t;
pub type mach_voucher_attr_value_handle_t = u64;
pub type mach_voucher_attr_value_handle_array_t = *mut mach_voucher_attr_value_handle_t;
pub type mach_voucher_attr_value_handle_array_size_t = mach_msg_type_number_t;
pub type mach_voucher_attr_value_reference_t = u32;
pub type mach_voucher_attr_value_flags_t = u32;
pub type mach_voucher_attr_control_flags_t = u32;
pub type mach_voucher_attr_importance_refs = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct processor_cpu_stat {
    pub irq_ex_cnt: u32,
    pub ipi_cnt: u32,
    pub timer_cnt: u32,
    pub undef_ex_cnt: u32,
    pub unaligned_cnt: u32,
    pub vfp_cnt: u32,
    pub vfp_shortv_cnt: u32,
    pub data_ex_cnt: u32,
    pub instr_ex_cnt: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of processor_cpu_stat"][::std::mem::size_of::<processor_cpu_stat>() - 36usize];
    ["Alignment of processor_cpu_stat"][::std::mem::align_of::<processor_cpu_stat>() - 4usize];
    ["Offset of field: processor_cpu_stat::irq_ex_cnt"]
        [::std::mem::offset_of!(processor_cpu_stat, irq_ex_cnt) - 0usize];
    ["Offset of field: processor_cpu_stat::ipi_cnt"]
        [::std::mem::offset_of!(processor_cpu_stat, ipi_cnt) - 4usize];
    ["Offset of field: processor_cpu_stat::timer_cnt"]
        [::std::mem::offset_of!(processor_cpu_stat, timer_cnt) - 8usize];
    ["Offset of field: processor_cpu_stat::undef_ex_cnt"]
        [::std::mem::offset_of!(processor_cpu_stat, undef_ex_cnt) - 12usize];
    ["Offset of field: processor_cpu_stat::unaligned_cnt"]
        [::std::mem::offset_of!(processor_cpu_stat, unaligned_cnt) - 16usize];
    ["Offset of field: processor_cpu_stat::vfp_cnt"]
        [::std::mem::offset_of!(processor_cpu_stat, vfp_cnt) - 20usize];
    ["Offset of field: processor_cpu_stat::vfp_shortv_cnt"]
        [::std::mem::offset_of!(processor_cpu_stat, vfp_shortv_cnt) - 24usize];
    ["Offset of field: processor_cpu_stat::data_ex_cnt"]
        [::std::mem::offset_of!(processor_cpu_stat, data_ex_cnt) - 28usize];
    ["Offset of field: processor_cpu_stat::instr_ex_cnt"]
        [::std::mem::offset_of!(processor_cpu_stat, instr_ex_cnt) - 32usize];
};
pub type processor_cpu_stat_data_t = processor_cpu_stat;
pub type processor_cpu_stat_t = *mut processor_cpu_stat;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct processor_cpu_stat64 {
    pub irq_ex_cnt: u64,
    pub ipi_cnt: u64,
    pub timer_cnt: u64,
    pub undef_ex_cnt: u64,
    pub unaligned_cnt: u64,
    pub vfp_cnt: u64,
    pub vfp_shortv_cnt: u64,
    pub data_ex_cnt: u64,
    pub instr_ex_cnt: u64,
    pub pmi_cnt: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of processor_cpu_stat64"][::std::mem::size_of::<processor_cpu_stat64>() - 80usize];
    ["Alignment of processor_cpu_stat64"][::std::mem::align_of::<processor_cpu_stat64>() - 4usize];
    ["Offset of field: processor_cpu_stat64::irq_ex_cnt"]
        [::std::mem::offset_of!(processor_cpu_stat64, irq_ex_cnt) - 0usize];
    ["Offset of field: processor_cpu_stat64::ipi_cnt"]
        [::std::mem::offset_of!(processor_cpu_stat64, ipi_cnt) - 8usize];
    ["Offset of field: processor_cpu_stat64::timer_cnt"]
        [::std::mem::offset_of!(processor_cpu_stat64, timer_cnt) - 16usize];
    ["Offset of field: processor_cpu_stat64::undef_ex_cnt"]
        [::std::mem::offset_of!(processor_cpu_stat64, undef_ex_cnt) - 24usize];
    ["Offset of field: processor_cpu_stat64::unaligned_cnt"]
        [::std::mem::offset_of!(processor_cpu_stat64, unaligned_cnt) - 32usize];
    ["Offset of field: processor_cpu_stat64::vfp_cnt"]
        [::std::mem::offset_of!(processor_cpu_stat64, vfp_cnt) - 40usize];
    ["Offset of field: processor_cpu_stat64::vfp_shortv_cnt"]
        [::std::mem::offset_of!(processor_cpu_stat64, vfp_shortv_cnt) - 48usize];
    ["Offset of field: processor_cpu_stat64::data_ex_cnt"]
        [::std::mem::offset_of!(processor_cpu_stat64, data_ex_cnt) - 56usize];
    ["Offset of field: processor_cpu_stat64::instr_ex_cnt"]
        [::std::mem::offset_of!(processor_cpu_stat64, instr_ex_cnt) - 64usize];
    ["Offset of field: processor_cpu_stat64::pmi_cnt"]
        [::std::mem::offset_of!(processor_cpu_stat64, pmi_cnt) - 72usize];
};
pub type processor_cpu_stat64_data_t = processor_cpu_stat64;
pub type processor_cpu_stat64_t = *mut processor_cpu_stat64;
pub type processor_info_t = *mut integer_t;
pub type processor_info_array_t = *mut integer_t;
pub type processor_info_data_t = [integer_t; 1024usize];
pub type processor_set_info_t = *mut integer_t;
pub type processor_set_info_data_t = [integer_t; 1024usize];
pub type processor_flavor_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct processor_basic_info {
    pub cpu_type: cpu_type_t,
    pub cpu_subtype: cpu_subtype_t,
    pub running: boolean_t,
    pub slot_num: ::std::os::raw::c_int,
    pub __bindgen_anon_1: processor_basic_info__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union processor_basic_info__bindgen_ty_1 {
    pub is_master: boolean_t,
    pub is_main: boolean_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of processor_basic_info__bindgen_ty_1"]
        [::std::mem::size_of::<processor_basic_info__bindgen_ty_1>() - 4usize];
    ["Alignment of processor_basic_info__bindgen_ty_1"]
        [::std::mem::align_of::<processor_basic_info__bindgen_ty_1>() - 4usize];
    ["Offset of field: processor_basic_info__bindgen_ty_1::is_master"]
        [::std::mem::offset_of!(processor_basic_info__bindgen_ty_1, is_master) - 0usize];
    ["Offset of field: processor_basic_info__bindgen_ty_1::is_main"]
        [::std::mem::offset_of!(processor_basic_info__bindgen_ty_1, is_main) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of processor_basic_info"][::std::mem::size_of::<processor_basic_info>() - 20usize];
    ["Alignment of processor_basic_info"][::std::mem::align_of::<processor_basic_info>() - 4usize];
    ["Offset of field: processor_basic_info::cpu_type"]
        [::std::mem::offset_of!(processor_basic_info, cpu_type) - 0usize];
    ["Offset of field: processor_basic_info::cpu_subtype"]
        [::std::mem::offset_of!(processor_basic_info, cpu_subtype) - 4usize];
    ["Offset of field: processor_basic_info::running"]
        [::std::mem::offset_of!(processor_basic_info, running) - 8usize];
    ["Offset of field: processor_basic_info::slot_num"]
        [::std::mem::offset_of!(processor_basic_info, slot_num) - 12usize];
};
pub type processor_basic_info_data_t = processor_basic_info;
pub type processor_basic_info_t = *mut processor_basic_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct processor_cpu_load_info {
    pub cpu_ticks: [::std::os::raw::c_uint; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of processor_cpu_load_info"][::std::mem::size_of::<processor_cpu_load_info>() - 16usize];
    ["Alignment of processor_cpu_load_info"]
        [::std::mem::align_of::<processor_cpu_load_info>() - 4usize];
    ["Offset of field: processor_cpu_load_info::cpu_ticks"]
        [::std::mem::offset_of!(processor_cpu_load_info, cpu_ticks) - 0usize];
};
pub type processor_cpu_load_info_data_t = processor_cpu_load_info;
pub type processor_cpu_load_info_t = *mut processor_cpu_load_info;
pub type processor_set_flavor_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct processor_set_basic_info {
    pub processor_count: ::std::os::raw::c_int,
    pub default_policy: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of processor_set_basic_info"]
        [::std::mem::size_of::<processor_set_basic_info>() - 8usize];
    ["Alignment of processor_set_basic_info"]
        [::std::mem::align_of::<processor_set_basic_info>() - 4usize];
    ["Offset of field: processor_set_basic_info::processor_count"]
        [::std::mem::offset_of!(processor_set_basic_info, processor_count) - 0usize];
    ["Offset of field: processor_set_basic_info::default_policy"]
        [::std::mem::offset_of!(processor_set_basic_info, default_policy) - 4usize];
};
pub type processor_set_basic_info_data_t = processor_set_basic_info;
pub type processor_set_basic_info_t = *mut processor_set_basic_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct processor_set_load_info {
    pub task_count: ::std::os::raw::c_int,
    pub thread_count: ::std::os::raw::c_int,
    pub load_average: integer_t,
    pub mach_factor: integer_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of processor_set_load_info"][::std::mem::size_of::<processor_set_load_info>() - 16usize];
    ["Alignment of processor_set_load_info"]
        [::std::mem::align_of::<processor_set_load_info>() - 4usize];
    ["Offset of field: processor_set_load_info::task_count"]
        [::std::mem::offset_of!(processor_set_load_info, task_count) - 0usize];
    ["Offset of field: processor_set_load_info::thread_count"]
        [::std::mem::offset_of!(processor_set_load_info, thread_count) - 4usize];
    ["Offset of field: processor_set_load_info::load_average"]
        [::std::mem::offset_of!(processor_set_load_info, load_average) - 8usize];
    ["Offset of field: processor_set_load_info::mach_factor"]
        [::std::mem::offset_of!(processor_set_load_info, mach_factor) - 12usize];
};
pub type processor_set_load_info_data_t = processor_set_load_info;
pub type processor_set_load_info_t = *mut processor_set_load_info;
pub type policy_t = ::std::os::raw::c_int;
pub type policy_info_t = *mut integer_t;
pub type policy_base_t = *mut integer_t;
pub type policy_limit_t = *mut integer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_timeshare_base {
    pub base_priority: integer_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of policy_timeshare_base"][::std::mem::size_of::<policy_timeshare_base>() - 4usize];
    ["Alignment of policy_timeshare_base"]
        [::std::mem::align_of::<policy_timeshare_base>() - 4usize];
    ["Offset of field: policy_timeshare_base::base_priority"]
        [::std::mem::offset_of!(policy_timeshare_base, base_priority) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_timeshare_limit {
    pub max_priority: integer_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of policy_timeshare_limit"][::std::mem::size_of::<policy_timeshare_limit>() - 4usize];
    ["Alignment of policy_timeshare_limit"]
        [::std::mem::align_of::<policy_timeshare_limit>() - 4usize];
    ["Offset of field: policy_timeshare_limit::max_priority"]
        [::std::mem::offset_of!(policy_timeshare_limit, max_priority) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_timeshare_info {
    pub max_priority: integer_t,
    pub base_priority: integer_t,
    pub cur_priority: integer_t,
    pub depressed: boolean_t,
    pub depress_priority: integer_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of policy_timeshare_info"][::std::mem::size_of::<policy_timeshare_info>() - 20usize];
    ["Alignment of policy_timeshare_info"]
        [::std::mem::align_of::<policy_timeshare_info>() - 4usize];
    ["Offset of field: policy_timeshare_info::max_priority"]
        [::std::mem::offset_of!(policy_timeshare_info, max_priority) - 0usize];
    ["Offset of field: policy_timeshare_info::base_priority"]
        [::std::mem::offset_of!(policy_timeshare_info, base_priority) - 4usize];
    ["Offset of field: policy_timeshare_info::cur_priority"]
        [::std::mem::offset_of!(policy_timeshare_info, cur_priority) - 8usize];
    ["Offset of field: policy_timeshare_info::depressed"]
        [::std::mem::offset_of!(policy_timeshare_info, depressed) - 12usize];
    ["Offset of field: policy_timeshare_info::depress_priority"]
        [::std::mem::offset_of!(policy_timeshare_info, depress_priority) - 16usize];
};
pub type policy_timeshare_base_t = *mut policy_timeshare_base;
pub type policy_timeshare_limit_t = *mut policy_timeshare_limit;
pub type policy_timeshare_info_t = *mut policy_timeshare_info;
pub type policy_timeshare_base_data_t = policy_timeshare_base;
pub type policy_timeshare_limit_data_t = policy_timeshare_limit;
pub type policy_timeshare_info_data_t = policy_timeshare_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_rr_base {
    pub base_priority: integer_t,
    pub quantum: integer_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of policy_rr_base"][::std::mem::size_of::<policy_rr_base>() - 8usize];
    ["Alignment of policy_rr_base"][::std::mem::align_of::<policy_rr_base>() - 4usize];
    ["Offset of field: policy_rr_base::base_priority"]
        [::std::mem::offset_of!(policy_rr_base, base_priority) - 0usize];
    ["Offset of field: policy_rr_base::quantum"]
        [::std::mem::offset_of!(policy_rr_base, quantum) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_rr_limit {
    pub max_priority: integer_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of policy_rr_limit"][::std::mem::size_of::<policy_rr_limit>() - 4usize];
    ["Alignment of policy_rr_limit"][::std::mem::align_of::<policy_rr_limit>() - 4usize];
    ["Offset of field: policy_rr_limit::max_priority"]
        [::std::mem::offset_of!(policy_rr_limit, max_priority) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_rr_info {
    pub max_priority: integer_t,
    pub base_priority: integer_t,
    pub quantum: integer_t,
    pub depressed: boolean_t,
    pub depress_priority: integer_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of policy_rr_info"][::std::mem::size_of::<policy_rr_info>() - 20usize];
    ["Alignment of policy_rr_info"][::std::mem::align_of::<policy_rr_info>() - 4usize];
    ["Offset of field: policy_rr_info::max_priority"]
        [::std::mem::offset_of!(policy_rr_info, max_priority) - 0usize];
    ["Offset of field: policy_rr_info::base_priority"]
        [::std::mem::offset_of!(policy_rr_info, base_priority) - 4usize];
    ["Offset of field: policy_rr_info::quantum"]
        [::std::mem::offset_of!(policy_rr_info, quantum) - 8usize];
    ["Offset of field: policy_rr_info::depressed"]
        [::std::mem::offset_of!(policy_rr_info, depressed) - 12usize];
    ["Offset of field: policy_rr_info::depress_priority"]
        [::std::mem::offset_of!(policy_rr_info, depress_priority) - 16usize];
};
pub type policy_rr_base_t = *mut policy_rr_base;
pub type policy_rr_limit_t = *mut policy_rr_limit;
pub type policy_rr_info_t = *mut policy_rr_info;
pub type policy_rr_base_data_t = policy_rr_base;
pub type policy_rr_limit_data_t = policy_rr_limit;
pub type policy_rr_info_data_t = policy_rr_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_fifo_base {
    pub base_priority: integer_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of policy_fifo_base"][::std::mem::size_of::<policy_fifo_base>() - 4usize];
    ["Alignment of policy_fifo_base"][::std::mem::align_of::<policy_fifo_base>() - 4usize];
    ["Offset of field: policy_fifo_base::base_priority"]
        [::std::mem::offset_of!(policy_fifo_base, base_priority) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_fifo_limit {
    pub max_priority: integer_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of policy_fifo_limit"][::std::mem::size_of::<policy_fifo_limit>() - 4usize];
    ["Alignment of policy_fifo_limit"][::std::mem::align_of::<policy_fifo_limit>() - 4usize];
    ["Offset of field: policy_fifo_limit::max_priority"]
        [::std::mem::offset_of!(policy_fifo_limit, max_priority) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_fifo_info {
    pub max_priority: integer_t,
    pub base_priority: integer_t,
    pub depressed: boolean_t,
    pub depress_priority: integer_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of policy_fifo_info"][::std::mem::size_of::<policy_fifo_info>() - 16usize];
    ["Alignment of policy_fifo_info"][::std::mem::align_of::<policy_fifo_info>() - 4usize];
    ["Offset of field: policy_fifo_info::max_priority"]
        [::std::mem::offset_of!(policy_fifo_info, max_priority) - 0usize];
    ["Offset of field: policy_fifo_info::base_priority"]
        [::std::mem::offset_of!(policy_fifo_info, base_priority) - 4usize];
    ["Offset of field: policy_fifo_info::depressed"]
        [::std::mem::offset_of!(policy_fifo_info, depressed) - 8usize];
    ["Offset of field: policy_fifo_info::depress_priority"]
        [::std::mem::offset_of!(policy_fifo_info, depress_priority) - 12usize];
};
pub type policy_fifo_base_t = *mut policy_fifo_base;
pub type policy_fifo_limit_t = *mut policy_fifo_limit;
pub type policy_fifo_info_t = *mut policy_fifo_info;
pub type policy_fifo_base_data_t = policy_fifo_base;
pub type policy_fifo_limit_data_t = policy_fifo_limit;
pub type policy_fifo_info_data_t = policy_fifo_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_bases {
    pub ts: policy_timeshare_base_data_t,
    pub rr: policy_rr_base_data_t,
    pub fifo: policy_fifo_base_data_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of policy_bases"][::std::mem::size_of::<policy_bases>() - 16usize];
    ["Alignment of policy_bases"][::std::mem::align_of::<policy_bases>() - 4usize];
    ["Offset of field: policy_bases::ts"][::std::mem::offset_of!(policy_bases, ts) - 0usize];
    ["Offset of field: policy_bases::rr"][::std::mem::offset_of!(policy_bases, rr) - 4usize];
    ["Offset of field: policy_bases::fifo"][::std::mem::offset_of!(policy_bases, fifo) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_limits {
    pub ts: policy_timeshare_limit_data_t,
    pub rr: policy_rr_limit_data_t,
    pub fifo: policy_fifo_limit_data_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of policy_limits"][::std::mem::size_of::<policy_limits>() - 12usize];
    ["Alignment of policy_limits"][::std::mem::align_of::<policy_limits>() - 4usize];
    ["Offset of field: policy_limits::ts"][::std::mem::offset_of!(policy_limits, ts) - 0usize];
    ["Offset of field: policy_limits::rr"][::std::mem::offset_of!(policy_limits, rr) - 4usize];
    ["Offset of field: policy_limits::fifo"][::std::mem::offset_of!(policy_limits, fifo) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_infos {
    pub ts: policy_timeshare_info_data_t,
    pub rr: policy_rr_info_data_t,
    pub fifo: policy_fifo_info_data_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of policy_infos"][::std::mem::size_of::<policy_infos>() - 56usize];
    ["Alignment of policy_infos"][::std::mem::align_of::<policy_infos>() - 4usize];
    ["Offset of field: policy_infos::ts"][::std::mem::offset_of!(policy_infos, ts) - 0usize];
    ["Offset of field: policy_infos::rr"][::std::mem::offset_of!(policy_infos, rr) - 20usize];
    ["Offset of field: policy_infos::fifo"][::std::mem::offset_of!(policy_infos, fifo) - 40usize];
};
pub type policy_base_data_t = policy_bases;
pub type policy_limit_data_t = policy_limits;
pub type policy_info_data_t = policy_infos;
pub type task_flavor_t = natural_t;
pub type task_info_t = *mut integer_t;
pub type task_info_data_t = [integer_t; 1024usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct task_basic_info_32 {
    pub suspend_count: integer_t,
    pub virtual_size: natural_t,
    pub resident_size: natural_t,
    pub user_time: time_value_t,
    pub system_time: time_value_t,
    pub policy: policy_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of task_basic_info_32"][::std::mem::size_of::<task_basic_info_32>() - 32usize];
    ["Alignment of task_basic_info_32"][::std::mem::align_of::<task_basic_info_32>() - 4usize];
    ["Offset of field: task_basic_info_32::suspend_count"]
        [::std::mem::offset_of!(task_basic_info_32, suspend_count) - 0usize];
    ["Offset of field: task_basic_info_32::virtual_size"]
        [::std::mem::offset_of!(task_basic_info_32, virtual_size) - 4usize];
    ["Offset of field: task_basic_info_32::resident_size"]
        [::std::mem::offset_of!(task_basic_info_32, resident_size) - 8usize];
    ["Offset of field: task_basic_info_32::user_time"]
        [::std::mem::offset_of!(task_basic_info_32, user_time) - 12usize];
    ["Offset of field: task_basic_info_32::system_time"]
        [::std::mem::offset_of!(task_basic_info_32, system_time) - 20usize];
    ["Offset of field: task_basic_info_32::policy"]
        [::std::mem::offset_of!(task_basic_info_32, policy) - 28usize];
};
pub type task_basic_info_32_data_t = task_basic_info_32;
pub type task_basic_info_32_t = *mut task_basic_info_32;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_basic_info_64 {
    pub suspend_count: integer_t,
    pub virtual_size: mach_vm_size_t,
    pub resident_size: mach_vm_size_t,
    pub user_time: time_value_t,
    pub system_time: time_value_t,
    pub policy: policy_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of task_basic_info_64"][::std::mem::size_of::<task_basic_info_64>() - 40usize];
    ["Alignment of task_basic_info_64"][::std::mem::align_of::<task_basic_info_64>() - 4usize];
    ["Offset of field: task_basic_info_64::suspend_count"]
        [::std::mem::offset_of!(task_basic_info_64, suspend_count) - 0usize];
    ["Offset of field: task_basic_info_64::virtual_size"]
        [::std::mem::offset_of!(task_basic_info_64, virtual_size) - 4usize];
    ["Offset of field: task_basic_info_64::resident_size"]
        [::std::mem::offset_of!(task_basic_info_64, resident_size) - 12usize];
    ["Offset of field: task_basic_info_64::user_time"]
        [::std::mem::offset_of!(task_basic_info_64, user_time) - 20usize];
    ["Offset of field: task_basic_info_64::system_time"]
        [::std::mem::offset_of!(task_basic_info_64, system_time) - 28usize];
    ["Offset of field: task_basic_info_64::policy"]
        [::std::mem::offset_of!(task_basic_info_64, policy) - 36usize];
};
pub type task_basic_info_64_data_t = task_basic_info_64;
pub type task_basic_info_64_t = *mut task_basic_info_64;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_basic_info {
    pub suspend_count: integer_t,
    pub virtual_size: vm_size_t,
    pub resident_size: vm_size_t,
    pub user_time: time_value_t,
    pub system_time: time_value_t,
    pub policy: policy_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of task_basic_info"][::std::mem::size_of::<task_basic_info>() - 40usize];
    ["Alignment of task_basic_info"][::std::mem::align_of::<task_basic_info>() - 4usize];
    ["Offset of field: task_basic_info::suspend_count"]
        [::std::mem::offset_of!(task_basic_info, suspend_count) - 0usize];
    ["Offset of field: task_basic_info::virtual_size"]
        [::std::mem::offset_of!(task_basic_info, virtual_size) - 4usize];
    ["Offset of field: task_basic_info::resident_size"]
        [::std::mem::offset_of!(task_basic_info, resident_size) - 12usize];
    ["Offset of field: task_basic_info::user_time"]
        [::std::mem::offset_of!(task_basic_info, user_time) - 20usize];
    ["Offset of field: task_basic_info::system_time"]
        [::std::mem::offset_of!(task_basic_info, system_time) - 28usize];
    ["Offset of field: task_basic_info::policy"]
        [::std::mem::offset_of!(task_basic_info, policy) - 36usize];
};
pub type task_basic_info_data_t = task_basic_info;
pub type task_basic_info_t = *mut task_basic_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct task_events_info {
    pub faults: integer_t,
    pub pageins: integer_t,
    pub cow_faults: integer_t,
    pub messages_sent: integer_t,
    pub messages_received: integer_t,
    pub syscalls_mach: integer_t,
    pub syscalls_unix: integer_t,
    pub csw: integer_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of task_events_info"][::std::mem::size_of::<task_events_info>() - 32usize];
    ["Alignment of task_events_info"][::std::mem::align_of::<task_events_info>() - 4usize];
    ["Offset of field: task_events_info::faults"]
        [::std::mem::offset_of!(task_events_info, faults) - 0usize];
    ["Offset of field: task_events_info::pageins"]
        [::std::mem::offset_of!(task_events_info, pageins) - 4usize];
    ["Offset of field: task_events_info::cow_faults"]
        [::std::mem::offset_of!(task_events_info, cow_faults) - 8usize];
    ["Offset of field: task_events_info::messages_sent"]
        [::std::mem::offset_of!(task_events_info, messages_sent) - 12usize];
    ["Offset of field: task_events_info::messages_received"]
        [::std::mem::offset_of!(task_events_info, messages_received) - 16usize];
    ["Offset of field: task_events_info::syscalls_mach"]
        [::std::mem::offset_of!(task_events_info, syscalls_mach) - 20usize];
    ["Offset of field: task_events_info::syscalls_unix"]
        [::std::mem::offset_of!(task_events_info, syscalls_unix) - 24usize];
    ["Offset of field: task_events_info::csw"]
        [::std::mem::offset_of!(task_events_info, csw) - 28usize];
};
pub type task_events_info_data_t = task_events_info;
pub type task_events_info_t = *mut task_events_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct task_thread_times_info {
    pub user_time: time_value_t,
    pub system_time: time_value_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of task_thread_times_info"][::std::mem::size_of::<task_thread_times_info>() - 16usize];
    ["Alignment of task_thread_times_info"]
        [::std::mem::align_of::<task_thread_times_info>() - 4usize];
    ["Offset of field: task_thread_times_info::user_time"]
        [::std::mem::offset_of!(task_thread_times_info, user_time) - 0usize];
    ["Offset of field: task_thread_times_info::system_time"]
        [::std::mem::offset_of!(task_thread_times_info, system_time) - 8usize];
};
pub type task_thread_times_info_data_t = task_thread_times_info;
pub type task_thread_times_info_t = *mut task_thread_times_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_absolutetime_info {
    pub total_user: u64,
    pub total_system: u64,
    pub threads_user: u64,
    pub threads_system: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of task_absolutetime_info"][::std::mem::size_of::<task_absolutetime_info>() - 32usize];
    ["Alignment of task_absolutetime_info"]
        [::std::mem::align_of::<task_absolutetime_info>() - 4usize];
    ["Offset of field: task_absolutetime_info::total_user"]
        [::std::mem::offset_of!(task_absolutetime_info, total_user) - 0usize];
    ["Offset of field: task_absolutetime_info::total_system"]
        [::std::mem::offset_of!(task_absolutetime_info, total_system) - 8usize];
    ["Offset of field: task_absolutetime_info::threads_user"]
        [::std::mem::offset_of!(task_absolutetime_info, threads_user) - 16usize];
    ["Offset of field: task_absolutetime_info::threads_system"]
        [::std::mem::offset_of!(task_absolutetime_info, threads_system) - 24usize];
};
pub type task_absolutetime_info_data_t = task_absolutetime_info;
pub type task_absolutetime_info_t = *mut task_absolutetime_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_kernelmemory_info {
    pub total_palloc: u64,
    pub total_pfree: u64,
    pub total_salloc: u64,
    pub total_sfree: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of task_kernelmemory_info"][::std::mem::size_of::<task_kernelmemory_info>() - 32usize];
    ["Alignment of task_kernelmemory_info"]
        [::std::mem::align_of::<task_kernelmemory_info>() - 4usize];
    ["Offset of field: task_kernelmemory_info::total_palloc"]
        [::std::mem::offset_of!(task_kernelmemory_info, total_palloc) - 0usize];
    ["Offset of field: task_kernelmemory_info::total_pfree"]
        [::std::mem::offset_of!(task_kernelmemory_info, total_pfree) - 8usize];
    ["Offset of field: task_kernelmemory_info::total_salloc"]
        [::std::mem::offset_of!(task_kernelmemory_info, total_salloc) - 16usize];
    ["Offset of field: task_kernelmemory_info::total_sfree"]
        [::std::mem::offset_of!(task_kernelmemory_info, total_sfree) - 24usize];
};
pub type task_kernelmemory_info_data_t = task_kernelmemory_info;
pub type task_kernelmemory_info_t = *mut task_kernelmemory_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct task_affinity_tag_info {
    pub set_count: integer_t,
    pub min: integer_t,
    pub max: integer_t,
    pub task_count: integer_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of task_affinity_tag_info"][::std::mem::size_of::<task_affinity_tag_info>() - 16usize];
    ["Alignment of task_affinity_tag_info"]
        [::std::mem::align_of::<task_affinity_tag_info>() - 4usize];
    ["Offset of field: task_affinity_tag_info::set_count"]
        [::std::mem::offset_of!(task_affinity_tag_info, set_count) - 0usize];
    ["Offset of field: task_affinity_tag_info::min"]
        [::std::mem::offset_of!(task_affinity_tag_info, min) - 4usize];
    ["Offset of field: task_affinity_tag_info::max"]
        [::std::mem::offset_of!(task_affinity_tag_info, max) - 8usize];
    ["Offset of field: task_affinity_tag_info::task_count"]
        [::std::mem::offset_of!(task_affinity_tag_info, task_count) - 12usize];
};
pub type task_affinity_tag_info_data_t = task_affinity_tag_info;
pub type task_affinity_tag_info_t = *mut task_affinity_tag_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_dyld_info {
    pub all_image_info_addr: mach_vm_address_t,
    pub all_image_info_size: mach_vm_size_t,
    pub all_image_info_format: integer_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of task_dyld_info"][::std::mem::size_of::<task_dyld_info>() - 20usize];
    ["Alignment of task_dyld_info"][::std::mem::align_of::<task_dyld_info>() - 4usize];
    ["Offset of field: task_dyld_info::all_image_info_addr"]
        [::std::mem::offset_of!(task_dyld_info, all_image_info_addr) - 0usize];
    ["Offset of field: task_dyld_info::all_image_info_size"]
        [::std::mem::offset_of!(task_dyld_info, all_image_info_size) - 8usize];
    ["Offset of field: task_dyld_info::all_image_info_format"]
        [::std::mem::offset_of!(task_dyld_info, all_image_info_format) - 16usize];
};
pub type task_dyld_info_data_t = task_dyld_info;
pub type task_dyld_info_t = *mut task_dyld_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_basic_info_64_2 {
    pub suspend_count: integer_t,
    pub virtual_size: mach_vm_size_t,
    pub resident_size: mach_vm_size_t,
    pub user_time: time_value_t,
    pub system_time: time_value_t,
    pub policy: policy_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of task_basic_info_64_2"][::std::mem::size_of::<task_basic_info_64_2>() - 40usize];
    ["Alignment of task_basic_info_64_2"][::std::mem::align_of::<task_basic_info_64_2>() - 4usize];
    ["Offset of field: task_basic_info_64_2::suspend_count"]
        [::std::mem::offset_of!(task_basic_info_64_2, suspend_count) - 0usize];
    ["Offset of field: task_basic_info_64_2::virtual_size"]
        [::std::mem::offset_of!(task_basic_info_64_2, virtual_size) - 4usize];
    ["Offset of field: task_basic_info_64_2::resident_size"]
        [::std::mem::offset_of!(task_basic_info_64_2, resident_size) - 12usize];
    ["Offset of field: task_basic_info_64_2::user_time"]
        [::std::mem::offset_of!(task_basic_info_64_2, user_time) - 20usize];
    ["Offset of field: task_basic_info_64_2::system_time"]
        [::std::mem::offset_of!(task_basic_info_64_2, system_time) - 28usize];
    ["Offset of field: task_basic_info_64_2::policy"]
        [::std::mem::offset_of!(task_basic_info_64_2, policy) - 36usize];
};
pub type task_basic_info_64_2_data_t = task_basic_info_64_2;
pub type task_basic_info_64_2_t = *mut task_basic_info_64_2;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_extmod_info {
    pub task_uuid: [::std::os::raw::c_uchar; 16usize],
    pub extmod_statistics: vm_extmod_statistics_data_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of task_extmod_info"][::std::mem::size_of::<task_extmod_info>() - 64usize];
    ["Alignment of task_extmod_info"][::std::mem::align_of::<task_extmod_info>() - 4usize];
    ["Offset of field: task_extmod_info::task_uuid"]
        [::std::mem::offset_of!(task_extmod_info, task_uuid) - 0usize];
    ["Offset of field: task_extmod_info::extmod_statistics"]
        [::std::mem::offset_of!(task_extmod_info, extmod_statistics) - 16usize];
};
pub type task_extmod_info_data_t = task_extmod_info;
pub type task_extmod_info_t = *mut task_extmod_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_task_basic_info {
    pub virtual_size: mach_vm_size_t,
    pub resident_size: mach_vm_size_t,
    pub resident_size_max: mach_vm_size_t,
    pub user_time: time_value_t,
    pub system_time: time_value_t,
    pub policy: policy_t,
    pub suspend_count: integer_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_task_basic_info"][::std::mem::size_of::<mach_task_basic_info>() - 48usize];
    ["Alignment of mach_task_basic_info"][::std::mem::align_of::<mach_task_basic_info>() - 4usize];
    ["Offset of field: mach_task_basic_info::virtual_size"]
        [::std::mem::offset_of!(mach_task_basic_info, virtual_size) - 0usize];
    ["Offset of field: mach_task_basic_info::resident_size"]
        [::std::mem::offset_of!(mach_task_basic_info, resident_size) - 8usize];
    ["Offset of field: mach_task_basic_info::resident_size_max"]
        [::std::mem::offset_of!(mach_task_basic_info, resident_size_max) - 16usize];
    ["Offset of field: mach_task_basic_info::user_time"]
        [::std::mem::offset_of!(mach_task_basic_info, user_time) - 24usize];
    ["Offset of field: mach_task_basic_info::system_time"]
        [::std::mem::offset_of!(mach_task_basic_info, system_time) - 32usize];
    ["Offset of field: mach_task_basic_info::policy"]
        [::std::mem::offset_of!(mach_task_basic_info, policy) - 40usize];
    ["Offset of field: mach_task_basic_info::suspend_count"]
        [::std::mem::offset_of!(mach_task_basic_info, suspend_count) - 44usize];
};
pub type mach_task_basic_info_data_t = mach_task_basic_info;
pub type mach_task_basic_info_t = *mut mach_task_basic_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_power_info {
    pub total_user: u64,
    pub total_system: u64,
    pub task_interrupt_wakeups: u64,
    pub task_platform_idle_wakeups: u64,
    pub task_timer_wakeups_bin_1: u64,
    pub task_timer_wakeups_bin_2: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of task_power_info"][::std::mem::size_of::<task_power_info>() - 48usize];
    ["Alignment of task_power_info"][::std::mem::align_of::<task_power_info>() - 4usize];
    ["Offset of field: task_power_info::total_user"]
        [::std::mem::offset_of!(task_power_info, total_user) - 0usize];
    ["Offset of field: task_power_info::total_system"]
        [::std::mem::offset_of!(task_power_info, total_system) - 8usize];
    ["Offset of field: task_power_info::task_interrupt_wakeups"]
        [::std::mem::offset_of!(task_power_info, task_interrupt_wakeups) - 16usize];
    ["Offset of field: task_power_info::task_platform_idle_wakeups"]
        [::std::mem::offset_of!(task_power_info, task_platform_idle_wakeups) - 24usize];
    ["Offset of field: task_power_info::task_timer_wakeups_bin_1"]
        [::std::mem::offset_of!(task_power_info, task_timer_wakeups_bin_1) - 32usize];
    ["Offset of field: task_power_info::task_timer_wakeups_bin_2"]
        [::std::mem::offset_of!(task_power_info, task_timer_wakeups_bin_2) - 40usize];
};
pub type task_power_info_data_t = task_power_info;
pub type task_power_info_t = *mut task_power_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_vm_info {
    pub virtual_size: mach_vm_size_t,
    pub region_count: integer_t,
    pub page_size: integer_t,
    pub resident_size: mach_vm_size_t,
    pub resident_size_peak: mach_vm_size_t,
    pub device: mach_vm_size_t,
    pub device_peak: mach_vm_size_t,
    pub internal: mach_vm_size_t,
    pub internal_peak: mach_vm_size_t,
    pub external: mach_vm_size_t,
    pub external_peak: mach_vm_size_t,
    pub reusable: mach_vm_size_t,
    pub reusable_peak: mach_vm_size_t,
    pub purgeable_volatile_pmap: mach_vm_size_t,
    pub purgeable_volatile_resident: mach_vm_size_t,
    pub purgeable_volatile_virtual: mach_vm_size_t,
    pub compressed: mach_vm_size_t,
    pub compressed_peak: mach_vm_size_t,
    pub compressed_lifetime: mach_vm_size_t,
    pub phys_footprint: mach_vm_size_t,
    pub min_address: mach_vm_address_t,
    pub max_address: mach_vm_address_t,
    pub ledger_phys_footprint_peak: i64,
    pub ledger_purgeable_nonvolatile: i64,
    pub ledger_purgeable_novolatile_compressed: i64,
    pub ledger_purgeable_volatile: i64,
    pub ledger_purgeable_volatile_compressed: i64,
    pub ledger_tag_network_nonvolatile: i64,
    pub ledger_tag_network_nonvolatile_compressed: i64,
    pub ledger_tag_network_volatile: i64,
    pub ledger_tag_network_volatile_compressed: i64,
    pub ledger_tag_media_footprint: i64,
    pub ledger_tag_media_footprint_compressed: i64,
    pub ledger_tag_media_nofootprint: i64,
    pub ledger_tag_media_nofootprint_compressed: i64,
    pub ledger_tag_graphics_footprint: i64,
    pub ledger_tag_graphics_footprint_compressed: i64,
    pub ledger_tag_graphics_nofootprint: i64,
    pub ledger_tag_graphics_nofootprint_compressed: i64,
    pub ledger_tag_neural_footprint: i64,
    pub ledger_tag_neural_footprint_compressed: i64,
    pub ledger_tag_neural_nofootprint: i64,
    pub ledger_tag_neural_nofootprint_compressed: i64,
    pub limit_bytes_remaining: u64,
    pub decompressions: integer_t,
    pub ledger_swapins: i64,
    pub ledger_tag_neural_nofootprint_total: i64,
    pub ledger_tag_neural_nofootprint_peak: i64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of task_vm_info"][::std::mem::size_of::<task_vm_info>() - 372usize];
    ["Alignment of task_vm_info"][::std::mem::align_of::<task_vm_info>() - 4usize];
    ["Offset of field: task_vm_info::virtual_size"]
        [::std::mem::offset_of!(task_vm_info, virtual_size) - 0usize];
    ["Offset of field: task_vm_info::region_count"]
        [::std::mem::offset_of!(task_vm_info, region_count) - 8usize];
    ["Offset of field: task_vm_info::page_size"]
        [::std::mem::offset_of!(task_vm_info, page_size) - 12usize];
    ["Offset of field: task_vm_info::resident_size"]
        [::std::mem::offset_of!(task_vm_info, resident_size) - 16usize];
    ["Offset of field: task_vm_info::resident_size_peak"]
        [::std::mem::offset_of!(task_vm_info, resident_size_peak) - 24usize];
    ["Offset of field: task_vm_info::device"]
        [::std::mem::offset_of!(task_vm_info, device) - 32usize];
    ["Offset of field: task_vm_info::device_peak"]
        [::std::mem::offset_of!(task_vm_info, device_peak) - 40usize];
    ["Offset of field: task_vm_info::internal"]
        [::std::mem::offset_of!(task_vm_info, internal) - 48usize];
    ["Offset of field: task_vm_info::internal_peak"]
        [::std::mem::offset_of!(task_vm_info, internal_peak) - 56usize];
    ["Offset of field: task_vm_info::external"]
        [::std::mem::offset_of!(task_vm_info, external) - 64usize];
    ["Offset of field: task_vm_info::external_peak"]
        [::std::mem::offset_of!(task_vm_info, external_peak) - 72usize];
    ["Offset of field: task_vm_info::reusable"]
        [::std::mem::offset_of!(task_vm_info, reusable) - 80usize];
    ["Offset of field: task_vm_info::reusable_peak"]
        [::std::mem::offset_of!(task_vm_info, reusable_peak) - 88usize];
    ["Offset of field: task_vm_info::purgeable_volatile_pmap"]
        [::std::mem::offset_of!(task_vm_info, purgeable_volatile_pmap) - 96usize];
    ["Offset of field: task_vm_info::purgeable_volatile_resident"]
        [::std::mem::offset_of!(task_vm_info, purgeable_volatile_resident) - 104usize];
    ["Offset of field: task_vm_info::purgeable_volatile_virtual"]
        [::std::mem::offset_of!(task_vm_info, purgeable_volatile_virtual) - 112usize];
    ["Offset of field: task_vm_info::compressed"]
        [::std::mem::offset_of!(task_vm_info, compressed) - 120usize];
    ["Offset of field: task_vm_info::compressed_peak"]
        [::std::mem::offset_of!(task_vm_info, compressed_peak) - 128usize];
    ["Offset of field: task_vm_info::compressed_lifetime"]
        [::std::mem::offset_of!(task_vm_info, compressed_lifetime) - 136usize];
    ["Offset of field: task_vm_info::phys_footprint"]
        [::std::mem::offset_of!(task_vm_info, phys_footprint) - 144usize];
    ["Offset of field: task_vm_info::min_address"]
        [::std::mem::offset_of!(task_vm_info, min_address) - 152usize];
    ["Offset of field: task_vm_info::max_address"]
        [::std::mem::offset_of!(task_vm_info, max_address) - 160usize];
    ["Offset of field: task_vm_info::ledger_phys_footprint_peak"]
        [::std::mem::offset_of!(task_vm_info, ledger_phys_footprint_peak) - 168usize];
    ["Offset of field: task_vm_info::ledger_purgeable_nonvolatile"]
        [::std::mem::offset_of!(task_vm_info, ledger_purgeable_nonvolatile) - 176usize];
    ["Offset of field: task_vm_info::ledger_purgeable_novolatile_compressed"]
        [::std::mem::offset_of!(task_vm_info, ledger_purgeable_novolatile_compressed) - 184usize];
    ["Offset of field: task_vm_info::ledger_purgeable_volatile"]
        [::std::mem::offset_of!(task_vm_info, ledger_purgeable_volatile) - 192usize];
    ["Offset of field: task_vm_info::ledger_purgeable_volatile_compressed"]
        [::std::mem::offset_of!(task_vm_info, ledger_purgeable_volatile_compressed) - 200usize];
    ["Offset of field: task_vm_info::ledger_tag_network_nonvolatile"]
        [::std::mem::offset_of!(task_vm_info, ledger_tag_network_nonvolatile) - 208usize];
    ["Offset of field: task_vm_info::ledger_tag_network_nonvolatile_compressed"][::std::mem::offset_of!(
        task_vm_info,
        ledger_tag_network_nonvolatile_compressed
    ) - 216usize];
    ["Offset of field: task_vm_info::ledger_tag_network_volatile"]
        [::std::mem::offset_of!(task_vm_info, ledger_tag_network_volatile) - 224usize];
    ["Offset of field: task_vm_info::ledger_tag_network_volatile_compressed"]
        [::std::mem::offset_of!(task_vm_info, ledger_tag_network_volatile_compressed) - 232usize];
    ["Offset of field: task_vm_info::ledger_tag_media_footprint"]
        [::std::mem::offset_of!(task_vm_info, ledger_tag_media_footprint) - 240usize];
    ["Offset of field: task_vm_info::ledger_tag_media_footprint_compressed"]
        [::std::mem::offset_of!(task_vm_info, ledger_tag_media_footprint_compressed) - 248usize];
    ["Offset of field: task_vm_info::ledger_tag_media_nofootprint"]
        [::std::mem::offset_of!(task_vm_info, ledger_tag_media_nofootprint) - 256usize];
    ["Offset of field: task_vm_info::ledger_tag_media_nofootprint_compressed"]
        [::std::mem::offset_of!(task_vm_info, ledger_tag_media_nofootprint_compressed) - 264usize];
    ["Offset of field: task_vm_info::ledger_tag_graphics_footprint"]
        [::std::mem::offset_of!(task_vm_info, ledger_tag_graphics_footprint) - 272usize];
    ["Offset of field: task_vm_info::ledger_tag_graphics_footprint_compressed"]
        [::std::mem::offset_of!(task_vm_info, ledger_tag_graphics_footprint_compressed) - 280usize];
    ["Offset of field: task_vm_info::ledger_tag_graphics_nofootprint"]
        [::std::mem::offset_of!(task_vm_info, ledger_tag_graphics_nofootprint) - 288usize];
    ["Offset of field: task_vm_info::ledger_tag_graphics_nofootprint_compressed"][::std::mem::offset_of!(
        task_vm_info,
        ledger_tag_graphics_nofootprint_compressed
    ) - 296usize];
    ["Offset of field: task_vm_info::ledger_tag_neural_footprint"]
        [::std::mem::offset_of!(task_vm_info, ledger_tag_neural_footprint) - 304usize];
    ["Offset of field: task_vm_info::ledger_tag_neural_footprint_compressed"]
        [::std::mem::offset_of!(task_vm_info, ledger_tag_neural_footprint_compressed) - 312usize];
    ["Offset of field: task_vm_info::ledger_tag_neural_nofootprint"]
        [::std::mem::offset_of!(task_vm_info, ledger_tag_neural_nofootprint) - 320usize];
    ["Offset of field: task_vm_info::ledger_tag_neural_nofootprint_compressed"]
        [::std::mem::offset_of!(task_vm_info, ledger_tag_neural_nofootprint_compressed) - 328usize];
    ["Offset of field: task_vm_info::limit_bytes_remaining"]
        [::std::mem::offset_of!(task_vm_info, limit_bytes_remaining) - 336usize];
    ["Offset of field: task_vm_info::decompressions"]
        [::std::mem::offset_of!(task_vm_info, decompressions) - 344usize];
    ["Offset of field: task_vm_info::ledger_swapins"]
        [::std::mem::offset_of!(task_vm_info, ledger_swapins) - 348usize];
    ["Offset of field: task_vm_info::ledger_tag_neural_nofootprint_total"]
        [::std::mem::offset_of!(task_vm_info, ledger_tag_neural_nofootprint_total) - 356usize];
    ["Offset of field: task_vm_info::ledger_tag_neural_nofootprint_peak"]
        [::std::mem::offset_of!(task_vm_info, ledger_tag_neural_nofootprint_peak) - 364usize];
};
pub type task_vm_info_data_t = task_vm_info;
pub type task_vm_info_t = *mut task_vm_info;
pub type task_purgable_info_t = vm_purgeable_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_trace_memory_info {
    pub user_memory_address: u64,
    pub buffer_size: u64,
    pub mailbox_array_size: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of task_trace_memory_info"][::std::mem::size_of::<task_trace_memory_info>() - 24usize];
    ["Alignment of task_trace_memory_info"]
        [::std::mem::align_of::<task_trace_memory_info>() - 4usize];
    ["Offset of field: task_trace_memory_info::user_memory_address"]
        [::std::mem::offset_of!(task_trace_memory_info, user_memory_address) - 0usize];
    ["Offset of field: task_trace_memory_info::buffer_size"]
        [::std::mem::offset_of!(task_trace_memory_info, buffer_size) - 8usize];
    ["Offset of field: task_trace_memory_info::mailbox_array_size"]
        [::std::mem::offset_of!(task_trace_memory_info, mailbox_array_size) - 16usize];
};
pub type task_trace_memory_info_data_t = task_trace_memory_info;
pub type task_trace_memory_info_t = *mut task_trace_memory_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_wait_state_info {
    pub total_wait_state_time: u64,
    pub total_wait_sfi_state_time: u64,
    pub _reserved: [u32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of task_wait_state_info"][::std::mem::size_of::<task_wait_state_info>() - 32usize];
    ["Alignment of task_wait_state_info"][::std::mem::align_of::<task_wait_state_info>() - 4usize];
    ["Offset of field: task_wait_state_info::total_wait_state_time"]
        [::std::mem::offset_of!(task_wait_state_info, total_wait_state_time) - 0usize];
    ["Offset of field: task_wait_state_info::total_wait_sfi_state_time"]
        [::std::mem::offset_of!(task_wait_state_info, total_wait_sfi_state_time) - 8usize];
    ["Offset of field: task_wait_state_info::_reserved"]
        [::std::mem::offset_of!(task_wait_state_info, _reserved) - 16usize];
};
pub type task_wait_state_info_data_t = task_wait_state_info;
pub type task_wait_state_info_t = *mut task_wait_state_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct gpu_energy_data {
    pub task_gpu_utilisation: u64,
    pub task_gpu_stat_reserved0: u64,
    pub task_gpu_stat_reserved1: u64,
    pub task_gpu_stat_reserved2: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of gpu_energy_data"][::std::mem::size_of::<gpu_energy_data>() - 32usize];
    ["Alignment of gpu_energy_data"][::std::mem::align_of::<gpu_energy_data>() - 4usize];
    ["Offset of field: gpu_energy_data::task_gpu_utilisation"]
        [::std::mem::offset_of!(gpu_energy_data, task_gpu_utilisation) - 0usize];
    ["Offset of field: gpu_energy_data::task_gpu_stat_reserved0"]
        [::std::mem::offset_of!(gpu_energy_data, task_gpu_stat_reserved0) - 8usize];
    ["Offset of field: gpu_energy_data::task_gpu_stat_reserved1"]
        [::std::mem::offset_of!(gpu_energy_data, task_gpu_stat_reserved1) - 16usize];
    ["Offset of field: gpu_energy_data::task_gpu_stat_reserved2"]
        [::std::mem::offset_of!(gpu_energy_data, task_gpu_stat_reserved2) - 24usize];
};
pub type gpu_energy_data_t = *mut gpu_energy_data;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_power_info_v2 {
    pub cpu_energy: task_power_info_data_t,
    pub gpu_energy: gpu_energy_data,
    pub task_energy: u64,
    pub task_ptime: u64,
    pub task_pset_switches: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of task_power_info_v2"][::std::mem::size_of::<task_power_info_v2>() - 104usize];
    ["Alignment of task_power_info_v2"][::std::mem::align_of::<task_power_info_v2>() - 4usize];
    ["Offset of field: task_power_info_v2::cpu_energy"]
        [::std::mem::offset_of!(task_power_info_v2, cpu_energy) - 0usize];
    ["Offset of field: task_power_info_v2::gpu_energy"]
        [::std::mem::offset_of!(task_power_info_v2, gpu_energy) - 48usize];
    ["Offset of field: task_power_info_v2::task_energy"]
        [::std::mem::offset_of!(task_power_info_v2, task_energy) - 80usize];
    ["Offset of field: task_power_info_v2::task_ptime"]
        [::std::mem::offset_of!(task_power_info_v2, task_ptime) - 88usize];
    ["Offset of field: task_power_info_v2::task_pset_switches"]
        [::std::mem::offset_of!(task_power_info_v2, task_pset_switches) - 96usize];
};
pub type task_power_info_v2_data_t = task_power_info_v2;
pub type task_power_info_v2_t = *mut task_power_info_v2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct task_flags_info {
    pub flags: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of task_flags_info"][::std::mem::size_of::<task_flags_info>() - 4usize];
    ["Alignment of task_flags_info"][::std::mem::align_of::<task_flags_info>() - 4usize];
    ["Offset of field: task_flags_info::flags"]
        [::std::mem::offset_of!(task_flags_info, flags) - 0usize];
};
pub type task_flags_info_data_t = task_flags_info;
pub type task_flags_info_t = *mut task_flags_info;
pub type task_exc_guard_behavior_t = u32;
pub type task_corpse_forking_behavior_t = u32;
pub type task_inspect_flavor_t = natural_t;
pub const task_inspect_flavor_TASK_INSPECT_BASIC_COUNTS: task_inspect_flavor = 1;
pub type task_inspect_flavor = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct task_inspect_basic_counts {
    pub instructions: u64,
    pub cycles: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of task_inspect_basic_counts"]
        [::std::mem::size_of::<task_inspect_basic_counts>() - 16usize];
    ["Alignment of task_inspect_basic_counts"]
        [::std::mem::align_of::<task_inspect_basic_counts>() - 8usize];
    ["Offset of field: task_inspect_basic_counts::instructions"]
        [::std::mem::offset_of!(task_inspect_basic_counts, instructions) - 0usize];
    ["Offset of field: task_inspect_basic_counts::cycles"]
        [::std::mem::offset_of!(task_inspect_basic_counts, cycles) - 8usize];
};
pub type task_inspect_basic_counts_data_t = task_inspect_basic_counts;
pub type task_inspect_basic_counts_t = *mut task_inspect_basic_counts;
pub type task_inspect_info_t = *mut integer_t;
pub type task_policy_flavor_t = natural_t;
pub type task_policy_t = *mut integer_t;
pub const task_role_TASK_RENICED: task_role = -1;
pub const task_role_TASK_UNSPECIFIED: task_role = 0;
pub const task_role_TASK_FOREGROUND_APPLICATION: task_role = 1;
pub const task_role_TASK_BACKGROUND_APPLICATION: task_role = 2;
pub const task_role_TASK_CONTROL_APPLICATION: task_role = 3;
pub const task_role_TASK_GRAPHICS_SERVER: task_role = 4;
pub const task_role_TASK_THROTTLE_APPLICATION: task_role = 5;
pub const task_role_TASK_NONUI_APPLICATION: task_role = 6;
pub const task_role_TASK_DEFAULT_APPLICATION: task_role = 7;
pub const task_role_TASK_DARWINBG_APPLICATION: task_role = 8;
pub type task_role = ::std::os::raw::c_int;
pub use self::task_role as task_role_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct task_category_policy {
    pub role: task_role_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of task_category_policy"][::std::mem::size_of::<task_category_policy>() - 4usize];
    ["Alignment of task_category_policy"][::std::mem::align_of::<task_category_policy>() - 4usize];
    ["Offset of field: task_category_policy::role"]
        [::std::mem::offset_of!(task_category_policy, role) - 0usize];
};
pub type task_category_policy_data_t = task_category_policy;
pub type task_category_policy_t = *mut task_category_policy;
pub const task_latency_qos_LATENCY_QOS_TIER_UNSPECIFIED: task_latency_qos = 0;
pub const task_latency_qos_LATENCY_QOS_TIER_0: task_latency_qos = 16711681;
pub const task_latency_qos_LATENCY_QOS_TIER_1: task_latency_qos = 16711682;
pub const task_latency_qos_LATENCY_QOS_TIER_2: task_latency_qos = 16711683;
pub const task_latency_qos_LATENCY_QOS_TIER_3: task_latency_qos = 16711684;
pub const task_latency_qos_LATENCY_QOS_TIER_4: task_latency_qos = 16711685;
pub const task_latency_qos_LATENCY_QOS_TIER_5: task_latency_qos = 16711686;
pub type task_latency_qos = ::std::os::raw::c_uint;
pub type task_latency_qos_t = integer_t;
pub const task_throughput_qos_THROUGHPUT_QOS_TIER_UNSPECIFIED: task_throughput_qos = 0;
pub const task_throughput_qos_THROUGHPUT_QOS_TIER_0: task_throughput_qos = 16646145;
pub const task_throughput_qos_THROUGHPUT_QOS_TIER_1: task_throughput_qos = 16646146;
pub const task_throughput_qos_THROUGHPUT_QOS_TIER_2: task_throughput_qos = 16646147;
pub const task_throughput_qos_THROUGHPUT_QOS_TIER_3: task_throughput_qos = 16646148;
pub const task_throughput_qos_THROUGHPUT_QOS_TIER_4: task_throughput_qos = 16646149;
pub const task_throughput_qos_THROUGHPUT_QOS_TIER_5: task_throughput_qos = 16646150;
pub type task_throughput_qos = ::std::os::raw::c_uint;
pub type task_throughput_qos_t = integer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct task_qos_policy {
    pub task_latency_qos_tier: task_latency_qos_t,
    pub task_throughput_qos_tier: task_throughput_qos_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of task_qos_policy"][::std::mem::size_of::<task_qos_policy>() - 8usize];
    ["Alignment of task_qos_policy"][::std::mem::align_of::<task_qos_policy>() - 4usize];
    ["Offset of field: task_qos_policy::task_latency_qos_tier"]
        [::std::mem::offset_of!(task_qos_policy, task_latency_qos_tier) - 0usize];
    ["Offset of field: task_qos_policy::task_throughput_qos_tier"]
        [::std::mem::offset_of!(task_qos_policy, task_throughput_qos_tier) - 4usize];
};
pub type task_qos_policy_t = *mut task_qos_policy;
pub type task_special_port_t = ::std::os::raw::c_int;
pub type thread_flavor_t = natural_t;
pub type thread_info_t = *mut integer_t;
pub type thread_info_data_t = [integer_t; 32usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_basic_info {
    pub user_time: time_value_t,
    pub system_time: time_value_t,
    pub cpu_usage: integer_t,
    pub policy: policy_t,
    pub run_state: integer_t,
    pub flags: integer_t,
    pub suspend_count: integer_t,
    pub sleep_time: integer_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of thread_basic_info"][::std::mem::size_of::<thread_basic_info>() - 40usize];
    ["Alignment of thread_basic_info"][::std::mem::align_of::<thread_basic_info>() - 4usize];
    ["Offset of field: thread_basic_info::user_time"]
        [::std::mem::offset_of!(thread_basic_info, user_time) - 0usize];
    ["Offset of field: thread_basic_info::system_time"]
        [::std::mem::offset_of!(thread_basic_info, system_time) - 8usize];
    ["Offset of field: thread_basic_info::cpu_usage"]
        [::std::mem::offset_of!(thread_basic_info, cpu_usage) - 16usize];
    ["Offset of field: thread_basic_info::policy"]
        [::std::mem::offset_of!(thread_basic_info, policy) - 20usize];
    ["Offset of field: thread_basic_info::run_state"]
        [::std::mem::offset_of!(thread_basic_info, run_state) - 24usize];
    ["Offset of field: thread_basic_info::flags"]
        [::std::mem::offset_of!(thread_basic_info, flags) - 28usize];
    ["Offset of field: thread_basic_info::suspend_count"]
        [::std::mem::offset_of!(thread_basic_info, suspend_count) - 32usize];
    ["Offset of field: thread_basic_info::sleep_time"]
        [::std::mem::offset_of!(thread_basic_info, sleep_time) - 36usize];
};
pub type thread_basic_info_data_t = thread_basic_info;
pub type thread_basic_info_t = *mut thread_basic_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_identifier_info {
    pub thread_id: u64,
    pub thread_handle: u64,
    pub dispatch_qaddr: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of thread_identifier_info"][::std::mem::size_of::<thread_identifier_info>() - 24usize];
    ["Alignment of thread_identifier_info"]
        [::std::mem::align_of::<thread_identifier_info>() - 8usize];
    ["Offset of field: thread_identifier_info::thread_id"]
        [::std::mem::offset_of!(thread_identifier_info, thread_id) - 0usize];
    ["Offset of field: thread_identifier_info::thread_handle"]
        [::std::mem::offset_of!(thread_identifier_info, thread_handle) - 8usize];
    ["Offset of field: thread_identifier_info::dispatch_qaddr"]
        [::std::mem::offset_of!(thread_identifier_info, dispatch_qaddr) - 16usize];
};
pub type thread_identifier_info_data_t = thread_identifier_info;
pub type thread_identifier_info_t = *mut thread_identifier_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_extended_info {
    pub pth_user_time: u64,
    pub pth_system_time: u64,
    pub pth_cpu_usage: i32,
    pub pth_policy: i32,
    pub pth_run_state: i32,
    pub pth_flags: i32,
    pub pth_sleep_time: i32,
    pub pth_curpri: i32,
    pub pth_priority: i32,
    pub pth_maxpriority: i32,
    pub pth_name: [::std::os::raw::c_char; 64usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of thread_extended_info"][::std::mem::size_of::<thread_extended_info>() - 112usize];
    ["Alignment of thread_extended_info"][::std::mem::align_of::<thread_extended_info>() - 8usize];
    ["Offset of field: thread_extended_info::pth_user_time"]
        [::std::mem::offset_of!(thread_extended_info, pth_user_time) - 0usize];
    ["Offset of field: thread_extended_info::pth_system_time"]
        [::std::mem::offset_of!(thread_extended_info, pth_system_time) - 8usize];
    ["Offset of field: thread_extended_info::pth_cpu_usage"]
        [::std::mem::offset_of!(thread_extended_info, pth_cpu_usage) - 16usize];
    ["Offset of field: thread_extended_info::pth_policy"]
        [::std::mem::offset_of!(thread_extended_info, pth_policy) - 20usize];
    ["Offset of field: thread_extended_info::pth_run_state"]
        [::std::mem::offset_of!(thread_extended_info, pth_run_state) - 24usize];
    ["Offset of field: thread_extended_info::pth_flags"]
        [::std::mem::offset_of!(thread_extended_info, pth_flags) - 28usize];
    ["Offset of field: thread_extended_info::pth_sleep_time"]
        [::std::mem::offset_of!(thread_extended_info, pth_sleep_time) - 32usize];
    ["Offset of field: thread_extended_info::pth_curpri"]
        [::std::mem::offset_of!(thread_extended_info, pth_curpri) - 36usize];
    ["Offset of field: thread_extended_info::pth_priority"]
        [::std::mem::offset_of!(thread_extended_info, pth_priority) - 40usize];
    ["Offset of field: thread_extended_info::pth_maxpriority"]
        [::std::mem::offset_of!(thread_extended_info, pth_maxpriority) - 44usize];
    ["Offset of field: thread_extended_info::pth_name"]
        [::std::mem::offset_of!(thread_extended_info, pth_name) - 48usize];
};
pub type thread_extended_info_data_t = thread_extended_info;
pub type thread_extended_info_t = *mut thread_extended_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_stat_entry {
    pub count: u64,
    pub size: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of io_stat_entry"][::std::mem::size_of::<io_stat_entry>() - 16usize];
    ["Alignment of io_stat_entry"][::std::mem::align_of::<io_stat_entry>() - 8usize];
    ["Offset of field: io_stat_entry::count"]
        [::std::mem::offset_of!(io_stat_entry, count) - 0usize];
    ["Offset of field: io_stat_entry::size"][::std::mem::offset_of!(io_stat_entry, size) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_stat_info {
    pub disk_reads: io_stat_entry,
    pub io_priority: [io_stat_entry; 4usize],
    pub paging: io_stat_entry,
    pub metadata: io_stat_entry,
    pub total_io: io_stat_entry,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of io_stat_info"][::std::mem::size_of::<io_stat_info>() - 128usize];
    ["Alignment of io_stat_info"][::std::mem::align_of::<io_stat_info>() - 8usize];
    ["Offset of field: io_stat_info::disk_reads"]
        [::std::mem::offset_of!(io_stat_info, disk_reads) - 0usize];
    ["Offset of field: io_stat_info::io_priority"]
        [::std::mem::offset_of!(io_stat_info, io_priority) - 16usize];
    ["Offset of field: io_stat_info::paging"]
        [::std::mem::offset_of!(io_stat_info, paging) - 80usize];
    ["Offset of field: io_stat_info::metadata"]
        [::std::mem::offset_of!(io_stat_info, metadata) - 96usize];
    ["Offset of field: io_stat_info::total_io"]
        [::std::mem::offset_of!(io_stat_info, total_io) - 112usize];
};
pub type io_stat_info_t = *mut io_stat_info;
pub type thread_policy_flavor_t = natural_t;
pub type thread_policy_t = *mut integer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_standard_policy {
    pub no_data: natural_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of thread_standard_policy"][::std::mem::size_of::<thread_standard_policy>() - 4usize];
    ["Alignment of thread_standard_policy"]
        [::std::mem::align_of::<thread_standard_policy>() - 4usize];
    ["Offset of field: thread_standard_policy::no_data"]
        [::std::mem::offset_of!(thread_standard_policy, no_data) - 0usize];
};
pub type thread_standard_policy_data_t = thread_standard_policy;
pub type thread_standard_policy_t = *mut thread_standard_policy;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_extended_policy {
    pub timeshare: boolean_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of thread_extended_policy"][::std::mem::size_of::<thread_extended_policy>() - 4usize];
    ["Alignment of thread_extended_policy"]
        [::std::mem::align_of::<thread_extended_policy>() - 4usize];
    ["Offset of field: thread_extended_policy::timeshare"]
        [::std::mem::offset_of!(thread_extended_policy, timeshare) - 0usize];
};
pub type thread_extended_policy_data_t = thread_extended_policy;
pub type thread_extended_policy_t = *mut thread_extended_policy;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_time_constraint_policy {
    pub period: u32,
    pub computation: u32,
    pub constraint: u32,
    pub preemptible: boolean_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of thread_time_constraint_policy"]
        [::std::mem::size_of::<thread_time_constraint_policy>() - 16usize];
    ["Alignment of thread_time_constraint_policy"]
        [::std::mem::align_of::<thread_time_constraint_policy>() - 4usize];
    ["Offset of field: thread_time_constraint_policy::period"]
        [::std::mem::offset_of!(thread_time_constraint_policy, period) - 0usize];
    ["Offset of field: thread_time_constraint_policy::computation"]
        [::std::mem::offset_of!(thread_time_constraint_policy, computation) - 4usize];
    ["Offset of field: thread_time_constraint_policy::constraint"]
        [::std::mem::offset_of!(thread_time_constraint_policy, constraint) - 8usize];
    ["Offset of field: thread_time_constraint_policy::preemptible"]
        [::std::mem::offset_of!(thread_time_constraint_policy, preemptible) - 12usize];
};
pub type thread_time_constraint_policy_data_t = thread_time_constraint_policy;
pub type thread_time_constraint_policy_t = *mut thread_time_constraint_policy;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_precedence_policy {
    pub importance: integer_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of thread_precedence_policy"]
        [::std::mem::size_of::<thread_precedence_policy>() - 4usize];
    ["Alignment of thread_precedence_policy"]
        [::std::mem::align_of::<thread_precedence_policy>() - 4usize];
    ["Offset of field: thread_precedence_policy::importance"]
        [::std::mem::offset_of!(thread_precedence_policy, importance) - 0usize];
};
pub type thread_precedence_policy_data_t = thread_precedence_policy;
pub type thread_precedence_policy_t = *mut thread_precedence_policy;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_affinity_policy {
    pub affinity_tag: integer_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of thread_affinity_policy"][::std::mem::size_of::<thread_affinity_policy>() - 4usize];
    ["Alignment of thread_affinity_policy"]
        [::std::mem::align_of::<thread_affinity_policy>() - 4usize];
    ["Offset of field: thread_affinity_policy::affinity_tag"]
        [::std::mem::offset_of!(thread_affinity_policy, affinity_tag) - 0usize];
};
pub type thread_affinity_policy_data_t = thread_affinity_policy;
pub type thread_affinity_policy_t = *mut thread_affinity_policy;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_background_policy {
    pub priority: integer_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of thread_background_policy"]
        [::std::mem::size_of::<thread_background_policy>() - 4usize];
    ["Alignment of thread_background_policy"]
        [::std::mem::align_of::<thread_background_policy>() - 4usize];
    ["Offset of field: thread_background_policy::priority"]
        [::std::mem::offset_of!(thread_background_policy, priority) - 0usize];
};
pub type thread_background_policy_data_t = thread_background_policy;
pub type thread_background_policy_t = *mut thread_background_policy;
pub type thread_latency_qos_t = integer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_latency_qos_policy {
    pub thread_latency_qos_tier: thread_latency_qos_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of thread_latency_qos_policy"]
        [::std::mem::size_of::<thread_latency_qos_policy>() - 4usize];
    ["Alignment of thread_latency_qos_policy"]
        [::std::mem::align_of::<thread_latency_qos_policy>() - 4usize];
    ["Offset of field: thread_latency_qos_policy::thread_latency_qos_tier"]
        [::std::mem::offset_of!(thread_latency_qos_policy, thread_latency_qos_tier) - 0usize];
};
pub type thread_latency_qos_policy_data_t = thread_latency_qos_policy;
pub type thread_latency_qos_policy_t = *mut thread_latency_qos_policy;
pub type thread_throughput_qos_t = integer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_throughput_qos_policy {
    pub thread_throughput_qos_tier: thread_throughput_qos_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of thread_throughput_qos_policy"]
        [::std::mem::size_of::<thread_throughput_qos_policy>() - 4usize];
    ["Alignment of thread_throughput_qos_policy"]
        [::std::mem::align_of::<thread_throughput_qos_policy>() - 4usize];
    ["Offset of field: thread_throughput_qos_policy::thread_throughput_qos_tier"]
        [::std::mem::offset_of!(thread_throughput_qos_policy, thread_throughput_qos_tier) - 0usize];
};
pub type thread_throughput_qos_policy_data_t = thread_throughput_qos_policy;
pub type thread_throughput_qos_policy_t = *mut thread_throughput_qos_policy;
pub type alarm_type_t = ::std::os::raw::c_int;
pub type sleep_type_t = ::std::os::raw::c_int;
pub type clock_id_t = ::std::os::raw::c_int;
pub type clock_flavor_t = ::std::os::raw::c_int;
pub type clock_attr_t = *mut ::std::os::raw::c_int;
pub type clock_res_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_timespec {
    pub tv_sec: ::std::os::raw::c_uint,
    pub tv_nsec: clock_res_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_timespec"][::std::mem::size_of::<mach_timespec>() - 8usize];
    ["Alignment of mach_timespec"][::std::mem::align_of::<mach_timespec>() - 4usize];
    ["Offset of field: mach_timespec::tv_sec"]
        [::std::mem::offset_of!(mach_timespec, tv_sec) - 0usize];
    ["Offset of field: mach_timespec::tv_nsec"]
        [::std::mem::offset_of!(mach_timespec, tv_nsec) - 4usize];
};
pub type mach_timespec_t = mach_timespec;
pub type vm_machine_attribute_t = ::std::os::raw::c_uint;
pub type vm_machine_attribute_val_t = ::std::os::raw::c_int;
pub type vm_inherit_t = ::std::os::raw::c_uint;
pub type vm_purgable_t = ::std::os::raw::c_int;
pub type vm_behavior_t = ::std::os::raw::c_int;
unsafe extern "C" {
    pub static mut vm_page_size: vm_size_t;
}
unsafe extern "C" {
    pub static mut vm_page_mask: vm_size_t;
}
unsafe extern "C" {
    pub static mut vm_page_shift: ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub static mut vm_kernel_page_size: vm_size_t;
}
unsafe extern "C" {
    pub static mut vm_kernel_page_mask: vm_size_t;
}
unsafe extern "C" {
    pub static mut vm_kernel_page_shift: ::std::os::raw::c_int;
}
pub type vm32_object_id_t = u32;
pub type vm_region_info_t = *mut ::std::os::raw::c_int;
pub type vm_region_info_64_t = *mut ::std::os::raw::c_int;
pub type vm_region_recurse_info_t = *mut ::std::os::raw::c_int;
pub type vm_region_recurse_info_64_t = *mut ::std::os::raw::c_int;
pub type vm_region_flavor_t = ::std::os::raw::c_int;
pub type vm_region_info_data_t = [::std::os::raw::c_int; 1024usize];
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct vm_region_basic_info_64 {
    pub protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
    pub shared: boolean_t,
    pub reserved: boolean_t,
    pub offset: memory_object_offset_t,
    pub behavior: vm_behavior_t,
    pub user_wired_count: ::std::os::raw::c_ushort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vm_region_basic_info_64"][::std::mem::size_of::<vm_region_basic_info_64>() - 36usize];
    ["Alignment of vm_region_basic_info_64"]
        [::std::mem::align_of::<vm_region_basic_info_64>() - 4usize];
    ["Offset of field: vm_region_basic_info_64::protection"]
        [::std::mem::offset_of!(vm_region_basic_info_64, protection) - 0usize];
    ["Offset of field: vm_region_basic_info_64::max_protection"]
        [::std::mem::offset_of!(vm_region_basic_info_64, max_protection) - 4usize];
    ["Offset of field: vm_region_basic_info_64::inheritance"]
        [::std::mem::offset_of!(vm_region_basic_info_64, inheritance) - 8usize];
    ["Offset of field: vm_region_basic_info_64::shared"]
        [::std::mem::offset_of!(vm_region_basic_info_64, shared) - 12usize];
    ["Offset of field: vm_region_basic_info_64::reserved"]
        [::std::mem::offset_of!(vm_region_basic_info_64, reserved) - 16usize];
    ["Offset of field: vm_region_basic_info_64::offset"]
        [::std::mem::offset_of!(vm_region_basic_info_64, offset) - 20usize];
    ["Offset of field: vm_region_basic_info_64::behavior"]
        [::std::mem::offset_of!(vm_region_basic_info_64, behavior) - 28usize];
    ["Offset of field: vm_region_basic_info_64::user_wired_count"]
        [::std::mem::offset_of!(vm_region_basic_info_64, user_wired_count) - 32usize];
};
pub type vm_region_basic_info_64_t = *mut vm_region_basic_info_64;
pub type vm_region_basic_info_data_64_t = vm_region_basic_info_64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_region_basic_info {
    pub protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
    pub shared: boolean_t,
    pub reserved: boolean_t,
    pub offset: u32,
    pub behavior: vm_behavior_t,
    pub user_wired_count: ::std::os::raw::c_ushort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vm_region_basic_info"][::std::mem::size_of::<vm_region_basic_info>() - 32usize];
    ["Alignment of vm_region_basic_info"][::std::mem::align_of::<vm_region_basic_info>() - 4usize];
    ["Offset of field: vm_region_basic_info::protection"]
        [::std::mem::offset_of!(vm_region_basic_info, protection) - 0usize];
    ["Offset of field: vm_region_basic_info::max_protection"]
        [::std::mem::offset_of!(vm_region_basic_info, max_protection) - 4usize];
    ["Offset of field: vm_region_basic_info::inheritance"]
        [::std::mem::offset_of!(vm_region_basic_info, inheritance) - 8usize];
    ["Offset of field: vm_region_basic_info::shared"]
        [::std::mem::offset_of!(vm_region_basic_info, shared) - 12usize];
    ["Offset of field: vm_region_basic_info::reserved"]
        [::std::mem::offset_of!(vm_region_basic_info, reserved) - 16usize];
    ["Offset of field: vm_region_basic_info::offset"]
        [::std::mem::offset_of!(vm_region_basic_info, offset) - 20usize];
    ["Offset of field: vm_region_basic_info::behavior"]
        [::std::mem::offset_of!(vm_region_basic_info, behavior) - 24usize];
    ["Offset of field: vm_region_basic_info::user_wired_count"]
        [::std::mem::offset_of!(vm_region_basic_info, user_wired_count) - 28usize];
};
pub type vm_region_basic_info_t = *mut vm_region_basic_info;
pub type vm_region_basic_info_data_t = vm_region_basic_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_region_extended_info {
    pub protection: vm_prot_t,
    pub user_tag: ::std::os::raw::c_uint,
    pub pages_resident: ::std::os::raw::c_uint,
    pub pages_shared_now_private: ::std::os::raw::c_uint,
    pub pages_swapped_out: ::std::os::raw::c_uint,
    pub pages_dirtied: ::std::os::raw::c_uint,
    pub ref_count: ::std::os::raw::c_uint,
    pub shadow_depth: ::std::os::raw::c_ushort,
    pub external_pager: ::std::os::raw::c_uchar,
    pub share_mode: ::std::os::raw::c_uchar,
    pub pages_reusable: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vm_region_extended_info"][::std::mem::size_of::<vm_region_extended_info>() - 36usize];
    ["Alignment of vm_region_extended_info"]
        [::std::mem::align_of::<vm_region_extended_info>() - 4usize];
    ["Offset of field: vm_region_extended_info::protection"]
        [::std::mem::offset_of!(vm_region_extended_info, protection) - 0usize];
    ["Offset of field: vm_region_extended_info::user_tag"]
        [::std::mem::offset_of!(vm_region_extended_info, user_tag) - 4usize];
    ["Offset of field: vm_region_extended_info::pages_resident"]
        [::std::mem::offset_of!(vm_region_extended_info, pages_resident) - 8usize];
    ["Offset of field: vm_region_extended_info::pages_shared_now_private"]
        [::std::mem::offset_of!(vm_region_extended_info, pages_shared_now_private) - 12usize];
    ["Offset of field: vm_region_extended_info::pages_swapped_out"]
        [::std::mem::offset_of!(vm_region_extended_info, pages_swapped_out) - 16usize];
    ["Offset of field: vm_region_extended_info::pages_dirtied"]
        [::std::mem::offset_of!(vm_region_extended_info, pages_dirtied) - 20usize];
    ["Offset of field: vm_region_extended_info::ref_count"]
        [::std::mem::offset_of!(vm_region_extended_info, ref_count) - 24usize];
    ["Offset of field: vm_region_extended_info::shadow_depth"]
        [::std::mem::offset_of!(vm_region_extended_info, shadow_depth) - 28usize];
    ["Offset of field: vm_region_extended_info::external_pager"]
        [::std::mem::offset_of!(vm_region_extended_info, external_pager) - 30usize];
    ["Offset of field: vm_region_extended_info::share_mode"]
        [::std::mem::offset_of!(vm_region_extended_info, share_mode) - 31usize];
    ["Offset of field: vm_region_extended_info::pages_reusable"]
        [::std::mem::offset_of!(vm_region_extended_info, pages_reusable) - 32usize];
};
pub type vm_region_extended_info_t = *mut vm_region_extended_info;
pub type vm_region_extended_info_data_t = vm_region_extended_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_region_top_info {
    pub obj_id: ::std::os::raw::c_uint,
    pub ref_count: ::std::os::raw::c_uint,
    pub private_pages_resident: ::std::os::raw::c_uint,
    pub shared_pages_resident: ::std::os::raw::c_uint,
    pub share_mode: ::std::os::raw::c_uchar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vm_region_top_info"][::std::mem::size_of::<vm_region_top_info>() - 20usize];
    ["Alignment of vm_region_top_info"][::std::mem::align_of::<vm_region_top_info>() - 4usize];
    ["Offset of field: vm_region_top_info::obj_id"]
        [::std::mem::offset_of!(vm_region_top_info, obj_id) - 0usize];
    ["Offset of field: vm_region_top_info::ref_count"]
        [::std::mem::offset_of!(vm_region_top_info, ref_count) - 4usize];
    ["Offset of field: vm_region_top_info::private_pages_resident"]
        [::std::mem::offset_of!(vm_region_top_info, private_pages_resident) - 8usize];
    ["Offset of field: vm_region_top_info::shared_pages_resident"]
        [::std::mem::offset_of!(vm_region_top_info, shared_pages_resident) - 12usize];
    ["Offset of field: vm_region_top_info::share_mode"]
        [::std::mem::offset_of!(vm_region_top_info, share_mode) - 16usize];
};
pub type vm_region_top_info_t = *mut vm_region_top_info;
pub type vm_region_top_info_data_t = vm_region_top_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_region_submap_info {
    pub protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
    pub offset: u32,
    pub user_tag: ::std::os::raw::c_uint,
    pub pages_resident: ::std::os::raw::c_uint,
    pub pages_shared_now_private: ::std::os::raw::c_uint,
    pub pages_swapped_out: ::std::os::raw::c_uint,
    pub pages_dirtied: ::std::os::raw::c_uint,
    pub ref_count: ::std::os::raw::c_uint,
    pub shadow_depth: ::std::os::raw::c_ushort,
    pub external_pager: ::std::os::raw::c_uchar,
    pub share_mode: ::std::os::raw::c_uchar,
    pub is_submap: boolean_t,
    pub behavior: vm_behavior_t,
    pub object_id: vm32_object_id_t,
    pub user_wired_count: ::std::os::raw::c_ushort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vm_region_submap_info"][::std::mem::size_of::<vm_region_submap_info>() - 60usize];
    ["Alignment of vm_region_submap_info"]
        [::std::mem::align_of::<vm_region_submap_info>() - 4usize];
    ["Offset of field: vm_region_submap_info::protection"]
        [::std::mem::offset_of!(vm_region_submap_info, protection) - 0usize];
    ["Offset of field: vm_region_submap_info::max_protection"]
        [::std::mem::offset_of!(vm_region_submap_info, max_protection) - 4usize];
    ["Offset of field: vm_region_submap_info::inheritance"]
        [::std::mem::offset_of!(vm_region_submap_info, inheritance) - 8usize];
    ["Offset of field: vm_region_submap_info::offset"]
        [::std::mem::offset_of!(vm_region_submap_info, offset) - 12usize];
    ["Offset of field: vm_region_submap_info::user_tag"]
        [::std::mem::offset_of!(vm_region_submap_info, user_tag) - 16usize];
    ["Offset of field: vm_region_submap_info::pages_resident"]
        [::std::mem::offset_of!(vm_region_submap_info, pages_resident) - 20usize];
    ["Offset of field: vm_region_submap_info::pages_shared_now_private"]
        [::std::mem::offset_of!(vm_region_submap_info, pages_shared_now_private) - 24usize];
    ["Offset of field: vm_region_submap_info::pages_swapped_out"]
        [::std::mem::offset_of!(vm_region_submap_info, pages_swapped_out) - 28usize];
    ["Offset of field: vm_region_submap_info::pages_dirtied"]
        [::std::mem::offset_of!(vm_region_submap_info, pages_dirtied) - 32usize];
    ["Offset of field: vm_region_submap_info::ref_count"]
        [::std::mem::offset_of!(vm_region_submap_info, ref_count) - 36usize];
    ["Offset of field: vm_region_submap_info::shadow_depth"]
        [::std::mem::offset_of!(vm_region_submap_info, shadow_depth) - 40usize];
    ["Offset of field: vm_region_submap_info::external_pager"]
        [::std::mem::offset_of!(vm_region_submap_info, external_pager) - 42usize];
    ["Offset of field: vm_region_submap_info::share_mode"]
        [::std::mem::offset_of!(vm_region_submap_info, share_mode) - 43usize];
    ["Offset of field: vm_region_submap_info::is_submap"]
        [::std::mem::offset_of!(vm_region_submap_info, is_submap) - 44usize];
    ["Offset of field: vm_region_submap_info::behavior"]
        [::std::mem::offset_of!(vm_region_submap_info, behavior) - 48usize];
    ["Offset of field: vm_region_submap_info::object_id"]
        [::std::mem::offset_of!(vm_region_submap_info, object_id) - 52usize];
    ["Offset of field: vm_region_submap_info::user_wired_count"]
        [::std::mem::offset_of!(vm_region_submap_info, user_wired_count) - 56usize];
};
pub type vm_region_submap_info_t = *mut vm_region_submap_info;
pub type vm_region_submap_info_data_t = vm_region_submap_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct vm_region_submap_info_64 {
    pub protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
    pub offset: memory_object_offset_t,
    pub user_tag: ::std::os::raw::c_uint,
    pub pages_resident: ::std::os::raw::c_uint,
    pub pages_shared_now_private: ::std::os::raw::c_uint,
    pub pages_swapped_out: ::std::os::raw::c_uint,
    pub pages_dirtied: ::std::os::raw::c_uint,
    pub ref_count: ::std::os::raw::c_uint,
    pub shadow_depth: ::std::os::raw::c_ushort,
    pub external_pager: ::std::os::raw::c_uchar,
    pub share_mode: ::std::os::raw::c_uchar,
    pub is_submap: boolean_t,
    pub behavior: vm_behavior_t,
    pub object_id: vm32_object_id_t,
    pub user_wired_count: ::std::os::raw::c_ushort,
    pub pages_reusable: ::std::os::raw::c_uint,
    pub object_id_full: vm_object_id_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vm_region_submap_info_64"]
        [::std::mem::size_of::<vm_region_submap_info_64>() - 76usize];
    ["Alignment of vm_region_submap_info_64"]
        [::std::mem::align_of::<vm_region_submap_info_64>() - 4usize];
    ["Offset of field: vm_region_submap_info_64::protection"]
        [::std::mem::offset_of!(vm_region_submap_info_64, protection) - 0usize];
    ["Offset of field: vm_region_submap_info_64::max_protection"]
        [::std::mem::offset_of!(vm_region_submap_info_64, max_protection) - 4usize];
    ["Offset of field: vm_region_submap_info_64::inheritance"]
        [::std::mem::offset_of!(vm_region_submap_info_64, inheritance) - 8usize];
    ["Offset of field: vm_region_submap_info_64::offset"]
        [::std::mem::offset_of!(vm_region_submap_info_64, offset) - 12usize];
    ["Offset of field: vm_region_submap_info_64::user_tag"]
        [::std::mem::offset_of!(vm_region_submap_info_64, user_tag) - 20usize];
    ["Offset of field: vm_region_submap_info_64::pages_resident"]
        [::std::mem::offset_of!(vm_region_submap_info_64, pages_resident) - 24usize];
    ["Offset of field: vm_region_submap_info_64::pages_shared_now_private"]
        [::std::mem::offset_of!(vm_region_submap_info_64, pages_shared_now_private) - 28usize];
    ["Offset of field: vm_region_submap_info_64::pages_swapped_out"]
        [::std::mem::offset_of!(vm_region_submap_info_64, pages_swapped_out) - 32usize];
    ["Offset of field: vm_region_submap_info_64::pages_dirtied"]
        [::std::mem::offset_of!(vm_region_submap_info_64, pages_dirtied) - 36usize];
    ["Offset of field: vm_region_submap_info_64::ref_count"]
        [::std::mem::offset_of!(vm_region_submap_info_64, ref_count) - 40usize];
    ["Offset of field: vm_region_submap_info_64::shadow_depth"]
        [::std::mem::offset_of!(vm_region_submap_info_64, shadow_depth) - 44usize];
    ["Offset of field: vm_region_submap_info_64::external_pager"]
        [::std::mem::offset_of!(vm_region_submap_info_64, external_pager) - 46usize];
    ["Offset of field: vm_region_submap_info_64::share_mode"]
        [::std::mem::offset_of!(vm_region_submap_info_64, share_mode) - 47usize];
    ["Offset of field: vm_region_submap_info_64::is_submap"]
        [::std::mem::offset_of!(vm_region_submap_info_64, is_submap) - 48usize];
    ["Offset of field: vm_region_submap_info_64::behavior"]
        [::std::mem::offset_of!(vm_region_submap_info_64, behavior) - 52usize];
    ["Offset of field: vm_region_submap_info_64::object_id"]
        [::std::mem::offset_of!(vm_region_submap_info_64, object_id) - 56usize];
    ["Offset of field: vm_region_submap_info_64::user_wired_count"]
        [::std::mem::offset_of!(vm_region_submap_info_64, user_wired_count) - 60usize];
    ["Offset of field: vm_region_submap_info_64::pages_reusable"]
        [::std::mem::offset_of!(vm_region_submap_info_64, pages_reusable) - 64usize];
    ["Offset of field: vm_region_submap_info_64::object_id_full"]
        [::std::mem::offset_of!(vm_region_submap_info_64, object_id_full) - 68usize];
};
pub type vm_region_submap_info_64_t = *mut vm_region_submap_info_64;
pub type vm_region_submap_info_data_64_t = vm_region_submap_info_64;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct vm_region_submap_short_info_64 {
    pub protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
    pub offset: memory_object_offset_t,
    pub user_tag: ::std::os::raw::c_uint,
    pub ref_count: ::std::os::raw::c_uint,
    pub shadow_depth: ::std::os::raw::c_ushort,
    pub external_pager: ::std::os::raw::c_uchar,
    pub share_mode: ::std::os::raw::c_uchar,
    pub is_submap: boolean_t,
    pub behavior: vm_behavior_t,
    pub object_id: vm32_object_id_t,
    pub user_wired_count: ::std::os::raw::c_ushort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vm_region_submap_short_info_64"]
        [::std::mem::size_of::<vm_region_submap_short_info_64>() - 48usize];
    ["Alignment of vm_region_submap_short_info_64"]
        [::std::mem::align_of::<vm_region_submap_short_info_64>() - 4usize];
    ["Offset of field: vm_region_submap_short_info_64::protection"]
        [::std::mem::offset_of!(vm_region_submap_short_info_64, protection) - 0usize];
    ["Offset of field: vm_region_submap_short_info_64::max_protection"]
        [::std::mem::offset_of!(vm_region_submap_short_info_64, max_protection) - 4usize];
    ["Offset of field: vm_region_submap_short_info_64::inheritance"]
        [::std::mem::offset_of!(vm_region_submap_short_info_64, inheritance) - 8usize];
    ["Offset of field: vm_region_submap_short_info_64::offset"]
        [::std::mem::offset_of!(vm_region_submap_short_info_64, offset) - 12usize];
    ["Offset of field: vm_region_submap_short_info_64::user_tag"]
        [::std::mem::offset_of!(vm_region_submap_short_info_64, user_tag) - 20usize];
    ["Offset of field: vm_region_submap_short_info_64::ref_count"]
        [::std::mem::offset_of!(vm_region_submap_short_info_64, ref_count) - 24usize];
    ["Offset of field: vm_region_submap_short_info_64::shadow_depth"]
        [::std::mem::offset_of!(vm_region_submap_short_info_64, shadow_depth) - 28usize];
    ["Offset of field: vm_region_submap_short_info_64::external_pager"]
        [::std::mem::offset_of!(vm_region_submap_short_info_64, external_pager) - 30usize];
    ["Offset of field: vm_region_submap_short_info_64::share_mode"]
        [::std::mem::offset_of!(vm_region_submap_short_info_64, share_mode) - 31usize];
    ["Offset of field: vm_region_submap_short_info_64::is_submap"]
        [::std::mem::offset_of!(vm_region_submap_short_info_64, is_submap) - 32usize];
    ["Offset of field: vm_region_submap_short_info_64::behavior"]
        [::std::mem::offset_of!(vm_region_submap_short_info_64, behavior) - 36usize];
    ["Offset of field: vm_region_submap_short_info_64::object_id"]
        [::std::mem::offset_of!(vm_region_submap_short_info_64, object_id) - 40usize];
    ["Offset of field: vm_region_submap_short_info_64::user_wired_count"]
        [::std::mem::offset_of!(vm_region_submap_short_info_64, user_wired_count) - 44usize];
};
pub type vm_region_submap_short_info_64_t = *mut vm_region_submap_short_info_64;
pub type vm_region_submap_short_info_data_64_t = vm_region_submap_short_info_64;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_vm_read_entry {
    pub address: mach_vm_address_t,
    pub size: mach_vm_size_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_vm_read_entry"][::std::mem::size_of::<mach_vm_read_entry>() - 16usize];
    ["Alignment of mach_vm_read_entry"][::std::mem::align_of::<mach_vm_read_entry>() - 4usize];
    ["Offset of field: mach_vm_read_entry::address"]
        [::std::mem::offset_of!(mach_vm_read_entry, address) - 0usize];
    ["Offset of field: mach_vm_read_entry::size"]
        [::std::mem::offset_of!(mach_vm_read_entry, size) - 8usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct vm_read_entry {
    pub address: vm_address_t,
    pub size: vm_size_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vm_read_entry"][::std::mem::size_of::<vm_read_entry>() - 16usize];
    ["Alignment of vm_read_entry"][::std::mem::align_of::<vm_read_entry>() - 4usize];
    ["Offset of field: vm_read_entry::address"]
        [::std::mem::offset_of!(vm_read_entry, address) - 0usize];
    ["Offset of field: vm_read_entry::size"][::std::mem::offset_of!(vm_read_entry, size) - 8usize];
};
pub type mach_vm_read_entry_t = [mach_vm_read_entry; 256usize];
pub type vm_read_entry_t = [vm_read_entry; 256usize];
pub type vm_page_info_t = *mut ::std::os::raw::c_int;
pub type vm_page_info_data_t = [::std::os::raw::c_int; 0usize];
pub type vm_page_info_flavor_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_page_info_basic {
    pub disposition: ::std::os::raw::c_int,
    pub ref_count: ::std::os::raw::c_int,
    pub object_id: vm_object_id_t,
    pub offset: memory_object_offset_t,
    pub depth: ::std::os::raw::c_int,
    pub __pad: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vm_page_info_basic"][::std::mem::size_of::<vm_page_info_basic>() - 32usize];
    ["Alignment of vm_page_info_basic"][::std::mem::align_of::<vm_page_info_basic>() - 8usize];
    ["Offset of field: vm_page_info_basic::disposition"]
        [::std::mem::offset_of!(vm_page_info_basic, disposition) - 0usize];
    ["Offset of field: vm_page_info_basic::ref_count"]
        [::std::mem::offset_of!(vm_page_info_basic, ref_count) - 4usize];
    ["Offset of field: vm_page_info_basic::object_id"]
        [::std::mem::offset_of!(vm_page_info_basic, object_id) - 8usize];
    ["Offset of field: vm_page_info_basic::offset"]
        [::std::mem::offset_of!(vm_page_info_basic, offset) - 16usize];
    ["Offset of field: vm_page_info_basic::depth"]
        [::std::mem::offset_of!(vm_page_info_basic, depth) - 24usize];
    ["Offset of field: vm_page_info_basic::__pad"]
        [::std::mem::offset_of!(vm_page_info_basic, __pad) - 28usize];
};
pub type vm_page_info_basic_t = *mut vm_page_info_basic;
pub type vm_page_info_basic_data_t = vm_page_info_basic;
pub type kmod_t = ::std::os::raw::c_int;
pub type kmod_start_func_t = ::std::option::Option<
    unsafe extern "C" fn(ki: *mut kmod_info, data: *mut ::std::os::raw::c_void) -> kern_return_t,
>;
pub type kmod_stop_func_t = ::std::option::Option<
    unsafe extern "C" fn(ki: *mut kmod_info, data: *mut ::std::os::raw::c_void) -> kern_return_t,
>;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct kmod_reference {
    pub next: *mut kmod_reference,
    pub info: *mut kmod_info,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kmod_reference"][::std::mem::size_of::<kmod_reference>() - 16usize];
    ["Alignment of kmod_reference"][::std::mem::align_of::<kmod_reference>() - 4usize];
    ["Offset of field: kmod_reference::next"]
        [::std::mem::offset_of!(kmod_reference, next) - 0usize];
    ["Offset of field: kmod_reference::info"]
        [::std::mem::offset_of!(kmod_reference, info) - 8usize];
};
pub type kmod_reference_t = kmod_reference;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct kmod_info {
    pub next: *mut kmod_info,
    pub info_version: i32,
    pub id: u32,
    pub name: [::std::os::raw::c_char; 64usize],
    pub version: [::std::os::raw::c_char; 64usize],
    pub reference_count: i32,
    pub reference_list: *mut kmod_reference_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub hdr_size: vm_size_t,
    pub start: kmod_start_func_t,
    pub stop: kmod_stop_func_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kmod_info"][::std::mem::size_of::<kmod_info>() - 196usize];
    ["Alignment of kmod_info"][::std::mem::align_of::<kmod_info>() - 4usize];
    ["Offset of field: kmod_info::next"][::std::mem::offset_of!(kmod_info, next) - 0usize];
    ["Offset of field: kmod_info::info_version"]
        [::std::mem::offset_of!(kmod_info, info_version) - 8usize];
    ["Offset of field: kmod_info::id"][::std::mem::offset_of!(kmod_info, id) - 12usize];
    ["Offset of field: kmod_info::name"][::std::mem::offset_of!(kmod_info, name) - 16usize];
    ["Offset of field: kmod_info::version"][::std::mem::offset_of!(kmod_info, version) - 80usize];
    ["Offset of field: kmod_info::reference_count"]
        [::std::mem::offset_of!(kmod_info, reference_count) - 144usize];
    ["Offset of field: kmod_info::reference_list"]
        [::std::mem::offset_of!(kmod_info, reference_list) - 148usize];
    ["Offset of field: kmod_info::address"][::std::mem::offset_of!(kmod_info, address) - 156usize];
    ["Offset of field: kmod_info::size"][::std::mem::offset_of!(kmod_info, size) - 164usize];
    ["Offset of field: kmod_info::hdr_size"]
        [::std::mem::offset_of!(kmod_info, hdr_size) - 172usize];
    ["Offset of field: kmod_info::start"][::std::mem::offset_of!(kmod_info, start) - 180usize];
    ["Offset of field: kmod_info::stop"][::std::mem::offset_of!(kmod_info, stop) - 188usize];
};
pub type kmod_info_t = kmod_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kmod_info_32_v1 {
    pub next_addr: u32,
    pub info_version: i32,
    pub id: u32,
    pub name: [u8; 64usize],
    pub version: [u8; 64usize],
    pub reference_count: i32,
    pub reference_list_addr: u32,
    pub address: u32,
    pub size: u32,
    pub hdr_size: u32,
    pub start_addr: u32,
    pub stop_addr: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kmod_info_32_v1"][::std::mem::size_of::<kmod_info_32_v1>() - 168usize];
    ["Alignment of kmod_info_32_v1"][::std::mem::align_of::<kmod_info_32_v1>() - 4usize];
    ["Offset of field: kmod_info_32_v1::next_addr"]
        [::std::mem::offset_of!(kmod_info_32_v1, next_addr) - 0usize];
    ["Offset of field: kmod_info_32_v1::info_version"]
        [::std::mem::offset_of!(kmod_info_32_v1, info_version) - 4usize];
    ["Offset of field: kmod_info_32_v1::id"][::std::mem::offset_of!(kmod_info_32_v1, id) - 8usize];
    ["Offset of field: kmod_info_32_v1::name"]
        [::std::mem::offset_of!(kmod_info_32_v1, name) - 12usize];
    ["Offset of field: kmod_info_32_v1::version"]
        [::std::mem::offset_of!(kmod_info_32_v1, version) - 76usize];
    ["Offset of field: kmod_info_32_v1::reference_count"]
        [::std::mem::offset_of!(kmod_info_32_v1, reference_count) - 140usize];
    ["Offset of field: kmod_info_32_v1::reference_list_addr"]
        [::std::mem::offset_of!(kmod_info_32_v1, reference_list_addr) - 144usize];
    ["Offset of field: kmod_info_32_v1::address"]
        [::std::mem::offset_of!(kmod_info_32_v1, address) - 148usize];
    ["Offset of field: kmod_info_32_v1::size"]
        [::std::mem::offset_of!(kmod_info_32_v1, size) - 152usize];
    ["Offset of field: kmod_info_32_v1::hdr_size"]
        [::std::mem::offset_of!(kmod_info_32_v1, hdr_size) - 156usize];
    ["Offset of field: kmod_info_32_v1::start_addr"]
        [::std::mem::offset_of!(kmod_info_32_v1, start_addr) - 160usize];
    ["Offset of field: kmod_info_32_v1::stop_addr"]
        [::std::mem::offset_of!(kmod_info_32_v1, stop_addr) - 164usize];
};
pub type kmod_info_32_v1_t = kmod_info_32_v1;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct kmod_info_64_v1 {
    pub next_addr: u64,
    pub info_version: i32,
    pub id: u32,
    pub name: [u8; 64usize],
    pub version: [u8; 64usize],
    pub reference_count: i32,
    pub reference_list_addr: u64,
    pub address: u64,
    pub size: u64,
    pub hdr_size: u64,
    pub start_addr: u64,
    pub stop_addr: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kmod_info_64_v1"][::std::mem::size_of::<kmod_info_64_v1>() - 196usize];
    ["Alignment of kmod_info_64_v1"][::std::mem::align_of::<kmod_info_64_v1>() - 4usize];
    ["Offset of field: kmod_info_64_v1::next_addr"]
        [::std::mem::offset_of!(kmod_info_64_v1, next_addr) - 0usize];
    ["Offset of field: kmod_info_64_v1::info_version"]
        [::std::mem::offset_of!(kmod_info_64_v1, info_version) - 8usize];
    ["Offset of field: kmod_info_64_v1::id"][::std::mem::offset_of!(kmod_info_64_v1, id) - 12usize];
    ["Offset of field: kmod_info_64_v1::name"]
        [::std::mem::offset_of!(kmod_info_64_v1, name) - 16usize];
    ["Offset of field: kmod_info_64_v1::version"]
        [::std::mem::offset_of!(kmod_info_64_v1, version) - 80usize];
    ["Offset of field: kmod_info_64_v1::reference_count"]
        [::std::mem::offset_of!(kmod_info_64_v1, reference_count) - 144usize];
    ["Offset of field: kmod_info_64_v1::reference_list_addr"]
        [::std::mem::offset_of!(kmod_info_64_v1, reference_list_addr) - 148usize];
    ["Offset of field: kmod_info_64_v1::address"]
        [::std::mem::offset_of!(kmod_info_64_v1, address) - 156usize];
    ["Offset of field: kmod_info_64_v1::size"]
        [::std::mem::offset_of!(kmod_info_64_v1, size) - 164usize];
    ["Offset of field: kmod_info_64_v1::hdr_size"]
        [::std::mem::offset_of!(kmod_info_64_v1, hdr_size) - 172usize];
    ["Offset of field: kmod_info_64_v1::start_addr"]
        [::std::mem::offset_of!(kmod_info_64_v1, start_addr) - 180usize];
    ["Offset of field: kmod_info_64_v1::stop_addr"]
        [::std::mem::offset_of!(kmod_info_64_v1, stop_addr) - 188usize];
};
pub type kmod_info_64_v1_t = kmod_info_64_v1;
pub type kmod_args_t = *mut ::std::os::raw::c_void;
pub type kmod_control_flavor_t = ::std::os::raw::c_int;
pub type kmod_info_array_t = *mut kmod_info_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fsid {
    pub val: [i32; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fsid"][::std::mem::size_of::<fsid>() - 8usize];
    ["Alignment of fsid"][::std::mem::align_of::<fsid>() - 4usize];
    ["Offset of field: fsid::val"][::std::mem::offset_of!(fsid, val) - 0usize];
};
pub type fsid_t = fsid;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fsobj_id {
    pub fid_objno: u_int32_t,
    pub fid_generation: u_int32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fsobj_id"][::std::mem::size_of::<fsobj_id>() - 8usize];
    ["Alignment of fsobj_id"][::std::mem::align_of::<fsobj_id>() - 4usize];
    ["Offset of field: fsobj_id::fid_objno"][::std::mem::offset_of!(fsobj_id, fid_objno) - 0usize];
    ["Offset of field: fsobj_id::fid_generation"]
        [::std::mem::offset_of!(fsobj_id, fid_generation) - 4usize];
};
pub type fsobj_id_t = fsobj_id;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dyld_kernel_image_info {
    pub uuid: uuid_t,
    pub fsobjid: fsobj_id_t,
    pub fsid: fsid_t,
    pub load_addr: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dyld_kernel_image_info"][::std::mem::size_of::<dyld_kernel_image_info>() - 40usize];
    ["Alignment of dyld_kernel_image_info"]
        [::std::mem::align_of::<dyld_kernel_image_info>() - 8usize];
    ["Offset of field: dyld_kernel_image_info::uuid"]
        [::std::mem::offset_of!(dyld_kernel_image_info, uuid) - 0usize];
    ["Offset of field: dyld_kernel_image_info::fsobjid"]
        [::std::mem::offset_of!(dyld_kernel_image_info, fsobjid) - 16usize];
    ["Offset of field: dyld_kernel_image_info::fsid"]
        [::std::mem::offset_of!(dyld_kernel_image_info, fsid) - 24usize];
    ["Offset of field: dyld_kernel_image_info::load_addr"]
        [::std::mem::offset_of!(dyld_kernel_image_info, load_addr) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dyld_kernel_process_info {
    pub cache_image_info: dyld_kernel_image_info,
    pub timestamp: u64,
    pub imageCount: u32,
    pub initialImageCount: u32,
    pub dyldState: u8,
    pub no_cache: boolean_t,
    pub private_cache: boolean_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dyld_kernel_process_info"]
        [::std::mem::size_of::<dyld_kernel_process_info>() - 72usize];
    ["Alignment of dyld_kernel_process_info"]
        [::std::mem::align_of::<dyld_kernel_process_info>() - 8usize];
    ["Offset of field: dyld_kernel_process_info::cache_image_info"]
        [::std::mem::offset_of!(dyld_kernel_process_info, cache_image_info) - 0usize];
    ["Offset of field: dyld_kernel_process_info::timestamp"]
        [::std::mem::offset_of!(dyld_kernel_process_info, timestamp) - 40usize];
    ["Offset of field: dyld_kernel_process_info::imageCount"]
        [::std::mem::offset_of!(dyld_kernel_process_info, imageCount) - 48usize];
    ["Offset of field: dyld_kernel_process_info::initialImageCount"]
        [::std::mem::offset_of!(dyld_kernel_process_info, initialImageCount) - 52usize];
    ["Offset of field: dyld_kernel_process_info::dyldState"]
        [::std::mem::offset_of!(dyld_kernel_process_info, dyldState) - 56usize];
    ["Offset of field: dyld_kernel_process_info::no_cache"]
        [::std::mem::offset_of!(dyld_kernel_process_info, no_cache) - 60usize];
    ["Offset of field: dyld_kernel_process_info::private_cache"]
        [::std::mem::offset_of!(dyld_kernel_process_info, private_cache) - 64usize];
};
pub type dyld_kernel_image_info_t = dyld_kernel_image_info;
pub type dyld_kernel_process_info_t = dyld_kernel_process_info;
pub type dyld_kernel_image_info_array_t = *mut dyld_kernel_image_info_t;
pub type task_t = mach_port_t;
pub type task_name_t = mach_port_t;
pub type task_policy_set_t = mach_port_t;
pub type task_policy_get_t = mach_port_t;
pub type task_inspect_t = mach_port_t;
pub type task_read_t = mach_port_t;
pub type task_suspension_token_t = mach_port_t;
pub type thread_t = mach_port_t;
pub type thread_act_t = mach_port_t;
pub type thread_inspect_t = mach_port_t;
pub type thread_read_t = mach_port_t;
pub type ipc_space_t = mach_port_t;
pub type ipc_space_read_t = mach_port_t;
pub type ipc_space_inspect_t = mach_port_t;
pub type coalition_t = mach_port_t;
pub type host_t = mach_port_t;
pub type host_priv_t = mach_port_t;
pub type host_security_t = mach_port_t;
pub type processor_t = mach_port_t;
pub type processor_set_t = mach_port_t;
pub type processor_set_control_t = mach_port_t;
pub type semaphore_t = mach_port_t;
pub type lock_set_t = mach_port_t;
pub type ledger_t = mach_port_t;
pub type alarm_t = mach_port_t;
pub type clock_serv_t = mach_port_t;
pub type clock_ctrl_t = mach_port_t;
pub type arcade_register_t = mach_port_t;
pub type ipc_eventlink_t = mach_port_t;
pub type eventlink_port_pair_t = [mach_port_t; 2usize];
pub type task_id_token_t = mach_port_t;
pub type kcdata_object_t = mach_port_t;
pub type processor_set_name_t = processor_set_t;
pub type clock_reply_t = mach_port_t;
pub type bootstrap_t = mach_port_t;
pub type mem_entry_name_port_t = mach_port_t;
pub type exception_handler_t = mach_port_t;
pub type exception_handler_array_t = *mut exception_handler_t;
pub type vm_task_entry_t = mach_port_t;
pub type io_main_t = mach_port_t;
pub type UNDServerRef = mach_port_t;
pub type mach_eventlink_t = mach_port_t;
pub type exception_handler_info_t = ipc_info_port_t;
pub type task_array_t = *mut task_t;
pub type thread_array_t = *mut thread_t;
pub type processor_set_array_t = *mut processor_set_t;
pub type processor_set_name_array_t = *mut processor_set_t;
pub type processor_array_t = *mut processor_t;
pub type thread_act_array_t = *mut thread_act_t;
pub type ledger_array_t = *mut ledger_t;
pub type task_port_t = task_t;
pub type task_port_array_t = task_array_t;
pub type thread_port_t = thread_t;
pub type thread_port_array_t = thread_array_t;
pub type ipc_space_port_t = ipc_space_t;
pub type host_name_t = host_t;
pub type host_name_port_t = host_t;
pub type processor_set_port_t = processor_set_t;
pub type processor_set_name_port_t = processor_set_t;
pub type processor_set_name_port_array_t = processor_set_array_t;
pub type processor_set_control_port_t = processor_set_t;
pub type processor_port_t = processor_t;
pub type processor_port_array_t = processor_array_t;
pub type thread_act_port_t = thread_act_t;
pub type thread_act_port_array_t = thread_act_array_t;
pub type semaphore_port_t = semaphore_t;
pub type lock_set_port_t = lock_set_t;
pub type ledger_port_t = ledger_t;
pub type ledger_port_array_t = ledger_array_t;
pub type alarm_port_t = alarm_t;
pub type clock_serv_port_t = clock_serv_t;
pub type clock_ctrl_port_t = clock_ctrl_t;
pub type exception_port_t = exception_handler_t;
pub type exception_port_arrary_t = exception_handler_array_t;
pub type vfs_path_t = [::std::os::raw::c_char; 4096usize];
pub type nspace_path_t = [::std::os::raw::c_char; 8192usize];
pub type nspace_name_t = [::std::os::raw::c_char; 8192usize];
pub type mach_task_flavor_t = ::std::os::raw::c_uint;
pub type mach_thread_flavor_t = ::std::os::raw::c_uint;
pub type ledger_item_t = natural_t;
pub type ledger_amount_t = i64;
pub type emulation_vector_t = *mut mach_vm_offset_t;
pub type user_subsystem_t = *mut ::std::os::raw::c_char;
pub type labelstr_t = *mut ::std::os::raw::c_char;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct _OSUnalignedU16 {
    pub __val: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _OSUnalignedU16"][::std::mem::size_of::<_OSUnalignedU16>() - 2usize];
    ["Alignment of _OSUnalignedU16"][::std::mem::align_of::<_OSUnalignedU16>() - 1usize];
    ["Offset of field: _OSUnalignedU16::__val"]
        [::std::mem::offset_of!(_OSUnalignedU16, __val) - 0usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct _OSUnalignedU32 {
    pub __val: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _OSUnalignedU32"][::std::mem::size_of::<_OSUnalignedU32>() - 4usize];
    ["Alignment of _OSUnalignedU32"][::std::mem::align_of::<_OSUnalignedU32>() - 1usize];
    ["Offset of field: _OSUnalignedU32::__val"]
        [::std::mem::offset_of!(_OSUnalignedU32, __val) - 0usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct _OSUnalignedU64 {
    pub __val: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _OSUnalignedU64"][::std::mem::size_of::<_OSUnalignedU64>() - 8usize];
    ["Alignment of _OSUnalignedU64"][::std::mem::align_of::<_OSUnalignedU64>() - 1usize];
    ["Offset of field: _OSUnalignedU64::__val"]
        [::std::mem::offset_of!(_OSUnalignedU64, __val) - 0usize];
};
pub const OSUnknownByteOrder: _bindgen_ty_2 = 0;
pub const OSLittleEndian: _bindgen_ty_2 = 1;
pub const OSBigEndian: _bindgen_ty_2 = 2;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NDR_record_t {
    pub mig_vers: ::std::os::raw::c_uchar,
    pub if_vers: ::std::os::raw::c_uchar,
    pub reserved1: ::std::os::raw::c_uchar,
    pub mig_encoding: ::std::os::raw::c_uchar,
    pub int_rep: ::std::os::raw::c_uchar,
    pub char_rep: ::std::os::raw::c_uchar,
    pub float_rep: ::std::os::raw::c_uchar,
    pub reserved2: ::std::os::raw::c_uchar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of NDR_record_t"][::std::mem::size_of::<NDR_record_t>() - 8usize];
    ["Alignment of NDR_record_t"][::std::mem::align_of::<NDR_record_t>() - 1usize];
    ["Offset of field: NDR_record_t::mig_vers"]
        [::std::mem::offset_of!(NDR_record_t, mig_vers) - 0usize];
    ["Offset of field: NDR_record_t::if_vers"]
        [::std::mem::offset_of!(NDR_record_t, if_vers) - 1usize];
    ["Offset of field: NDR_record_t::reserved1"]
        [::std::mem::offset_of!(NDR_record_t, reserved1) - 2usize];
    ["Offset of field: NDR_record_t::mig_encoding"]
        [::std::mem::offset_of!(NDR_record_t, mig_encoding) - 3usize];
    ["Offset of field: NDR_record_t::int_rep"]
        [::std::mem::offset_of!(NDR_record_t, int_rep) - 4usize];
    ["Offset of field: NDR_record_t::char_rep"]
        [::std::mem::offset_of!(NDR_record_t, char_rep) - 5usize];
    ["Offset of field: NDR_record_t::float_rep"]
        [::std::mem::offset_of!(NDR_record_t, float_rep) - 6usize];
    ["Offset of field: NDR_record_t::reserved2"]
        [::std::mem::offset_of!(NDR_record_t, reserved2) - 7usize];
};
unsafe extern "C" {
    pub static mut NDR_record: NDR_record_t;
}
pub type notify_port_t = mach_port_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_port_deleted_notification_t {
    pub not_header: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub not_port: mach_port_name_t,
    pub trailer: mach_msg_format_0_trailer_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_port_deleted_notification_t"]
        [::std::mem::size_of::<mach_port_deleted_notification_t>() - 56usize];
    ["Alignment of mach_port_deleted_notification_t"]
        [::std::mem::align_of::<mach_port_deleted_notification_t>() - 4usize];
    ["Offset of field: mach_port_deleted_notification_t::not_header"]
        [::std::mem::offset_of!(mach_port_deleted_notification_t, not_header) - 0usize];
    ["Offset of field: mach_port_deleted_notification_t::NDR"]
        [::std::mem::offset_of!(mach_port_deleted_notification_t, NDR) - 24usize];
    ["Offset of field: mach_port_deleted_notification_t::not_port"]
        [::std::mem::offset_of!(mach_port_deleted_notification_t, not_port) - 32usize];
    ["Offset of field: mach_port_deleted_notification_t::trailer"]
        [::std::mem::offset_of!(mach_port_deleted_notification_t, trailer) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_send_possible_notification_t {
    pub not_header: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub not_port: mach_port_name_t,
    pub trailer: mach_msg_format_0_trailer_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_send_possible_notification_t"]
        [::std::mem::size_of::<mach_send_possible_notification_t>() - 56usize];
    ["Alignment of mach_send_possible_notification_t"]
        [::std::mem::align_of::<mach_send_possible_notification_t>() - 4usize];
    ["Offset of field: mach_send_possible_notification_t::not_header"]
        [::std::mem::offset_of!(mach_send_possible_notification_t, not_header) - 0usize];
    ["Offset of field: mach_send_possible_notification_t::NDR"]
        [::std::mem::offset_of!(mach_send_possible_notification_t, NDR) - 24usize];
    ["Offset of field: mach_send_possible_notification_t::not_port"]
        [::std::mem::offset_of!(mach_send_possible_notification_t, not_port) - 32usize];
    ["Offset of field: mach_send_possible_notification_t::trailer"]
        [::std::mem::offset_of!(mach_send_possible_notification_t, trailer) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_port_destroyed_notification_t {
    pub not_header: mach_msg_header_t,
    pub not_body: mach_msg_body_t,
    pub not_port: mach_msg_port_descriptor_t,
    pub trailer: mach_msg_format_0_trailer_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_port_destroyed_notification_t"]
        [::std::mem::size_of::<mach_port_destroyed_notification_t>() - 60usize];
    ["Alignment of mach_port_destroyed_notification_t"]
        [::std::mem::align_of::<mach_port_destroyed_notification_t>() - 4usize];
    ["Offset of field: mach_port_destroyed_notification_t::not_header"]
        [::std::mem::offset_of!(mach_port_destroyed_notification_t, not_header) - 0usize];
    ["Offset of field: mach_port_destroyed_notification_t::not_body"]
        [::std::mem::offset_of!(mach_port_destroyed_notification_t, not_body) - 24usize];
    ["Offset of field: mach_port_destroyed_notification_t::not_port"]
        [::std::mem::offset_of!(mach_port_destroyed_notification_t, not_port) - 28usize];
    ["Offset of field: mach_port_destroyed_notification_t::trailer"]
        [::std::mem::offset_of!(mach_port_destroyed_notification_t, trailer) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_no_senders_notification_t {
    pub not_header: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub not_count: mach_msg_type_number_t,
    pub trailer: mach_msg_format_0_trailer_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_no_senders_notification_t"]
        [::std::mem::size_of::<mach_no_senders_notification_t>() - 56usize];
    ["Alignment of mach_no_senders_notification_t"]
        [::std::mem::align_of::<mach_no_senders_notification_t>() - 4usize];
    ["Offset of field: mach_no_senders_notification_t::not_header"]
        [::std::mem::offset_of!(mach_no_senders_notification_t, not_header) - 0usize];
    ["Offset of field: mach_no_senders_notification_t::NDR"]
        [::std::mem::offset_of!(mach_no_senders_notification_t, NDR) - 24usize];
    ["Offset of field: mach_no_senders_notification_t::not_count"]
        [::std::mem::offset_of!(mach_no_senders_notification_t, not_count) - 32usize];
    ["Offset of field: mach_no_senders_notification_t::trailer"]
        [::std::mem::offset_of!(mach_no_senders_notification_t, trailer) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_send_once_notification_t {
    pub not_header: mach_msg_header_t,
    pub trailer: mach_msg_format_0_trailer_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_send_once_notification_t"]
        [::std::mem::size_of::<mach_send_once_notification_t>() - 44usize];
    ["Alignment of mach_send_once_notification_t"]
        [::std::mem::align_of::<mach_send_once_notification_t>() - 4usize];
    ["Offset of field: mach_send_once_notification_t::not_header"]
        [::std::mem::offset_of!(mach_send_once_notification_t, not_header) - 0usize];
    ["Offset of field: mach_send_once_notification_t::trailer"]
        [::std::mem::offset_of!(mach_send_once_notification_t, trailer) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_dead_name_notification_t {
    pub not_header: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub not_port: mach_port_name_t,
    pub trailer: mach_msg_format_0_trailer_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_dead_name_notification_t"]
        [::std::mem::size_of::<mach_dead_name_notification_t>() - 56usize];
    ["Alignment of mach_dead_name_notification_t"]
        [::std::mem::align_of::<mach_dead_name_notification_t>() - 4usize];
    ["Offset of field: mach_dead_name_notification_t::not_header"]
        [::std::mem::offset_of!(mach_dead_name_notification_t, not_header) - 0usize];
    ["Offset of field: mach_dead_name_notification_t::NDR"]
        [::std::mem::offset_of!(mach_dead_name_notification_t, NDR) - 24usize];
    ["Offset of field: mach_dead_name_notification_t::not_port"]
        [::std::mem::offset_of!(mach_dead_name_notification_t, not_port) - 32usize];
    ["Offset of field: mach_dead_name_notification_t::trailer"]
        [::std::mem::offset_of!(mach_dead_name_notification_t, trailer) - 36usize];
};
pub type mig_stub_routine_t = ::std::option::Option<
    unsafe extern "C" fn(InHeadP: *mut mach_msg_header_t, OutHeadP: *mut mach_msg_header_t),
>;
pub type mig_routine_t = mig_stub_routine_t;
pub type mig_server_routine_t =
    ::std::option::Option<unsafe extern "C" fn(InHeadP: *mut mach_msg_header_t) -> mig_routine_t>;
pub type mig_impl_routine_t = ::std::option::Option<unsafe extern "C" fn() -> kern_return_t>;
pub type routine_arg_descriptor = mach_msg_type_descriptor_t;
pub type routine_arg_descriptor_t = *mut mach_msg_type_descriptor_t;
pub type mig_routine_arg_descriptor_t = *mut mach_msg_type_descriptor_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct routine_descriptor {
    pub impl_routine: mig_impl_routine_t,
    pub stub_routine: mig_stub_routine_t,
    pub argc: ::std::os::raw::c_uint,
    pub descr_count: ::std::os::raw::c_uint,
    pub arg_descr: routine_arg_descriptor_t,
    pub max_reply_msg: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of routine_descriptor"][::std::mem::size_of::<routine_descriptor>() - 40usize];
    ["Alignment of routine_descriptor"][::std::mem::align_of::<routine_descriptor>() - 8usize];
    ["Offset of field: routine_descriptor::impl_routine"]
        [::std::mem::offset_of!(routine_descriptor, impl_routine) - 0usize];
    ["Offset of field: routine_descriptor::stub_routine"]
        [::std::mem::offset_of!(routine_descriptor, stub_routine) - 8usize];
    ["Offset of field: routine_descriptor::argc"]
        [::std::mem::offset_of!(routine_descriptor, argc) - 16usize];
    ["Offset of field: routine_descriptor::descr_count"]
        [::std::mem::offset_of!(routine_descriptor, descr_count) - 20usize];
    ["Offset of field: routine_descriptor::arg_descr"]
        [::std::mem::offset_of!(routine_descriptor, arg_descr) - 24usize];
    ["Offset of field: routine_descriptor::max_reply_msg"]
        [::std::mem::offset_of!(routine_descriptor, max_reply_msg) - 32usize];
};
pub type routine_descriptor_t = *mut routine_descriptor;
pub type mig_routine_descriptor = routine_descriptor;
pub type mig_routine_descriptor_t = *mut mig_routine_descriptor;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mig_subsystem {
    pub server: mig_server_routine_t,
    pub start: mach_msg_id_t,
    pub end: mach_msg_id_t,
    pub maxsize: mach_msg_size_t,
    pub reserved: vm_address_t,
    pub routine: [mig_routine_descriptor; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mig_subsystem"][::std::mem::size_of::<mig_subsystem>() - 72usize];
    ["Alignment of mig_subsystem"][::std::mem::align_of::<mig_subsystem>() - 8usize];
    ["Offset of field: mig_subsystem::server"]
        [::std::mem::offset_of!(mig_subsystem, server) - 0usize];
    ["Offset of field: mig_subsystem::start"]
        [::std::mem::offset_of!(mig_subsystem, start) - 8usize];
    ["Offset of field: mig_subsystem::end"][::std::mem::offset_of!(mig_subsystem, end) - 12usize];
    ["Offset of field: mig_subsystem::maxsize"]
        [::std::mem::offset_of!(mig_subsystem, maxsize) - 16usize];
    ["Offset of field: mig_subsystem::reserved"]
        [::std::mem::offset_of!(mig_subsystem, reserved) - 24usize];
    ["Offset of field: mig_subsystem::routine"]
        [::std::mem::offset_of!(mig_subsystem, routine) - 32usize];
};
pub type mig_subsystem_t = *mut mig_subsystem;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mig_symtab {
    pub ms_routine_name: *mut ::std::os::raw::c_char,
    pub ms_routine_number: ::std::os::raw::c_int,
    pub ms_routine: ::std::option::Option<unsafe extern "C" fn()>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mig_symtab"][::std::mem::size_of::<mig_symtab>() - 24usize];
    ["Alignment of mig_symtab"][::std::mem::align_of::<mig_symtab>() - 8usize];
    ["Offset of field: mig_symtab::ms_routine_name"]
        [::std::mem::offset_of!(mig_symtab, ms_routine_name) - 0usize];
    ["Offset of field: mig_symtab::ms_routine_number"]
        [::std::mem::offset_of!(mig_symtab, ms_routine_number) - 8usize];
    ["Offset of field: mig_symtab::ms_routine"]
        [::std::mem::offset_of!(mig_symtab, ms_routine) - 16usize];
};
pub type mig_symtab_t = mig_symtab;
unsafe extern "C" {
    pub fn mig_get_reply_port() -> mach_port_t;
}
unsafe extern "C" {
    pub fn mig_dealloc_reply_port(reply_port: mach_port_t);
}
unsafe extern "C" {
    pub fn mig_put_reply_port(reply_port: mach_port_t);
}
unsafe extern "C" {
    pub fn mig_strncpy(
        dest: *mut ::std::os::raw::c_char,
        src: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mig_strncpy_zerofill(
        dest: *mut ::std::os::raw::c_char,
        src: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mig_allocate(arg1: *mut vm_address_t, arg2: vm_size_t);
}
unsafe extern "C" {
    pub fn mig_deallocate(arg1: vm_address_t, arg2: vm_size_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mig_reply_error_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mig_reply_error_t"][::std::mem::size_of::<mig_reply_error_t>() - 36usize];
    ["Alignment of mig_reply_error_t"][::std::mem::align_of::<mig_reply_error_t>() - 4usize];
    ["Offset of field: mig_reply_error_t::Head"]
        [::std::mem::offset_of!(mig_reply_error_t, Head) - 0usize];
    ["Offset of field: mig_reply_error_t::NDR"]
        [::std::mem::offset_of!(mig_reply_error_t, NDR) - 24usize];
    ["Offset of field: mig_reply_error_t::RetCode"]
        [::std::mem::offset_of!(mig_reply_error_t, RetCode) - 32usize];
};
unsafe extern "C" {
    pub fn clock_set_time(clock_ctrl: clock_ctrl_t, new_time: mach_timespec_t) -> kern_return_t;
}
unsafe extern "C" {
    pub fn clock_set_attributes(
        clock_ctrl: clock_ctrl_t,
        flavor: clock_flavor_t,
        clock_attr: clock_attr_t,
        clock_attrCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__clock_set_time_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub new_time: mach_timespec_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__clock_set_time_t"]
        [::std::mem::size_of::<__Request__clock_set_time_t>() - 40usize];
    ["Alignment of __Request__clock_set_time_t"]
        [::std::mem::align_of::<__Request__clock_set_time_t>() - 4usize];
    ["Offset of field: __Request__clock_set_time_t::Head"]
        [::std::mem::offset_of!(__Request__clock_set_time_t, Head) - 0usize];
    ["Offset of field: __Request__clock_set_time_t::NDR"]
        [::std::mem::offset_of!(__Request__clock_set_time_t, NDR) - 24usize];
    ["Offset of field: __Request__clock_set_time_t::new_time"]
        [::std::mem::offset_of!(__Request__clock_set_time_t, new_time) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__clock_set_attributes_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: clock_flavor_t,
    pub clock_attrCnt: mach_msg_type_number_t,
    pub clock_attr: [::std::os::raw::c_int; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__clock_set_attributes_t"]
        [::std::mem::size_of::<__Request__clock_set_attributes_t>() - 44usize];
    ["Alignment of __Request__clock_set_attributes_t"]
        [::std::mem::align_of::<__Request__clock_set_attributes_t>() - 4usize];
    ["Offset of field: __Request__clock_set_attributes_t::Head"]
        [::std::mem::offset_of!(__Request__clock_set_attributes_t, Head) - 0usize];
    ["Offset of field: __Request__clock_set_attributes_t::NDR"]
        [::std::mem::offset_of!(__Request__clock_set_attributes_t, NDR) - 24usize];
    ["Offset of field: __Request__clock_set_attributes_t::flavor"]
        [::std::mem::offset_of!(__Request__clock_set_attributes_t, flavor) - 32usize];
    ["Offset of field: __Request__clock_set_attributes_t::clock_attrCnt"]
        [::std::mem::offset_of!(__Request__clock_set_attributes_t, clock_attrCnt) - 36usize];
    ["Offset of field: __Request__clock_set_attributes_t::clock_attr"]
        [::std::mem::offset_of!(__Request__clock_set_attributes_t, clock_attr) - 40usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__clock_priv_subsystem {
    pub Request_clock_set_time: __Request__clock_set_time_t,
    pub Request_clock_set_attributes: __Request__clock_set_attributes_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __RequestUnion__clock_priv_subsystem"]
        [::std::mem::size_of::<__RequestUnion__clock_priv_subsystem>() - 44usize];
    ["Alignment of __RequestUnion__clock_priv_subsystem"]
        [::std::mem::align_of::<__RequestUnion__clock_priv_subsystem>() - 4usize];
    ["Offset of field: __RequestUnion__clock_priv_subsystem::Request_clock_set_time"][::std::mem::offset_of!(
        __RequestUnion__clock_priv_subsystem,
        Request_clock_set_time
    ) - 0usize];
    ["Offset of field: __RequestUnion__clock_priv_subsystem::Request_clock_set_attributes"][::std::mem::offset_of!(
        __RequestUnion__clock_priv_subsystem,
        Request_clock_set_attributes
    )
        - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__clock_set_time_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__clock_set_time_t"]
        [::std::mem::size_of::<__Reply__clock_set_time_t>() - 36usize];
    ["Alignment of __Reply__clock_set_time_t"]
        [::std::mem::align_of::<__Reply__clock_set_time_t>() - 4usize];
    ["Offset of field: __Reply__clock_set_time_t::Head"]
        [::std::mem::offset_of!(__Reply__clock_set_time_t, Head) - 0usize];
    ["Offset of field: __Reply__clock_set_time_t::NDR"]
        [::std::mem::offset_of!(__Reply__clock_set_time_t, NDR) - 24usize];
    ["Offset of field: __Reply__clock_set_time_t::RetCode"]
        [::std::mem::offset_of!(__Reply__clock_set_time_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__clock_set_attributes_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__clock_set_attributes_t"]
        [::std::mem::size_of::<__Reply__clock_set_attributes_t>() - 36usize];
    ["Alignment of __Reply__clock_set_attributes_t"]
        [::std::mem::align_of::<__Reply__clock_set_attributes_t>() - 4usize];
    ["Offset of field: __Reply__clock_set_attributes_t::Head"]
        [::std::mem::offset_of!(__Reply__clock_set_attributes_t, Head) - 0usize];
    ["Offset of field: __Reply__clock_set_attributes_t::NDR"]
        [::std::mem::offset_of!(__Reply__clock_set_attributes_t, NDR) - 24usize];
    ["Offset of field: __Reply__clock_set_attributes_t::RetCode"]
        [::std::mem::offset_of!(__Reply__clock_set_attributes_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__clock_priv_subsystem {
    pub Reply_clock_set_time: __Reply__clock_set_time_t,
    pub Reply_clock_set_attributes: __Reply__clock_set_attributes_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __ReplyUnion__clock_priv_subsystem"]
        [::std::mem::size_of::<__ReplyUnion__clock_priv_subsystem>() - 36usize];
    ["Alignment of __ReplyUnion__clock_priv_subsystem"]
        [::std::mem::align_of::<__ReplyUnion__clock_priv_subsystem>() - 4usize];
    ["Offset of field: __ReplyUnion__clock_priv_subsystem::Reply_clock_set_time"]
        [::std::mem::offset_of!(__ReplyUnion__clock_priv_subsystem, Reply_clock_set_time) - 0usize];
    ["Offset of field: __ReplyUnion__clock_priv_subsystem::Reply_clock_set_attributes"][::std::mem::offset_of!(
        __ReplyUnion__clock_priv_subsystem,
        Reply_clock_set_attributes
    ) - 0usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_vm_info_region {
    pub vir_start: mach_vm_offset_t,
    pub vir_end: mach_vm_offset_t,
    pub vir_object: mach_vm_offset_t,
    pub vir_offset: memory_object_offset_t,
    pub vir_needs_copy: boolean_t,
    pub vir_protection: vm_prot_t,
    pub vir_max_protection: vm_prot_t,
    pub vir_inheritance: vm_inherit_t,
    pub vir_wired_count: natural_t,
    pub vir_user_wired_count: natural_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_vm_info_region"][::std::mem::size_of::<mach_vm_info_region>() - 56usize];
    ["Alignment of mach_vm_info_region"][::std::mem::align_of::<mach_vm_info_region>() - 4usize];
    ["Offset of field: mach_vm_info_region::vir_start"]
        [::std::mem::offset_of!(mach_vm_info_region, vir_start) - 0usize];
    ["Offset of field: mach_vm_info_region::vir_end"]
        [::std::mem::offset_of!(mach_vm_info_region, vir_end) - 8usize];
    ["Offset of field: mach_vm_info_region::vir_object"]
        [::std::mem::offset_of!(mach_vm_info_region, vir_object) - 16usize];
    ["Offset of field: mach_vm_info_region::vir_offset"]
        [::std::mem::offset_of!(mach_vm_info_region, vir_offset) - 24usize];
    ["Offset of field: mach_vm_info_region::vir_needs_copy"]
        [::std::mem::offset_of!(mach_vm_info_region, vir_needs_copy) - 32usize];
    ["Offset of field: mach_vm_info_region::vir_protection"]
        [::std::mem::offset_of!(mach_vm_info_region, vir_protection) - 36usize];
    ["Offset of field: mach_vm_info_region::vir_max_protection"]
        [::std::mem::offset_of!(mach_vm_info_region, vir_max_protection) - 40usize];
    ["Offset of field: mach_vm_info_region::vir_inheritance"]
        [::std::mem::offset_of!(mach_vm_info_region, vir_inheritance) - 44usize];
    ["Offset of field: mach_vm_info_region::vir_wired_count"]
        [::std::mem::offset_of!(mach_vm_info_region, vir_wired_count) - 48usize];
    ["Offset of field: mach_vm_info_region::vir_user_wired_count"]
        [::std::mem::offset_of!(mach_vm_info_region, vir_user_wired_count) - 52usize];
};
pub type mach_vm_info_region_t = mach_vm_info_region;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct vm_info_region_64 {
    pub vir_start: natural_t,
    pub vir_end: natural_t,
    pub vir_object: natural_t,
    pub vir_offset: memory_object_offset_t,
    pub vir_needs_copy: boolean_t,
    pub vir_protection: vm_prot_t,
    pub vir_max_protection: vm_prot_t,
    pub vir_inheritance: vm_inherit_t,
    pub vir_wired_count: natural_t,
    pub vir_user_wired_count: natural_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vm_info_region_64"][::std::mem::size_of::<vm_info_region_64>() - 44usize];
    ["Alignment of vm_info_region_64"][::std::mem::align_of::<vm_info_region_64>() - 4usize];
    ["Offset of field: vm_info_region_64::vir_start"]
        [::std::mem::offset_of!(vm_info_region_64, vir_start) - 0usize];
    ["Offset of field: vm_info_region_64::vir_end"]
        [::std::mem::offset_of!(vm_info_region_64, vir_end) - 4usize];
    ["Offset of field: vm_info_region_64::vir_object"]
        [::std::mem::offset_of!(vm_info_region_64, vir_object) - 8usize];
    ["Offset of field: vm_info_region_64::vir_offset"]
        [::std::mem::offset_of!(vm_info_region_64, vir_offset) - 12usize];
    ["Offset of field: vm_info_region_64::vir_needs_copy"]
        [::std::mem::offset_of!(vm_info_region_64, vir_needs_copy) - 20usize];
    ["Offset of field: vm_info_region_64::vir_protection"]
        [::std::mem::offset_of!(vm_info_region_64, vir_protection) - 24usize];
    ["Offset of field: vm_info_region_64::vir_max_protection"]
        [::std::mem::offset_of!(vm_info_region_64, vir_max_protection) - 28usize];
    ["Offset of field: vm_info_region_64::vir_inheritance"]
        [::std::mem::offset_of!(vm_info_region_64, vir_inheritance) - 32usize];
    ["Offset of field: vm_info_region_64::vir_wired_count"]
        [::std::mem::offset_of!(vm_info_region_64, vir_wired_count) - 36usize];
    ["Offset of field: vm_info_region_64::vir_user_wired_count"]
        [::std::mem::offset_of!(vm_info_region_64, vir_user_wired_count) - 40usize];
};
pub type vm_info_region_64_t = vm_info_region_64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_info_region {
    pub vir_start: natural_t,
    pub vir_end: natural_t,
    pub vir_object: natural_t,
    pub vir_offset: natural_t,
    pub vir_needs_copy: boolean_t,
    pub vir_protection: vm_prot_t,
    pub vir_max_protection: vm_prot_t,
    pub vir_inheritance: vm_inherit_t,
    pub vir_wired_count: natural_t,
    pub vir_user_wired_count: natural_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vm_info_region"][::std::mem::size_of::<vm_info_region>() - 40usize];
    ["Alignment of vm_info_region"][::std::mem::align_of::<vm_info_region>() - 4usize];
    ["Offset of field: vm_info_region::vir_start"]
        [::std::mem::offset_of!(vm_info_region, vir_start) - 0usize];
    ["Offset of field: vm_info_region::vir_end"]
        [::std::mem::offset_of!(vm_info_region, vir_end) - 4usize];
    ["Offset of field: vm_info_region::vir_object"]
        [::std::mem::offset_of!(vm_info_region, vir_object) - 8usize];
    ["Offset of field: vm_info_region::vir_offset"]
        [::std::mem::offset_of!(vm_info_region, vir_offset) - 12usize];
    ["Offset of field: vm_info_region::vir_needs_copy"]
        [::std::mem::offset_of!(vm_info_region, vir_needs_copy) - 16usize];
    ["Offset of field: vm_info_region::vir_protection"]
        [::std::mem::offset_of!(vm_info_region, vir_protection) - 20usize];
    ["Offset of field: vm_info_region::vir_max_protection"]
        [::std::mem::offset_of!(vm_info_region, vir_max_protection) - 24usize];
    ["Offset of field: vm_info_region::vir_inheritance"]
        [::std::mem::offset_of!(vm_info_region, vir_inheritance) - 28usize];
    ["Offset of field: vm_info_region::vir_wired_count"]
        [::std::mem::offset_of!(vm_info_region, vir_wired_count) - 32usize];
    ["Offset of field: vm_info_region::vir_user_wired_count"]
        [::std::mem::offset_of!(vm_info_region, vir_user_wired_count) - 36usize];
};
pub type vm_info_region_t = vm_info_region;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct vm_info_object {
    pub vio_object: natural_t,
    pub vio_size: natural_t,
    pub vio_ref_count: ::std::os::raw::c_uint,
    pub vio_resident_page_count: ::std::os::raw::c_uint,
    pub vio_absent_count: ::std::os::raw::c_uint,
    pub vio_copy: natural_t,
    pub vio_shadow: natural_t,
    pub vio_shadow_offset: natural_t,
    pub vio_paging_offset: natural_t,
    pub vio_copy_strategy: memory_object_copy_strategy_t,
    pub vio_last_alloc: vm_offset_t,
    pub vio_paging_in_progress: ::std::os::raw::c_uint,
    pub vio_pager_created: boolean_t,
    pub vio_pager_initialized: boolean_t,
    pub vio_pager_ready: boolean_t,
    pub vio_can_persist: boolean_t,
    pub vio_internal: boolean_t,
    pub vio_temporary: boolean_t,
    pub vio_alive: boolean_t,
    pub vio_purgable: boolean_t,
    pub vio_purgable_volatile: boolean_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vm_info_object"][::std::mem::size_of::<vm_info_object>() - 88usize];
    ["Alignment of vm_info_object"][::std::mem::align_of::<vm_info_object>() - 4usize];
    ["Offset of field: vm_info_object::vio_object"]
        [::std::mem::offset_of!(vm_info_object, vio_object) - 0usize];
    ["Offset of field: vm_info_object::vio_size"]
        [::std::mem::offset_of!(vm_info_object, vio_size) - 4usize];
    ["Offset of field: vm_info_object::vio_ref_count"]
        [::std::mem::offset_of!(vm_info_object, vio_ref_count) - 8usize];
    ["Offset of field: vm_info_object::vio_resident_page_count"]
        [::std::mem::offset_of!(vm_info_object, vio_resident_page_count) - 12usize];
    ["Offset of field: vm_info_object::vio_absent_count"]
        [::std::mem::offset_of!(vm_info_object, vio_absent_count) - 16usize];
    ["Offset of field: vm_info_object::vio_copy"]
        [::std::mem::offset_of!(vm_info_object, vio_copy) - 20usize];
    ["Offset of field: vm_info_object::vio_shadow"]
        [::std::mem::offset_of!(vm_info_object, vio_shadow) - 24usize];
    ["Offset of field: vm_info_object::vio_shadow_offset"]
        [::std::mem::offset_of!(vm_info_object, vio_shadow_offset) - 28usize];
    ["Offset of field: vm_info_object::vio_paging_offset"]
        [::std::mem::offset_of!(vm_info_object, vio_paging_offset) - 32usize];
    ["Offset of field: vm_info_object::vio_copy_strategy"]
        [::std::mem::offset_of!(vm_info_object, vio_copy_strategy) - 36usize];
    ["Offset of field: vm_info_object::vio_last_alloc"]
        [::std::mem::offset_of!(vm_info_object, vio_last_alloc) - 40usize];
    ["Offset of field: vm_info_object::vio_paging_in_progress"]
        [::std::mem::offset_of!(vm_info_object, vio_paging_in_progress) - 48usize];
    ["Offset of field: vm_info_object::vio_pager_created"]
        [::std::mem::offset_of!(vm_info_object, vio_pager_created) - 52usize];
    ["Offset of field: vm_info_object::vio_pager_initialized"]
        [::std::mem::offset_of!(vm_info_object, vio_pager_initialized) - 56usize];
    ["Offset of field: vm_info_object::vio_pager_ready"]
        [::std::mem::offset_of!(vm_info_object, vio_pager_ready) - 60usize];
    ["Offset of field: vm_info_object::vio_can_persist"]
        [::std::mem::offset_of!(vm_info_object, vio_can_persist) - 64usize];
    ["Offset of field: vm_info_object::vio_internal"]
        [::std::mem::offset_of!(vm_info_object, vio_internal) - 68usize];
    ["Offset of field: vm_info_object::vio_temporary"]
        [::std::mem::offset_of!(vm_info_object, vio_temporary) - 72usize];
    ["Offset of field: vm_info_object::vio_alive"]
        [::std::mem::offset_of!(vm_info_object, vio_alive) - 76usize];
    ["Offset of field: vm_info_object::vio_purgable"]
        [::std::mem::offset_of!(vm_info_object, vio_purgable) - 80usize];
    ["Offset of field: vm_info_object::vio_purgable_volatile"]
        [::std::mem::offset_of!(vm_info_object, vio_purgable_volatile) - 84usize];
};
pub type vm_info_object_t = vm_info_object;
pub type vm_info_object_array_t = *mut vm_info_object_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct zone_name {
    pub zn_name: [::std::os::raw::c_char; 80usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of zone_name"][::std::mem::size_of::<zone_name>() - 80usize];
    ["Alignment of zone_name"][::std::mem::align_of::<zone_name>() - 1usize];
    ["Offset of field: zone_name::zn_name"][::std::mem::offset_of!(zone_name, zn_name) - 0usize];
};
pub type zone_name_t = zone_name;
pub type zone_name_array_t = *mut zone_name_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct zone_info {
    pub zi_count: integer_t,
    pub zi_cur_size: vm_size_t,
    pub zi_max_size: vm_size_t,
    pub zi_elem_size: vm_size_t,
    pub zi_alloc_size: vm_size_t,
    pub zi_pageable: integer_t,
    pub zi_sleepable: integer_t,
    pub zi_exhaustible: integer_t,
    pub zi_collectable: integer_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of zone_info"][::std::mem::size_of::<zone_info>() - 56usize];
    ["Alignment of zone_info"][::std::mem::align_of::<zone_info>() - 8usize];
    ["Offset of field: zone_info::zi_count"][::std::mem::offset_of!(zone_info, zi_count) - 0usize];
    ["Offset of field: zone_info::zi_cur_size"]
        [::std::mem::offset_of!(zone_info, zi_cur_size) - 8usize];
    ["Offset of field: zone_info::zi_max_size"]
        [::std::mem::offset_of!(zone_info, zi_max_size) - 16usize];
    ["Offset of field: zone_info::zi_elem_size"]
        [::std::mem::offset_of!(zone_info, zi_elem_size) - 24usize];
    ["Offset of field: zone_info::zi_alloc_size"]
        [::std::mem::offset_of!(zone_info, zi_alloc_size) - 32usize];
    ["Offset of field: zone_info::zi_pageable"]
        [::std::mem::offset_of!(zone_info, zi_pageable) - 40usize];
    ["Offset of field: zone_info::zi_sleepable"]
        [::std::mem::offset_of!(zone_info, zi_sleepable) - 44usize];
    ["Offset of field: zone_info::zi_exhaustible"]
        [::std::mem::offset_of!(zone_info, zi_exhaustible) - 48usize];
    ["Offset of field: zone_info::zi_collectable"]
        [::std::mem::offset_of!(zone_info, zi_collectable) - 52usize];
};
pub type zone_info_t = zone_info;
pub type zone_info_array_t = *mut zone_info_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_zone_name {
    pub mzn_name: [::std::os::raw::c_char; 80usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_zone_name"][::std::mem::size_of::<mach_zone_name>() - 80usize];
    ["Alignment of mach_zone_name"][::std::mem::align_of::<mach_zone_name>() - 1usize];
    ["Offset of field: mach_zone_name::mzn_name"]
        [::std::mem::offset_of!(mach_zone_name, mzn_name) - 0usize];
};
pub type mach_zone_name_t = mach_zone_name;
pub type mach_zone_name_array_t = *mut mach_zone_name_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_zone_info_data {
    pub mzi_count: u64,
    pub mzi_cur_size: u64,
    pub mzi_max_size: u64,
    pub mzi_elem_size: u64,
    pub mzi_alloc_size: u64,
    pub mzi_sum_size: u64,
    pub mzi_exhaustible: u64,
    pub mzi_collectable: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_zone_info_data"][::std::mem::size_of::<mach_zone_info_data>() - 64usize];
    ["Alignment of mach_zone_info_data"][::std::mem::align_of::<mach_zone_info_data>() - 8usize];
    ["Offset of field: mach_zone_info_data::mzi_count"]
        [::std::mem::offset_of!(mach_zone_info_data, mzi_count) - 0usize];
    ["Offset of field: mach_zone_info_data::mzi_cur_size"]
        [::std::mem::offset_of!(mach_zone_info_data, mzi_cur_size) - 8usize];
    ["Offset of field: mach_zone_info_data::mzi_max_size"]
        [::std::mem::offset_of!(mach_zone_info_data, mzi_max_size) - 16usize];
    ["Offset of field: mach_zone_info_data::mzi_elem_size"]
        [::std::mem::offset_of!(mach_zone_info_data, mzi_elem_size) - 24usize];
    ["Offset of field: mach_zone_info_data::mzi_alloc_size"]
        [::std::mem::offset_of!(mach_zone_info_data, mzi_alloc_size) - 32usize];
    ["Offset of field: mach_zone_info_data::mzi_sum_size"]
        [::std::mem::offset_of!(mach_zone_info_data, mzi_sum_size) - 40usize];
    ["Offset of field: mach_zone_info_data::mzi_exhaustible"]
        [::std::mem::offset_of!(mach_zone_info_data, mzi_exhaustible) - 48usize];
    ["Offset of field: mach_zone_info_data::mzi_collectable"]
        [::std::mem::offset_of!(mach_zone_info_data, mzi_collectable) - 56usize];
};
pub type mach_zone_info_t = mach_zone_info_data;
pub type mach_zone_info_array_t = *mut mach_zone_info_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct task_zone_info_data {
    pub tzi_count: u64,
    pub tzi_cur_size: u64,
    pub tzi_max_size: u64,
    pub tzi_elem_size: u64,
    pub tzi_alloc_size: u64,
    pub tzi_sum_size: u64,
    pub tzi_exhaustible: u64,
    pub tzi_collectable: u64,
    pub tzi_caller_acct: u64,
    pub tzi_task_alloc: u64,
    pub tzi_task_free: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of task_zone_info_data"][::std::mem::size_of::<task_zone_info_data>() - 88usize];
    ["Alignment of task_zone_info_data"][::std::mem::align_of::<task_zone_info_data>() - 8usize];
    ["Offset of field: task_zone_info_data::tzi_count"]
        [::std::mem::offset_of!(task_zone_info_data, tzi_count) - 0usize];
    ["Offset of field: task_zone_info_data::tzi_cur_size"]
        [::std::mem::offset_of!(task_zone_info_data, tzi_cur_size) - 8usize];
    ["Offset of field: task_zone_info_data::tzi_max_size"]
        [::std::mem::offset_of!(task_zone_info_data, tzi_max_size) - 16usize];
    ["Offset of field: task_zone_info_data::tzi_elem_size"]
        [::std::mem::offset_of!(task_zone_info_data, tzi_elem_size) - 24usize];
    ["Offset of field: task_zone_info_data::tzi_alloc_size"]
        [::std::mem::offset_of!(task_zone_info_data, tzi_alloc_size) - 32usize];
    ["Offset of field: task_zone_info_data::tzi_sum_size"]
        [::std::mem::offset_of!(task_zone_info_data, tzi_sum_size) - 40usize];
    ["Offset of field: task_zone_info_data::tzi_exhaustible"]
        [::std::mem::offset_of!(task_zone_info_data, tzi_exhaustible) - 48usize];
    ["Offset of field: task_zone_info_data::tzi_collectable"]
        [::std::mem::offset_of!(task_zone_info_data, tzi_collectable) - 56usize];
    ["Offset of field: task_zone_info_data::tzi_caller_acct"]
        [::std::mem::offset_of!(task_zone_info_data, tzi_caller_acct) - 64usize];
    ["Offset of field: task_zone_info_data::tzi_task_alloc"]
        [::std::mem::offset_of!(task_zone_info_data, tzi_task_alloc) - 72usize];
    ["Offset of field: task_zone_info_data::tzi_task_free"]
        [::std::mem::offset_of!(task_zone_info_data, tzi_task_free) - 80usize];
};
pub type task_zone_info_t = task_zone_info_data;
pub type task_zone_info_array_t = *mut task_zone_info_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_memory_info {
    pub flags: u64,
    pub site: u64,
    pub size: u64,
    pub free: u64,
    pub largest: u64,
    pub collectable_bytes: u64,
    pub mapped: u64,
    pub peak: u64,
    pub tag: u16,
    pub zone: u16,
    pub _resvA: [u16; 2usize],
    pub _resv: [u64; 3usize],
    pub name: [::std::os::raw::c_char; 80usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_memory_info"][::std::mem::size_of::<mach_memory_info>() - 176usize];
    ["Alignment of mach_memory_info"][::std::mem::align_of::<mach_memory_info>() - 8usize];
    ["Offset of field: mach_memory_info::flags"]
        [::std::mem::offset_of!(mach_memory_info, flags) - 0usize];
    ["Offset of field: mach_memory_info::site"]
        [::std::mem::offset_of!(mach_memory_info, site) - 8usize];
    ["Offset of field: mach_memory_info::size"]
        [::std::mem::offset_of!(mach_memory_info, size) - 16usize];
    ["Offset of field: mach_memory_info::free"]
        [::std::mem::offset_of!(mach_memory_info, free) - 24usize];
    ["Offset of field: mach_memory_info::largest"]
        [::std::mem::offset_of!(mach_memory_info, largest) - 32usize];
    ["Offset of field: mach_memory_info::collectable_bytes"]
        [::std::mem::offset_of!(mach_memory_info, collectable_bytes) - 40usize];
    ["Offset of field: mach_memory_info::mapped"]
        [::std::mem::offset_of!(mach_memory_info, mapped) - 48usize];
    ["Offset of field: mach_memory_info::peak"]
        [::std::mem::offset_of!(mach_memory_info, peak) - 56usize];
    ["Offset of field: mach_memory_info::tag"]
        [::std::mem::offset_of!(mach_memory_info, tag) - 64usize];
    ["Offset of field: mach_memory_info::zone"]
        [::std::mem::offset_of!(mach_memory_info, zone) - 66usize];
    ["Offset of field: mach_memory_info::_resvA"]
        [::std::mem::offset_of!(mach_memory_info, _resvA) - 68usize];
    ["Offset of field: mach_memory_info::_resv"]
        [::std::mem::offset_of!(mach_memory_info, _resv) - 72usize];
    ["Offset of field: mach_memory_info::name"]
        [::std::mem::offset_of!(mach_memory_info, name) - 96usize];
};
pub type mach_memory_info_t = mach_memory_info;
pub type mach_memory_info_array_t = *mut mach_memory_info_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct zone_btrecord {
    pub ref_count: u32,
    pub operation_type: u32,
    pub bt: [u64; 15usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of zone_btrecord"][::std::mem::size_of::<zone_btrecord>() - 128usize];
    ["Alignment of zone_btrecord"][::std::mem::align_of::<zone_btrecord>() - 8usize];
    ["Offset of field: zone_btrecord::ref_count"]
        [::std::mem::offset_of!(zone_btrecord, ref_count) - 0usize];
    ["Offset of field: zone_btrecord::operation_type"]
        [::std::mem::offset_of!(zone_btrecord, operation_type) - 4usize];
    ["Offset of field: zone_btrecord::bt"][::std::mem::offset_of!(zone_btrecord, bt) - 8usize];
};
pub type zone_btrecord_t = zone_btrecord;
pub type zone_btrecord_array_t = *mut zone_btrecord_t;
pub type page_address_array_t = *mut vm_offset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hash_info_bucket {
    pub hib_count: natural_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hash_info_bucket"][::std::mem::size_of::<hash_info_bucket>() - 4usize];
    ["Alignment of hash_info_bucket"][::std::mem::align_of::<hash_info_bucket>() - 4usize];
    ["Offset of field: hash_info_bucket::hib_count"]
        [::std::mem::offset_of!(hash_info_bucket, hib_count) - 0usize];
};
pub type hash_info_bucket_t = hash_info_bucket;
pub type hash_info_bucket_array_t = *mut hash_info_bucket_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lockgroup_info {
    pub lockgroup_name: [::std::os::raw::c_char; 64usize],
    pub lockgroup_attr: u64,
    pub lock_spin_cnt: u64,
    pub lock_spin_util_cnt: u64,
    pub lock_spin_held_cnt: u64,
    pub lock_spin_miss_cnt: u64,
    pub lock_spin_held_max: u64,
    pub lock_spin_held_cum: u64,
    pub lock_mtx_cnt: u64,
    pub lock_mtx_util_cnt: u64,
    pub lock_mtx_held_cnt: u64,
    pub lock_mtx_miss_cnt: u64,
    pub lock_mtx_wait_cnt: u64,
    pub lock_mtx_held_max: u64,
    pub lock_mtx_held_cum: u64,
    pub lock_mtx_wait_max: u64,
    pub lock_mtx_wait_cum: u64,
    pub lock_rw_cnt: u64,
    pub lock_rw_util_cnt: u64,
    pub lock_rw_held_cnt: u64,
    pub lock_rw_miss_cnt: u64,
    pub lock_rw_wait_cnt: u64,
    pub lock_rw_held_max: u64,
    pub lock_rw_held_cum: u64,
    pub lock_rw_wait_max: u64,
    pub lock_rw_wait_cum: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lockgroup_info"][::std::mem::size_of::<lockgroup_info>() - 264usize];
    ["Alignment of lockgroup_info"][::std::mem::align_of::<lockgroup_info>() - 8usize];
    ["Offset of field: lockgroup_info::lockgroup_name"]
        [::std::mem::offset_of!(lockgroup_info, lockgroup_name) - 0usize];
    ["Offset of field: lockgroup_info::lockgroup_attr"]
        [::std::mem::offset_of!(lockgroup_info, lockgroup_attr) - 64usize];
    ["Offset of field: lockgroup_info::lock_spin_cnt"]
        [::std::mem::offset_of!(lockgroup_info, lock_spin_cnt) - 72usize];
    ["Offset of field: lockgroup_info::lock_spin_util_cnt"]
        [::std::mem::offset_of!(lockgroup_info, lock_spin_util_cnt) - 80usize];
    ["Offset of field: lockgroup_info::lock_spin_held_cnt"]
        [::std::mem::offset_of!(lockgroup_info, lock_spin_held_cnt) - 88usize];
    ["Offset of field: lockgroup_info::lock_spin_miss_cnt"]
        [::std::mem::offset_of!(lockgroup_info, lock_spin_miss_cnt) - 96usize];
    ["Offset of field: lockgroup_info::lock_spin_held_max"]
        [::std::mem::offset_of!(lockgroup_info, lock_spin_held_max) - 104usize];
    ["Offset of field: lockgroup_info::lock_spin_held_cum"]
        [::std::mem::offset_of!(lockgroup_info, lock_spin_held_cum) - 112usize];
    ["Offset of field: lockgroup_info::lock_mtx_cnt"]
        [::std::mem::offset_of!(lockgroup_info, lock_mtx_cnt) - 120usize];
    ["Offset of field: lockgroup_info::lock_mtx_util_cnt"]
        [::std::mem::offset_of!(lockgroup_info, lock_mtx_util_cnt) - 128usize];
    ["Offset of field: lockgroup_info::lock_mtx_held_cnt"]
        [::std::mem::offset_of!(lockgroup_info, lock_mtx_held_cnt) - 136usize];
    ["Offset of field: lockgroup_info::lock_mtx_miss_cnt"]
        [::std::mem::offset_of!(lockgroup_info, lock_mtx_miss_cnt) - 144usize];
    ["Offset of field: lockgroup_info::lock_mtx_wait_cnt"]
        [::std::mem::offset_of!(lockgroup_info, lock_mtx_wait_cnt) - 152usize];
    ["Offset of field: lockgroup_info::lock_mtx_held_max"]
        [::std::mem::offset_of!(lockgroup_info, lock_mtx_held_max) - 160usize];
    ["Offset of field: lockgroup_info::lock_mtx_held_cum"]
        [::std::mem::offset_of!(lockgroup_info, lock_mtx_held_cum) - 168usize];
    ["Offset of field: lockgroup_info::lock_mtx_wait_max"]
        [::std::mem::offset_of!(lockgroup_info, lock_mtx_wait_max) - 176usize];
    ["Offset of field: lockgroup_info::lock_mtx_wait_cum"]
        [::std::mem::offset_of!(lockgroup_info, lock_mtx_wait_cum) - 184usize];
    ["Offset of field: lockgroup_info::lock_rw_cnt"]
        [::std::mem::offset_of!(lockgroup_info, lock_rw_cnt) - 192usize];
    ["Offset of field: lockgroup_info::lock_rw_util_cnt"]
        [::std::mem::offset_of!(lockgroup_info, lock_rw_util_cnt) - 200usize];
    ["Offset of field: lockgroup_info::lock_rw_held_cnt"]
        [::std::mem::offset_of!(lockgroup_info, lock_rw_held_cnt) - 208usize];
    ["Offset of field: lockgroup_info::lock_rw_miss_cnt"]
        [::std::mem::offset_of!(lockgroup_info, lock_rw_miss_cnt) - 216usize];
    ["Offset of field: lockgroup_info::lock_rw_wait_cnt"]
        [::std::mem::offset_of!(lockgroup_info, lock_rw_wait_cnt) - 224usize];
    ["Offset of field: lockgroup_info::lock_rw_held_max"]
        [::std::mem::offset_of!(lockgroup_info, lock_rw_held_max) - 232usize];
    ["Offset of field: lockgroup_info::lock_rw_held_cum"]
        [::std::mem::offset_of!(lockgroup_info, lock_rw_held_cum) - 240usize];
    ["Offset of field: lockgroup_info::lock_rw_wait_max"]
        [::std::mem::offset_of!(lockgroup_info, lock_rw_wait_max) - 248usize];
    ["Offset of field: lockgroup_info::lock_rw_wait_cum"]
        [::std::mem::offset_of!(lockgroup_info, lock_rw_wait_cum) - 256usize];
};
pub type lockgroup_info_t = lockgroup_info;
pub type lockgroup_info_array_t = *mut lockgroup_info_t;
pub type symtab_name_t = [::std::os::raw::c_char; 32usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_core_details {
    pub gzip_offset: u64,
    pub gzip_length: u64,
    pub core_name: [::std::os::raw::c_char; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_core_details"][::std::mem::size_of::<mach_core_details>() - 32usize];
    ["Alignment of mach_core_details"][::std::mem::align_of::<mach_core_details>() - 8usize];
    ["Offset of field: mach_core_details::gzip_offset"]
        [::std::mem::offset_of!(mach_core_details, gzip_offset) - 0usize];
    ["Offset of field: mach_core_details::gzip_length"]
        [::std::mem::offset_of!(mach_core_details, gzip_length) - 8usize];
    ["Offset of field: mach_core_details::core_name"]
        [::std::mem::offset_of!(mach_core_details, core_name) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_core_fileheader {
    pub signature: u64,
    pub log_offset: u64,
    pub log_length: u64,
    pub num_files: u64,
    pub files: [mach_core_details; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_core_fileheader"][::std::mem::size_of::<mach_core_fileheader>() - 544usize];
    ["Alignment of mach_core_fileheader"][::std::mem::align_of::<mach_core_fileheader>() - 8usize];
    ["Offset of field: mach_core_fileheader::signature"]
        [::std::mem::offset_of!(mach_core_fileheader, signature) - 0usize];
    ["Offset of field: mach_core_fileheader::log_offset"]
        [::std::mem::offset_of!(mach_core_fileheader, log_offset) - 8usize];
    ["Offset of field: mach_core_fileheader::log_length"]
        [::std::mem::offset_of!(mach_core_fileheader, log_length) - 16usize];
    ["Offset of field: mach_core_fileheader::num_files"]
        [::std::mem::offset_of!(mach_core_fileheader, num_files) - 24usize];
    ["Offset of field: mach_core_fileheader::files"]
        [::std::mem::offset_of!(mach_core_fileheader, files) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_core_details_v2 {
    pub flags: u64,
    pub offset: u64,
    pub length: u64,
    pub core_name: [::std::os::raw::c_char; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_core_details_v2"][::std::mem::size_of::<mach_core_details_v2>() - 40usize];
    ["Alignment of mach_core_details_v2"][::std::mem::align_of::<mach_core_details_v2>() - 8usize];
    ["Offset of field: mach_core_details_v2::flags"]
        [::std::mem::offset_of!(mach_core_details_v2, flags) - 0usize];
    ["Offset of field: mach_core_details_v2::offset"]
        [::std::mem::offset_of!(mach_core_details_v2, offset) - 8usize];
    ["Offset of field: mach_core_details_v2::length"]
        [::std::mem::offset_of!(mach_core_details_v2, length) - 16usize];
    ["Offset of field: mach_core_details_v2::core_name"]
        [::std::mem::offset_of!(mach_core_details_v2, core_name) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_core_fileheader_base {
    pub signature: u64,
    pub version: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_core_fileheader_base"]
        [::std::mem::size_of::<mach_core_fileheader_base>() - 16usize];
    ["Alignment of mach_core_fileheader_base"]
        [::std::mem::align_of::<mach_core_fileheader_base>() - 8usize];
    ["Offset of field: mach_core_fileheader_base::signature"]
        [::std::mem::offset_of!(mach_core_fileheader_base, signature) - 0usize];
    ["Offset of field: mach_core_fileheader_base::version"]
        [::std::mem::offset_of!(mach_core_fileheader_base, version) - 8usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct mach_core_fileheader_v2 {
    pub signature: u64,
    pub version: u32,
    pub flags: u64,
    pub pub_key_offset: u64,
    pub pub_key_length: u16,
    pub log_offset: u64,
    pub log_length: u64,
    pub num_files: u64,
    pub files: __IncompleteArrayField<mach_core_details_v2>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_core_fileheader_v2"][::std::mem::size_of::<mach_core_fileheader_v2>() - 64usize];
    ["Alignment of mach_core_fileheader_v2"]
        [::std::mem::align_of::<mach_core_fileheader_v2>() - 8usize];
    ["Offset of field: mach_core_fileheader_v2::signature"]
        [::std::mem::offset_of!(mach_core_fileheader_v2, signature) - 0usize];
    ["Offset of field: mach_core_fileheader_v2::version"]
        [::std::mem::offset_of!(mach_core_fileheader_v2, version) - 8usize];
    ["Offset of field: mach_core_fileheader_v2::flags"]
        [::std::mem::offset_of!(mach_core_fileheader_v2, flags) - 16usize];
    ["Offset of field: mach_core_fileheader_v2::pub_key_offset"]
        [::std::mem::offset_of!(mach_core_fileheader_v2, pub_key_offset) - 24usize];
    ["Offset of field: mach_core_fileheader_v2::pub_key_length"]
        [::std::mem::offset_of!(mach_core_fileheader_v2, pub_key_length) - 32usize];
    ["Offset of field: mach_core_fileheader_v2::log_offset"]
        [::std::mem::offset_of!(mach_core_fileheader_v2, log_offset) - 40usize];
    ["Offset of field: mach_core_fileheader_v2::log_length"]
        [::std::mem::offset_of!(mach_core_fileheader_v2, log_length) - 48usize];
    ["Offset of field: mach_core_fileheader_v2::num_files"]
        [::std::mem::offset_of!(mach_core_fileheader_v2, num_files) - 56usize];
    ["Offset of field: mach_core_fileheader_v2::files"]
        [::std::mem::offset_of!(mach_core_fileheader_v2, files) - 64usize];
};
pub type kobject_description_t = [::std::os::raw::c_char; 512usize];
unsafe extern "C" {
    pub fn host_get_boot_info(
        host_priv: host_priv_t,
        boot_info: *mut ::std::os::raw::c_char,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn host_reboot(host_priv: host_priv_t, options: ::std::os::raw::c_int) -> kern_return_t;
}
unsafe extern "C" {
    pub fn host_priv_statistics(
        host_priv: host_priv_t,
        flavor: host_flavor_t,
        host_info_out: host_info_t,
        host_info_outCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn host_default_memory_manager(
        host_priv: host_priv_t,
        default_manager: *mut memory_object_default_t,
        cluster_size: memory_object_cluster_size_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn vm_wire(
        host_priv: host_priv_t,
        task: vm_map_t,
        address: vm_address_t,
        size: vm_size_t,
        desired_access: vm_prot_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn thread_wire(
        host_priv: host_priv_t,
        thread: thread_act_t,
        wired: boolean_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn vm_allocate_cpm(
        host_priv: host_priv_t,
        task: vm_map_t,
        address: *mut vm_address_t,
        size: vm_size_t,
        flags: ::std::os::raw::c_int,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn host_processors(
        host_priv: host_priv_t,
        out_processor_list: *mut processor_array_t,
        out_processor_listCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn host_get_clock_control(
        host_priv: host_priv_t,
        clock_id: clock_id_t,
        clock_ctrl: *mut clock_ctrl_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn kmod_create(
        host_priv: host_priv_t,
        info: vm_address_t,
        module: *mut kmod_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn kmod_destroy(host_priv: host_priv_t, module: kmod_t) -> kern_return_t;
}
unsafe extern "C" {
    pub fn kmod_control(
        host_priv: host_priv_t,
        module: kmod_t,
        flavor: kmod_control_flavor_t,
        data: *mut kmod_args_t,
        dataCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn host_get_special_port(
        host_priv: host_priv_t,
        node: ::std::os::raw::c_int,
        which: ::std::os::raw::c_int,
        port: *mut mach_port_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn host_set_special_port(
        host_priv: host_priv_t,
        which: ::std::os::raw::c_int,
        port: mach_port_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn host_set_exception_ports(
        host_priv: host_priv_t,
        exception_mask: exception_mask_t,
        new_port: mach_port_t,
        behavior: exception_behavior_t,
        new_flavor: thread_state_flavor_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn host_get_exception_ports(
        host_priv: host_priv_t,
        exception_mask: exception_mask_t,
        masks: exception_mask_array_t,
        masksCnt: *mut mach_msg_type_number_t,
        old_handlers: exception_handler_array_t,
        old_behaviors: exception_behavior_array_t,
        old_flavors: exception_flavor_array_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn host_swap_exception_ports(
        host_priv: host_priv_t,
        exception_mask: exception_mask_t,
        new_port: mach_port_t,
        behavior: exception_behavior_t,
        new_flavor: thread_state_flavor_t,
        masks: exception_mask_array_t,
        masksCnt: *mut mach_msg_type_number_t,
        old_handlerss: exception_handler_array_t,
        old_behaviors: exception_behavior_array_t,
        old_flavors: exception_flavor_array_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn mach_vm_wire(
        host_priv: host_priv_t,
        task: vm_map_t,
        address: mach_vm_address_t,
        size: mach_vm_size_t,
        desired_access: vm_prot_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn host_processor_sets(
        host_priv: host_priv_t,
        processor_sets: *mut processor_set_name_array_t,
        processor_setsCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn host_processor_set_priv(
        host_priv: host_priv_t,
        set_name: processor_set_name_t,
        set: *mut processor_set_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn host_set_UNDServer(host: host_priv_t, server: UNDServerRef) -> kern_return_t;
}
unsafe extern "C" {
    pub fn host_get_UNDServer(host: host_priv_t, server: *mut UNDServerRef) -> kern_return_t;
}
unsafe extern "C" {
    pub fn kext_request(
        host_priv: host_priv_t,
        user_log_flags: u32,
        request_data: vm_offset_t,
        request_dataCnt: mach_msg_type_number_t,
        response_data: *mut vm_offset_t,
        response_dataCnt: *mut mach_msg_type_number_t,
        log_data: *mut vm_offset_t,
        log_dataCnt: *mut mach_msg_type_number_t,
        op_result: *mut kern_return_t,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_get_boot_info_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__host_get_boot_info_t"]
        [::std::mem::size_of::<__Request__host_get_boot_info_t>() - 24usize];
    ["Alignment of __Request__host_get_boot_info_t"]
        [::std::mem::align_of::<__Request__host_get_boot_info_t>() - 4usize];
    ["Offset of field: __Request__host_get_boot_info_t::Head"]
        [::std::mem::offset_of!(__Request__host_get_boot_info_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_reboot_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub options: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__host_reboot_t"]
        [::std::mem::size_of::<__Request__host_reboot_t>() - 36usize];
    ["Alignment of __Request__host_reboot_t"]
        [::std::mem::align_of::<__Request__host_reboot_t>() - 4usize];
    ["Offset of field: __Request__host_reboot_t::Head"]
        [::std::mem::offset_of!(__Request__host_reboot_t, Head) - 0usize];
    ["Offset of field: __Request__host_reboot_t::NDR"]
        [::std::mem::offset_of!(__Request__host_reboot_t, NDR) - 24usize];
    ["Offset of field: __Request__host_reboot_t::options"]
        [::std::mem::offset_of!(__Request__host_reboot_t, options) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_priv_statistics_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: host_flavor_t,
    pub host_info_outCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__host_priv_statistics_t"]
        [::std::mem::size_of::<__Request__host_priv_statistics_t>() - 40usize];
    ["Alignment of __Request__host_priv_statistics_t"]
        [::std::mem::align_of::<__Request__host_priv_statistics_t>() - 4usize];
    ["Offset of field: __Request__host_priv_statistics_t::Head"]
        [::std::mem::offset_of!(__Request__host_priv_statistics_t, Head) - 0usize];
    ["Offset of field: __Request__host_priv_statistics_t::NDR"]
        [::std::mem::offset_of!(__Request__host_priv_statistics_t, NDR) - 24usize];
    ["Offset of field: __Request__host_priv_statistics_t::flavor"]
        [::std::mem::offset_of!(__Request__host_priv_statistics_t, flavor) - 32usize];
    ["Offset of field: __Request__host_priv_statistics_t::host_info_outCnt"]
        [::std::mem::offset_of!(__Request__host_priv_statistics_t, host_info_outCnt) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_default_memory_manager_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub default_manager: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub cluster_size: memory_object_cluster_size_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__host_default_memory_manager_t"]
        [::std::mem::size_of::<__Request__host_default_memory_manager_t>() - 52usize];
    ["Alignment of __Request__host_default_memory_manager_t"]
        [::std::mem::align_of::<__Request__host_default_memory_manager_t>() - 4usize];
    ["Offset of field: __Request__host_default_memory_manager_t::Head"]
        [::std::mem::offset_of!(__Request__host_default_memory_manager_t, Head) - 0usize];
    ["Offset of field: __Request__host_default_memory_manager_t::msgh_body"]
        [::std::mem::offset_of!(__Request__host_default_memory_manager_t, msgh_body) - 24usize];
    ["Offset of field: __Request__host_default_memory_manager_t::default_manager"][::std::mem::offset_of!(
        __Request__host_default_memory_manager_t,
        default_manager
    ) - 28usize];
    ["Offset of field: __Request__host_default_memory_manager_t::NDR"]
        [::std::mem::offset_of!(__Request__host_default_memory_manager_t, NDR) - 40usize];
    ["Offset of field: __Request__host_default_memory_manager_t::cluster_size"]
        [::std::mem::offset_of!(__Request__host_default_memory_manager_t, cluster_size) - 48usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_wire_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub task: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub desired_access: vm_prot_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__vm_wire_t"][::std::mem::size_of::<__Request__vm_wire_t>() - 68usize];
    ["Alignment of __Request__vm_wire_t"][::std::mem::align_of::<__Request__vm_wire_t>() - 4usize];
    ["Offset of field: __Request__vm_wire_t::Head"]
        [::std::mem::offset_of!(__Request__vm_wire_t, Head) - 0usize];
    ["Offset of field: __Request__vm_wire_t::msgh_body"]
        [::std::mem::offset_of!(__Request__vm_wire_t, msgh_body) - 24usize];
    ["Offset of field: __Request__vm_wire_t::task"]
        [::std::mem::offset_of!(__Request__vm_wire_t, task) - 28usize];
    ["Offset of field: __Request__vm_wire_t::NDR"]
        [::std::mem::offset_of!(__Request__vm_wire_t, NDR) - 40usize];
    ["Offset of field: __Request__vm_wire_t::address"]
        [::std::mem::offset_of!(__Request__vm_wire_t, address) - 48usize];
    ["Offset of field: __Request__vm_wire_t::size"]
        [::std::mem::offset_of!(__Request__vm_wire_t, size) - 56usize];
    ["Offset of field: __Request__vm_wire_t::desired_access"]
        [::std::mem::offset_of!(__Request__vm_wire_t, desired_access) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_wire_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub thread: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub wired: boolean_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__thread_wire_t"]
        [::std::mem::size_of::<__Request__thread_wire_t>() - 52usize];
    ["Alignment of __Request__thread_wire_t"]
        [::std::mem::align_of::<__Request__thread_wire_t>() - 4usize];
    ["Offset of field: __Request__thread_wire_t::Head"]
        [::std::mem::offset_of!(__Request__thread_wire_t, Head) - 0usize];
    ["Offset of field: __Request__thread_wire_t::msgh_body"]
        [::std::mem::offset_of!(__Request__thread_wire_t, msgh_body) - 24usize];
    ["Offset of field: __Request__thread_wire_t::thread"]
        [::std::mem::offset_of!(__Request__thread_wire_t, thread) - 28usize];
    ["Offset of field: __Request__thread_wire_t::NDR"]
        [::std::mem::offset_of!(__Request__thread_wire_t, NDR) - 40usize];
    ["Offset of field: __Request__thread_wire_t::wired"]
        [::std::mem::offset_of!(__Request__thread_wire_t, wired) - 48usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_allocate_cpm_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub task: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub flags: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__vm_allocate_cpm_t"]
        [::std::mem::size_of::<__Request__vm_allocate_cpm_t>() - 68usize];
    ["Alignment of __Request__vm_allocate_cpm_t"]
        [::std::mem::align_of::<__Request__vm_allocate_cpm_t>() - 4usize];
    ["Offset of field: __Request__vm_allocate_cpm_t::Head"]
        [::std::mem::offset_of!(__Request__vm_allocate_cpm_t, Head) - 0usize];
    ["Offset of field: __Request__vm_allocate_cpm_t::msgh_body"]
        [::std::mem::offset_of!(__Request__vm_allocate_cpm_t, msgh_body) - 24usize];
    ["Offset of field: __Request__vm_allocate_cpm_t::task"]
        [::std::mem::offset_of!(__Request__vm_allocate_cpm_t, task) - 28usize];
    ["Offset of field: __Request__vm_allocate_cpm_t::NDR"]
        [::std::mem::offset_of!(__Request__vm_allocate_cpm_t, NDR) - 40usize];
    ["Offset of field: __Request__vm_allocate_cpm_t::address"]
        [::std::mem::offset_of!(__Request__vm_allocate_cpm_t, address) - 48usize];
    ["Offset of field: __Request__vm_allocate_cpm_t::size"]
        [::std::mem::offset_of!(__Request__vm_allocate_cpm_t, size) - 56usize];
    ["Offset of field: __Request__vm_allocate_cpm_t::flags"]
        [::std::mem::offset_of!(__Request__vm_allocate_cpm_t, flags) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_processors_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__host_processors_t"]
        [::std::mem::size_of::<__Request__host_processors_t>() - 24usize];
    ["Alignment of __Request__host_processors_t"]
        [::std::mem::align_of::<__Request__host_processors_t>() - 4usize];
    ["Offset of field: __Request__host_processors_t::Head"]
        [::std::mem::offset_of!(__Request__host_processors_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_get_clock_control_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub clock_id: clock_id_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__host_get_clock_control_t"]
        [::std::mem::size_of::<__Request__host_get_clock_control_t>() - 36usize];
    ["Alignment of __Request__host_get_clock_control_t"]
        [::std::mem::align_of::<__Request__host_get_clock_control_t>() - 4usize];
    ["Offset of field: __Request__host_get_clock_control_t::Head"]
        [::std::mem::offset_of!(__Request__host_get_clock_control_t, Head) - 0usize];
    ["Offset of field: __Request__host_get_clock_control_t::NDR"]
        [::std::mem::offset_of!(__Request__host_get_clock_control_t, NDR) - 24usize];
    ["Offset of field: __Request__host_get_clock_control_t::clock_id"]
        [::std::mem::offset_of!(__Request__host_get_clock_control_t, clock_id) - 32usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__kmod_create_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub info: vm_address_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__kmod_create_t"]
        [::std::mem::size_of::<__Request__kmod_create_t>() - 40usize];
    ["Alignment of __Request__kmod_create_t"]
        [::std::mem::align_of::<__Request__kmod_create_t>() - 4usize];
    ["Offset of field: __Request__kmod_create_t::Head"]
        [::std::mem::offset_of!(__Request__kmod_create_t, Head) - 0usize];
    ["Offset of field: __Request__kmod_create_t::NDR"]
        [::std::mem::offset_of!(__Request__kmod_create_t, NDR) - 24usize];
    ["Offset of field: __Request__kmod_create_t::info"]
        [::std::mem::offset_of!(__Request__kmod_create_t, info) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__kmod_destroy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub module: kmod_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__kmod_destroy_t"]
        [::std::mem::size_of::<__Request__kmod_destroy_t>() - 36usize];
    ["Alignment of __Request__kmod_destroy_t"]
        [::std::mem::align_of::<__Request__kmod_destroy_t>() - 4usize];
    ["Offset of field: __Request__kmod_destroy_t::Head"]
        [::std::mem::offset_of!(__Request__kmod_destroy_t, Head) - 0usize];
    ["Offset of field: __Request__kmod_destroy_t::NDR"]
        [::std::mem::offset_of!(__Request__kmod_destroy_t, NDR) - 24usize];
    ["Offset of field: __Request__kmod_destroy_t::module"]
        [::std::mem::offset_of!(__Request__kmod_destroy_t, module) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__kmod_control_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub data: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub module: kmod_t,
    pub flavor: kmod_control_flavor_t,
    pub dataCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__kmod_control_t"]
        [::std::mem::size_of::<__Request__kmod_control_t>() - 64usize];
    ["Alignment of __Request__kmod_control_t"]
        [::std::mem::align_of::<__Request__kmod_control_t>() - 4usize];
    ["Offset of field: __Request__kmod_control_t::Head"]
        [::std::mem::offset_of!(__Request__kmod_control_t, Head) - 0usize];
    ["Offset of field: __Request__kmod_control_t::msgh_body"]
        [::std::mem::offset_of!(__Request__kmod_control_t, msgh_body) - 24usize];
    ["Offset of field: __Request__kmod_control_t::data"]
        [::std::mem::offset_of!(__Request__kmod_control_t, data) - 28usize];
    ["Offset of field: __Request__kmod_control_t::NDR"]
        [::std::mem::offset_of!(__Request__kmod_control_t, NDR) - 44usize];
    ["Offset of field: __Request__kmod_control_t::module"]
        [::std::mem::offset_of!(__Request__kmod_control_t, module) - 52usize];
    ["Offset of field: __Request__kmod_control_t::flavor"]
        [::std::mem::offset_of!(__Request__kmod_control_t, flavor) - 56usize];
    ["Offset of field: __Request__kmod_control_t::dataCnt"]
        [::std::mem::offset_of!(__Request__kmod_control_t, dataCnt) - 60usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_get_special_port_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub node: ::std::os::raw::c_int,
    pub which: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__host_get_special_port_t"]
        [::std::mem::size_of::<__Request__host_get_special_port_t>() - 40usize];
    ["Alignment of __Request__host_get_special_port_t"]
        [::std::mem::align_of::<__Request__host_get_special_port_t>() - 4usize];
    ["Offset of field: __Request__host_get_special_port_t::Head"]
        [::std::mem::offset_of!(__Request__host_get_special_port_t, Head) - 0usize];
    ["Offset of field: __Request__host_get_special_port_t::NDR"]
        [::std::mem::offset_of!(__Request__host_get_special_port_t, NDR) - 24usize];
    ["Offset of field: __Request__host_get_special_port_t::node"]
        [::std::mem::offset_of!(__Request__host_get_special_port_t, node) - 32usize];
    ["Offset of field: __Request__host_get_special_port_t::which"]
        [::std::mem::offset_of!(__Request__host_get_special_port_t, which) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_set_special_port_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub which: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__host_set_special_port_t"]
        [::std::mem::size_of::<__Request__host_set_special_port_t>() - 52usize];
    ["Alignment of __Request__host_set_special_port_t"]
        [::std::mem::align_of::<__Request__host_set_special_port_t>() - 4usize];
    ["Offset of field: __Request__host_set_special_port_t::Head"]
        [::std::mem::offset_of!(__Request__host_set_special_port_t, Head) - 0usize];
    ["Offset of field: __Request__host_set_special_port_t::msgh_body"]
        [::std::mem::offset_of!(__Request__host_set_special_port_t, msgh_body) - 24usize];
    ["Offset of field: __Request__host_set_special_port_t::port"]
        [::std::mem::offset_of!(__Request__host_set_special_port_t, port) - 28usize];
    ["Offset of field: __Request__host_set_special_port_t::NDR"]
        [::std::mem::offset_of!(__Request__host_set_special_port_t, NDR) - 40usize];
    ["Offset of field: __Request__host_set_special_port_t::which"]
        [::std::mem::offset_of!(__Request__host_set_special_port_t, which) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_set_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
    pub behavior: exception_behavior_t,
    pub new_flavor: thread_state_flavor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__host_set_exception_ports_t"]
        [::std::mem::size_of::<__Request__host_set_exception_ports_t>() - 60usize];
    ["Alignment of __Request__host_set_exception_ports_t"]
        [::std::mem::align_of::<__Request__host_set_exception_ports_t>() - 4usize];
    ["Offset of field: __Request__host_set_exception_ports_t::Head"]
        [::std::mem::offset_of!(__Request__host_set_exception_ports_t, Head) - 0usize];
    ["Offset of field: __Request__host_set_exception_ports_t::msgh_body"]
        [::std::mem::offset_of!(__Request__host_set_exception_ports_t, msgh_body) - 24usize];
    ["Offset of field: __Request__host_set_exception_ports_t::new_port"]
        [::std::mem::offset_of!(__Request__host_set_exception_ports_t, new_port) - 28usize];
    ["Offset of field: __Request__host_set_exception_ports_t::NDR"]
        [::std::mem::offset_of!(__Request__host_set_exception_ports_t, NDR) - 40usize];
    ["Offset of field: __Request__host_set_exception_ports_t::exception_mask"]
        [::std::mem::offset_of!(__Request__host_set_exception_ports_t, exception_mask) - 48usize];
    ["Offset of field: __Request__host_set_exception_ports_t::behavior"]
        [::std::mem::offset_of!(__Request__host_set_exception_ports_t, behavior) - 52usize];
    ["Offset of field: __Request__host_set_exception_ports_t::new_flavor"]
        [::std::mem::offset_of!(__Request__host_set_exception_ports_t, new_flavor) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_get_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__host_get_exception_ports_t"]
        [::std::mem::size_of::<__Request__host_get_exception_ports_t>() - 36usize];
    ["Alignment of __Request__host_get_exception_ports_t"]
        [::std::mem::align_of::<__Request__host_get_exception_ports_t>() - 4usize];
    ["Offset of field: __Request__host_get_exception_ports_t::Head"]
        [::std::mem::offset_of!(__Request__host_get_exception_ports_t, Head) - 0usize];
    ["Offset of field: __Request__host_get_exception_ports_t::NDR"]
        [::std::mem::offset_of!(__Request__host_get_exception_ports_t, NDR) - 24usize];
    ["Offset of field: __Request__host_get_exception_ports_t::exception_mask"]
        [::std::mem::offset_of!(__Request__host_get_exception_ports_t, exception_mask) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_swap_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
    pub behavior: exception_behavior_t,
    pub new_flavor: thread_state_flavor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__host_swap_exception_ports_t"]
        [::std::mem::size_of::<__Request__host_swap_exception_ports_t>() - 60usize];
    ["Alignment of __Request__host_swap_exception_ports_t"]
        [::std::mem::align_of::<__Request__host_swap_exception_ports_t>() - 4usize];
    ["Offset of field: __Request__host_swap_exception_ports_t::Head"]
        [::std::mem::offset_of!(__Request__host_swap_exception_ports_t, Head) - 0usize];
    ["Offset of field: __Request__host_swap_exception_ports_t::msgh_body"]
        [::std::mem::offset_of!(__Request__host_swap_exception_ports_t, msgh_body) - 24usize];
    ["Offset of field: __Request__host_swap_exception_ports_t::new_port"]
        [::std::mem::offset_of!(__Request__host_swap_exception_ports_t, new_port) - 28usize];
    ["Offset of field: __Request__host_swap_exception_ports_t::NDR"]
        [::std::mem::offset_of!(__Request__host_swap_exception_ports_t, NDR) - 40usize];
    ["Offset of field: __Request__host_swap_exception_ports_t::exception_mask"]
        [::std::mem::offset_of!(__Request__host_swap_exception_ports_t, exception_mask) - 48usize];
    ["Offset of field: __Request__host_swap_exception_ports_t::behavior"]
        [::std::mem::offset_of!(__Request__host_swap_exception_ports_t, behavior) - 52usize];
    ["Offset of field: __Request__host_swap_exception_ports_t::new_flavor"]
        [::std::mem::offset_of!(__Request__host_swap_exception_ports_t, new_flavor) - 56usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_wire_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub task: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub address: mach_vm_address_t,
    pub size: mach_vm_size_t,
    pub desired_access: vm_prot_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_vm_wire_t"]
        [::std::mem::size_of::<__Request__mach_vm_wire_t>() - 68usize];
    ["Alignment of __Request__mach_vm_wire_t"]
        [::std::mem::align_of::<__Request__mach_vm_wire_t>() - 4usize];
    ["Offset of field: __Request__mach_vm_wire_t::Head"]
        [::std::mem::offset_of!(__Request__mach_vm_wire_t, Head) - 0usize];
    ["Offset of field: __Request__mach_vm_wire_t::msgh_body"]
        [::std::mem::offset_of!(__Request__mach_vm_wire_t, msgh_body) - 24usize];
    ["Offset of field: __Request__mach_vm_wire_t::task"]
        [::std::mem::offset_of!(__Request__mach_vm_wire_t, task) - 28usize];
    ["Offset of field: __Request__mach_vm_wire_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_vm_wire_t, NDR) - 40usize];
    ["Offset of field: __Request__mach_vm_wire_t::address"]
        [::std::mem::offset_of!(__Request__mach_vm_wire_t, address) - 48usize];
    ["Offset of field: __Request__mach_vm_wire_t::size"]
        [::std::mem::offset_of!(__Request__mach_vm_wire_t, size) - 56usize];
    ["Offset of field: __Request__mach_vm_wire_t::desired_access"]
        [::std::mem::offset_of!(__Request__mach_vm_wire_t, desired_access) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_processor_sets_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__host_processor_sets_t"]
        [::std::mem::size_of::<__Request__host_processor_sets_t>() - 24usize];
    ["Alignment of __Request__host_processor_sets_t"]
        [::std::mem::align_of::<__Request__host_processor_sets_t>() - 4usize];
    ["Offset of field: __Request__host_processor_sets_t::Head"]
        [::std::mem::offset_of!(__Request__host_processor_sets_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_processor_set_priv_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub set_name: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__host_processor_set_priv_t"]
        [::std::mem::size_of::<__Request__host_processor_set_priv_t>() - 40usize];
    ["Alignment of __Request__host_processor_set_priv_t"]
        [::std::mem::align_of::<__Request__host_processor_set_priv_t>() - 4usize];
    ["Offset of field: __Request__host_processor_set_priv_t::Head"]
        [::std::mem::offset_of!(__Request__host_processor_set_priv_t, Head) - 0usize];
    ["Offset of field: __Request__host_processor_set_priv_t::msgh_body"]
        [::std::mem::offset_of!(__Request__host_processor_set_priv_t, msgh_body) - 24usize];
    ["Offset of field: __Request__host_processor_set_priv_t::set_name"]
        [::std::mem::offset_of!(__Request__host_processor_set_priv_t, set_name) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_set_UNDServer_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub server: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__host_set_UNDServer_t"]
        [::std::mem::size_of::<__Request__host_set_UNDServer_t>() - 40usize];
    ["Alignment of __Request__host_set_UNDServer_t"]
        [::std::mem::align_of::<__Request__host_set_UNDServer_t>() - 4usize];
    ["Offset of field: __Request__host_set_UNDServer_t::Head"]
        [::std::mem::offset_of!(__Request__host_set_UNDServer_t, Head) - 0usize];
    ["Offset of field: __Request__host_set_UNDServer_t::msgh_body"]
        [::std::mem::offset_of!(__Request__host_set_UNDServer_t, msgh_body) - 24usize];
    ["Offset of field: __Request__host_set_UNDServer_t::server"]
        [::std::mem::offset_of!(__Request__host_set_UNDServer_t, server) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_get_UNDServer_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__host_get_UNDServer_t"]
        [::std::mem::size_of::<__Request__host_get_UNDServer_t>() - 24usize];
    ["Alignment of __Request__host_get_UNDServer_t"]
        [::std::mem::align_of::<__Request__host_get_UNDServer_t>() - 4usize];
    ["Offset of field: __Request__host_get_UNDServer_t::Head"]
        [::std::mem::offset_of!(__Request__host_get_UNDServer_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__kext_request_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub request_data: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub user_log_flags: u32,
    pub request_dataCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__kext_request_t"]
        [::std::mem::size_of::<__Request__kext_request_t>() - 60usize];
    ["Alignment of __Request__kext_request_t"]
        [::std::mem::align_of::<__Request__kext_request_t>() - 4usize];
    ["Offset of field: __Request__kext_request_t::Head"]
        [::std::mem::offset_of!(__Request__kext_request_t, Head) - 0usize];
    ["Offset of field: __Request__kext_request_t::msgh_body"]
        [::std::mem::offset_of!(__Request__kext_request_t, msgh_body) - 24usize];
    ["Offset of field: __Request__kext_request_t::request_data"]
        [::std::mem::offset_of!(__Request__kext_request_t, request_data) - 28usize];
    ["Offset of field: __Request__kext_request_t::NDR"]
        [::std::mem::offset_of!(__Request__kext_request_t, NDR) - 44usize];
    ["Offset of field: __Request__kext_request_t::user_log_flags"]
        [::std::mem::offset_of!(__Request__kext_request_t, user_log_flags) - 52usize];
    ["Offset of field: __Request__kext_request_t::request_dataCnt"]
        [::std::mem::offset_of!(__Request__kext_request_t, request_dataCnt) - 56usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__host_priv_subsystem {
    pub Request_host_get_boot_info: __Request__host_get_boot_info_t,
    pub Request_host_reboot: __Request__host_reboot_t,
    pub Request_host_priv_statistics: __Request__host_priv_statistics_t,
    pub Request_host_default_memory_manager: __Request__host_default_memory_manager_t,
    pub Request_vm_wire: __Request__vm_wire_t,
    pub Request_thread_wire: __Request__thread_wire_t,
    pub Request_vm_allocate_cpm: __Request__vm_allocate_cpm_t,
    pub Request_host_processors: __Request__host_processors_t,
    pub Request_host_get_clock_control: __Request__host_get_clock_control_t,
    pub Request_kmod_create: __Request__kmod_create_t,
    pub Request_kmod_destroy: __Request__kmod_destroy_t,
    pub Request_kmod_control: __Request__kmod_control_t,
    pub Request_host_get_special_port: __Request__host_get_special_port_t,
    pub Request_host_set_special_port: __Request__host_set_special_port_t,
    pub Request_host_set_exception_ports: __Request__host_set_exception_ports_t,
    pub Request_host_get_exception_ports: __Request__host_get_exception_ports_t,
    pub Request_host_swap_exception_ports: __Request__host_swap_exception_ports_t,
    pub Request_mach_vm_wire: __Request__mach_vm_wire_t,
    pub Request_host_processor_sets: __Request__host_processor_sets_t,
    pub Request_host_processor_set_priv: __Request__host_processor_set_priv_t,
    pub Request_host_set_UNDServer: __Request__host_set_UNDServer_t,
    pub Request_host_get_UNDServer: __Request__host_get_UNDServer_t,
    pub Request_kext_request: __Request__kext_request_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __RequestUnion__host_priv_subsystem"]
        [::std::mem::size_of::<__RequestUnion__host_priv_subsystem>() - 68usize];
    ["Alignment of __RequestUnion__host_priv_subsystem"]
        [::std::mem::align_of::<__RequestUnion__host_priv_subsystem>() - 4usize];
    ["Offset of field: __RequestUnion__host_priv_subsystem::Request_host_get_boot_info"][::std::mem::offset_of!(
        __RequestUnion__host_priv_subsystem,
        Request_host_get_boot_info
    )
        - 0usize];
    ["Offset of field: __RequestUnion__host_priv_subsystem::Request_host_reboot"]
        [::std::mem::offset_of!(__RequestUnion__host_priv_subsystem, Request_host_reboot) - 0usize];
    ["Offset of field: __RequestUnion__host_priv_subsystem::Request_host_priv_statistics"][::std::mem::offset_of!(
        __RequestUnion__host_priv_subsystem,
        Request_host_priv_statistics
    )
        - 0usize];
    ["Offset of field: __RequestUnion__host_priv_subsystem::Request_host_default_memory_manager"][::std::mem::offset_of!(
        __RequestUnion__host_priv_subsystem,
        Request_host_default_memory_manager
    )
        - 0usize];
    ["Offset of field: __RequestUnion__host_priv_subsystem::Request_vm_wire"]
        [::std::mem::offset_of!(__RequestUnion__host_priv_subsystem, Request_vm_wire) - 0usize];
    ["Offset of field: __RequestUnion__host_priv_subsystem::Request_thread_wire"]
        [::std::mem::offset_of!(__RequestUnion__host_priv_subsystem, Request_thread_wire) - 0usize];
    ["Offset of field: __RequestUnion__host_priv_subsystem::Request_vm_allocate_cpm"][::std::mem::offset_of!(
        __RequestUnion__host_priv_subsystem,
        Request_vm_allocate_cpm
    ) - 0usize];
    ["Offset of field: __RequestUnion__host_priv_subsystem::Request_host_processors"][::std::mem::offset_of!(
        __RequestUnion__host_priv_subsystem,
        Request_host_processors
    ) - 0usize];
    ["Offset of field: __RequestUnion__host_priv_subsystem::Request_host_get_clock_control"][::std::mem::offset_of!(
        __RequestUnion__host_priv_subsystem,
        Request_host_get_clock_control
    )
        - 0usize];
    ["Offset of field: __RequestUnion__host_priv_subsystem::Request_kmod_create"]
        [::std::mem::offset_of!(__RequestUnion__host_priv_subsystem, Request_kmod_create) - 0usize];
    ["Offset of field: __RequestUnion__host_priv_subsystem::Request_kmod_destroy"][::std::mem::offset_of!(
        __RequestUnion__host_priv_subsystem,
        Request_kmod_destroy
    ) - 0usize];
    ["Offset of field: __RequestUnion__host_priv_subsystem::Request_kmod_control"][::std::mem::offset_of!(
        __RequestUnion__host_priv_subsystem,
        Request_kmod_control
    ) - 0usize];
    ["Offset of field: __RequestUnion__host_priv_subsystem::Request_host_get_special_port"][::std::mem::offset_of!(
        __RequestUnion__host_priv_subsystem,
        Request_host_get_special_port
    )
        - 0usize];
    ["Offset of field: __RequestUnion__host_priv_subsystem::Request_host_set_special_port"][::std::mem::offset_of!(
        __RequestUnion__host_priv_subsystem,
        Request_host_set_special_port
    )
        - 0usize];
    ["Offset of field: __RequestUnion__host_priv_subsystem::Request_host_set_exception_ports"][::std::mem::offset_of!(
        __RequestUnion__host_priv_subsystem,
        Request_host_set_exception_ports
    )
        - 0usize];
    ["Offset of field: __RequestUnion__host_priv_subsystem::Request_host_get_exception_ports"][::std::mem::offset_of!(
        __RequestUnion__host_priv_subsystem,
        Request_host_get_exception_ports
    )
        - 0usize];
    ["Offset of field: __RequestUnion__host_priv_subsystem::Request_host_swap_exception_ports"][::std::mem::offset_of!(
        __RequestUnion__host_priv_subsystem,
        Request_host_swap_exception_ports
    )
        - 0usize];
    ["Offset of field: __RequestUnion__host_priv_subsystem::Request_mach_vm_wire"][::std::mem::offset_of!(
        __RequestUnion__host_priv_subsystem,
        Request_mach_vm_wire
    ) - 0usize];
    ["Offset of field: __RequestUnion__host_priv_subsystem::Request_host_processor_sets"][::std::mem::offset_of!(
        __RequestUnion__host_priv_subsystem,
        Request_host_processor_sets
    )
        - 0usize];
    ["Offset of field: __RequestUnion__host_priv_subsystem::Request_host_processor_set_priv"][::std::mem::offset_of!(
        __RequestUnion__host_priv_subsystem,
        Request_host_processor_set_priv
    )
        - 0usize];
    ["Offset of field: __RequestUnion__host_priv_subsystem::Request_host_set_UNDServer"][::std::mem::offset_of!(
        __RequestUnion__host_priv_subsystem,
        Request_host_set_UNDServer
    )
        - 0usize];
    ["Offset of field: __RequestUnion__host_priv_subsystem::Request_host_get_UNDServer"][::std::mem::offset_of!(
        __RequestUnion__host_priv_subsystem,
        Request_host_get_UNDServer
    )
        - 0usize];
    ["Offset of field: __RequestUnion__host_priv_subsystem::Request_kext_request"][::std::mem::offset_of!(
        __RequestUnion__host_priv_subsystem,
        Request_kext_request
    ) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_get_boot_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub boot_infoOffset: mach_msg_type_number_t,
    pub boot_infoCnt: mach_msg_type_number_t,
    pub boot_info: [::std::os::raw::c_char; 4096usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__host_get_boot_info_t"]
        [::std::mem::size_of::<__Reply__host_get_boot_info_t>() - 4140usize];
    ["Alignment of __Reply__host_get_boot_info_t"]
        [::std::mem::align_of::<__Reply__host_get_boot_info_t>() - 4usize];
    ["Offset of field: __Reply__host_get_boot_info_t::Head"]
        [::std::mem::offset_of!(__Reply__host_get_boot_info_t, Head) - 0usize];
    ["Offset of field: __Reply__host_get_boot_info_t::NDR"]
        [::std::mem::offset_of!(__Reply__host_get_boot_info_t, NDR) - 24usize];
    ["Offset of field: __Reply__host_get_boot_info_t::RetCode"]
        [::std::mem::offset_of!(__Reply__host_get_boot_info_t, RetCode) - 32usize];
    ["Offset of field: __Reply__host_get_boot_info_t::boot_infoOffset"]
        [::std::mem::offset_of!(__Reply__host_get_boot_info_t, boot_infoOffset) - 36usize];
    ["Offset of field: __Reply__host_get_boot_info_t::boot_infoCnt"]
        [::std::mem::offset_of!(__Reply__host_get_boot_info_t, boot_infoCnt) - 40usize];
    ["Offset of field: __Reply__host_get_boot_info_t::boot_info"]
        [::std::mem::offset_of!(__Reply__host_get_boot_info_t, boot_info) - 44usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_reboot_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__host_reboot_t"][::std::mem::size_of::<__Reply__host_reboot_t>() - 36usize];
    ["Alignment of __Reply__host_reboot_t"]
        [::std::mem::align_of::<__Reply__host_reboot_t>() - 4usize];
    ["Offset of field: __Reply__host_reboot_t::Head"]
        [::std::mem::offset_of!(__Reply__host_reboot_t, Head) - 0usize];
    ["Offset of field: __Reply__host_reboot_t::NDR"]
        [::std::mem::offset_of!(__Reply__host_reboot_t, NDR) - 24usize];
    ["Offset of field: __Reply__host_reboot_t::RetCode"]
        [::std::mem::offset_of!(__Reply__host_reboot_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_priv_statistics_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub host_info_outCnt: mach_msg_type_number_t,
    pub host_info_out: [integer_t; 68usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__host_priv_statistics_t"]
        [::std::mem::size_of::<__Reply__host_priv_statistics_t>() - 312usize];
    ["Alignment of __Reply__host_priv_statistics_t"]
        [::std::mem::align_of::<__Reply__host_priv_statistics_t>() - 4usize];
    ["Offset of field: __Reply__host_priv_statistics_t::Head"]
        [::std::mem::offset_of!(__Reply__host_priv_statistics_t, Head) - 0usize];
    ["Offset of field: __Reply__host_priv_statistics_t::NDR"]
        [::std::mem::offset_of!(__Reply__host_priv_statistics_t, NDR) - 24usize];
    ["Offset of field: __Reply__host_priv_statistics_t::RetCode"]
        [::std::mem::offset_of!(__Reply__host_priv_statistics_t, RetCode) - 32usize];
    ["Offset of field: __Reply__host_priv_statistics_t::host_info_outCnt"]
        [::std::mem::offset_of!(__Reply__host_priv_statistics_t, host_info_outCnt) - 36usize];
    ["Offset of field: __Reply__host_priv_statistics_t::host_info_out"]
        [::std::mem::offset_of!(__Reply__host_priv_statistics_t, host_info_out) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_default_memory_manager_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub default_manager: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__host_default_memory_manager_t"]
        [::std::mem::size_of::<__Reply__host_default_memory_manager_t>() - 40usize];
    ["Alignment of __Reply__host_default_memory_manager_t"]
        [::std::mem::align_of::<__Reply__host_default_memory_manager_t>() - 4usize];
    ["Offset of field: __Reply__host_default_memory_manager_t::Head"]
        [::std::mem::offset_of!(__Reply__host_default_memory_manager_t, Head) - 0usize];
    ["Offset of field: __Reply__host_default_memory_manager_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__host_default_memory_manager_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__host_default_memory_manager_t::default_manager"]
        [::std::mem::offset_of!(__Reply__host_default_memory_manager_t, default_manager) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_wire_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__vm_wire_t"][::std::mem::size_of::<__Reply__vm_wire_t>() - 36usize];
    ["Alignment of __Reply__vm_wire_t"][::std::mem::align_of::<__Reply__vm_wire_t>() - 4usize];
    ["Offset of field: __Reply__vm_wire_t::Head"]
        [::std::mem::offset_of!(__Reply__vm_wire_t, Head) - 0usize];
    ["Offset of field: __Reply__vm_wire_t::NDR"]
        [::std::mem::offset_of!(__Reply__vm_wire_t, NDR) - 24usize];
    ["Offset of field: __Reply__vm_wire_t::RetCode"]
        [::std::mem::offset_of!(__Reply__vm_wire_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_wire_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__thread_wire_t"][::std::mem::size_of::<__Reply__thread_wire_t>() - 36usize];
    ["Alignment of __Reply__thread_wire_t"]
        [::std::mem::align_of::<__Reply__thread_wire_t>() - 4usize];
    ["Offset of field: __Reply__thread_wire_t::Head"]
        [::std::mem::offset_of!(__Reply__thread_wire_t, Head) - 0usize];
    ["Offset of field: __Reply__thread_wire_t::NDR"]
        [::std::mem::offset_of!(__Reply__thread_wire_t, NDR) - 24usize];
    ["Offset of field: __Reply__thread_wire_t::RetCode"]
        [::std::mem::offset_of!(__Reply__thread_wire_t, RetCode) - 32usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_allocate_cpm_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub address: vm_address_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__vm_allocate_cpm_t"]
        [::std::mem::size_of::<__Reply__vm_allocate_cpm_t>() - 44usize];
    ["Alignment of __Reply__vm_allocate_cpm_t"]
        [::std::mem::align_of::<__Reply__vm_allocate_cpm_t>() - 4usize];
    ["Offset of field: __Reply__vm_allocate_cpm_t::Head"]
        [::std::mem::offset_of!(__Reply__vm_allocate_cpm_t, Head) - 0usize];
    ["Offset of field: __Reply__vm_allocate_cpm_t::NDR"]
        [::std::mem::offset_of!(__Reply__vm_allocate_cpm_t, NDR) - 24usize];
    ["Offset of field: __Reply__vm_allocate_cpm_t::RetCode"]
        [::std::mem::offset_of!(__Reply__vm_allocate_cpm_t, RetCode) - 32usize];
    ["Offset of field: __Reply__vm_allocate_cpm_t::address"]
        [::std::mem::offset_of!(__Reply__vm_allocate_cpm_t, address) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_processors_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub out_processor_list: mach_msg_ool_ports_descriptor_t,
    pub NDR: NDR_record_t,
    pub out_processor_listCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__host_processors_t"]
        [::std::mem::size_of::<__Reply__host_processors_t>() - 56usize];
    ["Alignment of __Reply__host_processors_t"]
        [::std::mem::align_of::<__Reply__host_processors_t>() - 4usize];
    ["Offset of field: __Reply__host_processors_t::Head"]
        [::std::mem::offset_of!(__Reply__host_processors_t, Head) - 0usize];
    ["Offset of field: __Reply__host_processors_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__host_processors_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__host_processors_t::out_processor_list"]
        [::std::mem::offset_of!(__Reply__host_processors_t, out_processor_list) - 28usize];
    ["Offset of field: __Reply__host_processors_t::NDR"]
        [::std::mem::offset_of!(__Reply__host_processors_t, NDR) - 44usize];
    ["Offset of field: __Reply__host_processors_t::out_processor_listCnt"]
        [::std::mem::offset_of!(__Reply__host_processors_t, out_processor_listCnt) - 52usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_get_clock_control_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub clock_ctrl: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__host_get_clock_control_t"]
        [::std::mem::size_of::<__Reply__host_get_clock_control_t>() - 40usize];
    ["Alignment of __Reply__host_get_clock_control_t"]
        [::std::mem::align_of::<__Reply__host_get_clock_control_t>() - 4usize];
    ["Offset of field: __Reply__host_get_clock_control_t::Head"]
        [::std::mem::offset_of!(__Reply__host_get_clock_control_t, Head) - 0usize];
    ["Offset of field: __Reply__host_get_clock_control_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__host_get_clock_control_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__host_get_clock_control_t::clock_ctrl"]
        [::std::mem::offset_of!(__Reply__host_get_clock_control_t, clock_ctrl) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__kmod_create_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub module: kmod_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__kmod_create_t"][::std::mem::size_of::<__Reply__kmod_create_t>() - 40usize];
    ["Alignment of __Reply__kmod_create_t"]
        [::std::mem::align_of::<__Reply__kmod_create_t>() - 4usize];
    ["Offset of field: __Reply__kmod_create_t::Head"]
        [::std::mem::offset_of!(__Reply__kmod_create_t, Head) - 0usize];
    ["Offset of field: __Reply__kmod_create_t::NDR"]
        [::std::mem::offset_of!(__Reply__kmod_create_t, NDR) - 24usize];
    ["Offset of field: __Reply__kmod_create_t::RetCode"]
        [::std::mem::offset_of!(__Reply__kmod_create_t, RetCode) - 32usize];
    ["Offset of field: __Reply__kmod_create_t::module"]
        [::std::mem::offset_of!(__Reply__kmod_create_t, module) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__kmod_destroy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__kmod_destroy_t"][::std::mem::size_of::<__Reply__kmod_destroy_t>() - 36usize];
    ["Alignment of __Reply__kmod_destroy_t"]
        [::std::mem::align_of::<__Reply__kmod_destroy_t>() - 4usize];
    ["Offset of field: __Reply__kmod_destroy_t::Head"]
        [::std::mem::offset_of!(__Reply__kmod_destroy_t, Head) - 0usize];
    ["Offset of field: __Reply__kmod_destroy_t::NDR"]
        [::std::mem::offset_of!(__Reply__kmod_destroy_t, NDR) - 24usize];
    ["Offset of field: __Reply__kmod_destroy_t::RetCode"]
        [::std::mem::offset_of!(__Reply__kmod_destroy_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__kmod_control_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub data: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub dataCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__kmod_control_t"][::std::mem::size_of::<__Reply__kmod_control_t>() - 56usize];
    ["Alignment of __Reply__kmod_control_t"]
        [::std::mem::align_of::<__Reply__kmod_control_t>() - 4usize];
    ["Offset of field: __Reply__kmod_control_t::Head"]
        [::std::mem::offset_of!(__Reply__kmod_control_t, Head) - 0usize];
    ["Offset of field: __Reply__kmod_control_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__kmod_control_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__kmod_control_t::data"]
        [::std::mem::offset_of!(__Reply__kmod_control_t, data) - 28usize];
    ["Offset of field: __Reply__kmod_control_t::NDR"]
        [::std::mem::offset_of!(__Reply__kmod_control_t, NDR) - 44usize];
    ["Offset of field: __Reply__kmod_control_t::dataCnt"]
        [::std::mem::offset_of!(__Reply__kmod_control_t, dataCnt) - 52usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_get_special_port_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub port: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__host_get_special_port_t"]
        [::std::mem::size_of::<__Reply__host_get_special_port_t>() - 40usize];
    ["Alignment of __Reply__host_get_special_port_t"]
        [::std::mem::align_of::<__Reply__host_get_special_port_t>() - 4usize];
    ["Offset of field: __Reply__host_get_special_port_t::Head"]
        [::std::mem::offset_of!(__Reply__host_get_special_port_t, Head) - 0usize];
    ["Offset of field: __Reply__host_get_special_port_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__host_get_special_port_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__host_get_special_port_t::port"]
        [::std::mem::offset_of!(__Reply__host_get_special_port_t, port) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_set_special_port_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__host_set_special_port_t"]
        [::std::mem::size_of::<__Reply__host_set_special_port_t>() - 36usize];
    ["Alignment of __Reply__host_set_special_port_t"]
        [::std::mem::align_of::<__Reply__host_set_special_port_t>() - 4usize];
    ["Offset of field: __Reply__host_set_special_port_t::Head"]
        [::std::mem::offset_of!(__Reply__host_set_special_port_t, Head) - 0usize];
    ["Offset of field: __Reply__host_set_special_port_t::NDR"]
        [::std::mem::offset_of!(__Reply__host_set_special_port_t, NDR) - 24usize];
    ["Offset of field: __Reply__host_set_special_port_t::RetCode"]
        [::std::mem::offset_of!(__Reply__host_set_special_port_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_set_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__host_set_exception_ports_t"]
        [::std::mem::size_of::<__Reply__host_set_exception_ports_t>() - 36usize];
    ["Alignment of __Reply__host_set_exception_ports_t"]
        [::std::mem::align_of::<__Reply__host_set_exception_ports_t>() - 4usize];
    ["Offset of field: __Reply__host_set_exception_ports_t::Head"]
        [::std::mem::offset_of!(__Reply__host_set_exception_ports_t, Head) - 0usize];
    ["Offset of field: __Reply__host_set_exception_ports_t::NDR"]
        [::std::mem::offset_of!(__Reply__host_set_exception_ports_t, NDR) - 24usize];
    ["Offset of field: __Reply__host_set_exception_ports_t::RetCode"]
        [::std::mem::offset_of!(__Reply__host_set_exception_ports_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_get_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub old_handlers: [mach_msg_port_descriptor_t; 32usize],
    pub NDR: NDR_record_t,
    pub masksCnt: mach_msg_type_number_t,
    pub masks: [exception_mask_t; 32usize],
    pub old_behaviors: [exception_behavior_t; 32usize],
    pub old_flavors: [thread_state_flavor_t; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__host_get_exception_ports_t"]
        [::std::mem::size_of::<__Reply__host_get_exception_ports_t>() - 808usize];
    ["Alignment of __Reply__host_get_exception_ports_t"]
        [::std::mem::align_of::<__Reply__host_get_exception_ports_t>() - 4usize];
    ["Offset of field: __Reply__host_get_exception_ports_t::Head"]
        [::std::mem::offset_of!(__Reply__host_get_exception_ports_t, Head) - 0usize];
    ["Offset of field: __Reply__host_get_exception_ports_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__host_get_exception_ports_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__host_get_exception_ports_t::old_handlers"]
        [::std::mem::offset_of!(__Reply__host_get_exception_ports_t, old_handlers) - 28usize];
    ["Offset of field: __Reply__host_get_exception_ports_t::NDR"]
        [::std::mem::offset_of!(__Reply__host_get_exception_ports_t, NDR) - 412usize];
    ["Offset of field: __Reply__host_get_exception_ports_t::masksCnt"]
        [::std::mem::offset_of!(__Reply__host_get_exception_ports_t, masksCnt) - 420usize];
    ["Offset of field: __Reply__host_get_exception_ports_t::masks"]
        [::std::mem::offset_of!(__Reply__host_get_exception_ports_t, masks) - 424usize];
    ["Offset of field: __Reply__host_get_exception_ports_t::old_behaviors"]
        [::std::mem::offset_of!(__Reply__host_get_exception_ports_t, old_behaviors) - 552usize];
    ["Offset of field: __Reply__host_get_exception_ports_t::old_flavors"]
        [::std::mem::offset_of!(__Reply__host_get_exception_ports_t, old_flavors) - 680usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_swap_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub old_handlerss: [mach_msg_port_descriptor_t; 32usize],
    pub NDR: NDR_record_t,
    pub masksCnt: mach_msg_type_number_t,
    pub masks: [exception_mask_t; 32usize],
    pub old_behaviors: [exception_behavior_t; 32usize],
    pub old_flavors: [thread_state_flavor_t; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__host_swap_exception_ports_t"]
        [::std::mem::size_of::<__Reply__host_swap_exception_ports_t>() - 808usize];
    ["Alignment of __Reply__host_swap_exception_ports_t"]
        [::std::mem::align_of::<__Reply__host_swap_exception_ports_t>() - 4usize];
    ["Offset of field: __Reply__host_swap_exception_ports_t::Head"]
        [::std::mem::offset_of!(__Reply__host_swap_exception_ports_t, Head) - 0usize];
    ["Offset of field: __Reply__host_swap_exception_ports_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__host_swap_exception_ports_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__host_swap_exception_ports_t::old_handlerss"]
        [::std::mem::offset_of!(__Reply__host_swap_exception_ports_t, old_handlerss) - 28usize];
    ["Offset of field: __Reply__host_swap_exception_ports_t::NDR"]
        [::std::mem::offset_of!(__Reply__host_swap_exception_ports_t, NDR) - 412usize];
    ["Offset of field: __Reply__host_swap_exception_ports_t::masksCnt"]
        [::std::mem::offset_of!(__Reply__host_swap_exception_ports_t, masksCnt) - 420usize];
    ["Offset of field: __Reply__host_swap_exception_ports_t::masks"]
        [::std::mem::offset_of!(__Reply__host_swap_exception_ports_t, masks) - 424usize];
    ["Offset of field: __Reply__host_swap_exception_ports_t::old_behaviors"]
        [::std::mem::offset_of!(__Reply__host_swap_exception_ports_t, old_behaviors) - 552usize];
    ["Offset of field: __Reply__host_swap_exception_ports_t::old_flavors"]
        [::std::mem::offset_of!(__Reply__host_swap_exception_ports_t, old_flavors) - 680usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_wire_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_vm_wire_t"][::std::mem::size_of::<__Reply__mach_vm_wire_t>() - 36usize];
    ["Alignment of __Reply__mach_vm_wire_t"]
        [::std::mem::align_of::<__Reply__mach_vm_wire_t>() - 4usize];
    ["Offset of field: __Reply__mach_vm_wire_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_vm_wire_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_vm_wire_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_vm_wire_t, NDR) - 24usize];
    ["Offset of field: __Reply__mach_vm_wire_t::RetCode"]
        [::std::mem::offset_of!(__Reply__mach_vm_wire_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_processor_sets_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub processor_sets: mach_msg_ool_ports_descriptor_t,
    pub NDR: NDR_record_t,
    pub processor_setsCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__host_processor_sets_t"]
        [::std::mem::size_of::<__Reply__host_processor_sets_t>() - 56usize];
    ["Alignment of __Reply__host_processor_sets_t"]
        [::std::mem::align_of::<__Reply__host_processor_sets_t>() - 4usize];
    ["Offset of field: __Reply__host_processor_sets_t::Head"]
        [::std::mem::offset_of!(__Reply__host_processor_sets_t, Head) - 0usize];
    ["Offset of field: __Reply__host_processor_sets_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__host_processor_sets_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__host_processor_sets_t::processor_sets"]
        [::std::mem::offset_of!(__Reply__host_processor_sets_t, processor_sets) - 28usize];
    ["Offset of field: __Reply__host_processor_sets_t::NDR"]
        [::std::mem::offset_of!(__Reply__host_processor_sets_t, NDR) - 44usize];
    ["Offset of field: __Reply__host_processor_sets_t::processor_setsCnt"]
        [::std::mem::offset_of!(__Reply__host_processor_sets_t, processor_setsCnt) - 52usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_processor_set_priv_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub set: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__host_processor_set_priv_t"]
        [::std::mem::size_of::<__Reply__host_processor_set_priv_t>() - 40usize];
    ["Alignment of __Reply__host_processor_set_priv_t"]
        [::std::mem::align_of::<__Reply__host_processor_set_priv_t>() - 4usize];
    ["Offset of field: __Reply__host_processor_set_priv_t::Head"]
        [::std::mem::offset_of!(__Reply__host_processor_set_priv_t, Head) - 0usize];
    ["Offset of field: __Reply__host_processor_set_priv_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__host_processor_set_priv_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__host_processor_set_priv_t::set"]
        [::std::mem::offset_of!(__Reply__host_processor_set_priv_t, set) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_set_UNDServer_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__host_set_UNDServer_t"]
        [::std::mem::size_of::<__Reply__host_set_UNDServer_t>() - 36usize];
    ["Alignment of __Reply__host_set_UNDServer_t"]
        [::std::mem::align_of::<__Reply__host_set_UNDServer_t>() - 4usize];
    ["Offset of field: __Reply__host_set_UNDServer_t::Head"]
        [::std::mem::offset_of!(__Reply__host_set_UNDServer_t, Head) - 0usize];
    ["Offset of field: __Reply__host_set_UNDServer_t::NDR"]
        [::std::mem::offset_of!(__Reply__host_set_UNDServer_t, NDR) - 24usize];
    ["Offset of field: __Reply__host_set_UNDServer_t::RetCode"]
        [::std::mem::offset_of!(__Reply__host_set_UNDServer_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_get_UNDServer_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub server: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__host_get_UNDServer_t"]
        [::std::mem::size_of::<__Reply__host_get_UNDServer_t>() - 40usize];
    ["Alignment of __Reply__host_get_UNDServer_t"]
        [::std::mem::align_of::<__Reply__host_get_UNDServer_t>() - 4usize];
    ["Offset of field: __Reply__host_get_UNDServer_t::Head"]
        [::std::mem::offset_of!(__Reply__host_get_UNDServer_t, Head) - 0usize];
    ["Offset of field: __Reply__host_get_UNDServer_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__host_get_UNDServer_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__host_get_UNDServer_t::server"]
        [::std::mem::offset_of!(__Reply__host_get_UNDServer_t, server) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__kext_request_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub response_data: mach_msg_ool_descriptor_t,
    pub log_data: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub response_dataCnt: mach_msg_type_number_t,
    pub log_dataCnt: mach_msg_type_number_t,
    pub op_result: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__kext_request_t"][::std::mem::size_of::<__Reply__kext_request_t>() - 80usize];
    ["Alignment of __Reply__kext_request_t"]
        [::std::mem::align_of::<__Reply__kext_request_t>() - 4usize];
    ["Offset of field: __Reply__kext_request_t::Head"]
        [::std::mem::offset_of!(__Reply__kext_request_t, Head) - 0usize];
    ["Offset of field: __Reply__kext_request_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__kext_request_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__kext_request_t::response_data"]
        [::std::mem::offset_of!(__Reply__kext_request_t, response_data) - 28usize];
    ["Offset of field: __Reply__kext_request_t::log_data"]
        [::std::mem::offset_of!(__Reply__kext_request_t, log_data) - 44usize];
    ["Offset of field: __Reply__kext_request_t::NDR"]
        [::std::mem::offset_of!(__Reply__kext_request_t, NDR) - 60usize];
    ["Offset of field: __Reply__kext_request_t::response_dataCnt"]
        [::std::mem::offset_of!(__Reply__kext_request_t, response_dataCnt) - 68usize];
    ["Offset of field: __Reply__kext_request_t::log_dataCnt"]
        [::std::mem::offset_of!(__Reply__kext_request_t, log_dataCnt) - 72usize];
    ["Offset of field: __Reply__kext_request_t::op_result"]
        [::std::mem::offset_of!(__Reply__kext_request_t, op_result) - 76usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__host_priv_subsystem {
    pub Reply_host_get_boot_info: __Reply__host_get_boot_info_t,
    pub Reply_host_reboot: __Reply__host_reboot_t,
    pub Reply_host_priv_statistics: __Reply__host_priv_statistics_t,
    pub Reply_host_default_memory_manager: __Reply__host_default_memory_manager_t,
    pub Reply_vm_wire: __Reply__vm_wire_t,
    pub Reply_thread_wire: __Reply__thread_wire_t,
    pub Reply_vm_allocate_cpm: __Reply__vm_allocate_cpm_t,
    pub Reply_host_processors: __Reply__host_processors_t,
    pub Reply_host_get_clock_control: __Reply__host_get_clock_control_t,
    pub Reply_kmod_create: __Reply__kmod_create_t,
    pub Reply_kmod_destroy: __Reply__kmod_destroy_t,
    pub Reply_kmod_control: __Reply__kmod_control_t,
    pub Reply_host_get_special_port: __Reply__host_get_special_port_t,
    pub Reply_host_set_special_port: __Reply__host_set_special_port_t,
    pub Reply_host_set_exception_ports: __Reply__host_set_exception_ports_t,
    pub Reply_host_get_exception_ports: __Reply__host_get_exception_ports_t,
    pub Reply_host_swap_exception_ports: __Reply__host_swap_exception_ports_t,
    pub Reply_mach_vm_wire: __Reply__mach_vm_wire_t,
    pub Reply_host_processor_sets: __Reply__host_processor_sets_t,
    pub Reply_host_processor_set_priv: __Reply__host_processor_set_priv_t,
    pub Reply_host_set_UNDServer: __Reply__host_set_UNDServer_t,
    pub Reply_host_get_UNDServer: __Reply__host_get_UNDServer_t,
    pub Reply_kext_request: __Reply__kext_request_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __ReplyUnion__host_priv_subsystem"]
        [::std::mem::size_of::<__ReplyUnion__host_priv_subsystem>() - 4140usize];
    ["Alignment of __ReplyUnion__host_priv_subsystem"]
        [::std::mem::align_of::<__ReplyUnion__host_priv_subsystem>() - 4usize];
    ["Offset of field: __ReplyUnion__host_priv_subsystem::Reply_host_get_boot_info"][::std::mem::offset_of!(
        __ReplyUnion__host_priv_subsystem,
        Reply_host_get_boot_info
    ) - 0usize];
    ["Offset of field: __ReplyUnion__host_priv_subsystem::Reply_host_reboot"]
        [::std::mem::offset_of!(__ReplyUnion__host_priv_subsystem, Reply_host_reboot) - 0usize];
    ["Offset of field: __ReplyUnion__host_priv_subsystem::Reply_host_priv_statistics"][::std::mem::offset_of!(
        __ReplyUnion__host_priv_subsystem,
        Reply_host_priv_statistics
    ) - 0usize];
    ["Offset of field: __ReplyUnion__host_priv_subsystem::Reply_host_default_memory_manager"][::std::mem::offset_of!(
        __ReplyUnion__host_priv_subsystem,
        Reply_host_default_memory_manager
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__host_priv_subsystem::Reply_vm_wire"]
        [::std::mem::offset_of!(__ReplyUnion__host_priv_subsystem, Reply_vm_wire) - 0usize];
    ["Offset of field: __ReplyUnion__host_priv_subsystem::Reply_thread_wire"]
        [::std::mem::offset_of!(__ReplyUnion__host_priv_subsystem, Reply_thread_wire) - 0usize];
    ["Offset of field: __ReplyUnion__host_priv_subsystem::Reply_vm_allocate_cpm"]
        [::std::mem::offset_of!(__ReplyUnion__host_priv_subsystem, Reply_vm_allocate_cpm) - 0usize];
    ["Offset of field: __ReplyUnion__host_priv_subsystem::Reply_host_processors"]
        [::std::mem::offset_of!(__ReplyUnion__host_priv_subsystem, Reply_host_processors) - 0usize];
    ["Offset of field: __ReplyUnion__host_priv_subsystem::Reply_host_get_clock_control"][::std::mem::offset_of!(
        __ReplyUnion__host_priv_subsystem,
        Reply_host_get_clock_control
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__host_priv_subsystem::Reply_kmod_create"]
        [::std::mem::offset_of!(__ReplyUnion__host_priv_subsystem, Reply_kmod_create) - 0usize];
    ["Offset of field: __ReplyUnion__host_priv_subsystem::Reply_kmod_destroy"]
        [::std::mem::offset_of!(__ReplyUnion__host_priv_subsystem, Reply_kmod_destroy) - 0usize];
    ["Offset of field: __ReplyUnion__host_priv_subsystem::Reply_kmod_control"]
        [::std::mem::offset_of!(__ReplyUnion__host_priv_subsystem, Reply_kmod_control) - 0usize];
    ["Offset of field: __ReplyUnion__host_priv_subsystem::Reply_host_get_special_port"][::std::mem::offset_of!(
        __ReplyUnion__host_priv_subsystem,
        Reply_host_get_special_port
    ) - 0usize];
    ["Offset of field: __ReplyUnion__host_priv_subsystem::Reply_host_set_special_port"][::std::mem::offset_of!(
        __ReplyUnion__host_priv_subsystem,
        Reply_host_set_special_port
    ) - 0usize];
    ["Offset of field: __ReplyUnion__host_priv_subsystem::Reply_host_set_exception_ports"][::std::mem::offset_of!(
        __ReplyUnion__host_priv_subsystem,
        Reply_host_set_exception_ports
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__host_priv_subsystem::Reply_host_get_exception_ports"][::std::mem::offset_of!(
        __ReplyUnion__host_priv_subsystem,
        Reply_host_get_exception_ports
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__host_priv_subsystem::Reply_host_swap_exception_ports"][::std::mem::offset_of!(
        __ReplyUnion__host_priv_subsystem,
        Reply_host_swap_exception_ports
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__host_priv_subsystem::Reply_mach_vm_wire"]
        [::std::mem::offset_of!(__ReplyUnion__host_priv_subsystem, Reply_mach_vm_wire) - 0usize];
    ["Offset of field: __ReplyUnion__host_priv_subsystem::Reply_host_processor_sets"][::std::mem::offset_of!(
        __ReplyUnion__host_priv_subsystem,
        Reply_host_processor_sets
    ) - 0usize];
    ["Offset of field: __ReplyUnion__host_priv_subsystem::Reply_host_processor_set_priv"][::std::mem::offset_of!(
        __ReplyUnion__host_priv_subsystem,
        Reply_host_processor_set_priv
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__host_priv_subsystem::Reply_host_set_UNDServer"][::std::mem::offset_of!(
        __ReplyUnion__host_priv_subsystem,
        Reply_host_set_UNDServer
    ) - 0usize];
    ["Offset of field: __ReplyUnion__host_priv_subsystem::Reply_host_get_UNDServer"][::std::mem::offset_of!(
        __ReplyUnion__host_priv_subsystem,
        Reply_host_get_UNDServer
    ) - 0usize];
    ["Offset of field: __ReplyUnion__host_priv_subsystem::Reply_kext_request"]
        [::std::mem::offset_of!(__ReplyUnion__host_priv_subsystem, Reply_kext_request) - 0usize];
};
unsafe extern "C" {
    pub fn host_security_create_task_token(
        host_security: host_security_t,
        parent_task: task_t,
        sec_token: security_token_t,
        audit_token: audit_token_t,
        host: host_t,
        ledgers: ledger_array_t,
        ledgersCnt: mach_msg_type_number_t,
        inherit_memory: boolean_t,
        child_task: *mut task_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn host_security_set_task_token(
        host_security: host_security_t,
        target_task: task_t,
        sec_token: security_token_t,
        audit_token: audit_token_t,
        host: host_t,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_security_create_task_token_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub parent_task: mach_msg_port_descriptor_t,
    pub host: mach_msg_port_descriptor_t,
    pub ledgers: mach_msg_ool_ports_descriptor_t,
    pub NDR: NDR_record_t,
    pub sec_token: security_token_t,
    pub audit_token: audit_token_t,
    pub ledgersCnt: mach_msg_type_number_t,
    pub inherit_memory: boolean_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__host_security_create_task_token_t"]
        [::std::mem::size_of::<__Request__host_security_create_task_token_t>() - 124usize];
    ["Alignment of __Request__host_security_create_task_token_t"]
        [::std::mem::align_of::<__Request__host_security_create_task_token_t>() - 4usize];
    ["Offset of field: __Request__host_security_create_task_token_t::Head"]
        [::std::mem::offset_of!(__Request__host_security_create_task_token_t, Head) - 0usize];
    ["Offset of field: __Request__host_security_create_task_token_t::msgh_body"]
        [::std::mem::offset_of!(__Request__host_security_create_task_token_t, msgh_body) - 24usize];
    ["Offset of field: __Request__host_security_create_task_token_t::parent_task"][::std::mem::offset_of!(
        __Request__host_security_create_task_token_t,
        parent_task
    ) - 28usize];
    ["Offset of field: __Request__host_security_create_task_token_t::host"]
        [::std::mem::offset_of!(__Request__host_security_create_task_token_t, host) - 40usize];
    ["Offset of field: __Request__host_security_create_task_token_t::ledgers"]
        [::std::mem::offset_of!(__Request__host_security_create_task_token_t, ledgers) - 52usize];
    ["Offset of field: __Request__host_security_create_task_token_t::NDR"]
        [::std::mem::offset_of!(__Request__host_security_create_task_token_t, NDR) - 68usize];
    ["Offset of field: __Request__host_security_create_task_token_t::sec_token"]
        [::std::mem::offset_of!(__Request__host_security_create_task_token_t, sec_token) - 76usize];
    ["Offset of field: __Request__host_security_create_task_token_t::audit_token"][::std::mem::offset_of!(
        __Request__host_security_create_task_token_t,
        audit_token
    ) - 84usize];
    ["Offset of field: __Request__host_security_create_task_token_t::ledgersCnt"][::std::mem::offset_of!(
        __Request__host_security_create_task_token_t,
        ledgersCnt
    ) - 116usize];
    ["Offset of field: __Request__host_security_create_task_token_t::inherit_memory"][::std::mem::offset_of!(
        __Request__host_security_create_task_token_t,
        inherit_memory
    ) - 120usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_security_set_task_token_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub target_task: mach_msg_port_descriptor_t,
    pub host: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub sec_token: security_token_t,
    pub audit_token: audit_token_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__host_security_set_task_token_t"]
        [::std::mem::size_of::<__Request__host_security_set_task_token_t>() - 100usize];
    ["Alignment of __Request__host_security_set_task_token_t"]
        [::std::mem::align_of::<__Request__host_security_set_task_token_t>() - 4usize];
    ["Offset of field: __Request__host_security_set_task_token_t::Head"]
        [::std::mem::offset_of!(__Request__host_security_set_task_token_t, Head) - 0usize];
    ["Offset of field: __Request__host_security_set_task_token_t::msgh_body"]
        [::std::mem::offset_of!(__Request__host_security_set_task_token_t, msgh_body) - 24usize];
    ["Offset of field: __Request__host_security_set_task_token_t::target_task"]
        [::std::mem::offset_of!(__Request__host_security_set_task_token_t, target_task) - 28usize];
    ["Offset of field: __Request__host_security_set_task_token_t::host"]
        [::std::mem::offset_of!(__Request__host_security_set_task_token_t, host) - 40usize];
    ["Offset of field: __Request__host_security_set_task_token_t::NDR"]
        [::std::mem::offset_of!(__Request__host_security_set_task_token_t, NDR) - 52usize];
    ["Offset of field: __Request__host_security_set_task_token_t::sec_token"]
        [::std::mem::offset_of!(__Request__host_security_set_task_token_t, sec_token) - 60usize];
    ["Offset of field: __Request__host_security_set_task_token_t::audit_token"]
        [::std::mem::offset_of!(__Request__host_security_set_task_token_t, audit_token) - 68usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__host_security_subsystem {
    pub Request_host_security_create_task_token: __Request__host_security_create_task_token_t,
    pub Request_host_security_set_task_token: __Request__host_security_set_task_token_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __RequestUnion__host_security_subsystem"]
        [::std::mem::size_of::<__RequestUnion__host_security_subsystem>() - 124usize];
    ["Alignment of __RequestUnion__host_security_subsystem"]
        [::std::mem::align_of::<__RequestUnion__host_security_subsystem>() - 4usize];
    ["Offset of field: __RequestUnion__host_security_subsystem::Request_host_security_create_task_token"] [:: std :: mem :: offset_of ! (__RequestUnion__host_security_subsystem , Request_host_security_create_task_token) - 0usize] ;
    ["Offset of field: __RequestUnion__host_security_subsystem::Request_host_security_set_task_token"] [:: std :: mem :: offset_of ! (__RequestUnion__host_security_subsystem , Request_host_security_set_task_token) - 0usize] ;
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_security_create_task_token_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub child_task: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__host_security_create_task_token_t"]
        [::std::mem::size_of::<__Reply__host_security_create_task_token_t>() - 40usize];
    ["Alignment of __Reply__host_security_create_task_token_t"]
        [::std::mem::align_of::<__Reply__host_security_create_task_token_t>() - 4usize];
    ["Offset of field: __Reply__host_security_create_task_token_t::Head"]
        [::std::mem::offset_of!(__Reply__host_security_create_task_token_t, Head) - 0usize];
    ["Offset of field: __Reply__host_security_create_task_token_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__host_security_create_task_token_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__host_security_create_task_token_t::child_task"]
        [::std::mem::offset_of!(__Reply__host_security_create_task_token_t, child_task) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_security_set_task_token_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__host_security_set_task_token_t"]
        [::std::mem::size_of::<__Reply__host_security_set_task_token_t>() - 36usize];
    ["Alignment of __Reply__host_security_set_task_token_t"]
        [::std::mem::align_of::<__Reply__host_security_set_task_token_t>() - 4usize];
    ["Offset of field: __Reply__host_security_set_task_token_t::Head"]
        [::std::mem::offset_of!(__Reply__host_security_set_task_token_t, Head) - 0usize];
    ["Offset of field: __Reply__host_security_set_task_token_t::NDR"]
        [::std::mem::offset_of!(__Reply__host_security_set_task_token_t, NDR) - 24usize];
    ["Offset of field: __Reply__host_security_set_task_token_t::RetCode"]
        [::std::mem::offset_of!(__Reply__host_security_set_task_token_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__host_security_subsystem {
    pub Reply_host_security_create_task_token: __Reply__host_security_create_task_token_t,
    pub Reply_host_security_set_task_token: __Reply__host_security_set_task_token_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __ReplyUnion__host_security_subsystem"]
        [::std::mem::size_of::<__ReplyUnion__host_security_subsystem>() - 40usize];
    ["Alignment of __ReplyUnion__host_security_subsystem"]
        [::std::mem::align_of::<__ReplyUnion__host_security_subsystem>() - 4usize];
    ["Offset of field: __ReplyUnion__host_security_subsystem::Reply_host_security_create_task_token"] [:: std :: mem :: offset_of ! (__ReplyUnion__host_security_subsystem , Reply_host_security_create_task_token) - 0usize] ;
    ["Offset of field: __ReplyUnion__host_security_subsystem::Reply_host_security_set_task_token"] [:: std :: mem :: offset_of ! (__ReplyUnion__host_security_subsystem , Reply_host_security_set_task_token) - 0usize] ;
};
unsafe extern "C" {
    pub fn processor_start(processor: processor_t) -> kern_return_t;
}
unsafe extern "C" {
    pub fn processor_exit(processor: processor_t) -> kern_return_t;
}
unsafe extern "C" {
    pub fn processor_info(
        processor: processor_t,
        flavor: processor_flavor_t,
        host: *mut host_t,
        processor_info_out: processor_info_t,
        processor_info_outCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn processor_control(
        processor: processor_t,
        processor_cmd: processor_info_t,
        processor_cmdCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn processor_assign(
        processor: processor_t,
        new_set: processor_set_t,
        wait: boolean_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn processor_get_assignment(
        processor: processor_t,
        assigned_set: *mut processor_set_name_t,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_start_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__processor_start_t"]
        [::std::mem::size_of::<__Request__processor_start_t>() - 24usize];
    ["Alignment of __Request__processor_start_t"]
        [::std::mem::align_of::<__Request__processor_start_t>() - 4usize];
    ["Offset of field: __Request__processor_start_t::Head"]
        [::std::mem::offset_of!(__Request__processor_start_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_exit_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__processor_exit_t"]
        [::std::mem::size_of::<__Request__processor_exit_t>() - 24usize];
    ["Alignment of __Request__processor_exit_t"]
        [::std::mem::align_of::<__Request__processor_exit_t>() - 4usize];
    ["Offset of field: __Request__processor_exit_t::Head"]
        [::std::mem::offset_of!(__Request__processor_exit_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: processor_flavor_t,
    pub processor_info_outCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__processor_info_t"]
        [::std::mem::size_of::<__Request__processor_info_t>() - 40usize];
    ["Alignment of __Request__processor_info_t"]
        [::std::mem::align_of::<__Request__processor_info_t>() - 4usize];
    ["Offset of field: __Request__processor_info_t::Head"]
        [::std::mem::offset_of!(__Request__processor_info_t, Head) - 0usize];
    ["Offset of field: __Request__processor_info_t::NDR"]
        [::std::mem::offset_of!(__Request__processor_info_t, NDR) - 24usize];
    ["Offset of field: __Request__processor_info_t::flavor"]
        [::std::mem::offset_of!(__Request__processor_info_t, flavor) - 32usize];
    ["Offset of field: __Request__processor_info_t::processor_info_outCnt"]
        [::std::mem::offset_of!(__Request__processor_info_t, processor_info_outCnt) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_control_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub processor_cmdCnt: mach_msg_type_number_t,
    pub processor_cmd: [integer_t; 20usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__processor_control_t"]
        [::std::mem::size_of::<__Request__processor_control_t>() - 116usize];
    ["Alignment of __Request__processor_control_t"]
        [::std::mem::align_of::<__Request__processor_control_t>() - 4usize];
    ["Offset of field: __Request__processor_control_t::Head"]
        [::std::mem::offset_of!(__Request__processor_control_t, Head) - 0usize];
    ["Offset of field: __Request__processor_control_t::NDR"]
        [::std::mem::offset_of!(__Request__processor_control_t, NDR) - 24usize];
    ["Offset of field: __Request__processor_control_t::processor_cmdCnt"]
        [::std::mem::offset_of!(__Request__processor_control_t, processor_cmdCnt) - 32usize];
    ["Offset of field: __Request__processor_control_t::processor_cmd"]
        [::std::mem::offset_of!(__Request__processor_control_t, processor_cmd) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_assign_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_set: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub wait: boolean_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__processor_assign_t"]
        [::std::mem::size_of::<__Request__processor_assign_t>() - 52usize];
    ["Alignment of __Request__processor_assign_t"]
        [::std::mem::align_of::<__Request__processor_assign_t>() - 4usize];
    ["Offset of field: __Request__processor_assign_t::Head"]
        [::std::mem::offset_of!(__Request__processor_assign_t, Head) - 0usize];
    ["Offset of field: __Request__processor_assign_t::msgh_body"]
        [::std::mem::offset_of!(__Request__processor_assign_t, msgh_body) - 24usize];
    ["Offset of field: __Request__processor_assign_t::new_set"]
        [::std::mem::offset_of!(__Request__processor_assign_t, new_set) - 28usize];
    ["Offset of field: __Request__processor_assign_t::NDR"]
        [::std::mem::offset_of!(__Request__processor_assign_t, NDR) - 40usize];
    ["Offset of field: __Request__processor_assign_t::wait"]
        [::std::mem::offset_of!(__Request__processor_assign_t, wait) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_get_assignment_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__processor_get_assignment_t"]
        [::std::mem::size_of::<__Request__processor_get_assignment_t>() - 24usize];
    ["Alignment of __Request__processor_get_assignment_t"]
        [::std::mem::align_of::<__Request__processor_get_assignment_t>() - 4usize];
    ["Offset of field: __Request__processor_get_assignment_t::Head"]
        [::std::mem::offset_of!(__Request__processor_get_assignment_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__processor_subsystem {
    pub Request_processor_start: __Request__processor_start_t,
    pub Request_processor_exit: __Request__processor_exit_t,
    pub Request_processor_info: __Request__processor_info_t,
    pub Request_processor_control: __Request__processor_control_t,
    pub Request_processor_assign: __Request__processor_assign_t,
    pub Request_processor_get_assignment: __Request__processor_get_assignment_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __RequestUnion__processor_subsystem"]
        [::std::mem::size_of::<__RequestUnion__processor_subsystem>() - 116usize];
    ["Alignment of __RequestUnion__processor_subsystem"]
        [::std::mem::align_of::<__RequestUnion__processor_subsystem>() - 4usize];
    ["Offset of field: __RequestUnion__processor_subsystem::Request_processor_start"][::std::mem::offset_of!(
        __RequestUnion__processor_subsystem,
        Request_processor_start
    ) - 0usize];
    ["Offset of field: __RequestUnion__processor_subsystem::Request_processor_exit"][::std::mem::offset_of!(
        __RequestUnion__processor_subsystem,
        Request_processor_exit
    ) - 0usize];
    ["Offset of field: __RequestUnion__processor_subsystem::Request_processor_info"][::std::mem::offset_of!(
        __RequestUnion__processor_subsystem,
        Request_processor_info
    ) - 0usize];
    ["Offset of field: __RequestUnion__processor_subsystem::Request_processor_control"][::std::mem::offset_of!(
        __RequestUnion__processor_subsystem,
        Request_processor_control
    ) - 0usize];
    ["Offset of field: __RequestUnion__processor_subsystem::Request_processor_assign"][::std::mem::offset_of!(
        __RequestUnion__processor_subsystem,
        Request_processor_assign
    ) - 0usize];
    ["Offset of field: __RequestUnion__processor_subsystem::Request_processor_get_assignment"][::std::mem::offset_of!(
        __RequestUnion__processor_subsystem,
        Request_processor_get_assignment
    )
        - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_start_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__processor_start_t"]
        [::std::mem::size_of::<__Reply__processor_start_t>() - 36usize];
    ["Alignment of __Reply__processor_start_t"]
        [::std::mem::align_of::<__Reply__processor_start_t>() - 4usize];
    ["Offset of field: __Reply__processor_start_t::Head"]
        [::std::mem::offset_of!(__Reply__processor_start_t, Head) - 0usize];
    ["Offset of field: __Reply__processor_start_t::NDR"]
        [::std::mem::offset_of!(__Reply__processor_start_t, NDR) - 24usize];
    ["Offset of field: __Reply__processor_start_t::RetCode"]
        [::std::mem::offset_of!(__Reply__processor_start_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_exit_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__processor_exit_t"]
        [::std::mem::size_of::<__Reply__processor_exit_t>() - 36usize];
    ["Alignment of __Reply__processor_exit_t"]
        [::std::mem::align_of::<__Reply__processor_exit_t>() - 4usize];
    ["Offset of field: __Reply__processor_exit_t::Head"]
        [::std::mem::offset_of!(__Reply__processor_exit_t, Head) - 0usize];
    ["Offset of field: __Reply__processor_exit_t::NDR"]
        [::std::mem::offset_of!(__Reply__processor_exit_t, NDR) - 24usize];
    ["Offset of field: __Reply__processor_exit_t::RetCode"]
        [::std::mem::offset_of!(__Reply__processor_exit_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub host: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub processor_info_outCnt: mach_msg_type_number_t,
    pub processor_info_out: [integer_t; 20usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__processor_info_t"]
        [::std::mem::size_of::<__Reply__processor_info_t>() - 132usize];
    ["Alignment of __Reply__processor_info_t"]
        [::std::mem::align_of::<__Reply__processor_info_t>() - 4usize];
    ["Offset of field: __Reply__processor_info_t::Head"]
        [::std::mem::offset_of!(__Reply__processor_info_t, Head) - 0usize];
    ["Offset of field: __Reply__processor_info_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__processor_info_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__processor_info_t::host"]
        [::std::mem::offset_of!(__Reply__processor_info_t, host) - 28usize];
    ["Offset of field: __Reply__processor_info_t::NDR"]
        [::std::mem::offset_of!(__Reply__processor_info_t, NDR) - 40usize];
    ["Offset of field: __Reply__processor_info_t::processor_info_outCnt"]
        [::std::mem::offset_of!(__Reply__processor_info_t, processor_info_outCnt) - 48usize];
    ["Offset of field: __Reply__processor_info_t::processor_info_out"]
        [::std::mem::offset_of!(__Reply__processor_info_t, processor_info_out) - 52usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_control_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__processor_control_t"]
        [::std::mem::size_of::<__Reply__processor_control_t>() - 36usize];
    ["Alignment of __Reply__processor_control_t"]
        [::std::mem::align_of::<__Reply__processor_control_t>() - 4usize];
    ["Offset of field: __Reply__processor_control_t::Head"]
        [::std::mem::offset_of!(__Reply__processor_control_t, Head) - 0usize];
    ["Offset of field: __Reply__processor_control_t::NDR"]
        [::std::mem::offset_of!(__Reply__processor_control_t, NDR) - 24usize];
    ["Offset of field: __Reply__processor_control_t::RetCode"]
        [::std::mem::offset_of!(__Reply__processor_control_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_assign_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__processor_assign_t"]
        [::std::mem::size_of::<__Reply__processor_assign_t>() - 36usize];
    ["Alignment of __Reply__processor_assign_t"]
        [::std::mem::align_of::<__Reply__processor_assign_t>() - 4usize];
    ["Offset of field: __Reply__processor_assign_t::Head"]
        [::std::mem::offset_of!(__Reply__processor_assign_t, Head) - 0usize];
    ["Offset of field: __Reply__processor_assign_t::NDR"]
        [::std::mem::offset_of!(__Reply__processor_assign_t, NDR) - 24usize];
    ["Offset of field: __Reply__processor_assign_t::RetCode"]
        [::std::mem::offset_of!(__Reply__processor_assign_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_get_assignment_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub assigned_set: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__processor_get_assignment_t"]
        [::std::mem::size_of::<__Reply__processor_get_assignment_t>() - 40usize];
    ["Alignment of __Reply__processor_get_assignment_t"]
        [::std::mem::align_of::<__Reply__processor_get_assignment_t>() - 4usize];
    ["Offset of field: __Reply__processor_get_assignment_t::Head"]
        [::std::mem::offset_of!(__Reply__processor_get_assignment_t, Head) - 0usize];
    ["Offset of field: __Reply__processor_get_assignment_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__processor_get_assignment_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__processor_get_assignment_t::assigned_set"]
        [::std::mem::offset_of!(__Reply__processor_get_assignment_t, assigned_set) - 28usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__processor_subsystem {
    pub Reply_processor_start: __Reply__processor_start_t,
    pub Reply_processor_exit: __Reply__processor_exit_t,
    pub Reply_processor_info: __Reply__processor_info_t,
    pub Reply_processor_control: __Reply__processor_control_t,
    pub Reply_processor_assign: __Reply__processor_assign_t,
    pub Reply_processor_get_assignment: __Reply__processor_get_assignment_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __ReplyUnion__processor_subsystem"]
        [::std::mem::size_of::<__ReplyUnion__processor_subsystem>() - 132usize];
    ["Alignment of __ReplyUnion__processor_subsystem"]
        [::std::mem::align_of::<__ReplyUnion__processor_subsystem>() - 4usize];
    ["Offset of field: __ReplyUnion__processor_subsystem::Reply_processor_start"]
        [::std::mem::offset_of!(__ReplyUnion__processor_subsystem, Reply_processor_start) - 0usize];
    ["Offset of field: __ReplyUnion__processor_subsystem::Reply_processor_exit"]
        [::std::mem::offset_of!(__ReplyUnion__processor_subsystem, Reply_processor_exit) - 0usize];
    ["Offset of field: __ReplyUnion__processor_subsystem::Reply_processor_info"]
        [::std::mem::offset_of!(__ReplyUnion__processor_subsystem, Reply_processor_info) - 0usize];
    ["Offset of field: __ReplyUnion__processor_subsystem::Reply_processor_control"][::std::mem::offset_of!(
        __ReplyUnion__processor_subsystem,
        Reply_processor_control
    ) - 0usize];
    ["Offset of field: __ReplyUnion__processor_subsystem::Reply_processor_assign"][::std::mem::offset_of!(
        __ReplyUnion__processor_subsystem,
        Reply_processor_assign
    ) - 0usize];
    ["Offset of field: __ReplyUnion__processor_subsystem::Reply_processor_get_assignment"][::std::mem::offset_of!(
        __ReplyUnion__processor_subsystem,
        Reply_processor_get_assignment
    )
        - 0usize];
};
unsafe extern "C" {
    pub fn processor_set_statistics(
        pset: processor_set_name_t,
        flavor: processor_set_flavor_t,
        info_out: processor_set_info_t,
        info_outCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn processor_set_destroy(set: processor_set_t) -> kern_return_t;
}
unsafe extern "C" {
    pub fn processor_set_max_priority(
        processor_set: processor_set_t,
        max_priority: ::std::os::raw::c_int,
        change_threads: boolean_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn processor_set_policy_enable(
        processor_set: processor_set_t,
        policy: ::std::os::raw::c_int,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn processor_set_policy_disable(
        processor_set: processor_set_t,
        policy: ::std::os::raw::c_int,
        change_threads: boolean_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn processor_set_tasks(
        processor_set: processor_set_t,
        task_list: *mut task_array_t,
        task_listCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn processor_set_threads(
        processor_set: processor_set_t,
        thread_list: *mut thread_act_array_t,
        thread_listCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn processor_set_policy_control(
        pset: processor_set_t,
        flavor: processor_set_flavor_t,
        policy_info: processor_set_info_t,
        policy_infoCnt: mach_msg_type_number_t,
        change: boolean_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn processor_set_stack_usage(
        pset: processor_set_t,
        ltotal: *mut ::std::os::raw::c_uint,
        space: *mut vm_size_t,
        resident: *mut vm_size_t,
        maxusage: *mut vm_size_t,
        maxstack: *mut vm_offset_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn processor_set_info(
        set_name: processor_set_name_t,
        flavor: ::std::os::raw::c_int,
        host: *mut host_t,
        info_out: processor_set_info_t,
        info_outCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn processor_set_tasks_with_flavor(
        processor_set: processor_set_t,
        flavor: mach_task_flavor_t,
        task_list: *mut task_array_t,
        task_listCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_set_statistics_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: processor_set_flavor_t,
    pub info_outCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__processor_set_statistics_t"]
        [::std::mem::size_of::<__Request__processor_set_statistics_t>() - 40usize];
    ["Alignment of __Request__processor_set_statistics_t"]
        [::std::mem::align_of::<__Request__processor_set_statistics_t>() - 4usize];
    ["Offset of field: __Request__processor_set_statistics_t::Head"]
        [::std::mem::offset_of!(__Request__processor_set_statistics_t, Head) - 0usize];
    ["Offset of field: __Request__processor_set_statistics_t::NDR"]
        [::std::mem::offset_of!(__Request__processor_set_statistics_t, NDR) - 24usize];
    ["Offset of field: __Request__processor_set_statistics_t::flavor"]
        [::std::mem::offset_of!(__Request__processor_set_statistics_t, flavor) - 32usize];
    ["Offset of field: __Request__processor_set_statistics_t::info_outCnt"]
        [::std::mem::offset_of!(__Request__processor_set_statistics_t, info_outCnt) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_set_destroy_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__processor_set_destroy_t"]
        [::std::mem::size_of::<__Request__processor_set_destroy_t>() - 24usize];
    ["Alignment of __Request__processor_set_destroy_t"]
        [::std::mem::align_of::<__Request__processor_set_destroy_t>() - 4usize];
    ["Offset of field: __Request__processor_set_destroy_t::Head"]
        [::std::mem::offset_of!(__Request__processor_set_destroy_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_set_max_priority_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub max_priority: ::std::os::raw::c_int,
    pub change_threads: boolean_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__processor_set_max_priority_t"]
        [::std::mem::size_of::<__Request__processor_set_max_priority_t>() - 40usize];
    ["Alignment of __Request__processor_set_max_priority_t"]
        [::std::mem::align_of::<__Request__processor_set_max_priority_t>() - 4usize];
    ["Offset of field: __Request__processor_set_max_priority_t::Head"]
        [::std::mem::offset_of!(__Request__processor_set_max_priority_t, Head) - 0usize];
    ["Offset of field: __Request__processor_set_max_priority_t::NDR"]
        [::std::mem::offset_of!(__Request__processor_set_max_priority_t, NDR) - 24usize];
    ["Offset of field: __Request__processor_set_max_priority_t::max_priority"]
        [::std::mem::offset_of!(__Request__processor_set_max_priority_t, max_priority) - 32usize];
    ["Offset of field: __Request__processor_set_max_priority_t::change_threads"]
        [::std::mem::offset_of!(__Request__processor_set_max_priority_t, change_threads) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_set_policy_enable_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub policy: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__processor_set_policy_enable_t"]
        [::std::mem::size_of::<__Request__processor_set_policy_enable_t>() - 36usize];
    ["Alignment of __Request__processor_set_policy_enable_t"]
        [::std::mem::align_of::<__Request__processor_set_policy_enable_t>() - 4usize];
    ["Offset of field: __Request__processor_set_policy_enable_t::Head"]
        [::std::mem::offset_of!(__Request__processor_set_policy_enable_t, Head) - 0usize];
    ["Offset of field: __Request__processor_set_policy_enable_t::NDR"]
        [::std::mem::offset_of!(__Request__processor_set_policy_enable_t, NDR) - 24usize];
    ["Offset of field: __Request__processor_set_policy_enable_t::policy"]
        [::std::mem::offset_of!(__Request__processor_set_policy_enable_t, policy) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_set_policy_disable_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub policy: ::std::os::raw::c_int,
    pub change_threads: boolean_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__processor_set_policy_disable_t"]
        [::std::mem::size_of::<__Request__processor_set_policy_disable_t>() - 40usize];
    ["Alignment of __Request__processor_set_policy_disable_t"]
        [::std::mem::align_of::<__Request__processor_set_policy_disable_t>() - 4usize];
    ["Offset of field: __Request__processor_set_policy_disable_t::Head"]
        [::std::mem::offset_of!(__Request__processor_set_policy_disable_t, Head) - 0usize];
    ["Offset of field: __Request__processor_set_policy_disable_t::NDR"]
        [::std::mem::offset_of!(__Request__processor_set_policy_disable_t, NDR) - 24usize];
    ["Offset of field: __Request__processor_set_policy_disable_t::policy"]
        [::std::mem::offset_of!(__Request__processor_set_policy_disable_t, policy) - 32usize];
    ["Offset of field: __Request__processor_set_policy_disable_t::change_threads"][::std::mem::offset_of!(
        __Request__processor_set_policy_disable_t,
        change_threads
    ) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_set_tasks_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__processor_set_tasks_t"]
        [::std::mem::size_of::<__Request__processor_set_tasks_t>() - 24usize];
    ["Alignment of __Request__processor_set_tasks_t"]
        [::std::mem::align_of::<__Request__processor_set_tasks_t>() - 4usize];
    ["Offset of field: __Request__processor_set_tasks_t::Head"]
        [::std::mem::offset_of!(__Request__processor_set_tasks_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_set_threads_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__processor_set_threads_t"]
        [::std::mem::size_of::<__Request__processor_set_threads_t>() - 24usize];
    ["Alignment of __Request__processor_set_threads_t"]
        [::std::mem::align_of::<__Request__processor_set_threads_t>() - 4usize];
    ["Offset of field: __Request__processor_set_threads_t::Head"]
        [::std::mem::offset_of!(__Request__processor_set_threads_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_set_policy_control_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: processor_set_flavor_t,
    pub policy_infoCnt: mach_msg_type_number_t,
    pub policy_info: [integer_t; 5usize],
    pub change: boolean_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__processor_set_policy_control_t"]
        [::std::mem::size_of::<__Request__processor_set_policy_control_t>() - 64usize];
    ["Alignment of __Request__processor_set_policy_control_t"]
        [::std::mem::align_of::<__Request__processor_set_policy_control_t>() - 4usize];
    ["Offset of field: __Request__processor_set_policy_control_t::Head"]
        [::std::mem::offset_of!(__Request__processor_set_policy_control_t, Head) - 0usize];
    ["Offset of field: __Request__processor_set_policy_control_t::NDR"]
        [::std::mem::offset_of!(__Request__processor_set_policy_control_t, NDR) - 24usize];
    ["Offset of field: __Request__processor_set_policy_control_t::flavor"]
        [::std::mem::offset_of!(__Request__processor_set_policy_control_t, flavor) - 32usize];
    ["Offset of field: __Request__processor_set_policy_control_t::policy_infoCnt"][::std::mem::offset_of!(
        __Request__processor_set_policy_control_t,
        policy_infoCnt
    ) - 36usize];
    ["Offset of field: __Request__processor_set_policy_control_t::policy_info"]
        [::std::mem::offset_of!(__Request__processor_set_policy_control_t, policy_info) - 40usize];
    ["Offset of field: __Request__processor_set_policy_control_t::change"]
        [::std::mem::offset_of!(__Request__processor_set_policy_control_t, change) - 60usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_set_stack_usage_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__processor_set_stack_usage_t"]
        [::std::mem::size_of::<__Request__processor_set_stack_usage_t>() - 24usize];
    ["Alignment of __Request__processor_set_stack_usage_t"]
        [::std::mem::align_of::<__Request__processor_set_stack_usage_t>() - 4usize];
    ["Offset of field: __Request__processor_set_stack_usage_t::Head"]
        [::std::mem::offset_of!(__Request__processor_set_stack_usage_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_set_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: ::std::os::raw::c_int,
    pub info_outCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__processor_set_info_t"]
        [::std::mem::size_of::<__Request__processor_set_info_t>() - 40usize];
    ["Alignment of __Request__processor_set_info_t"]
        [::std::mem::align_of::<__Request__processor_set_info_t>() - 4usize];
    ["Offset of field: __Request__processor_set_info_t::Head"]
        [::std::mem::offset_of!(__Request__processor_set_info_t, Head) - 0usize];
    ["Offset of field: __Request__processor_set_info_t::NDR"]
        [::std::mem::offset_of!(__Request__processor_set_info_t, NDR) - 24usize];
    ["Offset of field: __Request__processor_set_info_t::flavor"]
        [::std::mem::offset_of!(__Request__processor_set_info_t, flavor) - 32usize];
    ["Offset of field: __Request__processor_set_info_t::info_outCnt"]
        [::std::mem::offset_of!(__Request__processor_set_info_t, info_outCnt) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_set_tasks_with_flavor_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: mach_task_flavor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__processor_set_tasks_with_flavor_t"]
        [::std::mem::size_of::<__Request__processor_set_tasks_with_flavor_t>() - 36usize];
    ["Alignment of __Request__processor_set_tasks_with_flavor_t"]
        [::std::mem::align_of::<__Request__processor_set_tasks_with_flavor_t>() - 4usize];
    ["Offset of field: __Request__processor_set_tasks_with_flavor_t::Head"]
        [::std::mem::offset_of!(__Request__processor_set_tasks_with_flavor_t, Head) - 0usize];
    ["Offset of field: __Request__processor_set_tasks_with_flavor_t::NDR"]
        [::std::mem::offset_of!(__Request__processor_set_tasks_with_flavor_t, NDR) - 24usize];
    ["Offset of field: __Request__processor_set_tasks_with_flavor_t::flavor"]
        [::std::mem::offset_of!(__Request__processor_set_tasks_with_flavor_t, flavor) - 32usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__processor_set_subsystem {
    pub Request_processor_set_statistics: __Request__processor_set_statistics_t,
    pub Request_processor_set_destroy: __Request__processor_set_destroy_t,
    pub Request_processor_set_max_priority: __Request__processor_set_max_priority_t,
    pub Request_processor_set_policy_enable: __Request__processor_set_policy_enable_t,
    pub Request_processor_set_policy_disable: __Request__processor_set_policy_disable_t,
    pub Request_processor_set_tasks: __Request__processor_set_tasks_t,
    pub Request_processor_set_threads: __Request__processor_set_threads_t,
    pub Request_processor_set_policy_control: __Request__processor_set_policy_control_t,
    pub Request_processor_set_stack_usage: __Request__processor_set_stack_usage_t,
    pub Request_processor_set_info: __Request__processor_set_info_t,
    pub Request_processor_set_tasks_with_flavor: __Request__processor_set_tasks_with_flavor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __RequestUnion__processor_set_subsystem"]
        [::std::mem::size_of::<__RequestUnion__processor_set_subsystem>() - 64usize];
    ["Alignment of __RequestUnion__processor_set_subsystem"]
        [::std::mem::align_of::<__RequestUnion__processor_set_subsystem>() - 4usize];
    ["Offset of field: __RequestUnion__processor_set_subsystem::Request_processor_set_statistics"] [:: std :: mem :: offset_of ! (__RequestUnion__processor_set_subsystem , Request_processor_set_statistics) - 0usize] ;
    ["Offset of field: __RequestUnion__processor_set_subsystem::Request_processor_set_destroy"][::std::mem::offset_of!(
        __RequestUnion__processor_set_subsystem,
        Request_processor_set_destroy
    )
        - 0usize];
    ["Offset of field: __RequestUnion__processor_set_subsystem::Request_processor_set_max_priority"] [:: std :: mem :: offset_of ! (__RequestUnion__processor_set_subsystem , Request_processor_set_max_priority) - 0usize] ;
    ["Offset of field: __RequestUnion__processor_set_subsystem::Request_processor_set_policy_enable"] [:: std :: mem :: offset_of ! (__RequestUnion__processor_set_subsystem , Request_processor_set_policy_enable) - 0usize] ;
    ["Offset of field: __RequestUnion__processor_set_subsystem::Request_processor_set_policy_disable"] [:: std :: mem :: offset_of ! (__RequestUnion__processor_set_subsystem , Request_processor_set_policy_disable) - 0usize] ;
    ["Offset of field: __RequestUnion__processor_set_subsystem::Request_processor_set_tasks"][::std::mem::offset_of!(
        __RequestUnion__processor_set_subsystem,
        Request_processor_set_tasks
    )
        - 0usize];
    ["Offset of field: __RequestUnion__processor_set_subsystem::Request_processor_set_threads"][::std::mem::offset_of!(
        __RequestUnion__processor_set_subsystem,
        Request_processor_set_threads
    )
        - 0usize];
    ["Offset of field: __RequestUnion__processor_set_subsystem::Request_processor_set_policy_control"] [:: std :: mem :: offset_of ! (__RequestUnion__processor_set_subsystem , Request_processor_set_policy_control) - 0usize] ;
    ["Offset of field: __RequestUnion__processor_set_subsystem::Request_processor_set_stack_usage"] [:: std :: mem :: offset_of ! (__RequestUnion__processor_set_subsystem , Request_processor_set_stack_usage) - 0usize] ;
    ["Offset of field: __RequestUnion__processor_set_subsystem::Request_processor_set_info"][::std::mem::offset_of!(
        __RequestUnion__processor_set_subsystem,
        Request_processor_set_info
    )
        - 0usize];
    ["Offset of field: __RequestUnion__processor_set_subsystem::Request_processor_set_tasks_with_flavor"] [:: std :: mem :: offset_of ! (__RequestUnion__processor_set_subsystem , Request_processor_set_tasks_with_flavor) - 0usize] ;
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_set_statistics_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub info_outCnt: mach_msg_type_number_t,
    pub info_out: [integer_t; 5usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__processor_set_statistics_t"]
        [::std::mem::size_of::<__Reply__processor_set_statistics_t>() - 60usize];
    ["Alignment of __Reply__processor_set_statistics_t"]
        [::std::mem::align_of::<__Reply__processor_set_statistics_t>() - 4usize];
    ["Offset of field: __Reply__processor_set_statistics_t::Head"]
        [::std::mem::offset_of!(__Reply__processor_set_statistics_t, Head) - 0usize];
    ["Offset of field: __Reply__processor_set_statistics_t::NDR"]
        [::std::mem::offset_of!(__Reply__processor_set_statistics_t, NDR) - 24usize];
    ["Offset of field: __Reply__processor_set_statistics_t::RetCode"]
        [::std::mem::offset_of!(__Reply__processor_set_statistics_t, RetCode) - 32usize];
    ["Offset of field: __Reply__processor_set_statistics_t::info_outCnt"]
        [::std::mem::offset_of!(__Reply__processor_set_statistics_t, info_outCnt) - 36usize];
    ["Offset of field: __Reply__processor_set_statistics_t::info_out"]
        [::std::mem::offset_of!(__Reply__processor_set_statistics_t, info_out) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_set_destroy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__processor_set_destroy_t"]
        [::std::mem::size_of::<__Reply__processor_set_destroy_t>() - 36usize];
    ["Alignment of __Reply__processor_set_destroy_t"]
        [::std::mem::align_of::<__Reply__processor_set_destroy_t>() - 4usize];
    ["Offset of field: __Reply__processor_set_destroy_t::Head"]
        [::std::mem::offset_of!(__Reply__processor_set_destroy_t, Head) - 0usize];
    ["Offset of field: __Reply__processor_set_destroy_t::NDR"]
        [::std::mem::offset_of!(__Reply__processor_set_destroy_t, NDR) - 24usize];
    ["Offset of field: __Reply__processor_set_destroy_t::RetCode"]
        [::std::mem::offset_of!(__Reply__processor_set_destroy_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_set_max_priority_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__processor_set_max_priority_t"]
        [::std::mem::size_of::<__Reply__processor_set_max_priority_t>() - 36usize];
    ["Alignment of __Reply__processor_set_max_priority_t"]
        [::std::mem::align_of::<__Reply__processor_set_max_priority_t>() - 4usize];
    ["Offset of field: __Reply__processor_set_max_priority_t::Head"]
        [::std::mem::offset_of!(__Reply__processor_set_max_priority_t, Head) - 0usize];
    ["Offset of field: __Reply__processor_set_max_priority_t::NDR"]
        [::std::mem::offset_of!(__Reply__processor_set_max_priority_t, NDR) - 24usize];
    ["Offset of field: __Reply__processor_set_max_priority_t::RetCode"]
        [::std::mem::offset_of!(__Reply__processor_set_max_priority_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_set_policy_enable_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__processor_set_policy_enable_t"]
        [::std::mem::size_of::<__Reply__processor_set_policy_enable_t>() - 36usize];
    ["Alignment of __Reply__processor_set_policy_enable_t"]
        [::std::mem::align_of::<__Reply__processor_set_policy_enable_t>() - 4usize];
    ["Offset of field: __Reply__processor_set_policy_enable_t::Head"]
        [::std::mem::offset_of!(__Reply__processor_set_policy_enable_t, Head) - 0usize];
    ["Offset of field: __Reply__processor_set_policy_enable_t::NDR"]
        [::std::mem::offset_of!(__Reply__processor_set_policy_enable_t, NDR) - 24usize];
    ["Offset of field: __Reply__processor_set_policy_enable_t::RetCode"]
        [::std::mem::offset_of!(__Reply__processor_set_policy_enable_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_set_policy_disable_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__processor_set_policy_disable_t"]
        [::std::mem::size_of::<__Reply__processor_set_policy_disable_t>() - 36usize];
    ["Alignment of __Reply__processor_set_policy_disable_t"]
        [::std::mem::align_of::<__Reply__processor_set_policy_disable_t>() - 4usize];
    ["Offset of field: __Reply__processor_set_policy_disable_t::Head"]
        [::std::mem::offset_of!(__Reply__processor_set_policy_disable_t, Head) - 0usize];
    ["Offset of field: __Reply__processor_set_policy_disable_t::NDR"]
        [::std::mem::offset_of!(__Reply__processor_set_policy_disable_t, NDR) - 24usize];
    ["Offset of field: __Reply__processor_set_policy_disable_t::RetCode"]
        [::std::mem::offset_of!(__Reply__processor_set_policy_disable_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_set_tasks_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub task_list: mach_msg_ool_ports_descriptor_t,
    pub NDR: NDR_record_t,
    pub task_listCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__processor_set_tasks_t"]
        [::std::mem::size_of::<__Reply__processor_set_tasks_t>() - 56usize];
    ["Alignment of __Reply__processor_set_tasks_t"]
        [::std::mem::align_of::<__Reply__processor_set_tasks_t>() - 4usize];
    ["Offset of field: __Reply__processor_set_tasks_t::Head"]
        [::std::mem::offset_of!(__Reply__processor_set_tasks_t, Head) - 0usize];
    ["Offset of field: __Reply__processor_set_tasks_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__processor_set_tasks_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__processor_set_tasks_t::task_list"]
        [::std::mem::offset_of!(__Reply__processor_set_tasks_t, task_list) - 28usize];
    ["Offset of field: __Reply__processor_set_tasks_t::NDR"]
        [::std::mem::offset_of!(__Reply__processor_set_tasks_t, NDR) - 44usize];
    ["Offset of field: __Reply__processor_set_tasks_t::task_listCnt"]
        [::std::mem::offset_of!(__Reply__processor_set_tasks_t, task_listCnt) - 52usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_set_threads_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub thread_list: mach_msg_ool_ports_descriptor_t,
    pub NDR: NDR_record_t,
    pub thread_listCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__processor_set_threads_t"]
        [::std::mem::size_of::<__Reply__processor_set_threads_t>() - 56usize];
    ["Alignment of __Reply__processor_set_threads_t"]
        [::std::mem::align_of::<__Reply__processor_set_threads_t>() - 4usize];
    ["Offset of field: __Reply__processor_set_threads_t::Head"]
        [::std::mem::offset_of!(__Reply__processor_set_threads_t, Head) - 0usize];
    ["Offset of field: __Reply__processor_set_threads_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__processor_set_threads_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__processor_set_threads_t::thread_list"]
        [::std::mem::offset_of!(__Reply__processor_set_threads_t, thread_list) - 28usize];
    ["Offset of field: __Reply__processor_set_threads_t::NDR"]
        [::std::mem::offset_of!(__Reply__processor_set_threads_t, NDR) - 44usize];
    ["Offset of field: __Reply__processor_set_threads_t::thread_listCnt"]
        [::std::mem::offset_of!(__Reply__processor_set_threads_t, thread_listCnt) - 52usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_set_policy_control_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__processor_set_policy_control_t"]
        [::std::mem::size_of::<__Reply__processor_set_policy_control_t>() - 36usize];
    ["Alignment of __Reply__processor_set_policy_control_t"]
        [::std::mem::align_of::<__Reply__processor_set_policy_control_t>() - 4usize];
    ["Offset of field: __Reply__processor_set_policy_control_t::Head"]
        [::std::mem::offset_of!(__Reply__processor_set_policy_control_t, Head) - 0usize];
    ["Offset of field: __Reply__processor_set_policy_control_t::NDR"]
        [::std::mem::offset_of!(__Reply__processor_set_policy_control_t, NDR) - 24usize];
    ["Offset of field: __Reply__processor_set_policy_control_t::RetCode"]
        [::std::mem::offset_of!(__Reply__processor_set_policy_control_t, RetCode) - 32usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_set_stack_usage_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub ltotal: ::std::os::raw::c_uint,
    pub space: vm_size_t,
    pub resident: vm_size_t,
    pub maxusage: vm_size_t,
    pub maxstack: vm_offset_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__processor_set_stack_usage_t"]
        [::std::mem::size_of::<__Reply__processor_set_stack_usage_t>() - 72usize];
    ["Alignment of __Reply__processor_set_stack_usage_t"]
        [::std::mem::align_of::<__Reply__processor_set_stack_usage_t>() - 4usize];
    ["Offset of field: __Reply__processor_set_stack_usage_t::Head"]
        [::std::mem::offset_of!(__Reply__processor_set_stack_usage_t, Head) - 0usize];
    ["Offset of field: __Reply__processor_set_stack_usage_t::NDR"]
        [::std::mem::offset_of!(__Reply__processor_set_stack_usage_t, NDR) - 24usize];
    ["Offset of field: __Reply__processor_set_stack_usage_t::RetCode"]
        [::std::mem::offset_of!(__Reply__processor_set_stack_usage_t, RetCode) - 32usize];
    ["Offset of field: __Reply__processor_set_stack_usage_t::ltotal"]
        [::std::mem::offset_of!(__Reply__processor_set_stack_usage_t, ltotal) - 36usize];
    ["Offset of field: __Reply__processor_set_stack_usage_t::space"]
        [::std::mem::offset_of!(__Reply__processor_set_stack_usage_t, space) - 40usize];
    ["Offset of field: __Reply__processor_set_stack_usage_t::resident"]
        [::std::mem::offset_of!(__Reply__processor_set_stack_usage_t, resident) - 48usize];
    ["Offset of field: __Reply__processor_set_stack_usage_t::maxusage"]
        [::std::mem::offset_of!(__Reply__processor_set_stack_usage_t, maxusage) - 56usize];
    ["Offset of field: __Reply__processor_set_stack_usage_t::maxstack"]
        [::std::mem::offset_of!(__Reply__processor_set_stack_usage_t, maxstack) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_set_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub host: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub info_outCnt: mach_msg_type_number_t,
    pub info_out: [integer_t; 5usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__processor_set_info_t"]
        [::std::mem::size_of::<__Reply__processor_set_info_t>() - 72usize];
    ["Alignment of __Reply__processor_set_info_t"]
        [::std::mem::align_of::<__Reply__processor_set_info_t>() - 4usize];
    ["Offset of field: __Reply__processor_set_info_t::Head"]
        [::std::mem::offset_of!(__Reply__processor_set_info_t, Head) - 0usize];
    ["Offset of field: __Reply__processor_set_info_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__processor_set_info_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__processor_set_info_t::host"]
        [::std::mem::offset_of!(__Reply__processor_set_info_t, host) - 28usize];
    ["Offset of field: __Reply__processor_set_info_t::NDR"]
        [::std::mem::offset_of!(__Reply__processor_set_info_t, NDR) - 40usize];
    ["Offset of field: __Reply__processor_set_info_t::info_outCnt"]
        [::std::mem::offset_of!(__Reply__processor_set_info_t, info_outCnt) - 48usize];
    ["Offset of field: __Reply__processor_set_info_t::info_out"]
        [::std::mem::offset_of!(__Reply__processor_set_info_t, info_out) - 52usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_set_tasks_with_flavor_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub task_list: mach_msg_ool_ports_descriptor_t,
    pub NDR: NDR_record_t,
    pub task_listCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__processor_set_tasks_with_flavor_t"]
        [::std::mem::size_of::<__Reply__processor_set_tasks_with_flavor_t>() - 56usize];
    ["Alignment of __Reply__processor_set_tasks_with_flavor_t"]
        [::std::mem::align_of::<__Reply__processor_set_tasks_with_flavor_t>() - 4usize];
    ["Offset of field: __Reply__processor_set_tasks_with_flavor_t::Head"]
        [::std::mem::offset_of!(__Reply__processor_set_tasks_with_flavor_t, Head) - 0usize];
    ["Offset of field: __Reply__processor_set_tasks_with_flavor_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__processor_set_tasks_with_flavor_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__processor_set_tasks_with_flavor_t::task_list"]
        [::std::mem::offset_of!(__Reply__processor_set_tasks_with_flavor_t, task_list) - 28usize];
    ["Offset of field: __Reply__processor_set_tasks_with_flavor_t::NDR"]
        [::std::mem::offset_of!(__Reply__processor_set_tasks_with_flavor_t, NDR) - 44usize];
    ["Offset of field: __Reply__processor_set_tasks_with_flavor_t::task_listCnt"][::std::mem::offset_of!(
        __Reply__processor_set_tasks_with_flavor_t,
        task_listCnt
    ) - 52usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__processor_set_subsystem {
    pub Reply_processor_set_statistics: __Reply__processor_set_statistics_t,
    pub Reply_processor_set_destroy: __Reply__processor_set_destroy_t,
    pub Reply_processor_set_max_priority: __Reply__processor_set_max_priority_t,
    pub Reply_processor_set_policy_enable: __Reply__processor_set_policy_enable_t,
    pub Reply_processor_set_policy_disable: __Reply__processor_set_policy_disable_t,
    pub Reply_processor_set_tasks: __Reply__processor_set_tasks_t,
    pub Reply_processor_set_threads: __Reply__processor_set_threads_t,
    pub Reply_processor_set_policy_control: __Reply__processor_set_policy_control_t,
    pub Reply_processor_set_stack_usage: __Reply__processor_set_stack_usage_t,
    pub Reply_processor_set_info: __Reply__processor_set_info_t,
    pub Reply_processor_set_tasks_with_flavor: __Reply__processor_set_tasks_with_flavor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __ReplyUnion__processor_set_subsystem"]
        [::std::mem::size_of::<__ReplyUnion__processor_set_subsystem>() - 72usize];
    ["Alignment of __ReplyUnion__processor_set_subsystem"]
        [::std::mem::align_of::<__ReplyUnion__processor_set_subsystem>() - 4usize];
    ["Offset of field: __ReplyUnion__processor_set_subsystem::Reply_processor_set_statistics"][::std::mem::offset_of!(
        __ReplyUnion__processor_set_subsystem,
        Reply_processor_set_statistics
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__processor_set_subsystem::Reply_processor_set_destroy"][::std::mem::offset_of!(
        __ReplyUnion__processor_set_subsystem,
        Reply_processor_set_destroy
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__processor_set_subsystem::Reply_processor_set_max_priority"][::std::mem::offset_of!(
        __ReplyUnion__processor_set_subsystem,
        Reply_processor_set_max_priority
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__processor_set_subsystem::Reply_processor_set_policy_enable"][::std::mem::offset_of!(
        __ReplyUnion__processor_set_subsystem,
        Reply_processor_set_policy_enable
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__processor_set_subsystem::Reply_processor_set_policy_disable"] [:: std :: mem :: offset_of ! (__ReplyUnion__processor_set_subsystem , Reply_processor_set_policy_disable) - 0usize] ;
    ["Offset of field: __ReplyUnion__processor_set_subsystem::Reply_processor_set_tasks"][::std::mem::offset_of!(
        __ReplyUnion__processor_set_subsystem,
        Reply_processor_set_tasks
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__processor_set_subsystem::Reply_processor_set_threads"][::std::mem::offset_of!(
        __ReplyUnion__processor_set_subsystem,
        Reply_processor_set_threads
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__processor_set_subsystem::Reply_processor_set_policy_control"] [:: std :: mem :: offset_of ! (__ReplyUnion__processor_set_subsystem , Reply_processor_set_policy_control) - 0usize] ;
    ["Offset of field: __ReplyUnion__processor_set_subsystem::Reply_processor_set_stack_usage"][::std::mem::offset_of!(
        __ReplyUnion__processor_set_subsystem,
        Reply_processor_set_stack_usage
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__processor_set_subsystem::Reply_processor_set_info"][::std::mem::offset_of!(
        __ReplyUnion__processor_set_subsystem,
        Reply_processor_set_info
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__processor_set_subsystem::Reply_processor_set_tasks_with_flavor"] [:: std :: mem :: offset_of ! (__ReplyUnion__processor_set_subsystem , Reply_processor_set_tasks_with_flavor) - 0usize] ;
};
pub type sync_policy_t = ::std::os::raw::c_int;
unsafe extern "C" {
    pub fn semaphore_signal(semaphore: semaphore_t) -> kern_return_t;
}
unsafe extern "C" {
    pub fn semaphore_signal_all(semaphore: semaphore_t) -> kern_return_t;
}
unsafe extern "C" {
    pub fn semaphore_wait(semaphore: semaphore_t) -> kern_return_t;
}
unsafe extern "C" {
    pub fn semaphore_timedwait(semaphore: semaphore_t, wait_time: mach_timespec_t)
        -> kern_return_t;
}
unsafe extern "C" {
    pub fn semaphore_timedwait_signal(
        wait_semaphore: semaphore_t,
        signal_semaphore: semaphore_t,
        wait_time: mach_timespec_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn semaphore_wait_signal(
        wait_semaphore: semaphore_t,
        signal_semaphore: semaphore_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn semaphore_signal_thread(semaphore: semaphore_t, thread: thread_t) -> kern_return_t;
}
unsafe extern "C" {
    pub fn task_create(
        target_task: task_t,
        ledgers: ledger_array_t,
        ledgersCnt: mach_msg_type_number_t,
        inherit_memory: boolean_t,
        child_task: *mut task_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn task_terminate(target_task: task_t) -> kern_return_t;
}
unsafe extern "C" {
    pub fn task_threads(
        target_task: task_inspect_t,
        act_list: *mut thread_act_array_t,
        act_listCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn mach_ports_register(
        target_task: task_t,
        init_port_set: mach_port_array_t,
        init_port_setCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn mach_ports_lookup(
        target_task: task_t,
        init_port_set: *mut mach_port_array_t,
        init_port_setCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn task_info(
        target_task: task_name_t,
        flavor: task_flavor_t,
        task_info_out: task_info_t,
        task_info_outCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn task_set_info(
        target_task: task_t,
        flavor: task_flavor_t,
        task_info_in: task_info_t,
        task_info_inCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn task_suspend(target_task: task_read_t) -> kern_return_t;
}
unsafe extern "C" {
    pub fn task_resume(target_task: task_read_t) -> kern_return_t;
}
unsafe extern "C" {
    pub fn task_get_special_port(
        task: task_inspect_t,
        which_port: ::std::os::raw::c_int,
        special_port: *mut mach_port_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn task_set_special_port(
        task: task_t,
        which_port: ::std::os::raw::c_int,
        special_port: mach_port_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn thread_create(parent_task: task_t, child_act: *mut thread_act_t) -> kern_return_t;
}
unsafe extern "C" {
    pub fn thread_create_running(
        parent_task: task_t,
        flavor: thread_state_flavor_t,
        new_state: thread_state_t,
        new_stateCnt: mach_msg_type_number_t,
        child_act: *mut thread_act_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn task_set_exception_ports(
        task: task_t,
        exception_mask: exception_mask_t,
        new_port: mach_port_t,
        behavior: exception_behavior_t,
        new_flavor: thread_state_flavor_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn task_get_exception_ports(
        task: task_t,
        exception_mask: exception_mask_t,
        masks: exception_mask_array_t,
        masksCnt: *mut mach_msg_type_number_t,
        old_handlers: exception_handler_array_t,
        old_behaviors: exception_behavior_array_t,
        old_flavors: exception_flavor_array_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn task_swap_exception_ports(
        task: task_t,
        exception_mask: exception_mask_t,
        new_port: mach_port_t,
        behavior: exception_behavior_t,
        new_flavor: thread_state_flavor_t,
        masks: exception_mask_array_t,
        masksCnt: *mut mach_msg_type_number_t,
        old_handlers: exception_handler_array_t,
        old_behaviors: exception_behavior_array_t,
        old_flavors: exception_flavor_array_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn lock_set_create(
        task: task_t,
        new_lock_set: *mut lock_set_t,
        n_ulocks: ::std::os::raw::c_int,
        policy: ::std::os::raw::c_int,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn lock_set_destroy(task: task_t, lock_set: lock_set_t) -> kern_return_t;
}
unsafe extern "C" {
    pub fn semaphore_create(
        task: task_t,
        semaphore: *mut semaphore_t,
        policy: ::std::os::raw::c_int,
        value: ::std::os::raw::c_int,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn semaphore_destroy(task: task_t, semaphore: semaphore_t) -> kern_return_t;
}
unsafe extern "C" {
    pub fn task_policy_set(
        task: task_policy_set_t,
        flavor: task_policy_flavor_t,
        policy_info: task_policy_t,
        policy_infoCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn task_policy_get(
        task: task_policy_get_t,
        flavor: task_policy_flavor_t,
        policy_info: task_policy_t,
        policy_infoCnt: *mut mach_msg_type_number_t,
        get_default: *mut boolean_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn task_sample(task: task_t, reply: mach_port_t) -> kern_return_t;
}
unsafe extern "C" {
    pub fn task_policy(
        task: task_t,
        policy: policy_t,
        base: policy_base_t,
        baseCnt: mach_msg_type_number_t,
        set_limit: boolean_t,
        change: boolean_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn task_set_emulation(
        target_port: task_t,
        routine_entry_pt: vm_address_t,
        routine_number: ::std::os::raw::c_int,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn task_get_emulation_vector(
        task: task_t,
        vector_start: *mut ::std::os::raw::c_int,
        emulation_vector: *mut emulation_vector_t,
        emulation_vectorCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn task_set_emulation_vector(
        task: task_t,
        vector_start: ::std::os::raw::c_int,
        emulation_vector: emulation_vector_t,
        emulation_vectorCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn task_set_ras_pc(
        target_task: task_t,
        basepc: vm_address_t,
        boundspc: vm_address_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn task_zone_info(
        target_task: task_inspect_t,
        names: *mut mach_zone_name_array_t,
        namesCnt: *mut mach_msg_type_number_t,
        info: *mut task_zone_info_array_t,
        infoCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn task_assign(
        task: task_t,
        new_set: processor_set_t,
        assign_threads: boolean_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn task_assign_default(task: task_t, assign_threads: boolean_t) -> kern_return_t;
}
unsafe extern "C" {
    pub fn task_get_assignment(
        task: task_inspect_t,
        assigned_set: *mut processor_set_name_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn task_set_policy(
        task: task_t,
        pset: processor_set_t,
        policy: policy_t,
        base: policy_base_t,
        baseCnt: mach_msg_type_number_t,
        limit: policy_limit_t,
        limitCnt: mach_msg_type_number_t,
        change: boolean_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn task_get_state(
        task: task_read_t,
        flavor: thread_state_flavor_t,
        old_state: thread_state_t,
        old_stateCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn task_set_state(
        task: task_t,
        flavor: thread_state_flavor_t,
        new_state: thread_state_t,
        new_stateCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn task_set_phys_footprint_limit(
        task: task_t,
        new_limit: ::std::os::raw::c_int,
        old_limit: *mut ::std::os::raw::c_int,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn task_suspend2(
        target_task: task_read_t,
        suspend_token: *mut task_suspension_token_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn task_resume2(suspend_token: task_suspension_token_t) -> kern_return_t;
}
unsafe extern "C" {
    pub fn task_purgable_info(
        task: task_inspect_t,
        stats: *mut task_purgable_info_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn task_get_mach_voucher(
        task: task_read_t,
        which: mach_voucher_selector_t,
        voucher: *mut ipc_voucher_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn task_set_mach_voucher(task: task_t, voucher: ipc_voucher_t) -> kern_return_t;
}
unsafe extern "C" {
    pub fn task_swap_mach_voucher(
        task: task_t,
        new_voucher: ipc_voucher_t,
        old_voucher: *mut ipc_voucher_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn task_generate_corpse(
        task: task_read_t,
        corpse_task_port: *mut mach_port_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn task_map_corpse_info(
        task: task_t,
        corspe_task: task_read_t,
        kcd_addr_begin: *mut vm_address_t,
        kcd_size: *mut u32,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn task_register_dyld_image_infos(
        task: task_t,
        dyld_images: dyld_kernel_image_info_array_t,
        dyld_imagesCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn task_unregister_dyld_image_infos(
        task: task_t,
        dyld_images: dyld_kernel_image_info_array_t,
        dyld_imagesCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn task_get_dyld_image_infos(
        task: task_read_t,
        dyld_images: *mut dyld_kernel_image_info_array_t,
        dyld_imagesCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn task_register_dyld_shared_cache_image_info(
        task: task_t,
        dyld_cache_image: dyld_kernel_image_info_t,
        no_cache: boolean_t,
        private_cache: boolean_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn task_register_dyld_set_dyld_state(task: task_t, dyld_state: u8) -> kern_return_t;
}
unsafe extern "C" {
    pub fn task_register_dyld_get_process_state(
        task: task_t,
        dyld_process_state: *mut dyld_kernel_process_info_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn task_map_corpse_info_64(
        task: task_t,
        corspe_task: task_read_t,
        kcd_addr_begin: *mut mach_vm_address_t,
        kcd_size: *mut mach_vm_size_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn task_inspect(
        task: task_inspect_t,
        flavor: task_inspect_flavor_t,
        info_out: task_inspect_info_t,
        info_outCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn task_get_exc_guard_behavior(
        task: task_inspect_t,
        behavior: *mut task_exc_guard_behavior_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn task_set_exc_guard_behavior(
        task: task_t,
        behavior: task_exc_guard_behavior_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn task_dyld_process_info_notify_register(
        target_task: task_read_t,
        notify: mach_port_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn task_create_identity_token(task: task_t, token: *mut task_id_token_t) -> kern_return_t;
}
unsafe extern "C" {
    pub fn task_identity_token_get_task_port(
        token: task_id_token_t,
        flavor: task_flavor_t,
        task_port: *mut mach_port_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn task_dyld_process_info_notify_deregister(
        target_task: task_read_t,
        notify: mach_port_name_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn task_get_exception_ports_info(
        port: mach_port_t,
        exception_mask: exception_mask_t,
        masks: exception_mask_array_t,
        masksCnt: *mut mach_msg_type_number_t,
        old_handlers_info: exception_handler_info_array_t,
        old_behaviors: exception_behavior_array_t,
        old_flavors: exception_flavor_array_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn task_test_sync_upcall(task: task_t, port: mach_port_t) -> kern_return_t;
}
unsafe extern "C" {
    pub fn task_set_corpse_forking_behavior(
        task: task_t,
        behavior: task_corpse_forking_behavior_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn task_test_async_upcall_propagation(
        task: task_t,
        port: mach_port_t,
        qos: ::std::os::raw::c_int,
        iotier: ::std::os::raw::c_int,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn task_map_kcdata_object_64(
        task: task_t,
        kcdata_object: kcdata_object_t,
        kcd_addr_begin: *mut mach_vm_address_t,
        kcd_size: *mut mach_vm_size_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn task_register_hardened_exception_handler(
        task: task_t,
        signed_pc_key: u32,
        exceptions_allowed: exception_mask_t,
        behaviors_allowed: exception_behavior_t,
        flavors_allowed: thread_state_flavor_t,
        new_exception_port: mach_port_t,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_create_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub ledgers: mach_msg_ool_ports_descriptor_t,
    pub NDR: NDR_record_t,
    pub ledgersCnt: mach_msg_type_number_t,
    pub inherit_memory: boolean_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_create_t"]
        [::std::mem::size_of::<__Request__task_create_t>() - 60usize];
    ["Alignment of __Request__task_create_t"]
        [::std::mem::align_of::<__Request__task_create_t>() - 4usize];
    ["Offset of field: __Request__task_create_t::Head"]
        [::std::mem::offset_of!(__Request__task_create_t, Head) - 0usize];
    ["Offset of field: __Request__task_create_t::msgh_body"]
        [::std::mem::offset_of!(__Request__task_create_t, msgh_body) - 24usize];
    ["Offset of field: __Request__task_create_t::ledgers"]
        [::std::mem::offset_of!(__Request__task_create_t, ledgers) - 28usize];
    ["Offset of field: __Request__task_create_t::NDR"]
        [::std::mem::offset_of!(__Request__task_create_t, NDR) - 44usize];
    ["Offset of field: __Request__task_create_t::ledgersCnt"]
        [::std::mem::offset_of!(__Request__task_create_t, ledgersCnt) - 52usize];
    ["Offset of field: __Request__task_create_t::inherit_memory"]
        [::std::mem::offset_of!(__Request__task_create_t, inherit_memory) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_terminate_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_terminate_t"]
        [::std::mem::size_of::<__Request__task_terminate_t>() - 24usize];
    ["Alignment of __Request__task_terminate_t"]
        [::std::mem::align_of::<__Request__task_terminate_t>() - 4usize];
    ["Offset of field: __Request__task_terminate_t::Head"]
        [::std::mem::offset_of!(__Request__task_terminate_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_threads_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_threads_t"]
        [::std::mem::size_of::<__Request__task_threads_t>() - 24usize];
    ["Alignment of __Request__task_threads_t"]
        [::std::mem::align_of::<__Request__task_threads_t>() - 4usize];
    ["Offset of field: __Request__task_threads_t::Head"]
        [::std::mem::offset_of!(__Request__task_threads_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_ports_register_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub init_port_set: mach_msg_ool_ports_descriptor_t,
    pub NDR: NDR_record_t,
    pub init_port_setCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_ports_register_t"]
        [::std::mem::size_of::<__Request__mach_ports_register_t>() - 56usize];
    ["Alignment of __Request__mach_ports_register_t"]
        [::std::mem::align_of::<__Request__mach_ports_register_t>() - 4usize];
    ["Offset of field: __Request__mach_ports_register_t::Head"]
        [::std::mem::offset_of!(__Request__mach_ports_register_t, Head) - 0usize];
    ["Offset of field: __Request__mach_ports_register_t::msgh_body"]
        [::std::mem::offset_of!(__Request__mach_ports_register_t, msgh_body) - 24usize];
    ["Offset of field: __Request__mach_ports_register_t::init_port_set"]
        [::std::mem::offset_of!(__Request__mach_ports_register_t, init_port_set) - 28usize];
    ["Offset of field: __Request__mach_ports_register_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_ports_register_t, NDR) - 44usize];
    ["Offset of field: __Request__mach_ports_register_t::init_port_setCnt"]
        [::std::mem::offset_of!(__Request__mach_ports_register_t, init_port_setCnt) - 52usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_ports_lookup_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_ports_lookup_t"]
        [::std::mem::size_of::<__Request__mach_ports_lookup_t>() - 24usize];
    ["Alignment of __Request__mach_ports_lookup_t"]
        [::std::mem::align_of::<__Request__mach_ports_lookup_t>() - 4usize];
    ["Offset of field: __Request__mach_ports_lookup_t::Head"]
        [::std::mem::offset_of!(__Request__mach_ports_lookup_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: task_flavor_t,
    pub task_info_outCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_info_t"][::std::mem::size_of::<__Request__task_info_t>() - 40usize];
    ["Alignment of __Request__task_info_t"]
        [::std::mem::align_of::<__Request__task_info_t>() - 4usize];
    ["Offset of field: __Request__task_info_t::Head"]
        [::std::mem::offset_of!(__Request__task_info_t, Head) - 0usize];
    ["Offset of field: __Request__task_info_t::NDR"]
        [::std::mem::offset_of!(__Request__task_info_t, NDR) - 24usize];
    ["Offset of field: __Request__task_info_t::flavor"]
        [::std::mem::offset_of!(__Request__task_info_t, flavor) - 32usize];
    ["Offset of field: __Request__task_info_t::task_info_outCnt"]
        [::std::mem::offset_of!(__Request__task_info_t, task_info_outCnt) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_set_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: task_flavor_t,
    pub task_info_inCnt: mach_msg_type_number_t,
    pub task_info_in: [integer_t; 94usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_set_info_t"]
        [::std::mem::size_of::<__Request__task_set_info_t>() - 416usize];
    ["Alignment of __Request__task_set_info_t"]
        [::std::mem::align_of::<__Request__task_set_info_t>() - 4usize];
    ["Offset of field: __Request__task_set_info_t::Head"]
        [::std::mem::offset_of!(__Request__task_set_info_t, Head) - 0usize];
    ["Offset of field: __Request__task_set_info_t::NDR"]
        [::std::mem::offset_of!(__Request__task_set_info_t, NDR) - 24usize];
    ["Offset of field: __Request__task_set_info_t::flavor"]
        [::std::mem::offset_of!(__Request__task_set_info_t, flavor) - 32usize];
    ["Offset of field: __Request__task_set_info_t::task_info_inCnt"]
        [::std::mem::offset_of!(__Request__task_set_info_t, task_info_inCnt) - 36usize];
    ["Offset of field: __Request__task_set_info_t::task_info_in"]
        [::std::mem::offset_of!(__Request__task_set_info_t, task_info_in) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_suspend_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_suspend_t"]
        [::std::mem::size_of::<__Request__task_suspend_t>() - 24usize];
    ["Alignment of __Request__task_suspend_t"]
        [::std::mem::align_of::<__Request__task_suspend_t>() - 4usize];
    ["Offset of field: __Request__task_suspend_t::Head"]
        [::std::mem::offset_of!(__Request__task_suspend_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_resume_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_resume_t"]
        [::std::mem::size_of::<__Request__task_resume_t>() - 24usize];
    ["Alignment of __Request__task_resume_t"]
        [::std::mem::align_of::<__Request__task_resume_t>() - 4usize];
    ["Offset of field: __Request__task_resume_t::Head"]
        [::std::mem::offset_of!(__Request__task_resume_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_get_special_port_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub which_port: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_get_special_port_t"]
        [::std::mem::size_of::<__Request__task_get_special_port_t>() - 36usize];
    ["Alignment of __Request__task_get_special_port_t"]
        [::std::mem::align_of::<__Request__task_get_special_port_t>() - 4usize];
    ["Offset of field: __Request__task_get_special_port_t::Head"]
        [::std::mem::offset_of!(__Request__task_get_special_port_t, Head) - 0usize];
    ["Offset of field: __Request__task_get_special_port_t::NDR"]
        [::std::mem::offset_of!(__Request__task_get_special_port_t, NDR) - 24usize];
    ["Offset of field: __Request__task_get_special_port_t::which_port"]
        [::std::mem::offset_of!(__Request__task_get_special_port_t, which_port) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_set_special_port_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub special_port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub which_port: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_set_special_port_t"]
        [::std::mem::size_of::<__Request__task_set_special_port_t>() - 52usize];
    ["Alignment of __Request__task_set_special_port_t"]
        [::std::mem::align_of::<__Request__task_set_special_port_t>() - 4usize];
    ["Offset of field: __Request__task_set_special_port_t::Head"]
        [::std::mem::offset_of!(__Request__task_set_special_port_t, Head) - 0usize];
    ["Offset of field: __Request__task_set_special_port_t::msgh_body"]
        [::std::mem::offset_of!(__Request__task_set_special_port_t, msgh_body) - 24usize];
    ["Offset of field: __Request__task_set_special_port_t::special_port"]
        [::std::mem::offset_of!(__Request__task_set_special_port_t, special_port) - 28usize];
    ["Offset of field: __Request__task_set_special_port_t::NDR"]
        [::std::mem::offset_of!(__Request__task_set_special_port_t, NDR) - 40usize];
    ["Offset of field: __Request__task_set_special_port_t::which_port"]
        [::std::mem::offset_of!(__Request__task_set_special_port_t, which_port) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_create_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__thread_create_t"]
        [::std::mem::size_of::<__Request__thread_create_t>() - 24usize];
    ["Alignment of __Request__thread_create_t"]
        [::std::mem::align_of::<__Request__thread_create_t>() - 4usize];
    ["Offset of field: __Request__thread_create_t::Head"]
        [::std::mem::offset_of!(__Request__thread_create_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_create_running_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: thread_state_flavor_t,
    pub new_stateCnt: mach_msg_type_number_t,
    pub new_state: [natural_t; 1296usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__thread_create_running_t"]
        [::std::mem::size_of::<__Request__thread_create_running_t>() - 5224usize];
    ["Alignment of __Request__thread_create_running_t"]
        [::std::mem::align_of::<__Request__thread_create_running_t>() - 4usize];
    ["Offset of field: __Request__thread_create_running_t::Head"]
        [::std::mem::offset_of!(__Request__thread_create_running_t, Head) - 0usize];
    ["Offset of field: __Request__thread_create_running_t::NDR"]
        [::std::mem::offset_of!(__Request__thread_create_running_t, NDR) - 24usize];
    ["Offset of field: __Request__thread_create_running_t::flavor"]
        [::std::mem::offset_of!(__Request__thread_create_running_t, flavor) - 32usize];
    ["Offset of field: __Request__thread_create_running_t::new_stateCnt"]
        [::std::mem::offset_of!(__Request__thread_create_running_t, new_stateCnt) - 36usize];
    ["Offset of field: __Request__thread_create_running_t::new_state"]
        [::std::mem::offset_of!(__Request__thread_create_running_t, new_state) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_set_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
    pub behavior: exception_behavior_t,
    pub new_flavor: thread_state_flavor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_set_exception_ports_t"]
        [::std::mem::size_of::<__Request__task_set_exception_ports_t>() - 60usize];
    ["Alignment of __Request__task_set_exception_ports_t"]
        [::std::mem::align_of::<__Request__task_set_exception_ports_t>() - 4usize];
    ["Offset of field: __Request__task_set_exception_ports_t::Head"]
        [::std::mem::offset_of!(__Request__task_set_exception_ports_t, Head) - 0usize];
    ["Offset of field: __Request__task_set_exception_ports_t::msgh_body"]
        [::std::mem::offset_of!(__Request__task_set_exception_ports_t, msgh_body) - 24usize];
    ["Offset of field: __Request__task_set_exception_ports_t::new_port"]
        [::std::mem::offset_of!(__Request__task_set_exception_ports_t, new_port) - 28usize];
    ["Offset of field: __Request__task_set_exception_ports_t::NDR"]
        [::std::mem::offset_of!(__Request__task_set_exception_ports_t, NDR) - 40usize];
    ["Offset of field: __Request__task_set_exception_ports_t::exception_mask"]
        [::std::mem::offset_of!(__Request__task_set_exception_ports_t, exception_mask) - 48usize];
    ["Offset of field: __Request__task_set_exception_ports_t::behavior"]
        [::std::mem::offset_of!(__Request__task_set_exception_ports_t, behavior) - 52usize];
    ["Offset of field: __Request__task_set_exception_ports_t::new_flavor"]
        [::std::mem::offset_of!(__Request__task_set_exception_ports_t, new_flavor) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_get_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_get_exception_ports_t"]
        [::std::mem::size_of::<__Request__task_get_exception_ports_t>() - 36usize];
    ["Alignment of __Request__task_get_exception_ports_t"]
        [::std::mem::align_of::<__Request__task_get_exception_ports_t>() - 4usize];
    ["Offset of field: __Request__task_get_exception_ports_t::Head"]
        [::std::mem::offset_of!(__Request__task_get_exception_ports_t, Head) - 0usize];
    ["Offset of field: __Request__task_get_exception_ports_t::NDR"]
        [::std::mem::offset_of!(__Request__task_get_exception_ports_t, NDR) - 24usize];
    ["Offset of field: __Request__task_get_exception_ports_t::exception_mask"]
        [::std::mem::offset_of!(__Request__task_get_exception_ports_t, exception_mask) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_swap_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
    pub behavior: exception_behavior_t,
    pub new_flavor: thread_state_flavor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_swap_exception_ports_t"]
        [::std::mem::size_of::<__Request__task_swap_exception_ports_t>() - 60usize];
    ["Alignment of __Request__task_swap_exception_ports_t"]
        [::std::mem::align_of::<__Request__task_swap_exception_ports_t>() - 4usize];
    ["Offset of field: __Request__task_swap_exception_ports_t::Head"]
        [::std::mem::offset_of!(__Request__task_swap_exception_ports_t, Head) - 0usize];
    ["Offset of field: __Request__task_swap_exception_ports_t::msgh_body"]
        [::std::mem::offset_of!(__Request__task_swap_exception_ports_t, msgh_body) - 24usize];
    ["Offset of field: __Request__task_swap_exception_ports_t::new_port"]
        [::std::mem::offset_of!(__Request__task_swap_exception_ports_t, new_port) - 28usize];
    ["Offset of field: __Request__task_swap_exception_ports_t::NDR"]
        [::std::mem::offset_of!(__Request__task_swap_exception_ports_t, NDR) - 40usize];
    ["Offset of field: __Request__task_swap_exception_ports_t::exception_mask"]
        [::std::mem::offset_of!(__Request__task_swap_exception_ports_t, exception_mask) - 48usize];
    ["Offset of field: __Request__task_swap_exception_ports_t::behavior"]
        [::std::mem::offset_of!(__Request__task_swap_exception_ports_t, behavior) - 52usize];
    ["Offset of field: __Request__task_swap_exception_ports_t::new_flavor"]
        [::std::mem::offset_of!(__Request__task_swap_exception_ports_t, new_flavor) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__lock_set_create_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub n_ulocks: ::std::os::raw::c_int,
    pub policy: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__lock_set_create_t"]
        [::std::mem::size_of::<__Request__lock_set_create_t>() - 40usize];
    ["Alignment of __Request__lock_set_create_t"]
        [::std::mem::align_of::<__Request__lock_set_create_t>() - 4usize];
    ["Offset of field: __Request__lock_set_create_t::Head"]
        [::std::mem::offset_of!(__Request__lock_set_create_t, Head) - 0usize];
    ["Offset of field: __Request__lock_set_create_t::NDR"]
        [::std::mem::offset_of!(__Request__lock_set_create_t, NDR) - 24usize];
    ["Offset of field: __Request__lock_set_create_t::n_ulocks"]
        [::std::mem::offset_of!(__Request__lock_set_create_t, n_ulocks) - 32usize];
    ["Offset of field: __Request__lock_set_create_t::policy"]
        [::std::mem::offset_of!(__Request__lock_set_create_t, policy) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__lock_set_destroy_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub lock_set: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__lock_set_destroy_t"]
        [::std::mem::size_of::<__Request__lock_set_destroy_t>() - 40usize];
    ["Alignment of __Request__lock_set_destroy_t"]
        [::std::mem::align_of::<__Request__lock_set_destroy_t>() - 4usize];
    ["Offset of field: __Request__lock_set_destroy_t::Head"]
        [::std::mem::offset_of!(__Request__lock_set_destroy_t, Head) - 0usize];
    ["Offset of field: __Request__lock_set_destroy_t::msgh_body"]
        [::std::mem::offset_of!(__Request__lock_set_destroy_t, msgh_body) - 24usize];
    ["Offset of field: __Request__lock_set_destroy_t::lock_set"]
        [::std::mem::offset_of!(__Request__lock_set_destroy_t, lock_set) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__semaphore_create_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub policy: ::std::os::raw::c_int,
    pub value: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__semaphore_create_t"]
        [::std::mem::size_of::<__Request__semaphore_create_t>() - 40usize];
    ["Alignment of __Request__semaphore_create_t"]
        [::std::mem::align_of::<__Request__semaphore_create_t>() - 4usize];
    ["Offset of field: __Request__semaphore_create_t::Head"]
        [::std::mem::offset_of!(__Request__semaphore_create_t, Head) - 0usize];
    ["Offset of field: __Request__semaphore_create_t::NDR"]
        [::std::mem::offset_of!(__Request__semaphore_create_t, NDR) - 24usize];
    ["Offset of field: __Request__semaphore_create_t::policy"]
        [::std::mem::offset_of!(__Request__semaphore_create_t, policy) - 32usize];
    ["Offset of field: __Request__semaphore_create_t::value"]
        [::std::mem::offset_of!(__Request__semaphore_create_t, value) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__semaphore_destroy_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub semaphore: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__semaphore_destroy_t"]
        [::std::mem::size_of::<__Request__semaphore_destroy_t>() - 40usize];
    ["Alignment of __Request__semaphore_destroy_t"]
        [::std::mem::align_of::<__Request__semaphore_destroy_t>() - 4usize];
    ["Offset of field: __Request__semaphore_destroy_t::Head"]
        [::std::mem::offset_of!(__Request__semaphore_destroy_t, Head) - 0usize];
    ["Offset of field: __Request__semaphore_destroy_t::msgh_body"]
        [::std::mem::offset_of!(__Request__semaphore_destroy_t, msgh_body) - 24usize];
    ["Offset of field: __Request__semaphore_destroy_t::semaphore"]
        [::std::mem::offset_of!(__Request__semaphore_destroy_t, semaphore) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_policy_set_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: task_policy_flavor_t,
    pub policy_infoCnt: mach_msg_type_number_t,
    pub policy_info: [integer_t; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_policy_set_t"]
        [::std::mem::size_of::<__Request__task_policy_set_t>() - 104usize];
    ["Alignment of __Request__task_policy_set_t"]
        [::std::mem::align_of::<__Request__task_policy_set_t>() - 4usize];
    ["Offset of field: __Request__task_policy_set_t::Head"]
        [::std::mem::offset_of!(__Request__task_policy_set_t, Head) - 0usize];
    ["Offset of field: __Request__task_policy_set_t::NDR"]
        [::std::mem::offset_of!(__Request__task_policy_set_t, NDR) - 24usize];
    ["Offset of field: __Request__task_policy_set_t::flavor"]
        [::std::mem::offset_of!(__Request__task_policy_set_t, flavor) - 32usize];
    ["Offset of field: __Request__task_policy_set_t::policy_infoCnt"]
        [::std::mem::offset_of!(__Request__task_policy_set_t, policy_infoCnt) - 36usize];
    ["Offset of field: __Request__task_policy_set_t::policy_info"]
        [::std::mem::offset_of!(__Request__task_policy_set_t, policy_info) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_policy_get_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: task_policy_flavor_t,
    pub policy_infoCnt: mach_msg_type_number_t,
    pub get_default: boolean_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_policy_get_t"]
        [::std::mem::size_of::<__Request__task_policy_get_t>() - 44usize];
    ["Alignment of __Request__task_policy_get_t"]
        [::std::mem::align_of::<__Request__task_policy_get_t>() - 4usize];
    ["Offset of field: __Request__task_policy_get_t::Head"]
        [::std::mem::offset_of!(__Request__task_policy_get_t, Head) - 0usize];
    ["Offset of field: __Request__task_policy_get_t::NDR"]
        [::std::mem::offset_of!(__Request__task_policy_get_t, NDR) - 24usize];
    ["Offset of field: __Request__task_policy_get_t::flavor"]
        [::std::mem::offset_of!(__Request__task_policy_get_t, flavor) - 32usize];
    ["Offset of field: __Request__task_policy_get_t::policy_infoCnt"]
        [::std::mem::offset_of!(__Request__task_policy_get_t, policy_infoCnt) - 36usize];
    ["Offset of field: __Request__task_policy_get_t::get_default"]
        [::std::mem::offset_of!(__Request__task_policy_get_t, get_default) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_sample_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub reply: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_sample_t"]
        [::std::mem::size_of::<__Request__task_sample_t>() - 40usize];
    ["Alignment of __Request__task_sample_t"]
        [::std::mem::align_of::<__Request__task_sample_t>() - 4usize];
    ["Offset of field: __Request__task_sample_t::Head"]
        [::std::mem::offset_of!(__Request__task_sample_t, Head) - 0usize];
    ["Offset of field: __Request__task_sample_t::msgh_body"]
        [::std::mem::offset_of!(__Request__task_sample_t, msgh_body) - 24usize];
    ["Offset of field: __Request__task_sample_t::reply"]
        [::std::mem::offset_of!(__Request__task_sample_t, reply) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_policy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub policy: policy_t,
    pub baseCnt: mach_msg_type_number_t,
    pub base: [integer_t; 5usize],
    pub set_limit: boolean_t,
    pub change: boolean_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_policy_t"]
        [::std::mem::size_of::<__Request__task_policy_t>() - 68usize];
    ["Alignment of __Request__task_policy_t"]
        [::std::mem::align_of::<__Request__task_policy_t>() - 4usize];
    ["Offset of field: __Request__task_policy_t::Head"]
        [::std::mem::offset_of!(__Request__task_policy_t, Head) - 0usize];
    ["Offset of field: __Request__task_policy_t::NDR"]
        [::std::mem::offset_of!(__Request__task_policy_t, NDR) - 24usize];
    ["Offset of field: __Request__task_policy_t::policy"]
        [::std::mem::offset_of!(__Request__task_policy_t, policy) - 32usize];
    ["Offset of field: __Request__task_policy_t::baseCnt"]
        [::std::mem::offset_of!(__Request__task_policy_t, baseCnt) - 36usize];
    ["Offset of field: __Request__task_policy_t::base"]
        [::std::mem::offset_of!(__Request__task_policy_t, base) - 40usize];
    ["Offset of field: __Request__task_policy_t::set_limit"]
        [::std::mem::offset_of!(__Request__task_policy_t, set_limit) - 60usize];
    ["Offset of field: __Request__task_policy_t::change"]
        [::std::mem::offset_of!(__Request__task_policy_t, change) - 64usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_set_emulation_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub routine_entry_pt: vm_address_t,
    pub routine_number: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_set_emulation_t"]
        [::std::mem::size_of::<__Request__task_set_emulation_t>() - 44usize];
    ["Alignment of __Request__task_set_emulation_t"]
        [::std::mem::align_of::<__Request__task_set_emulation_t>() - 4usize];
    ["Offset of field: __Request__task_set_emulation_t::Head"]
        [::std::mem::offset_of!(__Request__task_set_emulation_t, Head) - 0usize];
    ["Offset of field: __Request__task_set_emulation_t::NDR"]
        [::std::mem::offset_of!(__Request__task_set_emulation_t, NDR) - 24usize];
    ["Offset of field: __Request__task_set_emulation_t::routine_entry_pt"]
        [::std::mem::offset_of!(__Request__task_set_emulation_t, routine_entry_pt) - 32usize];
    ["Offset of field: __Request__task_set_emulation_t::routine_number"]
        [::std::mem::offset_of!(__Request__task_set_emulation_t, routine_number) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_get_emulation_vector_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_get_emulation_vector_t"]
        [::std::mem::size_of::<__Request__task_get_emulation_vector_t>() - 24usize];
    ["Alignment of __Request__task_get_emulation_vector_t"]
        [::std::mem::align_of::<__Request__task_get_emulation_vector_t>() - 4usize];
    ["Offset of field: __Request__task_get_emulation_vector_t::Head"]
        [::std::mem::offset_of!(__Request__task_get_emulation_vector_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_set_emulation_vector_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub emulation_vector: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub vector_start: ::std::os::raw::c_int,
    pub emulation_vectorCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_set_emulation_vector_t"]
        [::std::mem::size_of::<__Request__task_set_emulation_vector_t>() - 60usize];
    ["Alignment of __Request__task_set_emulation_vector_t"]
        [::std::mem::align_of::<__Request__task_set_emulation_vector_t>() - 4usize];
    ["Offset of field: __Request__task_set_emulation_vector_t::Head"]
        [::std::mem::offset_of!(__Request__task_set_emulation_vector_t, Head) - 0usize];
    ["Offset of field: __Request__task_set_emulation_vector_t::msgh_body"]
        [::std::mem::offset_of!(__Request__task_set_emulation_vector_t, msgh_body) - 24usize];
    ["Offset of field: __Request__task_set_emulation_vector_t::emulation_vector"][::std::mem::offset_of!(
        __Request__task_set_emulation_vector_t,
        emulation_vector
    ) - 28usize];
    ["Offset of field: __Request__task_set_emulation_vector_t::NDR"]
        [::std::mem::offset_of!(__Request__task_set_emulation_vector_t, NDR) - 44usize];
    ["Offset of field: __Request__task_set_emulation_vector_t::vector_start"]
        [::std::mem::offset_of!(__Request__task_set_emulation_vector_t, vector_start) - 52usize];
    ["Offset of field: __Request__task_set_emulation_vector_t::emulation_vectorCnt"][::std::mem::offset_of!(
        __Request__task_set_emulation_vector_t,
        emulation_vectorCnt
    ) - 56usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_set_ras_pc_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub basepc: vm_address_t,
    pub boundspc: vm_address_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_set_ras_pc_t"]
        [::std::mem::size_of::<__Request__task_set_ras_pc_t>() - 48usize];
    ["Alignment of __Request__task_set_ras_pc_t"]
        [::std::mem::align_of::<__Request__task_set_ras_pc_t>() - 4usize];
    ["Offset of field: __Request__task_set_ras_pc_t::Head"]
        [::std::mem::offset_of!(__Request__task_set_ras_pc_t, Head) - 0usize];
    ["Offset of field: __Request__task_set_ras_pc_t::NDR"]
        [::std::mem::offset_of!(__Request__task_set_ras_pc_t, NDR) - 24usize];
    ["Offset of field: __Request__task_set_ras_pc_t::basepc"]
        [::std::mem::offset_of!(__Request__task_set_ras_pc_t, basepc) - 32usize];
    ["Offset of field: __Request__task_set_ras_pc_t::boundspc"]
        [::std::mem::offset_of!(__Request__task_set_ras_pc_t, boundspc) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_zone_info_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_zone_info_t"]
        [::std::mem::size_of::<__Request__task_zone_info_t>() - 24usize];
    ["Alignment of __Request__task_zone_info_t"]
        [::std::mem::align_of::<__Request__task_zone_info_t>() - 4usize];
    ["Offset of field: __Request__task_zone_info_t::Head"]
        [::std::mem::offset_of!(__Request__task_zone_info_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_assign_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_set: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub assign_threads: boolean_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_assign_t"]
        [::std::mem::size_of::<__Request__task_assign_t>() - 52usize];
    ["Alignment of __Request__task_assign_t"]
        [::std::mem::align_of::<__Request__task_assign_t>() - 4usize];
    ["Offset of field: __Request__task_assign_t::Head"]
        [::std::mem::offset_of!(__Request__task_assign_t, Head) - 0usize];
    ["Offset of field: __Request__task_assign_t::msgh_body"]
        [::std::mem::offset_of!(__Request__task_assign_t, msgh_body) - 24usize];
    ["Offset of field: __Request__task_assign_t::new_set"]
        [::std::mem::offset_of!(__Request__task_assign_t, new_set) - 28usize];
    ["Offset of field: __Request__task_assign_t::NDR"]
        [::std::mem::offset_of!(__Request__task_assign_t, NDR) - 40usize];
    ["Offset of field: __Request__task_assign_t::assign_threads"]
        [::std::mem::offset_of!(__Request__task_assign_t, assign_threads) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_assign_default_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub assign_threads: boolean_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_assign_default_t"]
        [::std::mem::size_of::<__Request__task_assign_default_t>() - 36usize];
    ["Alignment of __Request__task_assign_default_t"]
        [::std::mem::align_of::<__Request__task_assign_default_t>() - 4usize];
    ["Offset of field: __Request__task_assign_default_t::Head"]
        [::std::mem::offset_of!(__Request__task_assign_default_t, Head) - 0usize];
    ["Offset of field: __Request__task_assign_default_t::NDR"]
        [::std::mem::offset_of!(__Request__task_assign_default_t, NDR) - 24usize];
    ["Offset of field: __Request__task_assign_default_t::assign_threads"]
        [::std::mem::offset_of!(__Request__task_assign_default_t, assign_threads) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_get_assignment_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_get_assignment_t"]
        [::std::mem::size_of::<__Request__task_get_assignment_t>() - 24usize];
    ["Alignment of __Request__task_get_assignment_t"]
        [::std::mem::align_of::<__Request__task_get_assignment_t>() - 4usize];
    ["Offset of field: __Request__task_get_assignment_t::Head"]
        [::std::mem::offset_of!(__Request__task_get_assignment_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_set_policy_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub pset: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub policy: policy_t,
    pub baseCnt: mach_msg_type_number_t,
    pub base: [integer_t; 5usize],
    pub limitCnt: mach_msg_type_number_t,
    pub limit: [integer_t; 1usize],
    pub change: boolean_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_set_policy_t"]
        [::std::mem::size_of::<__Request__task_set_policy_t>() - 88usize];
    ["Alignment of __Request__task_set_policy_t"]
        [::std::mem::align_of::<__Request__task_set_policy_t>() - 4usize];
    ["Offset of field: __Request__task_set_policy_t::Head"]
        [::std::mem::offset_of!(__Request__task_set_policy_t, Head) - 0usize];
    ["Offset of field: __Request__task_set_policy_t::msgh_body"]
        [::std::mem::offset_of!(__Request__task_set_policy_t, msgh_body) - 24usize];
    ["Offset of field: __Request__task_set_policy_t::pset"]
        [::std::mem::offset_of!(__Request__task_set_policy_t, pset) - 28usize];
    ["Offset of field: __Request__task_set_policy_t::NDR"]
        [::std::mem::offset_of!(__Request__task_set_policy_t, NDR) - 40usize];
    ["Offset of field: __Request__task_set_policy_t::policy"]
        [::std::mem::offset_of!(__Request__task_set_policy_t, policy) - 48usize];
    ["Offset of field: __Request__task_set_policy_t::baseCnt"]
        [::std::mem::offset_of!(__Request__task_set_policy_t, baseCnt) - 52usize];
    ["Offset of field: __Request__task_set_policy_t::base"]
        [::std::mem::offset_of!(__Request__task_set_policy_t, base) - 56usize];
    ["Offset of field: __Request__task_set_policy_t::limitCnt"]
        [::std::mem::offset_of!(__Request__task_set_policy_t, limitCnt) - 76usize];
    ["Offset of field: __Request__task_set_policy_t::limit"]
        [::std::mem::offset_of!(__Request__task_set_policy_t, limit) - 80usize];
    ["Offset of field: __Request__task_set_policy_t::change"]
        [::std::mem::offset_of!(__Request__task_set_policy_t, change) - 84usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_get_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: thread_state_flavor_t,
    pub old_stateCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_get_state_t"]
        [::std::mem::size_of::<__Request__task_get_state_t>() - 40usize];
    ["Alignment of __Request__task_get_state_t"]
        [::std::mem::align_of::<__Request__task_get_state_t>() - 4usize];
    ["Offset of field: __Request__task_get_state_t::Head"]
        [::std::mem::offset_of!(__Request__task_get_state_t, Head) - 0usize];
    ["Offset of field: __Request__task_get_state_t::NDR"]
        [::std::mem::offset_of!(__Request__task_get_state_t, NDR) - 24usize];
    ["Offset of field: __Request__task_get_state_t::flavor"]
        [::std::mem::offset_of!(__Request__task_get_state_t, flavor) - 32usize];
    ["Offset of field: __Request__task_get_state_t::old_stateCnt"]
        [::std::mem::offset_of!(__Request__task_get_state_t, old_stateCnt) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_set_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: thread_state_flavor_t,
    pub new_stateCnt: mach_msg_type_number_t,
    pub new_state: [natural_t; 1296usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_set_state_t"]
        [::std::mem::size_of::<__Request__task_set_state_t>() - 5224usize];
    ["Alignment of __Request__task_set_state_t"]
        [::std::mem::align_of::<__Request__task_set_state_t>() - 4usize];
    ["Offset of field: __Request__task_set_state_t::Head"]
        [::std::mem::offset_of!(__Request__task_set_state_t, Head) - 0usize];
    ["Offset of field: __Request__task_set_state_t::NDR"]
        [::std::mem::offset_of!(__Request__task_set_state_t, NDR) - 24usize];
    ["Offset of field: __Request__task_set_state_t::flavor"]
        [::std::mem::offset_of!(__Request__task_set_state_t, flavor) - 32usize];
    ["Offset of field: __Request__task_set_state_t::new_stateCnt"]
        [::std::mem::offset_of!(__Request__task_set_state_t, new_stateCnt) - 36usize];
    ["Offset of field: __Request__task_set_state_t::new_state"]
        [::std::mem::offset_of!(__Request__task_set_state_t, new_state) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_set_phys_footprint_limit_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub new_limit: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_set_phys_footprint_limit_t"]
        [::std::mem::size_of::<__Request__task_set_phys_footprint_limit_t>() - 36usize];
    ["Alignment of __Request__task_set_phys_footprint_limit_t"]
        [::std::mem::align_of::<__Request__task_set_phys_footprint_limit_t>() - 4usize];
    ["Offset of field: __Request__task_set_phys_footprint_limit_t::Head"]
        [::std::mem::offset_of!(__Request__task_set_phys_footprint_limit_t, Head) - 0usize];
    ["Offset of field: __Request__task_set_phys_footprint_limit_t::NDR"]
        [::std::mem::offset_of!(__Request__task_set_phys_footprint_limit_t, NDR) - 24usize];
    ["Offset of field: __Request__task_set_phys_footprint_limit_t::new_limit"]
        [::std::mem::offset_of!(__Request__task_set_phys_footprint_limit_t, new_limit) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_suspend2_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_suspend2_t"]
        [::std::mem::size_of::<__Request__task_suspend2_t>() - 24usize];
    ["Alignment of __Request__task_suspend2_t"]
        [::std::mem::align_of::<__Request__task_suspend2_t>() - 4usize];
    ["Offset of field: __Request__task_suspend2_t::Head"]
        [::std::mem::offset_of!(__Request__task_suspend2_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_resume2_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_resume2_t"]
        [::std::mem::size_of::<__Request__task_resume2_t>() - 24usize];
    ["Alignment of __Request__task_resume2_t"]
        [::std::mem::align_of::<__Request__task_resume2_t>() - 4usize];
    ["Offset of field: __Request__task_resume2_t::Head"]
        [::std::mem::offset_of!(__Request__task_resume2_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_purgable_info_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_purgable_info_t"]
        [::std::mem::size_of::<__Request__task_purgable_info_t>() - 24usize];
    ["Alignment of __Request__task_purgable_info_t"]
        [::std::mem::align_of::<__Request__task_purgable_info_t>() - 4usize];
    ["Offset of field: __Request__task_purgable_info_t::Head"]
        [::std::mem::offset_of!(__Request__task_purgable_info_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_get_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub which: mach_voucher_selector_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_get_mach_voucher_t"]
        [::std::mem::size_of::<__Request__task_get_mach_voucher_t>() - 36usize];
    ["Alignment of __Request__task_get_mach_voucher_t"]
        [::std::mem::align_of::<__Request__task_get_mach_voucher_t>() - 4usize];
    ["Offset of field: __Request__task_get_mach_voucher_t::Head"]
        [::std::mem::offset_of!(__Request__task_get_mach_voucher_t, Head) - 0usize];
    ["Offset of field: __Request__task_get_mach_voucher_t::NDR"]
        [::std::mem::offset_of!(__Request__task_get_mach_voucher_t, NDR) - 24usize];
    ["Offset of field: __Request__task_get_mach_voucher_t::which"]
        [::std::mem::offset_of!(__Request__task_get_mach_voucher_t, which) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_set_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub voucher: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_set_mach_voucher_t"]
        [::std::mem::size_of::<__Request__task_set_mach_voucher_t>() - 40usize];
    ["Alignment of __Request__task_set_mach_voucher_t"]
        [::std::mem::align_of::<__Request__task_set_mach_voucher_t>() - 4usize];
    ["Offset of field: __Request__task_set_mach_voucher_t::Head"]
        [::std::mem::offset_of!(__Request__task_set_mach_voucher_t, Head) - 0usize];
    ["Offset of field: __Request__task_set_mach_voucher_t::msgh_body"]
        [::std::mem::offset_of!(__Request__task_set_mach_voucher_t, msgh_body) - 24usize];
    ["Offset of field: __Request__task_set_mach_voucher_t::voucher"]
        [::std::mem::offset_of!(__Request__task_set_mach_voucher_t, voucher) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_swap_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_voucher: mach_msg_port_descriptor_t,
    pub old_voucher: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_swap_mach_voucher_t"]
        [::std::mem::size_of::<__Request__task_swap_mach_voucher_t>() - 52usize];
    ["Alignment of __Request__task_swap_mach_voucher_t"]
        [::std::mem::align_of::<__Request__task_swap_mach_voucher_t>() - 4usize];
    ["Offset of field: __Request__task_swap_mach_voucher_t::Head"]
        [::std::mem::offset_of!(__Request__task_swap_mach_voucher_t, Head) - 0usize];
    ["Offset of field: __Request__task_swap_mach_voucher_t::msgh_body"]
        [::std::mem::offset_of!(__Request__task_swap_mach_voucher_t, msgh_body) - 24usize];
    ["Offset of field: __Request__task_swap_mach_voucher_t::new_voucher"]
        [::std::mem::offset_of!(__Request__task_swap_mach_voucher_t, new_voucher) - 28usize];
    ["Offset of field: __Request__task_swap_mach_voucher_t::old_voucher"]
        [::std::mem::offset_of!(__Request__task_swap_mach_voucher_t, old_voucher) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_generate_corpse_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_generate_corpse_t"]
        [::std::mem::size_of::<__Request__task_generate_corpse_t>() - 24usize];
    ["Alignment of __Request__task_generate_corpse_t"]
        [::std::mem::align_of::<__Request__task_generate_corpse_t>() - 4usize];
    ["Offset of field: __Request__task_generate_corpse_t::Head"]
        [::std::mem::offset_of!(__Request__task_generate_corpse_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_map_corpse_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub corspe_task: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_map_corpse_info_t"]
        [::std::mem::size_of::<__Request__task_map_corpse_info_t>() - 40usize];
    ["Alignment of __Request__task_map_corpse_info_t"]
        [::std::mem::align_of::<__Request__task_map_corpse_info_t>() - 4usize];
    ["Offset of field: __Request__task_map_corpse_info_t::Head"]
        [::std::mem::offset_of!(__Request__task_map_corpse_info_t, Head) - 0usize];
    ["Offset of field: __Request__task_map_corpse_info_t::msgh_body"]
        [::std::mem::offset_of!(__Request__task_map_corpse_info_t, msgh_body) - 24usize];
    ["Offset of field: __Request__task_map_corpse_info_t::corspe_task"]
        [::std::mem::offset_of!(__Request__task_map_corpse_info_t, corspe_task) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_register_dyld_image_infos_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub dyld_images: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub dyld_imagesCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_register_dyld_image_infos_t"]
        [::std::mem::size_of::<__Request__task_register_dyld_image_infos_t>() - 56usize];
    ["Alignment of __Request__task_register_dyld_image_infos_t"]
        [::std::mem::align_of::<__Request__task_register_dyld_image_infos_t>() - 4usize];
    ["Offset of field: __Request__task_register_dyld_image_infos_t::Head"]
        [::std::mem::offset_of!(__Request__task_register_dyld_image_infos_t, Head) - 0usize];
    ["Offset of field: __Request__task_register_dyld_image_infos_t::msgh_body"]
        [::std::mem::offset_of!(__Request__task_register_dyld_image_infos_t, msgh_body) - 24usize];
    ["Offset of field: __Request__task_register_dyld_image_infos_t::dyld_images"][::std::mem::offset_of!(
        __Request__task_register_dyld_image_infos_t,
        dyld_images
    ) - 28usize];
    ["Offset of field: __Request__task_register_dyld_image_infos_t::NDR"]
        [::std::mem::offset_of!(__Request__task_register_dyld_image_infos_t, NDR) - 44usize];
    ["Offset of field: __Request__task_register_dyld_image_infos_t::dyld_imagesCnt"][::std::mem::offset_of!(
        __Request__task_register_dyld_image_infos_t,
        dyld_imagesCnt
    ) - 52usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_unregister_dyld_image_infos_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub dyld_images: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub dyld_imagesCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_unregister_dyld_image_infos_t"]
        [::std::mem::size_of::<__Request__task_unregister_dyld_image_infos_t>() - 56usize];
    ["Alignment of __Request__task_unregister_dyld_image_infos_t"]
        [::std::mem::align_of::<__Request__task_unregister_dyld_image_infos_t>() - 4usize];
    ["Offset of field: __Request__task_unregister_dyld_image_infos_t::Head"]
        [::std::mem::offset_of!(__Request__task_unregister_dyld_image_infos_t, Head) - 0usize];
    ["Offset of field: __Request__task_unregister_dyld_image_infos_t::msgh_body"][::std::mem::offset_of!(
        __Request__task_unregister_dyld_image_infos_t,
        msgh_body
    ) - 24usize];
    ["Offset of field: __Request__task_unregister_dyld_image_infos_t::dyld_images"][::std::mem::offset_of!(
        __Request__task_unregister_dyld_image_infos_t,
        dyld_images
    ) - 28usize];
    ["Offset of field: __Request__task_unregister_dyld_image_infos_t::NDR"]
        [::std::mem::offset_of!(__Request__task_unregister_dyld_image_infos_t, NDR) - 44usize];
    ["Offset of field: __Request__task_unregister_dyld_image_infos_t::dyld_imagesCnt"][::std::mem::offset_of!(
        __Request__task_unregister_dyld_image_infos_t,
        dyld_imagesCnt
    ) - 52usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_get_dyld_image_infos_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_get_dyld_image_infos_t"]
        [::std::mem::size_of::<__Request__task_get_dyld_image_infos_t>() - 24usize];
    ["Alignment of __Request__task_get_dyld_image_infos_t"]
        [::std::mem::align_of::<__Request__task_get_dyld_image_infos_t>() - 4usize];
    ["Offset of field: __Request__task_get_dyld_image_infos_t::Head"]
        [::std::mem::offset_of!(__Request__task_get_dyld_image_infos_t, Head) - 0usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_register_dyld_shared_cache_image_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub dyld_cache_image: dyld_kernel_image_info_t,
    pub no_cache: boolean_t,
    pub private_cache: boolean_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_register_dyld_shared_cache_image_info_t"][::std::mem::size_of::<
        __Request__task_register_dyld_shared_cache_image_info_t,
    >() - 80usize];
    ["Alignment of __Request__task_register_dyld_shared_cache_image_info_t"][::std::mem::align_of::<
        __Request__task_register_dyld_shared_cache_image_info_t,
    >() - 4usize];
    ["Offset of field: __Request__task_register_dyld_shared_cache_image_info_t::Head"][::std::mem::offset_of!(
        __Request__task_register_dyld_shared_cache_image_info_t,
        Head
    ) - 0usize];
    ["Offset of field: __Request__task_register_dyld_shared_cache_image_info_t::NDR"][::std::mem::offset_of!(
        __Request__task_register_dyld_shared_cache_image_info_t,
        NDR
    ) - 24usize];
    ["Offset of field: __Request__task_register_dyld_shared_cache_image_info_t::dyld_cache_image"] [:: std :: mem :: offset_of ! (__Request__task_register_dyld_shared_cache_image_info_t , dyld_cache_image) - 32usize] ;
    ["Offset of field: __Request__task_register_dyld_shared_cache_image_info_t::no_cache"][::std::mem::offset_of!(
        __Request__task_register_dyld_shared_cache_image_info_t,
        no_cache
    )
        - 72usize];
    ["Offset of field: __Request__task_register_dyld_shared_cache_image_info_t::private_cache"][::std::mem::offset_of!(
        __Request__task_register_dyld_shared_cache_image_info_t,
        private_cache
    )
        - 76usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_register_dyld_set_dyld_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub dyld_state: u8,
    pub dyld_statePad: [::std::os::raw::c_char; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_register_dyld_set_dyld_state_t"]
        [::std::mem::size_of::<__Request__task_register_dyld_set_dyld_state_t>() - 36usize];
    ["Alignment of __Request__task_register_dyld_set_dyld_state_t"]
        [::std::mem::align_of::<__Request__task_register_dyld_set_dyld_state_t>() - 4usize];
    ["Offset of field: __Request__task_register_dyld_set_dyld_state_t::Head"]
        [::std::mem::offset_of!(__Request__task_register_dyld_set_dyld_state_t, Head) - 0usize];
    ["Offset of field: __Request__task_register_dyld_set_dyld_state_t::NDR"]
        [::std::mem::offset_of!(__Request__task_register_dyld_set_dyld_state_t, NDR) - 24usize];
    ["Offset of field: __Request__task_register_dyld_set_dyld_state_t::dyld_state"][::std::mem::offset_of!(
        __Request__task_register_dyld_set_dyld_state_t,
        dyld_state
    ) - 32usize];
    ["Offset of field: __Request__task_register_dyld_set_dyld_state_t::dyld_statePad"][::std::mem::offset_of!(
        __Request__task_register_dyld_set_dyld_state_t,
        dyld_statePad
    ) - 33usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_register_dyld_get_process_state_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_register_dyld_get_process_state_t"]
        [::std::mem::size_of::<__Request__task_register_dyld_get_process_state_t>() - 24usize];
    ["Alignment of __Request__task_register_dyld_get_process_state_t"]
        [::std::mem::align_of::<__Request__task_register_dyld_get_process_state_t>() - 4usize];
    ["Offset of field: __Request__task_register_dyld_get_process_state_t::Head"]
        [::std::mem::offset_of!(__Request__task_register_dyld_get_process_state_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_map_corpse_info_64_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub corspe_task: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_map_corpse_info_64_t"]
        [::std::mem::size_of::<__Request__task_map_corpse_info_64_t>() - 40usize];
    ["Alignment of __Request__task_map_corpse_info_64_t"]
        [::std::mem::align_of::<__Request__task_map_corpse_info_64_t>() - 4usize];
    ["Offset of field: __Request__task_map_corpse_info_64_t::Head"]
        [::std::mem::offset_of!(__Request__task_map_corpse_info_64_t, Head) - 0usize];
    ["Offset of field: __Request__task_map_corpse_info_64_t::msgh_body"]
        [::std::mem::offset_of!(__Request__task_map_corpse_info_64_t, msgh_body) - 24usize];
    ["Offset of field: __Request__task_map_corpse_info_64_t::corspe_task"]
        [::std::mem::offset_of!(__Request__task_map_corpse_info_64_t, corspe_task) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_inspect_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: task_inspect_flavor_t,
    pub info_outCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_inspect_t"]
        [::std::mem::size_of::<__Request__task_inspect_t>() - 40usize];
    ["Alignment of __Request__task_inspect_t"]
        [::std::mem::align_of::<__Request__task_inspect_t>() - 4usize];
    ["Offset of field: __Request__task_inspect_t::Head"]
        [::std::mem::offset_of!(__Request__task_inspect_t, Head) - 0usize];
    ["Offset of field: __Request__task_inspect_t::NDR"]
        [::std::mem::offset_of!(__Request__task_inspect_t, NDR) - 24usize];
    ["Offset of field: __Request__task_inspect_t::flavor"]
        [::std::mem::offset_of!(__Request__task_inspect_t, flavor) - 32usize];
    ["Offset of field: __Request__task_inspect_t::info_outCnt"]
        [::std::mem::offset_of!(__Request__task_inspect_t, info_outCnt) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_get_exc_guard_behavior_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_get_exc_guard_behavior_t"]
        [::std::mem::size_of::<__Request__task_get_exc_guard_behavior_t>() - 24usize];
    ["Alignment of __Request__task_get_exc_guard_behavior_t"]
        [::std::mem::align_of::<__Request__task_get_exc_guard_behavior_t>() - 4usize];
    ["Offset of field: __Request__task_get_exc_guard_behavior_t::Head"]
        [::std::mem::offset_of!(__Request__task_get_exc_guard_behavior_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_set_exc_guard_behavior_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub behavior: task_exc_guard_behavior_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_set_exc_guard_behavior_t"]
        [::std::mem::size_of::<__Request__task_set_exc_guard_behavior_t>() - 36usize];
    ["Alignment of __Request__task_set_exc_guard_behavior_t"]
        [::std::mem::align_of::<__Request__task_set_exc_guard_behavior_t>() - 4usize];
    ["Offset of field: __Request__task_set_exc_guard_behavior_t::Head"]
        [::std::mem::offset_of!(__Request__task_set_exc_guard_behavior_t, Head) - 0usize];
    ["Offset of field: __Request__task_set_exc_guard_behavior_t::NDR"]
        [::std::mem::offset_of!(__Request__task_set_exc_guard_behavior_t, NDR) - 24usize];
    ["Offset of field: __Request__task_set_exc_guard_behavior_t::behavior"]
        [::std::mem::offset_of!(__Request__task_set_exc_guard_behavior_t, behavior) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_dyld_process_info_notify_register_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub notify: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_dyld_process_info_notify_register_t"]
        [::std::mem::size_of::<__Request__task_dyld_process_info_notify_register_t>() - 40usize];
    ["Alignment of __Request__task_dyld_process_info_notify_register_t"]
        [::std::mem::align_of::<__Request__task_dyld_process_info_notify_register_t>() - 4usize];
    ["Offset of field: __Request__task_dyld_process_info_notify_register_t::Head"][::std::mem::offset_of!(
        __Request__task_dyld_process_info_notify_register_t,
        Head
    ) - 0usize];
    ["Offset of field: __Request__task_dyld_process_info_notify_register_t::msgh_body"][::std::mem::offset_of!(
        __Request__task_dyld_process_info_notify_register_t,
        msgh_body
    )
        - 24usize];
    ["Offset of field: __Request__task_dyld_process_info_notify_register_t::notify"][::std::mem::offset_of!(
        __Request__task_dyld_process_info_notify_register_t,
        notify
    ) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_create_identity_token_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_create_identity_token_t"]
        [::std::mem::size_of::<__Request__task_create_identity_token_t>() - 24usize];
    ["Alignment of __Request__task_create_identity_token_t"]
        [::std::mem::align_of::<__Request__task_create_identity_token_t>() - 4usize];
    ["Offset of field: __Request__task_create_identity_token_t::Head"]
        [::std::mem::offset_of!(__Request__task_create_identity_token_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_identity_token_get_task_port_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: task_flavor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_identity_token_get_task_port_t"]
        [::std::mem::size_of::<__Request__task_identity_token_get_task_port_t>() - 36usize];
    ["Alignment of __Request__task_identity_token_get_task_port_t"]
        [::std::mem::align_of::<__Request__task_identity_token_get_task_port_t>() - 4usize];
    ["Offset of field: __Request__task_identity_token_get_task_port_t::Head"]
        [::std::mem::offset_of!(__Request__task_identity_token_get_task_port_t, Head) - 0usize];
    ["Offset of field: __Request__task_identity_token_get_task_port_t::NDR"]
        [::std::mem::offset_of!(__Request__task_identity_token_get_task_port_t, NDR) - 24usize];
    ["Offset of field: __Request__task_identity_token_get_task_port_t::flavor"]
        [::std::mem::offset_of!(__Request__task_identity_token_get_task_port_t, flavor) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_dyld_process_info_notify_deregister_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub notify: mach_port_name_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_dyld_process_info_notify_deregister_t"]
        [::std::mem::size_of::<__Request__task_dyld_process_info_notify_deregister_t>() - 36usize];
    ["Alignment of __Request__task_dyld_process_info_notify_deregister_t"]
        [::std::mem::align_of::<__Request__task_dyld_process_info_notify_deregister_t>() - 4usize];
    ["Offset of field: __Request__task_dyld_process_info_notify_deregister_t::Head"][::std::mem::offset_of!(
        __Request__task_dyld_process_info_notify_deregister_t,
        Head
    ) - 0usize];
    ["Offset of field: __Request__task_dyld_process_info_notify_deregister_t::NDR"][::std::mem::offset_of!(
        __Request__task_dyld_process_info_notify_deregister_t,
        NDR
    ) - 24usize];
    ["Offset of field: __Request__task_dyld_process_info_notify_deregister_t::notify"][::std::mem::offset_of!(
        __Request__task_dyld_process_info_notify_deregister_t,
        notify
    ) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_get_exception_ports_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_get_exception_ports_info_t"]
        [::std::mem::size_of::<__Request__task_get_exception_ports_info_t>() - 36usize];
    ["Alignment of __Request__task_get_exception_ports_info_t"]
        [::std::mem::align_of::<__Request__task_get_exception_ports_info_t>() - 4usize];
    ["Offset of field: __Request__task_get_exception_ports_info_t::Head"]
        [::std::mem::offset_of!(__Request__task_get_exception_ports_info_t, Head) - 0usize];
    ["Offset of field: __Request__task_get_exception_ports_info_t::NDR"]
        [::std::mem::offset_of!(__Request__task_get_exception_ports_info_t, NDR) - 24usize];
    ["Offset of field: __Request__task_get_exception_ports_info_t::exception_mask"][::std::mem::offset_of!(
        __Request__task_get_exception_ports_info_t,
        exception_mask
    ) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_test_sync_upcall_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub port: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_test_sync_upcall_t"]
        [::std::mem::size_of::<__Request__task_test_sync_upcall_t>() - 40usize];
    ["Alignment of __Request__task_test_sync_upcall_t"]
        [::std::mem::align_of::<__Request__task_test_sync_upcall_t>() - 4usize];
    ["Offset of field: __Request__task_test_sync_upcall_t::Head"]
        [::std::mem::offset_of!(__Request__task_test_sync_upcall_t, Head) - 0usize];
    ["Offset of field: __Request__task_test_sync_upcall_t::msgh_body"]
        [::std::mem::offset_of!(__Request__task_test_sync_upcall_t, msgh_body) - 24usize];
    ["Offset of field: __Request__task_test_sync_upcall_t::port"]
        [::std::mem::offset_of!(__Request__task_test_sync_upcall_t, port) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_set_corpse_forking_behavior_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub behavior: task_corpse_forking_behavior_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_set_corpse_forking_behavior_t"]
        [::std::mem::size_of::<__Request__task_set_corpse_forking_behavior_t>() - 36usize];
    ["Alignment of __Request__task_set_corpse_forking_behavior_t"]
        [::std::mem::align_of::<__Request__task_set_corpse_forking_behavior_t>() - 4usize];
    ["Offset of field: __Request__task_set_corpse_forking_behavior_t::Head"]
        [::std::mem::offset_of!(__Request__task_set_corpse_forking_behavior_t, Head) - 0usize];
    ["Offset of field: __Request__task_set_corpse_forking_behavior_t::NDR"]
        [::std::mem::offset_of!(__Request__task_set_corpse_forking_behavior_t, NDR) - 24usize];
    ["Offset of field: __Request__task_set_corpse_forking_behavior_t::behavior"]
        [::std::mem::offset_of!(__Request__task_set_corpse_forking_behavior_t, behavior) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_test_async_upcall_propagation_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub qos: ::std::os::raw::c_int,
    pub iotier: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_test_async_upcall_propagation_t"]
        [::std::mem::size_of::<__Request__task_test_async_upcall_propagation_t>() - 56usize];
    ["Alignment of __Request__task_test_async_upcall_propagation_t"]
        [::std::mem::align_of::<__Request__task_test_async_upcall_propagation_t>() - 4usize];
    ["Offset of field: __Request__task_test_async_upcall_propagation_t::Head"]
        [::std::mem::offset_of!(__Request__task_test_async_upcall_propagation_t, Head) - 0usize];
    ["Offset of field: __Request__task_test_async_upcall_propagation_t::msgh_body"][::std::mem::offset_of!(
        __Request__task_test_async_upcall_propagation_t,
        msgh_body
    ) - 24usize];
    ["Offset of field: __Request__task_test_async_upcall_propagation_t::port"]
        [::std::mem::offset_of!(__Request__task_test_async_upcall_propagation_t, port) - 28usize];
    ["Offset of field: __Request__task_test_async_upcall_propagation_t::NDR"]
        [::std::mem::offset_of!(__Request__task_test_async_upcall_propagation_t, NDR) - 40usize];
    ["Offset of field: __Request__task_test_async_upcall_propagation_t::qos"]
        [::std::mem::offset_of!(__Request__task_test_async_upcall_propagation_t, qos) - 48usize];
    ["Offset of field: __Request__task_test_async_upcall_propagation_t::iotier"]
        [::std::mem::offset_of!(__Request__task_test_async_upcall_propagation_t, iotier) - 52usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_map_kcdata_object_64_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub kcdata_object: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_map_kcdata_object_64_t"]
        [::std::mem::size_of::<__Request__task_map_kcdata_object_64_t>() - 40usize];
    ["Alignment of __Request__task_map_kcdata_object_64_t"]
        [::std::mem::align_of::<__Request__task_map_kcdata_object_64_t>() - 4usize];
    ["Offset of field: __Request__task_map_kcdata_object_64_t::Head"]
        [::std::mem::offset_of!(__Request__task_map_kcdata_object_64_t, Head) - 0usize];
    ["Offset of field: __Request__task_map_kcdata_object_64_t::msgh_body"]
        [::std::mem::offset_of!(__Request__task_map_kcdata_object_64_t, msgh_body) - 24usize];
    ["Offset of field: __Request__task_map_kcdata_object_64_t::kcdata_object"]
        [::std::mem::offset_of!(__Request__task_map_kcdata_object_64_t, kcdata_object) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_register_hardened_exception_handler_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_exception_port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub signed_pc_key: u32,
    pub exceptions_allowed: exception_mask_t,
    pub behaviors_allowed: exception_behavior_t,
    pub flavors_allowed: thread_state_flavor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_register_hardened_exception_handler_t"]
        [::std::mem::size_of::<__Request__task_register_hardened_exception_handler_t>() - 64usize];
    ["Alignment of __Request__task_register_hardened_exception_handler_t"]
        [::std::mem::align_of::<__Request__task_register_hardened_exception_handler_t>() - 4usize];
    ["Offset of field: __Request__task_register_hardened_exception_handler_t::Head"][::std::mem::offset_of!(
        __Request__task_register_hardened_exception_handler_t,
        Head
    ) - 0usize];
    ["Offset of field: __Request__task_register_hardened_exception_handler_t::msgh_body"][::std::mem::offset_of!(
        __Request__task_register_hardened_exception_handler_t,
        msgh_body
    )
        - 24usize];
    ["Offset of field: __Request__task_register_hardened_exception_handler_t::new_exception_port"] [:: std :: mem :: offset_of ! (__Request__task_register_hardened_exception_handler_t , new_exception_port) - 28usize] ;
    ["Offset of field: __Request__task_register_hardened_exception_handler_t::NDR"][::std::mem::offset_of!(
        __Request__task_register_hardened_exception_handler_t,
        NDR
    ) - 40usize];
    ["Offset of field: __Request__task_register_hardened_exception_handler_t::signed_pc_key"][::std::mem::offset_of!(
        __Request__task_register_hardened_exception_handler_t,
        signed_pc_key
    )
        - 48usize];
    ["Offset of field: __Request__task_register_hardened_exception_handler_t::exceptions_allowed"] [:: std :: mem :: offset_of ! (__Request__task_register_hardened_exception_handler_t , exceptions_allowed) - 52usize] ;
    ["Offset of field: __Request__task_register_hardened_exception_handler_t::behaviors_allowed"][::std::mem::offset_of!(
        __Request__task_register_hardened_exception_handler_t,
        behaviors_allowed
    )
        - 56usize];
    ["Offset of field: __Request__task_register_hardened_exception_handler_t::flavors_allowed"][::std::mem::offset_of!(
        __Request__task_register_hardened_exception_handler_t,
        flavors_allowed
    )
        - 60usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__task_subsystem {
    pub Request_task_create: __Request__task_create_t,
    pub Request_task_terminate: __Request__task_terminate_t,
    pub Request_task_threads: __Request__task_threads_t,
    pub Request_mach_ports_register: __Request__mach_ports_register_t,
    pub Request_mach_ports_lookup: __Request__mach_ports_lookup_t,
    pub Request_task_info: __Request__task_info_t,
    pub Request_task_set_info: __Request__task_set_info_t,
    pub Request_task_suspend: __Request__task_suspend_t,
    pub Request_task_resume: __Request__task_resume_t,
    pub Request_task_get_special_port: __Request__task_get_special_port_t,
    pub Request_task_set_special_port: __Request__task_set_special_port_t,
    pub Request_thread_create: __Request__thread_create_t,
    pub Request_thread_create_running: __Request__thread_create_running_t,
    pub Request_task_set_exception_ports: __Request__task_set_exception_ports_t,
    pub Request_task_get_exception_ports: __Request__task_get_exception_ports_t,
    pub Request_task_swap_exception_ports: __Request__task_swap_exception_ports_t,
    pub Request_lock_set_create: __Request__lock_set_create_t,
    pub Request_lock_set_destroy: __Request__lock_set_destroy_t,
    pub Request_semaphore_create: __Request__semaphore_create_t,
    pub Request_semaphore_destroy: __Request__semaphore_destroy_t,
    pub Request_task_policy_set: __Request__task_policy_set_t,
    pub Request_task_policy_get: __Request__task_policy_get_t,
    pub Request_task_sample: __Request__task_sample_t,
    pub Request_task_policy: __Request__task_policy_t,
    pub Request_task_set_emulation: __Request__task_set_emulation_t,
    pub Request_task_get_emulation_vector: __Request__task_get_emulation_vector_t,
    pub Request_task_set_emulation_vector: __Request__task_set_emulation_vector_t,
    pub Request_task_set_ras_pc: __Request__task_set_ras_pc_t,
    pub Request_task_zone_info: __Request__task_zone_info_t,
    pub Request_task_assign: __Request__task_assign_t,
    pub Request_task_assign_default: __Request__task_assign_default_t,
    pub Request_task_get_assignment: __Request__task_get_assignment_t,
    pub Request_task_set_policy: __Request__task_set_policy_t,
    pub Request_task_get_state: __Request__task_get_state_t,
    pub Request_task_set_state: __Request__task_set_state_t,
    pub Request_task_set_phys_footprint_limit: __Request__task_set_phys_footprint_limit_t,
    pub Request_task_suspend2: __Request__task_suspend2_t,
    pub Request_task_resume2: __Request__task_resume2_t,
    pub Request_task_purgable_info: __Request__task_purgable_info_t,
    pub Request_task_get_mach_voucher: __Request__task_get_mach_voucher_t,
    pub Request_task_set_mach_voucher: __Request__task_set_mach_voucher_t,
    pub Request_task_swap_mach_voucher: __Request__task_swap_mach_voucher_t,
    pub Request_task_generate_corpse: __Request__task_generate_corpse_t,
    pub Request_task_map_corpse_info: __Request__task_map_corpse_info_t,
    pub Request_task_register_dyld_image_infos: __Request__task_register_dyld_image_infos_t,
    pub Request_task_unregister_dyld_image_infos: __Request__task_unregister_dyld_image_infos_t,
    pub Request_task_get_dyld_image_infos: __Request__task_get_dyld_image_infos_t,
    pub Request_task_register_dyld_shared_cache_image_info:
        __Request__task_register_dyld_shared_cache_image_info_t,
    pub Request_task_register_dyld_set_dyld_state: __Request__task_register_dyld_set_dyld_state_t,
    pub Request_task_register_dyld_get_process_state:
        __Request__task_register_dyld_get_process_state_t,
    pub Request_task_map_corpse_info_64: __Request__task_map_corpse_info_64_t,
    pub Request_task_inspect: __Request__task_inspect_t,
    pub Request_task_get_exc_guard_behavior: __Request__task_get_exc_guard_behavior_t,
    pub Request_task_set_exc_guard_behavior: __Request__task_set_exc_guard_behavior_t,
    pub Request_task_dyld_process_info_notify_register:
        __Request__task_dyld_process_info_notify_register_t,
    pub Request_task_create_identity_token: __Request__task_create_identity_token_t,
    pub Request_task_identity_token_get_task_port: __Request__task_identity_token_get_task_port_t,
    pub Request_task_dyld_process_info_notify_deregister:
        __Request__task_dyld_process_info_notify_deregister_t,
    pub Request_task_get_exception_ports_info: __Request__task_get_exception_ports_info_t,
    pub Request_task_test_sync_upcall: __Request__task_test_sync_upcall_t,
    pub Request_task_set_corpse_forking_behavior: __Request__task_set_corpse_forking_behavior_t,
    pub Request_task_test_async_upcall_propagation: __Request__task_test_async_upcall_propagation_t,
    pub Request_task_map_kcdata_object_64: __Request__task_map_kcdata_object_64_t,
    pub Request_task_register_hardened_exception_handler:
        __Request__task_register_hardened_exception_handler_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __RequestUnion__task_subsystem"]
        [::std::mem::size_of::<__RequestUnion__task_subsystem>() - 5224usize];
    ["Alignment of __RequestUnion__task_subsystem"]
        [::std::mem::align_of::<__RequestUnion__task_subsystem>() - 4usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_create"]
        [::std::mem::offset_of!(__RequestUnion__task_subsystem, Request_task_create) - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_terminate"]
        [::std::mem::offset_of!(__RequestUnion__task_subsystem, Request_task_terminate) - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_threads"]
        [::std::mem::offset_of!(__RequestUnion__task_subsystem, Request_task_threads) - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_mach_ports_register"][::std::mem::offset_of!(
        __RequestUnion__task_subsystem,
        Request_mach_ports_register
    ) - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_mach_ports_lookup"][::std::mem::offset_of!(
        __RequestUnion__task_subsystem,
        Request_mach_ports_lookup
    ) - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_info"]
        [::std::mem::offset_of!(__RequestUnion__task_subsystem, Request_task_info) - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_set_info"]
        [::std::mem::offset_of!(__RequestUnion__task_subsystem, Request_task_set_info) - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_suspend"]
        [::std::mem::offset_of!(__RequestUnion__task_subsystem, Request_task_suspend) - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_resume"]
        [::std::mem::offset_of!(__RequestUnion__task_subsystem, Request_task_resume) - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_get_special_port"][::std::mem::offset_of!(
        __RequestUnion__task_subsystem,
        Request_task_get_special_port
    ) - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_set_special_port"][::std::mem::offset_of!(
        __RequestUnion__task_subsystem,
        Request_task_set_special_port
    ) - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_thread_create"]
        [::std::mem::offset_of!(__RequestUnion__task_subsystem, Request_thread_create) - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_thread_create_running"][::std::mem::offset_of!(
        __RequestUnion__task_subsystem,
        Request_thread_create_running
    ) - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_set_exception_ports"][::std::mem::offset_of!(
        __RequestUnion__task_subsystem,
        Request_task_set_exception_ports
    )
        - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_get_exception_ports"][::std::mem::offset_of!(
        __RequestUnion__task_subsystem,
        Request_task_get_exception_ports
    )
        - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_swap_exception_ports"][::std::mem::offset_of!(
        __RequestUnion__task_subsystem,
        Request_task_swap_exception_ports
    )
        - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_lock_set_create"]
        [::std::mem::offset_of!(__RequestUnion__task_subsystem, Request_lock_set_create) - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_lock_set_destroy"]
        [::std::mem::offset_of!(__RequestUnion__task_subsystem, Request_lock_set_destroy) - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_semaphore_create"]
        [::std::mem::offset_of!(__RequestUnion__task_subsystem, Request_semaphore_create) - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_semaphore_destroy"][::std::mem::offset_of!(
        __RequestUnion__task_subsystem,
        Request_semaphore_destroy
    ) - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_policy_set"]
        [::std::mem::offset_of!(__RequestUnion__task_subsystem, Request_task_policy_set) - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_policy_get"]
        [::std::mem::offset_of!(__RequestUnion__task_subsystem, Request_task_policy_get) - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_sample"]
        [::std::mem::offset_of!(__RequestUnion__task_subsystem, Request_task_sample) - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_policy"]
        [::std::mem::offset_of!(__RequestUnion__task_subsystem, Request_task_policy) - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_set_emulation"][::std::mem::offset_of!(
        __RequestUnion__task_subsystem,
        Request_task_set_emulation
    ) - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_get_emulation_vector"][::std::mem::offset_of!(
        __RequestUnion__task_subsystem,
        Request_task_get_emulation_vector
    )
        - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_set_emulation_vector"][::std::mem::offset_of!(
        __RequestUnion__task_subsystem,
        Request_task_set_emulation_vector
    )
        - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_set_ras_pc"]
        [::std::mem::offset_of!(__RequestUnion__task_subsystem, Request_task_set_ras_pc) - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_zone_info"]
        [::std::mem::offset_of!(__RequestUnion__task_subsystem, Request_task_zone_info) - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_assign"]
        [::std::mem::offset_of!(__RequestUnion__task_subsystem, Request_task_assign) - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_assign_default"][::std::mem::offset_of!(
        __RequestUnion__task_subsystem,
        Request_task_assign_default
    ) - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_get_assignment"][::std::mem::offset_of!(
        __RequestUnion__task_subsystem,
        Request_task_get_assignment
    ) - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_set_policy"]
        [::std::mem::offset_of!(__RequestUnion__task_subsystem, Request_task_set_policy) - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_get_state"]
        [::std::mem::offset_of!(__RequestUnion__task_subsystem, Request_task_get_state) - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_set_state"]
        [::std::mem::offset_of!(__RequestUnion__task_subsystem, Request_task_set_state) - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_set_phys_footprint_limit"][::std::mem::offset_of!(
        __RequestUnion__task_subsystem,
        Request_task_set_phys_footprint_limit
    )
        - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_suspend2"]
        [::std::mem::offset_of!(__RequestUnion__task_subsystem, Request_task_suspend2) - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_resume2"]
        [::std::mem::offset_of!(__RequestUnion__task_subsystem, Request_task_resume2) - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_purgable_info"][::std::mem::offset_of!(
        __RequestUnion__task_subsystem,
        Request_task_purgable_info
    ) - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_get_mach_voucher"][::std::mem::offset_of!(
        __RequestUnion__task_subsystem,
        Request_task_get_mach_voucher
    ) - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_set_mach_voucher"][::std::mem::offset_of!(
        __RequestUnion__task_subsystem,
        Request_task_set_mach_voucher
    ) - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_swap_mach_voucher"][::std::mem::offset_of!(
        __RequestUnion__task_subsystem,
        Request_task_swap_mach_voucher
    ) - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_generate_corpse"][::std::mem::offset_of!(
        __RequestUnion__task_subsystem,
        Request_task_generate_corpse
    ) - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_map_corpse_info"][::std::mem::offset_of!(
        __RequestUnion__task_subsystem,
        Request_task_map_corpse_info
    ) - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_register_dyld_image_infos"][::std::mem::offset_of!(
        __RequestUnion__task_subsystem,
        Request_task_register_dyld_image_infos
    )
        - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_unregister_dyld_image_infos"][::std::mem::offset_of!(
        __RequestUnion__task_subsystem,
        Request_task_unregister_dyld_image_infos
    )
        - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_get_dyld_image_infos"][::std::mem::offset_of!(
        __RequestUnion__task_subsystem,
        Request_task_get_dyld_image_infos
    )
        - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_register_dyld_shared_cache_image_info"] [:: std :: mem :: offset_of ! (__RequestUnion__task_subsystem , Request_task_register_dyld_shared_cache_image_info) - 0usize] ;
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_register_dyld_set_dyld_state"] [:: std :: mem :: offset_of ! (__RequestUnion__task_subsystem , Request_task_register_dyld_set_dyld_state) - 0usize] ;
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_register_dyld_get_process_state"] [:: std :: mem :: offset_of ! (__RequestUnion__task_subsystem , Request_task_register_dyld_get_process_state) - 0usize] ;
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_map_corpse_info_64"][::std::mem::offset_of!(
        __RequestUnion__task_subsystem,
        Request_task_map_corpse_info_64
    )
        - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_inspect"]
        [::std::mem::offset_of!(__RequestUnion__task_subsystem, Request_task_inspect) - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_get_exc_guard_behavior"][::std::mem::offset_of!(
        __RequestUnion__task_subsystem,
        Request_task_get_exc_guard_behavior
    )
        - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_set_exc_guard_behavior"][::std::mem::offset_of!(
        __RequestUnion__task_subsystem,
        Request_task_set_exc_guard_behavior
    )
        - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_dyld_process_info_notify_register"] [:: std :: mem :: offset_of ! (__RequestUnion__task_subsystem , Request_task_dyld_process_info_notify_register) - 0usize] ;
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_create_identity_token"][::std::mem::offset_of!(
        __RequestUnion__task_subsystem,
        Request_task_create_identity_token
    )
        - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_identity_token_get_task_port"] [:: std :: mem :: offset_of ! (__RequestUnion__task_subsystem , Request_task_identity_token_get_task_port) - 0usize] ;
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_dyld_process_info_notify_deregister"] [:: std :: mem :: offset_of ! (__RequestUnion__task_subsystem , Request_task_dyld_process_info_notify_deregister) - 0usize] ;
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_get_exception_ports_info"][::std::mem::offset_of!(
        __RequestUnion__task_subsystem,
        Request_task_get_exception_ports_info
    )
        - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_test_sync_upcall"][::std::mem::offset_of!(
        __RequestUnion__task_subsystem,
        Request_task_test_sync_upcall
    ) - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_set_corpse_forking_behavior"][::std::mem::offset_of!(
        __RequestUnion__task_subsystem,
        Request_task_set_corpse_forking_behavior
    )
        - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_test_async_upcall_propagation"] [:: std :: mem :: offset_of ! (__RequestUnion__task_subsystem , Request_task_test_async_upcall_propagation) - 0usize] ;
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_map_kcdata_object_64"][::std::mem::offset_of!(
        __RequestUnion__task_subsystem,
        Request_task_map_kcdata_object_64
    )
        - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_register_hardened_exception_handler"] [:: std :: mem :: offset_of ! (__RequestUnion__task_subsystem , Request_task_register_hardened_exception_handler) - 0usize] ;
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_create_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub child_task: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_create_t"][::std::mem::size_of::<__Reply__task_create_t>() - 40usize];
    ["Alignment of __Reply__task_create_t"]
        [::std::mem::align_of::<__Reply__task_create_t>() - 4usize];
    ["Offset of field: __Reply__task_create_t::Head"]
        [::std::mem::offset_of!(__Reply__task_create_t, Head) - 0usize];
    ["Offset of field: __Reply__task_create_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__task_create_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__task_create_t::child_task"]
        [::std::mem::offset_of!(__Reply__task_create_t, child_task) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_terminate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_terminate_t"]
        [::std::mem::size_of::<__Reply__task_terminate_t>() - 36usize];
    ["Alignment of __Reply__task_terminate_t"]
        [::std::mem::align_of::<__Reply__task_terminate_t>() - 4usize];
    ["Offset of field: __Reply__task_terminate_t::Head"]
        [::std::mem::offset_of!(__Reply__task_terminate_t, Head) - 0usize];
    ["Offset of field: __Reply__task_terminate_t::NDR"]
        [::std::mem::offset_of!(__Reply__task_terminate_t, NDR) - 24usize];
    ["Offset of field: __Reply__task_terminate_t::RetCode"]
        [::std::mem::offset_of!(__Reply__task_terminate_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_threads_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub act_list: mach_msg_ool_ports_descriptor_t,
    pub NDR: NDR_record_t,
    pub act_listCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_threads_t"][::std::mem::size_of::<__Reply__task_threads_t>() - 56usize];
    ["Alignment of __Reply__task_threads_t"]
        [::std::mem::align_of::<__Reply__task_threads_t>() - 4usize];
    ["Offset of field: __Reply__task_threads_t::Head"]
        [::std::mem::offset_of!(__Reply__task_threads_t, Head) - 0usize];
    ["Offset of field: __Reply__task_threads_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__task_threads_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__task_threads_t::act_list"]
        [::std::mem::offset_of!(__Reply__task_threads_t, act_list) - 28usize];
    ["Offset of field: __Reply__task_threads_t::NDR"]
        [::std::mem::offset_of!(__Reply__task_threads_t, NDR) - 44usize];
    ["Offset of field: __Reply__task_threads_t::act_listCnt"]
        [::std::mem::offset_of!(__Reply__task_threads_t, act_listCnt) - 52usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_ports_register_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_ports_register_t"]
        [::std::mem::size_of::<__Reply__mach_ports_register_t>() - 36usize];
    ["Alignment of __Reply__mach_ports_register_t"]
        [::std::mem::align_of::<__Reply__mach_ports_register_t>() - 4usize];
    ["Offset of field: __Reply__mach_ports_register_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_ports_register_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_ports_register_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_ports_register_t, NDR) - 24usize];
    ["Offset of field: __Reply__mach_ports_register_t::RetCode"]
        [::std::mem::offset_of!(__Reply__mach_ports_register_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_ports_lookup_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub init_port_set: mach_msg_ool_ports_descriptor_t,
    pub NDR: NDR_record_t,
    pub init_port_setCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_ports_lookup_t"]
        [::std::mem::size_of::<__Reply__mach_ports_lookup_t>() - 56usize];
    ["Alignment of __Reply__mach_ports_lookup_t"]
        [::std::mem::align_of::<__Reply__mach_ports_lookup_t>() - 4usize];
    ["Offset of field: __Reply__mach_ports_lookup_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_ports_lookup_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_ports_lookup_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__mach_ports_lookup_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__mach_ports_lookup_t::init_port_set"]
        [::std::mem::offset_of!(__Reply__mach_ports_lookup_t, init_port_set) - 28usize];
    ["Offset of field: __Reply__mach_ports_lookup_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_ports_lookup_t, NDR) - 44usize];
    ["Offset of field: __Reply__mach_ports_lookup_t::init_port_setCnt"]
        [::std::mem::offset_of!(__Reply__mach_ports_lookup_t, init_port_setCnt) - 52usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub task_info_outCnt: mach_msg_type_number_t,
    pub task_info_out: [integer_t; 94usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_info_t"][::std::mem::size_of::<__Reply__task_info_t>() - 416usize];
    ["Alignment of __Reply__task_info_t"][::std::mem::align_of::<__Reply__task_info_t>() - 4usize];
    ["Offset of field: __Reply__task_info_t::Head"]
        [::std::mem::offset_of!(__Reply__task_info_t, Head) - 0usize];
    ["Offset of field: __Reply__task_info_t::NDR"]
        [::std::mem::offset_of!(__Reply__task_info_t, NDR) - 24usize];
    ["Offset of field: __Reply__task_info_t::RetCode"]
        [::std::mem::offset_of!(__Reply__task_info_t, RetCode) - 32usize];
    ["Offset of field: __Reply__task_info_t::task_info_outCnt"]
        [::std::mem::offset_of!(__Reply__task_info_t, task_info_outCnt) - 36usize];
    ["Offset of field: __Reply__task_info_t::task_info_out"]
        [::std::mem::offset_of!(__Reply__task_info_t, task_info_out) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_set_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_set_info_t"]
        [::std::mem::size_of::<__Reply__task_set_info_t>() - 36usize];
    ["Alignment of __Reply__task_set_info_t"]
        [::std::mem::align_of::<__Reply__task_set_info_t>() - 4usize];
    ["Offset of field: __Reply__task_set_info_t::Head"]
        [::std::mem::offset_of!(__Reply__task_set_info_t, Head) - 0usize];
    ["Offset of field: __Reply__task_set_info_t::NDR"]
        [::std::mem::offset_of!(__Reply__task_set_info_t, NDR) - 24usize];
    ["Offset of field: __Reply__task_set_info_t::RetCode"]
        [::std::mem::offset_of!(__Reply__task_set_info_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_suspend_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_suspend_t"][::std::mem::size_of::<__Reply__task_suspend_t>() - 36usize];
    ["Alignment of __Reply__task_suspend_t"]
        [::std::mem::align_of::<__Reply__task_suspend_t>() - 4usize];
    ["Offset of field: __Reply__task_suspend_t::Head"]
        [::std::mem::offset_of!(__Reply__task_suspend_t, Head) - 0usize];
    ["Offset of field: __Reply__task_suspend_t::NDR"]
        [::std::mem::offset_of!(__Reply__task_suspend_t, NDR) - 24usize];
    ["Offset of field: __Reply__task_suspend_t::RetCode"]
        [::std::mem::offset_of!(__Reply__task_suspend_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_resume_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_resume_t"][::std::mem::size_of::<__Reply__task_resume_t>() - 36usize];
    ["Alignment of __Reply__task_resume_t"]
        [::std::mem::align_of::<__Reply__task_resume_t>() - 4usize];
    ["Offset of field: __Reply__task_resume_t::Head"]
        [::std::mem::offset_of!(__Reply__task_resume_t, Head) - 0usize];
    ["Offset of field: __Reply__task_resume_t::NDR"]
        [::std::mem::offset_of!(__Reply__task_resume_t, NDR) - 24usize];
    ["Offset of field: __Reply__task_resume_t::RetCode"]
        [::std::mem::offset_of!(__Reply__task_resume_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_get_special_port_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub special_port: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_get_special_port_t"]
        [::std::mem::size_of::<__Reply__task_get_special_port_t>() - 40usize];
    ["Alignment of __Reply__task_get_special_port_t"]
        [::std::mem::align_of::<__Reply__task_get_special_port_t>() - 4usize];
    ["Offset of field: __Reply__task_get_special_port_t::Head"]
        [::std::mem::offset_of!(__Reply__task_get_special_port_t, Head) - 0usize];
    ["Offset of field: __Reply__task_get_special_port_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__task_get_special_port_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__task_get_special_port_t::special_port"]
        [::std::mem::offset_of!(__Reply__task_get_special_port_t, special_port) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_set_special_port_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_set_special_port_t"]
        [::std::mem::size_of::<__Reply__task_set_special_port_t>() - 36usize];
    ["Alignment of __Reply__task_set_special_port_t"]
        [::std::mem::align_of::<__Reply__task_set_special_port_t>() - 4usize];
    ["Offset of field: __Reply__task_set_special_port_t::Head"]
        [::std::mem::offset_of!(__Reply__task_set_special_port_t, Head) - 0usize];
    ["Offset of field: __Reply__task_set_special_port_t::NDR"]
        [::std::mem::offset_of!(__Reply__task_set_special_port_t, NDR) - 24usize];
    ["Offset of field: __Reply__task_set_special_port_t::RetCode"]
        [::std::mem::offset_of!(__Reply__task_set_special_port_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_create_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub child_act: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__thread_create_t"]
        [::std::mem::size_of::<__Reply__thread_create_t>() - 40usize];
    ["Alignment of __Reply__thread_create_t"]
        [::std::mem::align_of::<__Reply__thread_create_t>() - 4usize];
    ["Offset of field: __Reply__thread_create_t::Head"]
        [::std::mem::offset_of!(__Reply__thread_create_t, Head) - 0usize];
    ["Offset of field: __Reply__thread_create_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__thread_create_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__thread_create_t::child_act"]
        [::std::mem::offset_of!(__Reply__thread_create_t, child_act) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_create_running_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub child_act: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__thread_create_running_t"]
        [::std::mem::size_of::<__Reply__thread_create_running_t>() - 40usize];
    ["Alignment of __Reply__thread_create_running_t"]
        [::std::mem::align_of::<__Reply__thread_create_running_t>() - 4usize];
    ["Offset of field: __Reply__thread_create_running_t::Head"]
        [::std::mem::offset_of!(__Reply__thread_create_running_t, Head) - 0usize];
    ["Offset of field: __Reply__thread_create_running_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__thread_create_running_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__thread_create_running_t::child_act"]
        [::std::mem::offset_of!(__Reply__thread_create_running_t, child_act) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_set_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_set_exception_ports_t"]
        [::std::mem::size_of::<__Reply__task_set_exception_ports_t>() - 36usize];
    ["Alignment of __Reply__task_set_exception_ports_t"]
        [::std::mem::align_of::<__Reply__task_set_exception_ports_t>() - 4usize];
    ["Offset of field: __Reply__task_set_exception_ports_t::Head"]
        [::std::mem::offset_of!(__Reply__task_set_exception_ports_t, Head) - 0usize];
    ["Offset of field: __Reply__task_set_exception_ports_t::NDR"]
        [::std::mem::offset_of!(__Reply__task_set_exception_ports_t, NDR) - 24usize];
    ["Offset of field: __Reply__task_set_exception_ports_t::RetCode"]
        [::std::mem::offset_of!(__Reply__task_set_exception_ports_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_get_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub old_handlers: [mach_msg_port_descriptor_t; 32usize],
    pub NDR: NDR_record_t,
    pub masksCnt: mach_msg_type_number_t,
    pub masks: [exception_mask_t; 32usize],
    pub old_behaviors: [exception_behavior_t; 32usize],
    pub old_flavors: [thread_state_flavor_t; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_get_exception_ports_t"]
        [::std::mem::size_of::<__Reply__task_get_exception_ports_t>() - 808usize];
    ["Alignment of __Reply__task_get_exception_ports_t"]
        [::std::mem::align_of::<__Reply__task_get_exception_ports_t>() - 4usize];
    ["Offset of field: __Reply__task_get_exception_ports_t::Head"]
        [::std::mem::offset_of!(__Reply__task_get_exception_ports_t, Head) - 0usize];
    ["Offset of field: __Reply__task_get_exception_ports_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__task_get_exception_ports_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__task_get_exception_ports_t::old_handlers"]
        [::std::mem::offset_of!(__Reply__task_get_exception_ports_t, old_handlers) - 28usize];
    ["Offset of field: __Reply__task_get_exception_ports_t::NDR"]
        [::std::mem::offset_of!(__Reply__task_get_exception_ports_t, NDR) - 412usize];
    ["Offset of field: __Reply__task_get_exception_ports_t::masksCnt"]
        [::std::mem::offset_of!(__Reply__task_get_exception_ports_t, masksCnt) - 420usize];
    ["Offset of field: __Reply__task_get_exception_ports_t::masks"]
        [::std::mem::offset_of!(__Reply__task_get_exception_ports_t, masks) - 424usize];
    ["Offset of field: __Reply__task_get_exception_ports_t::old_behaviors"]
        [::std::mem::offset_of!(__Reply__task_get_exception_ports_t, old_behaviors) - 552usize];
    ["Offset of field: __Reply__task_get_exception_ports_t::old_flavors"]
        [::std::mem::offset_of!(__Reply__task_get_exception_ports_t, old_flavors) - 680usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_swap_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub old_handlers: [mach_msg_port_descriptor_t; 32usize],
    pub NDR: NDR_record_t,
    pub masksCnt: mach_msg_type_number_t,
    pub masks: [exception_mask_t; 32usize],
    pub old_behaviors: [exception_behavior_t; 32usize],
    pub old_flavors: [thread_state_flavor_t; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_swap_exception_ports_t"]
        [::std::mem::size_of::<__Reply__task_swap_exception_ports_t>() - 808usize];
    ["Alignment of __Reply__task_swap_exception_ports_t"]
        [::std::mem::align_of::<__Reply__task_swap_exception_ports_t>() - 4usize];
    ["Offset of field: __Reply__task_swap_exception_ports_t::Head"]
        [::std::mem::offset_of!(__Reply__task_swap_exception_ports_t, Head) - 0usize];
    ["Offset of field: __Reply__task_swap_exception_ports_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__task_swap_exception_ports_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__task_swap_exception_ports_t::old_handlers"]
        [::std::mem::offset_of!(__Reply__task_swap_exception_ports_t, old_handlers) - 28usize];
    ["Offset of field: __Reply__task_swap_exception_ports_t::NDR"]
        [::std::mem::offset_of!(__Reply__task_swap_exception_ports_t, NDR) - 412usize];
    ["Offset of field: __Reply__task_swap_exception_ports_t::masksCnt"]
        [::std::mem::offset_of!(__Reply__task_swap_exception_ports_t, masksCnt) - 420usize];
    ["Offset of field: __Reply__task_swap_exception_ports_t::masks"]
        [::std::mem::offset_of!(__Reply__task_swap_exception_ports_t, masks) - 424usize];
    ["Offset of field: __Reply__task_swap_exception_ports_t::old_behaviors"]
        [::std::mem::offset_of!(__Reply__task_swap_exception_ports_t, old_behaviors) - 552usize];
    ["Offset of field: __Reply__task_swap_exception_ports_t::old_flavors"]
        [::std::mem::offset_of!(__Reply__task_swap_exception_ports_t, old_flavors) - 680usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__lock_set_create_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_lock_set: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__lock_set_create_t"]
        [::std::mem::size_of::<__Reply__lock_set_create_t>() - 40usize];
    ["Alignment of __Reply__lock_set_create_t"]
        [::std::mem::align_of::<__Reply__lock_set_create_t>() - 4usize];
    ["Offset of field: __Reply__lock_set_create_t::Head"]
        [::std::mem::offset_of!(__Reply__lock_set_create_t, Head) - 0usize];
    ["Offset of field: __Reply__lock_set_create_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__lock_set_create_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__lock_set_create_t::new_lock_set"]
        [::std::mem::offset_of!(__Reply__lock_set_create_t, new_lock_set) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__lock_set_destroy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__lock_set_destroy_t"]
        [::std::mem::size_of::<__Reply__lock_set_destroy_t>() - 36usize];
    ["Alignment of __Reply__lock_set_destroy_t"]
        [::std::mem::align_of::<__Reply__lock_set_destroy_t>() - 4usize];
    ["Offset of field: __Reply__lock_set_destroy_t::Head"]
        [::std::mem::offset_of!(__Reply__lock_set_destroy_t, Head) - 0usize];
    ["Offset of field: __Reply__lock_set_destroy_t::NDR"]
        [::std::mem::offset_of!(__Reply__lock_set_destroy_t, NDR) - 24usize];
    ["Offset of field: __Reply__lock_set_destroy_t::RetCode"]
        [::std::mem::offset_of!(__Reply__lock_set_destroy_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__semaphore_create_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub semaphore: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__semaphore_create_t"]
        [::std::mem::size_of::<__Reply__semaphore_create_t>() - 40usize];
    ["Alignment of __Reply__semaphore_create_t"]
        [::std::mem::align_of::<__Reply__semaphore_create_t>() - 4usize];
    ["Offset of field: __Reply__semaphore_create_t::Head"]
        [::std::mem::offset_of!(__Reply__semaphore_create_t, Head) - 0usize];
    ["Offset of field: __Reply__semaphore_create_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__semaphore_create_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__semaphore_create_t::semaphore"]
        [::std::mem::offset_of!(__Reply__semaphore_create_t, semaphore) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__semaphore_destroy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__semaphore_destroy_t"]
        [::std::mem::size_of::<__Reply__semaphore_destroy_t>() - 36usize];
    ["Alignment of __Reply__semaphore_destroy_t"]
        [::std::mem::align_of::<__Reply__semaphore_destroy_t>() - 4usize];
    ["Offset of field: __Reply__semaphore_destroy_t::Head"]
        [::std::mem::offset_of!(__Reply__semaphore_destroy_t, Head) - 0usize];
    ["Offset of field: __Reply__semaphore_destroy_t::NDR"]
        [::std::mem::offset_of!(__Reply__semaphore_destroy_t, NDR) - 24usize];
    ["Offset of field: __Reply__semaphore_destroy_t::RetCode"]
        [::std::mem::offset_of!(__Reply__semaphore_destroy_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_policy_set_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_policy_set_t"]
        [::std::mem::size_of::<__Reply__task_policy_set_t>() - 36usize];
    ["Alignment of __Reply__task_policy_set_t"]
        [::std::mem::align_of::<__Reply__task_policy_set_t>() - 4usize];
    ["Offset of field: __Reply__task_policy_set_t::Head"]
        [::std::mem::offset_of!(__Reply__task_policy_set_t, Head) - 0usize];
    ["Offset of field: __Reply__task_policy_set_t::NDR"]
        [::std::mem::offset_of!(__Reply__task_policy_set_t, NDR) - 24usize];
    ["Offset of field: __Reply__task_policy_set_t::RetCode"]
        [::std::mem::offset_of!(__Reply__task_policy_set_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_policy_get_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub policy_infoCnt: mach_msg_type_number_t,
    pub policy_info: [integer_t; 16usize],
    pub get_default: boolean_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_policy_get_t"]
        [::std::mem::size_of::<__Reply__task_policy_get_t>() - 108usize];
    ["Alignment of __Reply__task_policy_get_t"]
        [::std::mem::align_of::<__Reply__task_policy_get_t>() - 4usize];
    ["Offset of field: __Reply__task_policy_get_t::Head"]
        [::std::mem::offset_of!(__Reply__task_policy_get_t, Head) - 0usize];
    ["Offset of field: __Reply__task_policy_get_t::NDR"]
        [::std::mem::offset_of!(__Reply__task_policy_get_t, NDR) - 24usize];
    ["Offset of field: __Reply__task_policy_get_t::RetCode"]
        [::std::mem::offset_of!(__Reply__task_policy_get_t, RetCode) - 32usize];
    ["Offset of field: __Reply__task_policy_get_t::policy_infoCnt"]
        [::std::mem::offset_of!(__Reply__task_policy_get_t, policy_infoCnt) - 36usize];
    ["Offset of field: __Reply__task_policy_get_t::policy_info"]
        [::std::mem::offset_of!(__Reply__task_policy_get_t, policy_info) - 40usize];
    ["Offset of field: __Reply__task_policy_get_t::get_default"]
        [::std::mem::offset_of!(__Reply__task_policy_get_t, get_default) - 104usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_sample_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_sample_t"][::std::mem::size_of::<__Reply__task_sample_t>() - 36usize];
    ["Alignment of __Reply__task_sample_t"]
        [::std::mem::align_of::<__Reply__task_sample_t>() - 4usize];
    ["Offset of field: __Reply__task_sample_t::Head"]
        [::std::mem::offset_of!(__Reply__task_sample_t, Head) - 0usize];
    ["Offset of field: __Reply__task_sample_t::NDR"]
        [::std::mem::offset_of!(__Reply__task_sample_t, NDR) - 24usize];
    ["Offset of field: __Reply__task_sample_t::RetCode"]
        [::std::mem::offset_of!(__Reply__task_sample_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_policy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_policy_t"][::std::mem::size_of::<__Reply__task_policy_t>() - 36usize];
    ["Alignment of __Reply__task_policy_t"]
        [::std::mem::align_of::<__Reply__task_policy_t>() - 4usize];
    ["Offset of field: __Reply__task_policy_t::Head"]
        [::std::mem::offset_of!(__Reply__task_policy_t, Head) - 0usize];
    ["Offset of field: __Reply__task_policy_t::NDR"]
        [::std::mem::offset_of!(__Reply__task_policy_t, NDR) - 24usize];
    ["Offset of field: __Reply__task_policy_t::RetCode"]
        [::std::mem::offset_of!(__Reply__task_policy_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_set_emulation_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_set_emulation_t"]
        [::std::mem::size_of::<__Reply__task_set_emulation_t>() - 36usize];
    ["Alignment of __Reply__task_set_emulation_t"]
        [::std::mem::align_of::<__Reply__task_set_emulation_t>() - 4usize];
    ["Offset of field: __Reply__task_set_emulation_t::Head"]
        [::std::mem::offset_of!(__Reply__task_set_emulation_t, Head) - 0usize];
    ["Offset of field: __Reply__task_set_emulation_t::NDR"]
        [::std::mem::offset_of!(__Reply__task_set_emulation_t, NDR) - 24usize];
    ["Offset of field: __Reply__task_set_emulation_t::RetCode"]
        [::std::mem::offset_of!(__Reply__task_set_emulation_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_get_emulation_vector_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub emulation_vector: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub vector_start: ::std::os::raw::c_int,
    pub emulation_vectorCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_get_emulation_vector_t"]
        [::std::mem::size_of::<__Reply__task_get_emulation_vector_t>() - 60usize];
    ["Alignment of __Reply__task_get_emulation_vector_t"]
        [::std::mem::align_of::<__Reply__task_get_emulation_vector_t>() - 4usize];
    ["Offset of field: __Reply__task_get_emulation_vector_t::Head"]
        [::std::mem::offset_of!(__Reply__task_get_emulation_vector_t, Head) - 0usize];
    ["Offset of field: __Reply__task_get_emulation_vector_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__task_get_emulation_vector_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__task_get_emulation_vector_t::emulation_vector"]
        [::std::mem::offset_of!(__Reply__task_get_emulation_vector_t, emulation_vector) - 28usize];
    ["Offset of field: __Reply__task_get_emulation_vector_t::NDR"]
        [::std::mem::offset_of!(__Reply__task_get_emulation_vector_t, NDR) - 44usize];
    ["Offset of field: __Reply__task_get_emulation_vector_t::vector_start"]
        [::std::mem::offset_of!(__Reply__task_get_emulation_vector_t, vector_start) - 52usize];
    ["Offset of field: __Reply__task_get_emulation_vector_t::emulation_vectorCnt"][::std::mem::offset_of!(
        __Reply__task_get_emulation_vector_t,
        emulation_vectorCnt
    ) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_set_emulation_vector_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_set_emulation_vector_t"]
        [::std::mem::size_of::<__Reply__task_set_emulation_vector_t>() - 36usize];
    ["Alignment of __Reply__task_set_emulation_vector_t"]
        [::std::mem::align_of::<__Reply__task_set_emulation_vector_t>() - 4usize];
    ["Offset of field: __Reply__task_set_emulation_vector_t::Head"]
        [::std::mem::offset_of!(__Reply__task_set_emulation_vector_t, Head) - 0usize];
    ["Offset of field: __Reply__task_set_emulation_vector_t::NDR"]
        [::std::mem::offset_of!(__Reply__task_set_emulation_vector_t, NDR) - 24usize];
    ["Offset of field: __Reply__task_set_emulation_vector_t::RetCode"]
        [::std::mem::offset_of!(__Reply__task_set_emulation_vector_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_set_ras_pc_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_set_ras_pc_t"]
        [::std::mem::size_of::<__Reply__task_set_ras_pc_t>() - 36usize];
    ["Alignment of __Reply__task_set_ras_pc_t"]
        [::std::mem::align_of::<__Reply__task_set_ras_pc_t>() - 4usize];
    ["Offset of field: __Reply__task_set_ras_pc_t::Head"]
        [::std::mem::offset_of!(__Reply__task_set_ras_pc_t, Head) - 0usize];
    ["Offset of field: __Reply__task_set_ras_pc_t::NDR"]
        [::std::mem::offset_of!(__Reply__task_set_ras_pc_t, NDR) - 24usize];
    ["Offset of field: __Reply__task_set_ras_pc_t::RetCode"]
        [::std::mem::offset_of!(__Reply__task_set_ras_pc_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_zone_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub names: mach_msg_ool_descriptor_t,
    pub info: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub namesCnt: mach_msg_type_number_t,
    pub infoCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_zone_info_t"]
        [::std::mem::size_of::<__Reply__task_zone_info_t>() - 76usize];
    ["Alignment of __Reply__task_zone_info_t"]
        [::std::mem::align_of::<__Reply__task_zone_info_t>() - 4usize];
    ["Offset of field: __Reply__task_zone_info_t::Head"]
        [::std::mem::offset_of!(__Reply__task_zone_info_t, Head) - 0usize];
    ["Offset of field: __Reply__task_zone_info_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__task_zone_info_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__task_zone_info_t::names"]
        [::std::mem::offset_of!(__Reply__task_zone_info_t, names) - 28usize];
    ["Offset of field: __Reply__task_zone_info_t::info"]
        [::std::mem::offset_of!(__Reply__task_zone_info_t, info) - 44usize];
    ["Offset of field: __Reply__task_zone_info_t::NDR"]
        [::std::mem::offset_of!(__Reply__task_zone_info_t, NDR) - 60usize];
    ["Offset of field: __Reply__task_zone_info_t::namesCnt"]
        [::std::mem::offset_of!(__Reply__task_zone_info_t, namesCnt) - 68usize];
    ["Offset of field: __Reply__task_zone_info_t::infoCnt"]
        [::std::mem::offset_of!(__Reply__task_zone_info_t, infoCnt) - 72usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_assign_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_assign_t"][::std::mem::size_of::<__Reply__task_assign_t>() - 36usize];
    ["Alignment of __Reply__task_assign_t"]
        [::std::mem::align_of::<__Reply__task_assign_t>() - 4usize];
    ["Offset of field: __Reply__task_assign_t::Head"]
        [::std::mem::offset_of!(__Reply__task_assign_t, Head) - 0usize];
    ["Offset of field: __Reply__task_assign_t::NDR"]
        [::std::mem::offset_of!(__Reply__task_assign_t, NDR) - 24usize];
    ["Offset of field: __Reply__task_assign_t::RetCode"]
        [::std::mem::offset_of!(__Reply__task_assign_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_assign_default_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_assign_default_t"]
        [::std::mem::size_of::<__Reply__task_assign_default_t>() - 36usize];
    ["Alignment of __Reply__task_assign_default_t"]
        [::std::mem::align_of::<__Reply__task_assign_default_t>() - 4usize];
    ["Offset of field: __Reply__task_assign_default_t::Head"]
        [::std::mem::offset_of!(__Reply__task_assign_default_t, Head) - 0usize];
    ["Offset of field: __Reply__task_assign_default_t::NDR"]
        [::std::mem::offset_of!(__Reply__task_assign_default_t, NDR) - 24usize];
    ["Offset of field: __Reply__task_assign_default_t::RetCode"]
        [::std::mem::offset_of!(__Reply__task_assign_default_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_get_assignment_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub assigned_set: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_get_assignment_t"]
        [::std::mem::size_of::<__Reply__task_get_assignment_t>() - 40usize];
    ["Alignment of __Reply__task_get_assignment_t"]
        [::std::mem::align_of::<__Reply__task_get_assignment_t>() - 4usize];
    ["Offset of field: __Reply__task_get_assignment_t::Head"]
        [::std::mem::offset_of!(__Reply__task_get_assignment_t, Head) - 0usize];
    ["Offset of field: __Reply__task_get_assignment_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__task_get_assignment_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__task_get_assignment_t::assigned_set"]
        [::std::mem::offset_of!(__Reply__task_get_assignment_t, assigned_set) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_set_policy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_set_policy_t"]
        [::std::mem::size_of::<__Reply__task_set_policy_t>() - 36usize];
    ["Alignment of __Reply__task_set_policy_t"]
        [::std::mem::align_of::<__Reply__task_set_policy_t>() - 4usize];
    ["Offset of field: __Reply__task_set_policy_t::Head"]
        [::std::mem::offset_of!(__Reply__task_set_policy_t, Head) - 0usize];
    ["Offset of field: __Reply__task_set_policy_t::NDR"]
        [::std::mem::offset_of!(__Reply__task_set_policy_t, NDR) - 24usize];
    ["Offset of field: __Reply__task_set_policy_t::RetCode"]
        [::std::mem::offset_of!(__Reply__task_set_policy_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_get_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub old_stateCnt: mach_msg_type_number_t,
    pub old_state: [natural_t; 1296usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_get_state_t"]
        [::std::mem::size_of::<__Reply__task_get_state_t>() - 5224usize];
    ["Alignment of __Reply__task_get_state_t"]
        [::std::mem::align_of::<__Reply__task_get_state_t>() - 4usize];
    ["Offset of field: __Reply__task_get_state_t::Head"]
        [::std::mem::offset_of!(__Reply__task_get_state_t, Head) - 0usize];
    ["Offset of field: __Reply__task_get_state_t::NDR"]
        [::std::mem::offset_of!(__Reply__task_get_state_t, NDR) - 24usize];
    ["Offset of field: __Reply__task_get_state_t::RetCode"]
        [::std::mem::offset_of!(__Reply__task_get_state_t, RetCode) - 32usize];
    ["Offset of field: __Reply__task_get_state_t::old_stateCnt"]
        [::std::mem::offset_of!(__Reply__task_get_state_t, old_stateCnt) - 36usize];
    ["Offset of field: __Reply__task_get_state_t::old_state"]
        [::std::mem::offset_of!(__Reply__task_get_state_t, old_state) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_set_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_set_state_t"]
        [::std::mem::size_of::<__Reply__task_set_state_t>() - 36usize];
    ["Alignment of __Reply__task_set_state_t"]
        [::std::mem::align_of::<__Reply__task_set_state_t>() - 4usize];
    ["Offset of field: __Reply__task_set_state_t::Head"]
        [::std::mem::offset_of!(__Reply__task_set_state_t, Head) - 0usize];
    ["Offset of field: __Reply__task_set_state_t::NDR"]
        [::std::mem::offset_of!(__Reply__task_set_state_t, NDR) - 24usize];
    ["Offset of field: __Reply__task_set_state_t::RetCode"]
        [::std::mem::offset_of!(__Reply__task_set_state_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_set_phys_footprint_limit_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub old_limit: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_set_phys_footprint_limit_t"]
        [::std::mem::size_of::<__Reply__task_set_phys_footprint_limit_t>() - 40usize];
    ["Alignment of __Reply__task_set_phys_footprint_limit_t"]
        [::std::mem::align_of::<__Reply__task_set_phys_footprint_limit_t>() - 4usize];
    ["Offset of field: __Reply__task_set_phys_footprint_limit_t::Head"]
        [::std::mem::offset_of!(__Reply__task_set_phys_footprint_limit_t, Head) - 0usize];
    ["Offset of field: __Reply__task_set_phys_footprint_limit_t::NDR"]
        [::std::mem::offset_of!(__Reply__task_set_phys_footprint_limit_t, NDR) - 24usize];
    ["Offset of field: __Reply__task_set_phys_footprint_limit_t::RetCode"]
        [::std::mem::offset_of!(__Reply__task_set_phys_footprint_limit_t, RetCode) - 32usize];
    ["Offset of field: __Reply__task_set_phys_footprint_limit_t::old_limit"]
        [::std::mem::offset_of!(__Reply__task_set_phys_footprint_limit_t, old_limit) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_suspend2_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub suspend_token: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_suspend2_t"]
        [::std::mem::size_of::<__Reply__task_suspend2_t>() - 40usize];
    ["Alignment of __Reply__task_suspend2_t"]
        [::std::mem::align_of::<__Reply__task_suspend2_t>() - 4usize];
    ["Offset of field: __Reply__task_suspend2_t::Head"]
        [::std::mem::offset_of!(__Reply__task_suspend2_t, Head) - 0usize];
    ["Offset of field: __Reply__task_suspend2_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__task_suspend2_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__task_suspend2_t::suspend_token"]
        [::std::mem::offset_of!(__Reply__task_suspend2_t, suspend_token) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_resume2_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_resume2_t"][::std::mem::size_of::<__Reply__task_resume2_t>() - 36usize];
    ["Alignment of __Reply__task_resume2_t"]
        [::std::mem::align_of::<__Reply__task_resume2_t>() - 4usize];
    ["Offset of field: __Reply__task_resume2_t::Head"]
        [::std::mem::offset_of!(__Reply__task_resume2_t, Head) - 0usize];
    ["Offset of field: __Reply__task_resume2_t::NDR"]
        [::std::mem::offset_of!(__Reply__task_resume2_t, NDR) - 24usize];
    ["Offset of field: __Reply__task_resume2_t::RetCode"]
        [::std::mem::offset_of!(__Reply__task_resume2_t, RetCode) - 32usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_purgable_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub stats: task_purgable_info_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_purgable_info_t"]
        [::std::mem::size_of::<__Reply__task_purgable_info_t>() - 308usize];
    ["Alignment of __Reply__task_purgable_info_t"]
        [::std::mem::align_of::<__Reply__task_purgable_info_t>() - 4usize];
    ["Offset of field: __Reply__task_purgable_info_t::Head"]
        [::std::mem::offset_of!(__Reply__task_purgable_info_t, Head) - 0usize];
    ["Offset of field: __Reply__task_purgable_info_t::NDR"]
        [::std::mem::offset_of!(__Reply__task_purgable_info_t, NDR) - 24usize];
    ["Offset of field: __Reply__task_purgable_info_t::RetCode"]
        [::std::mem::offset_of!(__Reply__task_purgable_info_t, RetCode) - 32usize];
    ["Offset of field: __Reply__task_purgable_info_t::stats"]
        [::std::mem::offset_of!(__Reply__task_purgable_info_t, stats) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_get_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub voucher: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_get_mach_voucher_t"]
        [::std::mem::size_of::<__Reply__task_get_mach_voucher_t>() - 40usize];
    ["Alignment of __Reply__task_get_mach_voucher_t"]
        [::std::mem::align_of::<__Reply__task_get_mach_voucher_t>() - 4usize];
    ["Offset of field: __Reply__task_get_mach_voucher_t::Head"]
        [::std::mem::offset_of!(__Reply__task_get_mach_voucher_t, Head) - 0usize];
    ["Offset of field: __Reply__task_get_mach_voucher_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__task_get_mach_voucher_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__task_get_mach_voucher_t::voucher"]
        [::std::mem::offset_of!(__Reply__task_get_mach_voucher_t, voucher) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_set_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_set_mach_voucher_t"]
        [::std::mem::size_of::<__Reply__task_set_mach_voucher_t>() - 36usize];
    ["Alignment of __Reply__task_set_mach_voucher_t"]
        [::std::mem::align_of::<__Reply__task_set_mach_voucher_t>() - 4usize];
    ["Offset of field: __Reply__task_set_mach_voucher_t::Head"]
        [::std::mem::offset_of!(__Reply__task_set_mach_voucher_t, Head) - 0usize];
    ["Offset of field: __Reply__task_set_mach_voucher_t::NDR"]
        [::std::mem::offset_of!(__Reply__task_set_mach_voucher_t, NDR) - 24usize];
    ["Offset of field: __Reply__task_set_mach_voucher_t::RetCode"]
        [::std::mem::offset_of!(__Reply__task_set_mach_voucher_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_swap_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub old_voucher: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_swap_mach_voucher_t"]
        [::std::mem::size_of::<__Reply__task_swap_mach_voucher_t>() - 40usize];
    ["Alignment of __Reply__task_swap_mach_voucher_t"]
        [::std::mem::align_of::<__Reply__task_swap_mach_voucher_t>() - 4usize];
    ["Offset of field: __Reply__task_swap_mach_voucher_t::Head"]
        [::std::mem::offset_of!(__Reply__task_swap_mach_voucher_t, Head) - 0usize];
    ["Offset of field: __Reply__task_swap_mach_voucher_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__task_swap_mach_voucher_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__task_swap_mach_voucher_t::old_voucher"]
        [::std::mem::offset_of!(__Reply__task_swap_mach_voucher_t, old_voucher) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_generate_corpse_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub corpse_task_port: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_generate_corpse_t"]
        [::std::mem::size_of::<__Reply__task_generate_corpse_t>() - 40usize];
    ["Alignment of __Reply__task_generate_corpse_t"]
        [::std::mem::align_of::<__Reply__task_generate_corpse_t>() - 4usize];
    ["Offset of field: __Reply__task_generate_corpse_t::Head"]
        [::std::mem::offset_of!(__Reply__task_generate_corpse_t, Head) - 0usize];
    ["Offset of field: __Reply__task_generate_corpse_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__task_generate_corpse_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__task_generate_corpse_t::corpse_task_port"]
        [::std::mem::offset_of!(__Reply__task_generate_corpse_t, corpse_task_port) - 28usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_map_corpse_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub kcd_addr_begin: vm_address_t,
    pub kcd_size: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_map_corpse_info_t"]
        [::std::mem::size_of::<__Reply__task_map_corpse_info_t>() - 48usize];
    ["Alignment of __Reply__task_map_corpse_info_t"]
        [::std::mem::align_of::<__Reply__task_map_corpse_info_t>() - 4usize];
    ["Offset of field: __Reply__task_map_corpse_info_t::Head"]
        [::std::mem::offset_of!(__Reply__task_map_corpse_info_t, Head) - 0usize];
    ["Offset of field: __Reply__task_map_corpse_info_t::NDR"]
        [::std::mem::offset_of!(__Reply__task_map_corpse_info_t, NDR) - 24usize];
    ["Offset of field: __Reply__task_map_corpse_info_t::RetCode"]
        [::std::mem::offset_of!(__Reply__task_map_corpse_info_t, RetCode) - 32usize];
    ["Offset of field: __Reply__task_map_corpse_info_t::kcd_addr_begin"]
        [::std::mem::offset_of!(__Reply__task_map_corpse_info_t, kcd_addr_begin) - 36usize];
    ["Offset of field: __Reply__task_map_corpse_info_t::kcd_size"]
        [::std::mem::offset_of!(__Reply__task_map_corpse_info_t, kcd_size) - 44usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_register_dyld_image_infos_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_register_dyld_image_infos_t"]
        [::std::mem::size_of::<__Reply__task_register_dyld_image_infos_t>() - 36usize];
    ["Alignment of __Reply__task_register_dyld_image_infos_t"]
        [::std::mem::align_of::<__Reply__task_register_dyld_image_infos_t>() - 4usize];
    ["Offset of field: __Reply__task_register_dyld_image_infos_t::Head"]
        [::std::mem::offset_of!(__Reply__task_register_dyld_image_infos_t, Head) - 0usize];
    ["Offset of field: __Reply__task_register_dyld_image_infos_t::NDR"]
        [::std::mem::offset_of!(__Reply__task_register_dyld_image_infos_t, NDR) - 24usize];
    ["Offset of field: __Reply__task_register_dyld_image_infos_t::RetCode"]
        [::std::mem::offset_of!(__Reply__task_register_dyld_image_infos_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_unregister_dyld_image_infos_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_unregister_dyld_image_infos_t"]
        [::std::mem::size_of::<__Reply__task_unregister_dyld_image_infos_t>() - 36usize];
    ["Alignment of __Reply__task_unregister_dyld_image_infos_t"]
        [::std::mem::align_of::<__Reply__task_unregister_dyld_image_infos_t>() - 4usize];
    ["Offset of field: __Reply__task_unregister_dyld_image_infos_t::Head"]
        [::std::mem::offset_of!(__Reply__task_unregister_dyld_image_infos_t, Head) - 0usize];
    ["Offset of field: __Reply__task_unregister_dyld_image_infos_t::NDR"]
        [::std::mem::offset_of!(__Reply__task_unregister_dyld_image_infos_t, NDR) - 24usize];
    ["Offset of field: __Reply__task_unregister_dyld_image_infos_t::RetCode"]
        [::std::mem::offset_of!(__Reply__task_unregister_dyld_image_infos_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_get_dyld_image_infos_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub dyld_images: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub dyld_imagesCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_get_dyld_image_infos_t"]
        [::std::mem::size_of::<__Reply__task_get_dyld_image_infos_t>() - 56usize];
    ["Alignment of __Reply__task_get_dyld_image_infos_t"]
        [::std::mem::align_of::<__Reply__task_get_dyld_image_infos_t>() - 4usize];
    ["Offset of field: __Reply__task_get_dyld_image_infos_t::Head"]
        [::std::mem::offset_of!(__Reply__task_get_dyld_image_infos_t, Head) - 0usize];
    ["Offset of field: __Reply__task_get_dyld_image_infos_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__task_get_dyld_image_infos_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__task_get_dyld_image_infos_t::dyld_images"]
        [::std::mem::offset_of!(__Reply__task_get_dyld_image_infos_t, dyld_images) - 28usize];
    ["Offset of field: __Reply__task_get_dyld_image_infos_t::NDR"]
        [::std::mem::offset_of!(__Reply__task_get_dyld_image_infos_t, NDR) - 44usize];
    ["Offset of field: __Reply__task_get_dyld_image_infos_t::dyld_imagesCnt"]
        [::std::mem::offset_of!(__Reply__task_get_dyld_image_infos_t, dyld_imagesCnt) - 52usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_register_dyld_shared_cache_image_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_register_dyld_shared_cache_image_info_t"]
        [::std::mem::size_of::<__Reply__task_register_dyld_shared_cache_image_info_t>() - 36usize];
    ["Alignment of __Reply__task_register_dyld_shared_cache_image_info_t"]
        [::std::mem::align_of::<__Reply__task_register_dyld_shared_cache_image_info_t>() - 4usize];
    ["Offset of field: __Reply__task_register_dyld_shared_cache_image_info_t::Head"][::std::mem::offset_of!(
        __Reply__task_register_dyld_shared_cache_image_info_t,
        Head
    ) - 0usize];
    ["Offset of field: __Reply__task_register_dyld_shared_cache_image_info_t::NDR"][::std::mem::offset_of!(
        __Reply__task_register_dyld_shared_cache_image_info_t,
        NDR
    ) - 24usize];
    ["Offset of field: __Reply__task_register_dyld_shared_cache_image_info_t::RetCode"][::std::mem::offset_of!(
        __Reply__task_register_dyld_shared_cache_image_info_t,
        RetCode
    )
        - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_register_dyld_set_dyld_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_register_dyld_set_dyld_state_t"]
        [::std::mem::size_of::<__Reply__task_register_dyld_set_dyld_state_t>() - 36usize];
    ["Alignment of __Reply__task_register_dyld_set_dyld_state_t"]
        [::std::mem::align_of::<__Reply__task_register_dyld_set_dyld_state_t>() - 4usize];
    ["Offset of field: __Reply__task_register_dyld_set_dyld_state_t::Head"]
        [::std::mem::offset_of!(__Reply__task_register_dyld_set_dyld_state_t, Head) - 0usize];
    ["Offset of field: __Reply__task_register_dyld_set_dyld_state_t::NDR"]
        [::std::mem::offset_of!(__Reply__task_register_dyld_set_dyld_state_t, NDR) - 24usize];
    ["Offset of field: __Reply__task_register_dyld_set_dyld_state_t::RetCode"]
        [::std::mem::offset_of!(__Reply__task_register_dyld_set_dyld_state_t, RetCode) - 32usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_register_dyld_get_process_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub dyld_process_state: dyld_kernel_process_info_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_register_dyld_get_process_state_t"]
        [::std::mem::size_of::<__Reply__task_register_dyld_get_process_state_t>() - 108usize];
    ["Alignment of __Reply__task_register_dyld_get_process_state_t"]
        [::std::mem::align_of::<__Reply__task_register_dyld_get_process_state_t>() - 4usize];
    ["Offset of field: __Reply__task_register_dyld_get_process_state_t::Head"]
        [::std::mem::offset_of!(__Reply__task_register_dyld_get_process_state_t, Head) - 0usize];
    ["Offset of field: __Reply__task_register_dyld_get_process_state_t::NDR"]
        [::std::mem::offset_of!(__Reply__task_register_dyld_get_process_state_t, NDR) - 24usize];
    ["Offset of field: __Reply__task_register_dyld_get_process_state_t::RetCode"][::std::mem::offset_of!(
        __Reply__task_register_dyld_get_process_state_t,
        RetCode
    ) - 32usize];
    ["Offset of field: __Reply__task_register_dyld_get_process_state_t::dyld_process_state"][::std::mem::offset_of!(
        __Reply__task_register_dyld_get_process_state_t,
        dyld_process_state
    )
        - 36usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_map_corpse_info_64_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub kcd_addr_begin: mach_vm_address_t,
    pub kcd_size: mach_vm_size_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_map_corpse_info_64_t"]
        [::std::mem::size_of::<__Reply__task_map_corpse_info_64_t>() - 52usize];
    ["Alignment of __Reply__task_map_corpse_info_64_t"]
        [::std::mem::align_of::<__Reply__task_map_corpse_info_64_t>() - 4usize];
    ["Offset of field: __Reply__task_map_corpse_info_64_t::Head"]
        [::std::mem::offset_of!(__Reply__task_map_corpse_info_64_t, Head) - 0usize];
    ["Offset of field: __Reply__task_map_corpse_info_64_t::NDR"]
        [::std::mem::offset_of!(__Reply__task_map_corpse_info_64_t, NDR) - 24usize];
    ["Offset of field: __Reply__task_map_corpse_info_64_t::RetCode"]
        [::std::mem::offset_of!(__Reply__task_map_corpse_info_64_t, RetCode) - 32usize];
    ["Offset of field: __Reply__task_map_corpse_info_64_t::kcd_addr_begin"]
        [::std::mem::offset_of!(__Reply__task_map_corpse_info_64_t, kcd_addr_begin) - 36usize];
    ["Offset of field: __Reply__task_map_corpse_info_64_t::kcd_size"]
        [::std::mem::offset_of!(__Reply__task_map_corpse_info_64_t, kcd_size) - 44usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_inspect_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub info_outCnt: mach_msg_type_number_t,
    pub info_out: [integer_t; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_inspect_t"][::std::mem::size_of::<__Reply__task_inspect_t>() - 56usize];
    ["Alignment of __Reply__task_inspect_t"]
        [::std::mem::align_of::<__Reply__task_inspect_t>() - 4usize];
    ["Offset of field: __Reply__task_inspect_t::Head"]
        [::std::mem::offset_of!(__Reply__task_inspect_t, Head) - 0usize];
    ["Offset of field: __Reply__task_inspect_t::NDR"]
        [::std::mem::offset_of!(__Reply__task_inspect_t, NDR) - 24usize];
    ["Offset of field: __Reply__task_inspect_t::RetCode"]
        [::std::mem::offset_of!(__Reply__task_inspect_t, RetCode) - 32usize];
    ["Offset of field: __Reply__task_inspect_t::info_outCnt"]
        [::std::mem::offset_of!(__Reply__task_inspect_t, info_outCnt) - 36usize];
    ["Offset of field: __Reply__task_inspect_t::info_out"]
        [::std::mem::offset_of!(__Reply__task_inspect_t, info_out) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_get_exc_guard_behavior_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub behavior: task_exc_guard_behavior_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_get_exc_guard_behavior_t"]
        [::std::mem::size_of::<__Reply__task_get_exc_guard_behavior_t>() - 40usize];
    ["Alignment of __Reply__task_get_exc_guard_behavior_t"]
        [::std::mem::align_of::<__Reply__task_get_exc_guard_behavior_t>() - 4usize];
    ["Offset of field: __Reply__task_get_exc_guard_behavior_t::Head"]
        [::std::mem::offset_of!(__Reply__task_get_exc_guard_behavior_t, Head) - 0usize];
    ["Offset of field: __Reply__task_get_exc_guard_behavior_t::NDR"]
        [::std::mem::offset_of!(__Reply__task_get_exc_guard_behavior_t, NDR) - 24usize];
    ["Offset of field: __Reply__task_get_exc_guard_behavior_t::RetCode"]
        [::std::mem::offset_of!(__Reply__task_get_exc_guard_behavior_t, RetCode) - 32usize];
    ["Offset of field: __Reply__task_get_exc_guard_behavior_t::behavior"]
        [::std::mem::offset_of!(__Reply__task_get_exc_guard_behavior_t, behavior) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_set_exc_guard_behavior_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_set_exc_guard_behavior_t"]
        [::std::mem::size_of::<__Reply__task_set_exc_guard_behavior_t>() - 36usize];
    ["Alignment of __Reply__task_set_exc_guard_behavior_t"]
        [::std::mem::align_of::<__Reply__task_set_exc_guard_behavior_t>() - 4usize];
    ["Offset of field: __Reply__task_set_exc_guard_behavior_t::Head"]
        [::std::mem::offset_of!(__Reply__task_set_exc_guard_behavior_t, Head) - 0usize];
    ["Offset of field: __Reply__task_set_exc_guard_behavior_t::NDR"]
        [::std::mem::offset_of!(__Reply__task_set_exc_guard_behavior_t, NDR) - 24usize];
    ["Offset of field: __Reply__task_set_exc_guard_behavior_t::RetCode"]
        [::std::mem::offset_of!(__Reply__task_set_exc_guard_behavior_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_dyld_process_info_notify_register_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_dyld_process_info_notify_register_t"]
        [::std::mem::size_of::<__Reply__task_dyld_process_info_notify_register_t>() - 36usize];
    ["Alignment of __Reply__task_dyld_process_info_notify_register_t"]
        [::std::mem::align_of::<__Reply__task_dyld_process_info_notify_register_t>() - 4usize];
    ["Offset of field: __Reply__task_dyld_process_info_notify_register_t::Head"]
        [::std::mem::offset_of!(__Reply__task_dyld_process_info_notify_register_t, Head) - 0usize];
    ["Offset of field: __Reply__task_dyld_process_info_notify_register_t::NDR"]
        [::std::mem::offset_of!(__Reply__task_dyld_process_info_notify_register_t, NDR) - 24usize];
    ["Offset of field: __Reply__task_dyld_process_info_notify_register_t::RetCode"][::std::mem::offset_of!(
        __Reply__task_dyld_process_info_notify_register_t,
        RetCode
    ) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_create_identity_token_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub token: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_create_identity_token_t"]
        [::std::mem::size_of::<__Reply__task_create_identity_token_t>() - 40usize];
    ["Alignment of __Reply__task_create_identity_token_t"]
        [::std::mem::align_of::<__Reply__task_create_identity_token_t>() - 4usize];
    ["Offset of field: __Reply__task_create_identity_token_t::Head"]
        [::std::mem::offset_of!(__Reply__task_create_identity_token_t, Head) - 0usize];
    ["Offset of field: __Reply__task_create_identity_token_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__task_create_identity_token_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__task_create_identity_token_t::token"]
        [::std::mem::offset_of!(__Reply__task_create_identity_token_t, token) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_identity_token_get_task_port_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub task_port: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_identity_token_get_task_port_t"]
        [::std::mem::size_of::<__Reply__task_identity_token_get_task_port_t>() - 40usize];
    ["Alignment of __Reply__task_identity_token_get_task_port_t"]
        [::std::mem::align_of::<__Reply__task_identity_token_get_task_port_t>() - 4usize];
    ["Offset of field: __Reply__task_identity_token_get_task_port_t::Head"]
        [::std::mem::offset_of!(__Reply__task_identity_token_get_task_port_t, Head) - 0usize];
    ["Offset of field: __Reply__task_identity_token_get_task_port_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__task_identity_token_get_task_port_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__task_identity_token_get_task_port_t::task_port"]
        [::std::mem::offset_of!(__Reply__task_identity_token_get_task_port_t, task_port) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_dyld_process_info_notify_deregister_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_dyld_process_info_notify_deregister_t"]
        [::std::mem::size_of::<__Reply__task_dyld_process_info_notify_deregister_t>() - 36usize];
    ["Alignment of __Reply__task_dyld_process_info_notify_deregister_t"]
        [::std::mem::align_of::<__Reply__task_dyld_process_info_notify_deregister_t>() - 4usize];
    ["Offset of field: __Reply__task_dyld_process_info_notify_deregister_t::Head"][::std::mem::offset_of!(
        __Reply__task_dyld_process_info_notify_deregister_t,
        Head
    ) - 0usize];
    ["Offset of field: __Reply__task_dyld_process_info_notify_deregister_t::NDR"][::std::mem::offset_of!(
        __Reply__task_dyld_process_info_notify_deregister_t,
        NDR
    ) - 24usize];
    ["Offset of field: __Reply__task_dyld_process_info_notify_deregister_t::RetCode"][::std::mem::offset_of!(
        __Reply__task_dyld_process_info_notify_deregister_t,
        RetCode
    ) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_get_exception_ports_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub masksCnt: mach_msg_type_number_t,
    pub masks: [exception_mask_t; 32usize],
    pub old_handlers_info: [exception_handler_info_t; 32usize],
    pub old_behaviors: [exception_behavior_t; 32usize],
    pub old_flavors: [thread_state_flavor_t; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_get_exception_ports_info_t"]
        [::std::mem::size_of::<__Reply__task_get_exception_ports_info_t>() - 680usize];
    ["Alignment of __Reply__task_get_exception_ports_info_t"]
        [::std::mem::align_of::<__Reply__task_get_exception_ports_info_t>() - 4usize];
    ["Offset of field: __Reply__task_get_exception_ports_info_t::Head"]
        [::std::mem::offset_of!(__Reply__task_get_exception_ports_info_t, Head) - 0usize];
    ["Offset of field: __Reply__task_get_exception_ports_info_t::NDR"]
        [::std::mem::offset_of!(__Reply__task_get_exception_ports_info_t, NDR) - 24usize];
    ["Offset of field: __Reply__task_get_exception_ports_info_t::RetCode"]
        [::std::mem::offset_of!(__Reply__task_get_exception_ports_info_t, RetCode) - 32usize];
    ["Offset of field: __Reply__task_get_exception_ports_info_t::masksCnt"]
        [::std::mem::offset_of!(__Reply__task_get_exception_ports_info_t, masksCnt) - 36usize];
    ["Offset of field: __Reply__task_get_exception_ports_info_t::masks"]
        [::std::mem::offset_of!(__Reply__task_get_exception_ports_info_t, masks) - 40usize];
    ["Offset of field: __Reply__task_get_exception_ports_info_t::old_handlers_info"][::std::mem::offset_of!(
        __Reply__task_get_exception_ports_info_t,
        old_handlers_info
    ) - 168usize];
    ["Offset of field: __Reply__task_get_exception_ports_info_t::old_behaviors"][::std::mem::offset_of!(
        __Reply__task_get_exception_ports_info_t,
        old_behaviors
    ) - 424usize];
    ["Offset of field: __Reply__task_get_exception_ports_info_t::old_flavors"]
        [::std::mem::offset_of!(__Reply__task_get_exception_ports_info_t, old_flavors) - 552usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_test_sync_upcall_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_test_sync_upcall_t"]
        [::std::mem::size_of::<__Reply__task_test_sync_upcall_t>() - 36usize];
    ["Alignment of __Reply__task_test_sync_upcall_t"]
        [::std::mem::align_of::<__Reply__task_test_sync_upcall_t>() - 4usize];
    ["Offset of field: __Reply__task_test_sync_upcall_t::Head"]
        [::std::mem::offset_of!(__Reply__task_test_sync_upcall_t, Head) - 0usize];
    ["Offset of field: __Reply__task_test_sync_upcall_t::NDR"]
        [::std::mem::offset_of!(__Reply__task_test_sync_upcall_t, NDR) - 24usize];
    ["Offset of field: __Reply__task_test_sync_upcall_t::RetCode"]
        [::std::mem::offset_of!(__Reply__task_test_sync_upcall_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_set_corpse_forking_behavior_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_set_corpse_forking_behavior_t"]
        [::std::mem::size_of::<__Reply__task_set_corpse_forking_behavior_t>() - 36usize];
    ["Alignment of __Reply__task_set_corpse_forking_behavior_t"]
        [::std::mem::align_of::<__Reply__task_set_corpse_forking_behavior_t>() - 4usize];
    ["Offset of field: __Reply__task_set_corpse_forking_behavior_t::Head"]
        [::std::mem::offset_of!(__Reply__task_set_corpse_forking_behavior_t, Head) - 0usize];
    ["Offset of field: __Reply__task_set_corpse_forking_behavior_t::NDR"]
        [::std::mem::offset_of!(__Reply__task_set_corpse_forking_behavior_t, NDR) - 24usize];
    ["Offset of field: __Reply__task_set_corpse_forking_behavior_t::RetCode"]
        [::std::mem::offset_of!(__Reply__task_set_corpse_forking_behavior_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_test_async_upcall_propagation_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_test_async_upcall_propagation_t"]
        [::std::mem::size_of::<__Reply__task_test_async_upcall_propagation_t>() - 36usize];
    ["Alignment of __Reply__task_test_async_upcall_propagation_t"]
        [::std::mem::align_of::<__Reply__task_test_async_upcall_propagation_t>() - 4usize];
    ["Offset of field: __Reply__task_test_async_upcall_propagation_t::Head"]
        [::std::mem::offset_of!(__Reply__task_test_async_upcall_propagation_t, Head) - 0usize];
    ["Offset of field: __Reply__task_test_async_upcall_propagation_t::NDR"]
        [::std::mem::offset_of!(__Reply__task_test_async_upcall_propagation_t, NDR) - 24usize];
    ["Offset of field: __Reply__task_test_async_upcall_propagation_t::RetCode"]
        [::std::mem::offset_of!(__Reply__task_test_async_upcall_propagation_t, RetCode) - 32usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_map_kcdata_object_64_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub kcd_addr_begin: mach_vm_address_t,
    pub kcd_size: mach_vm_size_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_map_kcdata_object_64_t"]
        [::std::mem::size_of::<__Reply__task_map_kcdata_object_64_t>() - 52usize];
    ["Alignment of __Reply__task_map_kcdata_object_64_t"]
        [::std::mem::align_of::<__Reply__task_map_kcdata_object_64_t>() - 4usize];
    ["Offset of field: __Reply__task_map_kcdata_object_64_t::Head"]
        [::std::mem::offset_of!(__Reply__task_map_kcdata_object_64_t, Head) - 0usize];
    ["Offset of field: __Reply__task_map_kcdata_object_64_t::NDR"]
        [::std::mem::offset_of!(__Reply__task_map_kcdata_object_64_t, NDR) - 24usize];
    ["Offset of field: __Reply__task_map_kcdata_object_64_t::RetCode"]
        [::std::mem::offset_of!(__Reply__task_map_kcdata_object_64_t, RetCode) - 32usize];
    ["Offset of field: __Reply__task_map_kcdata_object_64_t::kcd_addr_begin"]
        [::std::mem::offset_of!(__Reply__task_map_kcdata_object_64_t, kcd_addr_begin) - 36usize];
    ["Offset of field: __Reply__task_map_kcdata_object_64_t::kcd_size"]
        [::std::mem::offset_of!(__Reply__task_map_kcdata_object_64_t, kcd_size) - 44usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_register_hardened_exception_handler_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_register_hardened_exception_handler_t"]
        [::std::mem::size_of::<__Reply__task_register_hardened_exception_handler_t>() - 36usize];
    ["Alignment of __Reply__task_register_hardened_exception_handler_t"]
        [::std::mem::align_of::<__Reply__task_register_hardened_exception_handler_t>() - 4usize];
    ["Offset of field: __Reply__task_register_hardened_exception_handler_t::Head"][::std::mem::offset_of!(
        __Reply__task_register_hardened_exception_handler_t,
        Head
    ) - 0usize];
    ["Offset of field: __Reply__task_register_hardened_exception_handler_t::NDR"][::std::mem::offset_of!(
        __Reply__task_register_hardened_exception_handler_t,
        NDR
    ) - 24usize];
    ["Offset of field: __Reply__task_register_hardened_exception_handler_t::RetCode"][::std::mem::offset_of!(
        __Reply__task_register_hardened_exception_handler_t,
        RetCode
    ) - 32usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__task_subsystem {
    pub Reply_task_create: __Reply__task_create_t,
    pub Reply_task_terminate: __Reply__task_terminate_t,
    pub Reply_task_threads: __Reply__task_threads_t,
    pub Reply_mach_ports_register: __Reply__mach_ports_register_t,
    pub Reply_mach_ports_lookup: __Reply__mach_ports_lookup_t,
    pub Reply_task_info: __Reply__task_info_t,
    pub Reply_task_set_info: __Reply__task_set_info_t,
    pub Reply_task_suspend: __Reply__task_suspend_t,
    pub Reply_task_resume: __Reply__task_resume_t,
    pub Reply_task_get_special_port: __Reply__task_get_special_port_t,
    pub Reply_task_set_special_port: __Reply__task_set_special_port_t,
    pub Reply_thread_create: __Reply__thread_create_t,
    pub Reply_thread_create_running: __Reply__thread_create_running_t,
    pub Reply_task_set_exception_ports: __Reply__task_set_exception_ports_t,
    pub Reply_task_get_exception_ports: __Reply__task_get_exception_ports_t,
    pub Reply_task_swap_exception_ports: __Reply__task_swap_exception_ports_t,
    pub Reply_lock_set_create: __Reply__lock_set_create_t,
    pub Reply_lock_set_destroy: __Reply__lock_set_destroy_t,
    pub Reply_semaphore_create: __Reply__semaphore_create_t,
    pub Reply_semaphore_destroy: __Reply__semaphore_destroy_t,
    pub Reply_task_policy_set: __Reply__task_policy_set_t,
    pub Reply_task_policy_get: __Reply__task_policy_get_t,
    pub Reply_task_sample: __Reply__task_sample_t,
    pub Reply_task_policy: __Reply__task_policy_t,
    pub Reply_task_set_emulation: __Reply__task_set_emulation_t,
    pub Reply_task_get_emulation_vector: __Reply__task_get_emulation_vector_t,
    pub Reply_task_set_emulation_vector: __Reply__task_set_emulation_vector_t,
    pub Reply_task_set_ras_pc: __Reply__task_set_ras_pc_t,
    pub Reply_task_zone_info: __Reply__task_zone_info_t,
    pub Reply_task_assign: __Reply__task_assign_t,
    pub Reply_task_assign_default: __Reply__task_assign_default_t,
    pub Reply_task_get_assignment: __Reply__task_get_assignment_t,
    pub Reply_task_set_policy: __Reply__task_set_policy_t,
    pub Reply_task_get_state: __Reply__task_get_state_t,
    pub Reply_task_set_state: __Reply__task_set_state_t,
    pub Reply_task_set_phys_footprint_limit: __Reply__task_set_phys_footprint_limit_t,
    pub Reply_task_suspend2: __Reply__task_suspend2_t,
    pub Reply_task_resume2: __Reply__task_resume2_t,
    pub Reply_task_purgable_info: __Reply__task_purgable_info_t,
    pub Reply_task_get_mach_voucher: __Reply__task_get_mach_voucher_t,
    pub Reply_task_set_mach_voucher: __Reply__task_set_mach_voucher_t,
    pub Reply_task_swap_mach_voucher: __Reply__task_swap_mach_voucher_t,
    pub Reply_task_generate_corpse: __Reply__task_generate_corpse_t,
    pub Reply_task_map_corpse_info: __Reply__task_map_corpse_info_t,
    pub Reply_task_register_dyld_image_infos: __Reply__task_register_dyld_image_infos_t,
    pub Reply_task_unregister_dyld_image_infos: __Reply__task_unregister_dyld_image_infos_t,
    pub Reply_task_get_dyld_image_infos: __Reply__task_get_dyld_image_infos_t,
    pub Reply_task_register_dyld_shared_cache_image_info:
        __Reply__task_register_dyld_shared_cache_image_info_t,
    pub Reply_task_register_dyld_set_dyld_state: __Reply__task_register_dyld_set_dyld_state_t,
    pub Reply_task_register_dyld_get_process_state: __Reply__task_register_dyld_get_process_state_t,
    pub Reply_task_map_corpse_info_64: __Reply__task_map_corpse_info_64_t,
    pub Reply_task_inspect: __Reply__task_inspect_t,
    pub Reply_task_get_exc_guard_behavior: __Reply__task_get_exc_guard_behavior_t,
    pub Reply_task_set_exc_guard_behavior: __Reply__task_set_exc_guard_behavior_t,
    pub Reply_task_dyld_process_info_notify_register:
        __Reply__task_dyld_process_info_notify_register_t,
    pub Reply_task_create_identity_token: __Reply__task_create_identity_token_t,
    pub Reply_task_identity_token_get_task_port: __Reply__task_identity_token_get_task_port_t,
    pub Reply_task_dyld_process_info_notify_deregister:
        __Reply__task_dyld_process_info_notify_deregister_t,
    pub Reply_task_get_exception_ports_info: __Reply__task_get_exception_ports_info_t,
    pub Reply_task_test_sync_upcall: __Reply__task_test_sync_upcall_t,
    pub Reply_task_set_corpse_forking_behavior: __Reply__task_set_corpse_forking_behavior_t,
    pub Reply_task_test_async_upcall_propagation: __Reply__task_test_async_upcall_propagation_t,
    pub Reply_task_map_kcdata_object_64: __Reply__task_map_kcdata_object_64_t,
    pub Reply_task_register_hardened_exception_handler:
        __Reply__task_register_hardened_exception_handler_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __ReplyUnion__task_subsystem"]
        [::std::mem::size_of::<__ReplyUnion__task_subsystem>() - 5224usize];
    ["Alignment of __ReplyUnion__task_subsystem"]
        [::std::mem::align_of::<__ReplyUnion__task_subsystem>() - 4usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_create"]
        [::std::mem::offset_of!(__ReplyUnion__task_subsystem, Reply_task_create) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_terminate"]
        [::std::mem::offset_of!(__ReplyUnion__task_subsystem, Reply_task_terminate) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_threads"]
        [::std::mem::offset_of!(__ReplyUnion__task_subsystem, Reply_task_threads) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_mach_ports_register"]
        [::std::mem::offset_of!(__ReplyUnion__task_subsystem, Reply_mach_ports_register) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_mach_ports_lookup"]
        [::std::mem::offset_of!(__ReplyUnion__task_subsystem, Reply_mach_ports_lookup) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_info"]
        [::std::mem::offset_of!(__ReplyUnion__task_subsystem, Reply_task_info) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_set_info"]
        [::std::mem::offset_of!(__ReplyUnion__task_subsystem, Reply_task_set_info) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_suspend"]
        [::std::mem::offset_of!(__ReplyUnion__task_subsystem, Reply_task_suspend) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_resume"]
        [::std::mem::offset_of!(__ReplyUnion__task_subsystem, Reply_task_resume) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_get_special_port"][::std::mem::offset_of!(
        __ReplyUnion__task_subsystem,
        Reply_task_get_special_port
    ) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_set_special_port"][::std::mem::offset_of!(
        __ReplyUnion__task_subsystem,
        Reply_task_set_special_port
    ) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_thread_create"]
        [::std::mem::offset_of!(__ReplyUnion__task_subsystem, Reply_thread_create) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_thread_create_running"][::std::mem::offset_of!(
        __ReplyUnion__task_subsystem,
        Reply_thread_create_running
    ) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_set_exception_ports"][::std::mem::offset_of!(
        __ReplyUnion__task_subsystem,
        Reply_task_set_exception_ports
    ) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_get_exception_ports"][::std::mem::offset_of!(
        __ReplyUnion__task_subsystem,
        Reply_task_get_exception_ports
    ) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_swap_exception_ports"][::std::mem::offset_of!(
        __ReplyUnion__task_subsystem,
        Reply_task_swap_exception_ports
    ) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_lock_set_create"]
        [::std::mem::offset_of!(__ReplyUnion__task_subsystem, Reply_lock_set_create) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_lock_set_destroy"]
        [::std::mem::offset_of!(__ReplyUnion__task_subsystem, Reply_lock_set_destroy) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_semaphore_create"]
        [::std::mem::offset_of!(__ReplyUnion__task_subsystem, Reply_semaphore_create) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_semaphore_destroy"]
        [::std::mem::offset_of!(__ReplyUnion__task_subsystem, Reply_semaphore_destroy) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_policy_set"]
        [::std::mem::offset_of!(__ReplyUnion__task_subsystem, Reply_task_policy_set) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_policy_get"]
        [::std::mem::offset_of!(__ReplyUnion__task_subsystem, Reply_task_policy_get) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_sample"]
        [::std::mem::offset_of!(__ReplyUnion__task_subsystem, Reply_task_sample) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_policy"]
        [::std::mem::offset_of!(__ReplyUnion__task_subsystem, Reply_task_policy) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_set_emulation"]
        [::std::mem::offset_of!(__ReplyUnion__task_subsystem, Reply_task_set_emulation) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_get_emulation_vector"][::std::mem::offset_of!(
        __ReplyUnion__task_subsystem,
        Reply_task_get_emulation_vector
    ) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_set_emulation_vector"][::std::mem::offset_of!(
        __ReplyUnion__task_subsystem,
        Reply_task_set_emulation_vector
    ) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_set_ras_pc"]
        [::std::mem::offset_of!(__ReplyUnion__task_subsystem, Reply_task_set_ras_pc) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_zone_info"]
        [::std::mem::offset_of!(__ReplyUnion__task_subsystem, Reply_task_zone_info) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_assign"]
        [::std::mem::offset_of!(__ReplyUnion__task_subsystem, Reply_task_assign) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_assign_default"]
        [::std::mem::offset_of!(__ReplyUnion__task_subsystem, Reply_task_assign_default) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_get_assignment"]
        [::std::mem::offset_of!(__ReplyUnion__task_subsystem, Reply_task_get_assignment) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_set_policy"]
        [::std::mem::offset_of!(__ReplyUnion__task_subsystem, Reply_task_set_policy) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_get_state"]
        [::std::mem::offset_of!(__ReplyUnion__task_subsystem, Reply_task_get_state) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_set_state"]
        [::std::mem::offset_of!(__ReplyUnion__task_subsystem, Reply_task_set_state) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_set_phys_footprint_limit"][::std::mem::offset_of!(
        __ReplyUnion__task_subsystem,
        Reply_task_set_phys_footprint_limit
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_suspend2"]
        [::std::mem::offset_of!(__ReplyUnion__task_subsystem, Reply_task_suspend2) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_resume2"]
        [::std::mem::offset_of!(__ReplyUnion__task_subsystem, Reply_task_resume2) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_purgable_info"]
        [::std::mem::offset_of!(__ReplyUnion__task_subsystem, Reply_task_purgable_info) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_get_mach_voucher"][::std::mem::offset_of!(
        __ReplyUnion__task_subsystem,
        Reply_task_get_mach_voucher
    ) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_set_mach_voucher"][::std::mem::offset_of!(
        __ReplyUnion__task_subsystem,
        Reply_task_set_mach_voucher
    ) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_swap_mach_voucher"][::std::mem::offset_of!(
        __ReplyUnion__task_subsystem,
        Reply_task_swap_mach_voucher
    ) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_generate_corpse"]
        [::std::mem::offset_of!(__ReplyUnion__task_subsystem, Reply_task_generate_corpse) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_map_corpse_info"]
        [::std::mem::offset_of!(__ReplyUnion__task_subsystem, Reply_task_map_corpse_info) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_register_dyld_image_infos"][::std::mem::offset_of!(
        __ReplyUnion__task_subsystem,
        Reply_task_register_dyld_image_infos
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_unregister_dyld_image_infos"][::std::mem::offset_of!(
        __ReplyUnion__task_subsystem,
        Reply_task_unregister_dyld_image_infos
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_get_dyld_image_infos"][::std::mem::offset_of!(
        __ReplyUnion__task_subsystem,
        Reply_task_get_dyld_image_infos
    ) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_register_dyld_shared_cache_image_info"] [:: std :: mem :: offset_of ! (__ReplyUnion__task_subsystem , Reply_task_register_dyld_shared_cache_image_info) - 0usize] ;
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_register_dyld_set_dyld_state"][::std::mem::offset_of!(
        __ReplyUnion__task_subsystem,
        Reply_task_register_dyld_set_dyld_state
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_register_dyld_get_process_state"][::std::mem::offset_of!(
        __ReplyUnion__task_subsystem,
        Reply_task_register_dyld_get_process_state
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_map_corpse_info_64"][::std::mem::offset_of!(
        __ReplyUnion__task_subsystem,
        Reply_task_map_corpse_info_64
    ) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_inspect"]
        [::std::mem::offset_of!(__ReplyUnion__task_subsystem, Reply_task_inspect) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_get_exc_guard_behavior"][::std::mem::offset_of!(
        __ReplyUnion__task_subsystem,
        Reply_task_get_exc_guard_behavior
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_set_exc_guard_behavior"][::std::mem::offset_of!(
        __ReplyUnion__task_subsystem,
        Reply_task_set_exc_guard_behavior
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_dyld_process_info_notify_register"] [:: std :: mem :: offset_of ! (__ReplyUnion__task_subsystem , Reply_task_dyld_process_info_notify_register) - 0usize] ;
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_create_identity_token"][::std::mem::offset_of!(
        __ReplyUnion__task_subsystem,
        Reply_task_create_identity_token
    ) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_identity_token_get_task_port"][::std::mem::offset_of!(
        __ReplyUnion__task_subsystem,
        Reply_task_identity_token_get_task_port
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_dyld_process_info_notify_deregister"] [:: std :: mem :: offset_of ! (__ReplyUnion__task_subsystem , Reply_task_dyld_process_info_notify_deregister) - 0usize] ;
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_get_exception_ports_info"][::std::mem::offset_of!(
        __ReplyUnion__task_subsystem,
        Reply_task_get_exception_ports_info
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_test_sync_upcall"][::std::mem::offset_of!(
        __ReplyUnion__task_subsystem,
        Reply_task_test_sync_upcall
    ) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_set_corpse_forking_behavior"][::std::mem::offset_of!(
        __ReplyUnion__task_subsystem,
        Reply_task_set_corpse_forking_behavior
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_test_async_upcall_propagation"][::std::mem::offset_of!(
        __ReplyUnion__task_subsystem,
        Reply_task_test_async_upcall_propagation
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_map_kcdata_object_64"][::std::mem::offset_of!(
        __ReplyUnion__task_subsystem,
        Reply_task_map_kcdata_object_64
    ) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_register_hardened_exception_handler"] [:: std :: mem :: offset_of ! (__ReplyUnion__task_subsystem , Reply_task_register_hardened_exception_handler) - 0usize] ;
};
unsafe extern "C" {
    pub fn thread_terminate(target_act: thread_act_t) -> kern_return_t;
}
unsafe extern "C" {
    pub fn act_get_state(
        target_act: thread_read_t,
        flavor: ::std::os::raw::c_int,
        old_state: thread_state_t,
        old_stateCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn act_set_state(
        target_act: thread_act_t,
        flavor: ::std::os::raw::c_int,
        new_state: thread_state_t,
        new_stateCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn thread_get_state(
        target_act: thread_read_t,
        flavor: thread_state_flavor_t,
        old_state: thread_state_t,
        old_stateCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn thread_set_state(
        target_act: thread_act_t,
        flavor: thread_state_flavor_t,
        new_state: thread_state_t,
        new_stateCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn thread_suspend(target_act: thread_read_t) -> kern_return_t;
}
unsafe extern "C" {
    pub fn thread_resume(target_act: thread_read_t) -> kern_return_t;
}
unsafe extern "C" {
    pub fn thread_abort(target_act: thread_act_t) -> kern_return_t;
}
unsafe extern "C" {
    pub fn thread_abort_safely(target_act: thread_act_t) -> kern_return_t;
}
unsafe extern "C" {
    pub fn thread_depress_abort(thread: thread_act_t) -> kern_return_t;
}
unsafe extern "C" {
    pub fn thread_get_special_port(
        thr_act: thread_inspect_t,
        which_port: ::std::os::raw::c_int,
        special_port: *mut mach_port_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn thread_set_special_port(
        thr_act: thread_act_t,
        which_port: ::std::os::raw::c_int,
        special_port: mach_port_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn thread_info(
        target_act: thread_inspect_t,
        flavor: thread_flavor_t,
        thread_info_out: thread_info_t,
        thread_info_outCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn thread_set_exception_ports(
        thread: thread_act_t,
        exception_mask: exception_mask_t,
        new_port: mach_port_t,
        behavior: exception_behavior_t,
        new_flavor: thread_state_flavor_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn thread_get_exception_ports(
        thread: thread_act_t,
        exception_mask: exception_mask_t,
        masks: exception_mask_array_t,
        masksCnt: *mut mach_msg_type_number_t,
        old_handlers: exception_handler_array_t,
        old_behaviors: exception_behavior_array_t,
        old_flavors: exception_flavor_array_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn thread_swap_exception_ports(
        thread: thread_act_t,
        exception_mask: exception_mask_t,
        new_port: mach_port_t,
        behavior: exception_behavior_t,
        new_flavor: thread_state_flavor_t,
        masks: exception_mask_array_t,
        masksCnt: *mut mach_msg_type_number_t,
        old_handlers: exception_handler_array_t,
        old_behaviors: exception_behavior_array_t,
        old_flavors: exception_flavor_array_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn thread_policy(
        thr_act: thread_act_t,
        policy: policy_t,
        base: policy_base_t,
        baseCnt: mach_msg_type_number_t,
        set_limit: boolean_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn thread_policy_set(
        thread: thread_act_t,
        flavor: thread_policy_flavor_t,
        policy_info: thread_policy_t,
        policy_infoCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn thread_policy_get(
        thread: thread_inspect_t,
        flavor: thread_policy_flavor_t,
        policy_info: thread_policy_t,
        policy_infoCnt: *mut mach_msg_type_number_t,
        get_default: *mut boolean_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn thread_sample(thread: thread_act_t, reply: mach_port_t) -> kern_return_t;
}
unsafe extern "C" {
    pub fn etap_trace_thread(target_act: thread_act_t, trace_status: boolean_t) -> kern_return_t;
}
unsafe extern "C" {
    pub fn thread_assign(thread: thread_act_t, new_set: processor_set_t) -> kern_return_t;
}
unsafe extern "C" {
    pub fn thread_assign_default(thread: thread_act_t) -> kern_return_t;
}
unsafe extern "C" {
    pub fn thread_get_assignment(
        thread: thread_inspect_t,
        assigned_set: *mut processor_set_name_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn thread_set_policy(
        thr_act: thread_act_t,
        pset: processor_set_t,
        policy: policy_t,
        base: policy_base_t,
        baseCnt: mach_msg_type_number_t,
        limit: policy_limit_t,
        limitCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn thread_get_mach_voucher(
        thr_act: thread_read_t,
        which: mach_voucher_selector_t,
        voucher: *mut ipc_voucher_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn thread_set_mach_voucher(thr_act: thread_act_t, voucher: ipc_voucher_t) -> kern_return_t;
}
unsafe extern "C" {
    pub fn thread_swap_mach_voucher(
        thr_act: thread_act_t,
        new_voucher: ipc_voucher_t,
        old_voucher: *mut ipc_voucher_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn thread_convert_thread_state(
        thread: thread_act_t,
        direction: ::std::os::raw::c_int,
        flavor: thread_state_flavor_t,
        in_state: thread_state_t,
        in_stateCnt: mach_msg_type_number_t,
        out_state: thread_state_t,
        out_stateCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn thread_get_exception_ports_info(
        port: mach_port_t,
        exception_mask: exception_mask_t,
        masks: exception_mask_array_t,
        masksCnt: *mut mach_msg_type_number_t,
        old_handlers_info: exception_handler_info_array_t,
        old_behaviors: exception_behavior_array_t,
        old_flavors: exception_flavor_array_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn thread_adopt_exception_handler(
        thread: thread_t,
        exc_port: mach_port_t,
        exc_mask: exception_mask_t,
        behavior_mask: exception_behavior_t,
        flavor_mask: thread_state_flavor_t,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_terminate_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__thread_terminate_t"]
        [::std::mem::size_of::<__Request__thread_terminate_t>() - 24usize];
    ["Alignment of __Request__thread_terminate_t"]
        [::std::mem::align_of::<__Request__thread_terminate_t>() - 4usize];
    ["Offset of field: __Request__thread_terminate_t::Head"]
        [::std::mem::offset_of!(__Request__thread_terminate_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__act_get_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: ::std::os::raw::c_int,
    pub old_stateCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__act_get_state_t"]
        [::std::mem::size_of::<__Request__act_get_state_t>() - 40usize];
    ["Alignment of __Request__act_get_state_t"]
        [::std::mem::align_of::<__Request__act_get_state_t>() - 4usize];
    ["Offset of field: __Request__act_get_state_t::Head"]
        [::std::mem::offset_of!(__Request__act_get_state_t, Head) - 0usize];
    ["Offset of field: __Request__act_get_state_t::NDR"]
        [::std::mem::offset_of!(__Request__act_get_state_t, NDR) - 24usize];
    ["Offset of field: __Request__act_get_state_t::flavor"]
        [::std::mem::offset_of!(__Request__act_get_state_t, flavor) - 32usize];
    ["Offset of field: __Request__act_get_state_t::old_stateCnt"]
        [::std::mem::offset_of!(__Request__act_get_state_t, old_stateCnt) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__act_set_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: ::std::os::raw::c_int,
    pub new_stateCnt: mach_msg_type_number_t,
    pub new_state: [natural_t; 1296usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__act_set_state_t"]
        [::std::mem::size_of::<__Request__act_set_state_t>() - 5224usize];
    ["Alignment of __Request__act_set_state_t"]
        [::std::mem::align_of::<__Request__act_set_state_t>() - 4usize];
    ["Offset of field: __Request__act_set_state_t::Head"]
        [::std::mem::offset_of!(__Request__act_set_state_t, Head) - 0usize];
    ["Offset of field: __Request__act_set_state_t::NDR"]
        [::std::mem::offset_of!(__Request__act_set_state_t, NDR) - 24usize];
    ["Offset of field: __Request__act_set_state_t::flavor"]
        [::std::mem::offset_of!(__Request__act_set_state_t, flavor) - 32usize];
    ["Offset of field: __Request__act_set_state_t::new_stateCnt"]
        [::std::mem::offset_of!(__Request__act_set_state_t, new_stateCnt) - 36usize];
    ["Offset of field: __Request__act_set_state_t::new_state"]
        [::std::mem::offset_of!(__Request__act_set_state_t, new_state) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_get_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: thread_state_flavor_t,
    pub old_stateCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__thread_get_state_t"]
        [::std::mem::size_of::<__Request__thread_get_state_t>() - 40usize];
    ["Alignment of __Request__thread_get_state_t"]
        [::std::mem::align_of::<__Request__thread_get_state_t>() - 4usize];
    ["Offset of field: __Request__thread_get_state_t::Head"]
        [::std::mem::offset_of!(__Request__thread_get_state_t, Head) - 0usize];
    ["Offset of field: __Request__thread_get_state_t::NDR"]
        [::std::mem::offset_of!(__Request__thread_get_state_t, NDR) - 24usize];
    ["Offset of field: __Request__thread_get_state_t::flavor"]
        [::std::mem::offset_of!(__Request__thread_get_state_t, flavor) - 32usize];
    ["Offset of field: __Request__thread_get_state_t::old_stateCnt"]
        [::std::mem::offset_of!(__Request__thread_get_state_t, old_stateCnt) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_set_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: thread_state_flavor_t,
    pub new_stateCnt: mach_msg_type_number_t,
    pub new_state: [natural_t; 1296usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__thread_set_state_t"]
        [::std::mem::size_of::<__Request__thread_set_state_t>() - 5224usize];
    ["Alignment of __Request__thread_set_state_t"]
        [::std::mem::align_of::<__Request__thread_set_state_t>() - 4usize];
    ["Offset of field: __Request__thread_set_state_t::Head"]
        [::std::mem::offset_of!(__Request__thread_set_state_t, Head) - 0usize];
    ["Offset of field: __Request__thread_set_state_t::NDR"]
        [::std::mem::offset_of!(__Request__thread_set_state_t, NDR) - 24usize];
    ["Offset of field: __Request__thread_set_state_t::flavor"]
        [::std::mem::offset_of!(__Request__thread_set_state_t, flavor) - 32usize];
    ["Offset of field: __Request__thread_set_state_t::new_stateCnt"]
        [::std::mem::offset_of!(__Request__thread_set_state_t, new_stateCnt) - 36usize];
    ["Offset of field: __Request__thread_set_state_t::new_state"]
        [::std::mem::offset_of!(__Request__thread_set_state_t, new_state) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_suspend_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__thread_suspend_t"]
        [::std::mem::size_of::<__Request__thread_suspend_t>() - 24usize];
    ["Alignment of __Request__thread_suspend_t"]
        [::std::mem::align_of::<__Request__thread_suspend_t>() - 4usize];
    ["Offset of field: __Request__thread_suspend_t::Head"]
        [::std::mem::offset_of!(__Request__thread_suspend_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_resume_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__thread_resume_t"]
        [::std::mem::size_of::<__Request__thread_resume_t>() - 24usize];
    ["Alignment of __Request__thread_resume_t"]
        [::std::mem::align_of::<__Request__thread_resume_t>() - 4usize];
    ["Offset of field: __Request__thread_resume_t::Head"]
        [::std::mem::offset_of!(__Request__thread_resume_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_abort_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__thread_abort_t"]
        [::std::mem::size_of::<__Request__thread_abort_t>() - 24usize];
    ["Alignment of __Request__thread_abort_t"]
        [::std::mem::align_of::<__Request__thread_abort_t>() - 4usize];
    ["Offset of field: __Request__thread_abort_t::Head"]
        [::std::mem::offset_of!(__Request__thread_abort_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_abort_safely_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__thread_abort_safely_t"]
        [::std::mem::size_of::<__Request__thread_abort_safely_t>() - 24usize];
    ["Alignment of __Request__thread_abort_safely_t"]
        [::std::mem::align_of::<__Request__thread_abort_safely_t>() - 4usize];
    ["Offset of field: __Request__thread_abort_safely_t::Head"]
        [::std::mem::offset_of!(__Request__thread_abort_safely_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_depress_abort_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__thread_depress_abort_t"]
        [::std::mem::size_of::<__Request__thread_depress_abort_t>() - 24usize];
    ["Alignment of __Request__thread_depress_abort_t"]
        [::std::mem::align_of::<__Request__thread_depress_abort_t>() - 4usize];
    ["Offset of field: __Request__thread_depress_abort_t::Head"]
        [::std::mem::offset_of!(__Request__thread_depress_abort_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_get_special_port_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub which_port: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__thread_get_special_port_t"]
        [::std::mem::size_of::<__Request__thread_get_special_port_t>() - 36usize];
    ["Alignment of __Request__thread_get_special_port_t"]
        [::std::mem::align_of::<__Request__thread_get_special_port_t>() - 4usize];
    ["Offset of field: __Request__thread_get_special_port_t::Head"]
        [::std::mem::offset_of!(__Request__thread_get_special_port_t, Head) - 0usize];
    ["Offset of field: __Request__thread_get_special_port_t::NDR"]
        [::std::mem::offset_of!(__Request__thread_get_special_port_t, NDR) - 24usize];
    ["Offset of field: __Request__thread_get_special_port_t::which_port"]
        [::std::mem::offset_of!(__Request__thread_get_special_port_t, which_port) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_set_special_port_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub special_port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub which_port: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__thread_set_special_port_t"]
        [::std::mem::size_of::<__Request__thread_set_special_port_t>() - 52usize];
    ["Alignment of __Request__thread_set_special_port_t"]
        [::std::mem::align_of::<__Request__thread_set_special_port_t>() - 4usize];
    ["Offset of field: __Request__thread_set_special_port_t::Head"]
        [::std::mem::offset_of!(__Request__thread_set_special_port_t, Head) - 0usize];
    ["Offset of field: __Request__thread_set_special_port_t::msgh_body"]
        [::std::mem::offset_of!(__Request__thread_set_special_port_t, msgh_body) - 24usize];
    ["Offset of field: __Request__thread_set_special_port_t::special_port"]
        [::std::mem::offset_of!(__Request__thread_set_special_port_t, special_port) - 28usize];
    ["Offset of field: __Request__thread_set_special_port_t::NDR"]
        [::std::mem::offset_of!(__Request__thread_set_special_port_t, NDR) - 40usize];
    ["Offset of field: __Request__thread_set_special_port_t::which_port"]
        [::std::mem::offset_of!(__Request__thread_set_special_port_t, which_port) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: thread_flavor_t,
    pub thread_info_outCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__thread_info_t"]
        [::std::mem::size_of::<__Request__thread_info_t>() - 40usize];
    ["Alignment of __Request__thread_info_t"]
        [::std::mem::align_of::<__Request__thread_info_t>() - 4usize];
    ["Offset of field: __Request__thread_info_t::Head"]
        [::std::mem::offset_of!(__Request__thread_info_t, Head) - 0usize];
    ["Offset of field: __Request__thread_info_t::NDR"]
        [::std::mem::offset_of!(__Request__thread_info_t, NDR) - 24usize];
    ["Offset of field: __Request__thread_info_t::flavor"]
        [::std::mem::offset_of!(__Request__thread_info_t, flavor) - 32usize];
    ["Offset of field: __Request__thread_info_t::thread_info_outCnt"]
        [::std::mem::offset_of!(__Request__thread_info_t, thread_info_outCnt) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_set_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
    pub behavior: exception_behavior_t,
    pub new_flavor: thread_state_flavor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__thread_set_exception_ports_t"]
        [::std::mem::size_of::<__Request__thread_set_exception_ports_t>() - 60usize];
    ["Alignment of __Request__thread_set_exception_ports_t"]
        [::std::mem::align_of::<__Request__thread_set_exception_ports_t>() - 4usize];
    ["Offset of field: __Request__thread_set_exception_ports_t::Head"]
        [::std::mem::offset_of!(__Request__thread_set_exception_ports_t, Head) - 0usize];
    ["Offset of field: __Request__thread_set_exception_ports_t::msgh_body"]
        [::std::mem::offset_of!(__Request__thread_set_exception_ports_t, msgh_body) - 24usize];
    ["Offset of field: __Request__thread_set_exception_ports_t::new_port"]
        [::std::mem::offset_of!(__Request__thread_set_exception_ports_t, new_port) - 28usize];
    ["Offset of field: __Request__thread_set_exception_ports_t::NDR"]
        [::std::mem::offset_of!(__Request__thread_set_exception_ports_t, NDR) - 40usize];
    ["Offset of field: __Request__thread_set_exception_ports_t::exception_mask"]
        [::std::mem::offset_of!(__Request__thread_set_exception_ports_t, exception_mask) - 48usize];
    ["Offset of field: __Request__thread_set_exception_ports_t::behavior"]
        [::std::mem::offset_of!(__Request__thread_set_exception_ports_t, behavior) - 52usize];
    ["Offset of field: __Request__thread_set_exception_ports_t::new_flavor"]
        [::std::mem::offset_of!(__Request__thread_set_exception_ports_t, new_flavor) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_get_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__thread_get_exception_ports_t"]
        [::std::mem::size_of::<__Request__thread_get_exception_ports_t>() - 36usize];
    ["Alignment of __Request__thread_get_exception_ports_t"]
        [::std::mem::align_of::<__Request__thread_get_exception_ports_t>() - 4usize];
    ["Offset of field: __Request__thread_get_exception_ports_t::Head"]
        [::std::mem::offset_of!(__Request__thread_get_exception_ports_t, Head) - 0usize];
    ["Offset of field: __Request__thread_get_exception_ports_t::NDR"]
        [::std::mem::offset_of!(__Request__thread_get_exception_ports_t, NDR) - 24usize];
    ["Offset of field: __Request__thread_get_exception_ports_t::exception_mask"]
        [::std::mem::offset_of!(__Request__thread_get_exception_ports_t, exception_mask) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_swap_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
    pub behavior: exception_behavior_t,
    pub new_flavor: thread_state_flavor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__thread_swap_exception_ports_t"]
        [::std::mem::size_of::<__Request__thread_swap_exception_ports_t>() - 60usize];
    ["Alignment of __Request__thread_swap_exception_ports_t"]
        [::std::mem::align_of::<__Request__thread_swap_exception_ports_t>() - 4usize];
    ["Offset of field: __Request__thread_swap_exception_ports_t::Head"]
        [::std::mem::offset_of!(__Request__thread_swap_exception_ports_t, Head) - 0usize];
    ["Offset of field: __Request__thread_swap_exception_ports_t::msgh_body"]
        [::std::mem::offset_of!(__Request__thread_swap_exception_ports_t, msgh_body) - 24usize];
    ["Offset of field: __Request__thread_swap_exception_ports_t::new_port"]
        [::std::mem::offset_of!(__Request__thread_swap_exception_ports_t, new_port) - 28usize];
    ["Offset of field: __Request__thread_swap_exception_ports_t::NDR"]
        [::std::mem::offset_of!(__Request__thread_swap_exception_ports_t, NDR) - 40usize];
    ["Offset of field: __Request__thread_swap_exception_ports_t::exception_mask"][::std::mem::offset_of!(
        __Request__thread_swap_exception_ports_t,
        exception_mask
    ) - 48usize];
    ["Offset of field: __Request__thread_swap_exception_ports_t::behavior"]
        [::std::mem::offset_of!(__Request__thread_swap_exception_ports_t, behavior) - 52usize];
    ["Offset of field: __Request__thread_swap_exception_ports_t::new_flavor"]
        [::std::mem::offset_of!(__Request__thread_swap_exception_ports_t, new_flavor) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_policy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub policy: policy_t,
    pub baseCnt: mach_msg_type_number_t,
    pub base: [integer_t; 5usize],
    pub set_limit: boolean_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__thread_policy_t"]
        [::std::mem::size_of::<__Request__thread_policy_t>() - 64usize];
    ["Alignment of __Request__thread_policy_t"]
        [::std::mem::align_of::<__Request__thread_policy_t>() - 4usize];
    ["Offset of field: __Request__thread_policy_t::Head"]
        [::std::mem::offset_of!(__Request__thread_policy_t, Head) - 0usize];
    ["Offset of field: __Request__thread_policy_t::NDR"]
        [::std::mem::offset_of!(__Request__thread_policy_t, NDR) - 24usize];
    ["Offset of field: __Request__thread_policy_t::policy"]
        [::std::mem::offset_of!(__Request__thread_policy_t, policy) - 32usize];
    ["Offset of field: __Request__thread_policy_t::baseCnt"]
        [::std::mem::offset_of!(__Request__thread_policy_t, baseCnt) - 36usize];
    ["Offset of field: __Request__thread_policy_t::base"]
        [::std::mem::offset_of!(__Request__thread_policy_t, base) - 40usize];
    ["Offset of field: __Request__thread_policy_t::set_limit"]
        [::std::mem::offset_of!(__Request__thread_policy_t, set_limit) - 60usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_policy_set_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: thread_policy_flavor_t,
    pub policy_infoCnt: mach_msg_type_number_t,
    pub policy_info: [integer_t; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__thread_policy_set_t"]
        [::std::mem::size_of::<__Request__thread_policy_set_t>() - 104usize];
    ["Alignment of __Request__thread_policy_set_t"]
        [::std::mem::align_of::<__Request__thread_policy_set_t>() - 4usize];
    ["Offset of field: __Request__thread_policy_set_t::Head"]
        [::std::mem::offset_of!(__Request__thread_policy_set_t, Head) - 0usize];
    ["Offset of field: __Request__thread_policy_set_t::NDR"]
        [::std::mem::offset_of!(__Request__thread_policy_set_t, NDR) - 24usize];
    ["Offset of field: __Request__thread_policy_set_t::flavor"]
        [::std::mem::offset_of!(__Request__thread_policy_set_t, flavor) - 32usize];
    ["Offset of field: __Request__thread_policy_set_t::policy_infoCnt"]
        [::std::mem::offset_of!(__Request__thread_policy_set_t, policy_infoCnt) - 36usize];
    ["Offset of field: __Request__thread_policy_set_t::policy_info"]
        [::std::mem::offset_of!(__Request__thread_policy_set_t, policy_info) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_policy_get_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: thread_policy_flavor_t,
    pub policy_infoCnt: mach_msg_type_number_t,
    pub get_default: boolean_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__thread_policy_get_t"]
        [::std::mem::size_of::<__Request__thread_policy_get_t>() - 44usize];
    ["Alignment of __Request__thread_policy_get_t"]
        [::std::mem::align_of::<__Request__thread_policy_get_t>() - 4usize];
    ["Offset of field: __Request__thread_policy_get_t::Head"]
        [::std::mem::offset_of!(__Request__thread_policy_get_t, Head) - 0usize];
    ["Offset of field: __Request__thread_policy_get_t::NDR"]
        [::std::mem::offset_of!(__Request__thread_policy_get_t, NDR) - 24usize];
    ["Offset of field: __Request__thread_policy_get_t::flavor"]
        [::std::mem::offset_of!(__Request__thread_policy_get_t, flavor) - 32usize];
    ["Offset of field: __Request__thread_policy_get_t::policy_infoCnt"]
        [::std::mem::offset_of!(__Request__thread_policy_get_t, policy_infoCnt) - 36usize];
    ["Offset of field: __Request__thread_policy_get_t::get_default"]
        [::std::mem::offset_of!(__Request__thread_policy_get_t, get_default) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_sample_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub reply: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__thread_sample_t"]
        [::std::mem::size_of::<__Request__thread_sample_t>() - 40usize];
    ["Alignment of __Request__thread_sample_t"]
        [::std::mem::align_of::<__Request__thread_sample_t>() - 4usize];
    ["Offset of field: __Request__thread_sample_t::Head"]
        [::std::mem::offset_of!(__Request__thread_sample_t, Head) - 0usize];
    ["Offset of field: __Request__thread_sample_t::msgh_body"]
        [::std::mem::offset_of!(__Request__thread_sample_t, msgh_body) - 24usize];
    ["Offset of field: __Request__thread_sample_t::reply"]
        [::std::mem::offset_of!(__Request__thread_sample_t, reply) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__etap_trace_thread_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub trace_status: boolean_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__etap_trace_thread_t"]
        [::std::mem::size_of::<__Request__etap_trace_thread_t>() - 36usize];
    ["Alignment of __Request__etap_trace_thread_t"]
        [::std::mem::align_of::<__Request__etap_trace_thread_t>() - 4usize];
    ["Offset of field: __Request__etap_trace_thread_t::Head"]
        [::std::mem::offset_of!(__Request__etap_trace_thread_t, Head) - 0usize];
    ["Offset of field: __Request__etap_trace_thread_t::NDR"]
        [::std::mem::offset_of!(__Request__etap_trace_thread_t, NDR) - 24usize];
    ["Offset of field: __Request__etap_trace_thread_t::trace_status"]
        [::std::mem::offset_of!(__Request__etap_trace_thread_t, trace_status) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_assign_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_set: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__thread_assign_t"]
        [::std::mem::size_of::<__Request__thread_assign_t>() - 40usize];
    ["Alignment of __Request__thread_assign_t"]
        [::std::mem::align_of::<__Request__thread_assign_t>() - 4usize];
    ["Offset of field: __Request__thread_assign_t::Head"]
        [::std::mem::offset_of!(__Request__thread_assign_t, Head) - 0usize];
    ["Offset of field: __Request__thread_assign_t::msgh_body"]
        [::std::mem::offset_of!(__Request__thread_assign_t, msgh_body) - 24usize];
    ["Offset of field: __Request__thread_assign_t::new_set"]
        [::std::mem::offset_of!(__Request__thread_assign_t, new_set) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_assign_default_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__thread_assign_default_t"]
        [::std::mem::size_of::<__Request__thread_assign_default_t>() - 24usize];
    ["Alignment of __Request__thread_assign_default_t"]
        [::std::mem::align_of::<__Request__thread_assign_default_t>() - 4usize];
    ["Offset of field: __Request__thread_assign_default_t::Head"]
        [::std::mem::offset_of!(__Request__thread_assign_default_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_get_assignment_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__thread_get_assignment_t"]
        [::std::mem::size_of::<__Request__thread_get_assignment_t>() - 24usize];
    ["Alignment of __Request__thread_get_assignment_t"]
        [::std::mem::align_of::<__Request__thread_get_assignment_t>() - 4usize];
    ["Offset of field: __Request__thread_get_assignment_t::Head"]
        [::std::mem::offset_of!(__Request__thread_get_assignment_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_set_policy_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub pset: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub policy: policy_t,
    pub baseCnt: mach_msg_type_number_t,
    pub base: [integer_t; 5usize],
    pub limitCnt: mach_msg_type_number_t,
    pub limit: [integer_t; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__thread_set_policy_t"]
        [::std::mem::size_of::<__Request__thread_set_policy_t>() - 84usize];
    ["Alignment of __Request__thread_set_policy_t"]
        [::std::mem::align_of::<__Request__thread_set_policy_t>() - 4usize];
    ["Offset of field: __Request__thread_set_policy_t::Head"]
        [::std::mem::offset_of!(__Request__thread_set_policy_t, Head) - 0usize];
    ["Offset of field: __Request__thread_set_policy_t::msgh_body"]
        [::std::mem::offset_of!(__Request__thread_set_policy_t, msgh_body) - 24usize];
    ["Offset of field: __Request__thread_set_policy_t::pset"]
        [::std::mem::offset_of!(__Request__thread_set_policy_t, pset) - 28usize];
    ["Offset of field: __Request__thread_set_policy_t::NDR"]
        [::std::mem::offset_of!(__Request__thread_set_policy_t, NDR) - 40usize];
    ["Offset of field: __Request__thread_set_policy_t::policy"]
        [::std::mem::offset_of!(__Request__thread_set_policy_t, policy) - 48usize];
    ["Offset of field: __Request__thread_set_policy_t::baseCnt"]
        [::std::mem::offset_of!(__Request__thread_set_policy_t, baseCnt) - 52usize];
    ["Offset of field: __Request__thread_set_policy_t::base"]
        [::std::mem::offset_of!(__Request__thread_set_policy_t, base) - 56usize];
    ["Offset of field: __Request__thread_set_policy_t::limitCnt"]
        [::std::mem::offset_of!(__Request__thread_set_policy_t, limitCnt) - 76usize];
    ["Offset of field: __Request__thread_set_policy_t::limit"]
        [::std::mem::offset_of!(__Request__thread_set_policy_t, limit) - 80usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_get_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub which: mach_voucher_selector_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__thread_get_mach_voucher_t"]
        [::std::mem::size_of::<__Request__thread_get_mach_voucher_t>() - 36usize];
    ["Alignment of __Request__thread_get_mach_voucher_t"]
        [::std::mem::align_of::<__Request__thread_get_mach_voucher_t>() - 4usize];
    ["Offset of field: __Request__thread_get_mach_voucher_t::Head"]
        [::std::mem::offset_of!(__Request__thread_get_mach_voucher_t, Head) - 0usize];
    ["Offset of field: __Request__thread_get_mach_voucher_t::NDR"]
        [::std::mem::offset_of!(__Request__thread_get_mach_voucher_t, NDR) - 24usize];
    ["Offset of field: __Request__thread_get_mach_voucher_t::which"]
        [::std::mem::offset_of!(__Request__thread_get_mach_voucher_t, which) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_set_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub voucher: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__thread_set_mach_voucher_t"]
        [::std::mem::size_of::<__Request__thread_set_mach_voucher_t>() - 40usize];
    ["Alignment of __Request__thread_set_mach_voucher_t"]
        [::std::mem::align_of::<__Request__thread_set_mach_voucher_t>() - 4usize];
    ["Offset of field: __Request__thread_set_mach_voucher_t::Head"]
        [::std::mem::offset_of!(__Request__thread_set_mach_voucher_t, Head) - 0usize];
    ["Offset of field: __Request__thread_set_mach_voucher_t::msgh_body"]
        [::std::mem::offset_of!(__Request__thread_set_mach_voucher_t, msgh_body) - 24usize];
    ["Offset of field: __Request__thread_set_mach_voucher_t::voucher"]
        [::std::mem::offset_of!(__Request__thread_set_mach_voucher_t, voucher) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_swap_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_voucher: mach_msg_port_descriptor_t,
    pub old_voucher: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__thread_swap_mach_voucher_t"]
        [::std::mem::size_of::<__Request__thread_swap_mach_voucher_t>() - 52usize];
    ["Alignment of __Request__thread_swap_mach_voucher_t"]
        [::std::mem::align_of::<__Request__thread_swap_mach_voucher_t>() - 4usize];
    ["Offset of field: __Request__thread_swap_mach_voucher_t::Head"]
        [::std::mem::offset_of!(__Request__thread_swap_mach_voucher_t, Head) - 0usize];
    ["Offset of field: __Request__thread_swap_mach_voucher_t::msgh_body"]
        [::std::mem::offset_of!(__Request__thread_swap_mach_voucher_t, msgh_body) - 24usize];
    ["Offset of field: __Request__thread_swap_mach_voucher_t::new_voucher"]
        [::std::mem::offset_of!(__Request__thread_swap_mach_voucher_t, new_voucher) - 28usize];
    ["Offset of field: __Request__thread_swap_mach_voucher_t::old_voucher"]
        [::std::mem::offset_of!(__Request__thread_swap_mach_voucher_t, old_voucher) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_convert_thread_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub direction: ::std::os::raw::c_int,
    pub flavor: thread_state_flavor_t,
    pub in_stateCnt: mach_msg_type_number_t,
    pub in_state: [natural_t; 1296usize],
    pub out_stateCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__thread_convert_thread_state_t"]
        [::std::mem::size_of::<__Request__thread_convert_thread_state_t>() - 5232usize];
    ["Alignment of __Request__thread_convert_thread_state_t"]
        [::std::mem::align_of::<__Request__thread_convert_thread_state_t>() - 4usize];
    ["Offset of field: __Request__thread_convert_thread_state_t::Head"]
        [::std::mem::offset_of!(__Request__thread_convert_thread_state_t, Head) - 0usize];
    ["Offset of field: __Request__thread_convert_thread_state_t::NDR"]
        [::std::mem::offset_of!(__Request__thread_convert_thread_state_t, NDR) - 24usize];
    ["Offset of field: __Request__thread_convert_thread_state_t::direction"]
        [::std::mem::offset_of!(__Request__thread_convert_thread_state_t, direction) - 32usize];
    ["Offset of field: __Request__thread_convert_thread_state_t::flavor"]
        [::std::mem::offset_of!(__Request__thread_convert_thread_state_t, flavor) - 36usize];
    ["Offset of field: __Request__thread_convert_thread_state_t::in_stateCnt"]
        [::std::mem::offset_of!(__Request__thread_convert_thread_state_t, in_stateCnt) - 40usize];
    ["Offset of field: __Request__thread_convert_thread_state_t::in_state"]
        [::std::mem::offset_of!(__Request__thread_convert_thread_state_t, in_state) - 44usize];
    ["Offset of field: __Request__thread_convert_thread_state_t::out_stateCnt"][::std::mem::offset_of!(
        __Request__thread_convert_thread_state_t,
        out_stateCnt
    ) - 5228usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_get_exception_ports_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__thread_get_exception_ports_info_t"]
        [::std::mem::size_of::<__Request__thread_get_exception_ports_info_t>() - 36usize];
    ["Alignment of __Request__thread_get_exception_ports_info_t"]
        [::std::mem::align_of::<__Request__thread_get_exception_ports_info_t>() - 4usize];
    ["Offset of field: __Request__thread_get_exception_ports_info_t::Head"]
        [::std::mem::offset_of!(__Request__thread_get_exception_ports_info_t, Head) - 0usize];
    ["Offset of field: __Request__thread_get_exception_ports_info_t::NDR"]
        [::std::mem::offset_of!(__Request__thread_get_exception_ports_info_t, NDR) - 24usize];
    ["Offset of field: __Request__thread_get_exception_ports_info_t::exception_mask"][::std::mem::offset_of!(
        __Request__thread_get_exception_ports_info_t,
        exception_mask
    ) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_adopt_exception_handler_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub exc_port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub exc_mask: exception_mask_t,
    pub behavior_mask: exception_behavior_t,
    pub flavor_mask: thread_state_flavor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__thread_adopt_exception_handler_t"]
        [::std::mem::size_of::<__Request__thread_adopt_exception_handler_t>() - 60usize];
    ["Alignment of __Request__thread_adopt_exception_handler_t"]
        [::std::mem::align_of::<__Request__thread_adopt_exception_handler_t>() - 4usize];
    ["Offset of field: __Request__thread_adopt_exception_handler_t::Head"]
        [::std::mem::offset_of!(__Request__thread_adopt_exception_handler_t, Head) - 0usize];
    ["Offset of field: __Request__thread_adopt_exception_handler_t::msgh_body"]
        [::std::mem::offset_of!(__Request__thread_adopt_exception_handler_t, msgh_body) - 24usize];
    ["Offset of field: __Request__thread_adopt_exception_handler_t::exc_port"]
        [::std::mem::offset_of!(__Request__thread_adopt_exception_handler_t, exc_port) - 28usize];
    ["Offset of field: __Request__thread_adopt_exception_handler_t::NDR"]
        [::std::mem::offset_of!(__Request__thread_adopt_exception_handler_t, NDR) - 40usize];
    ["Offset of field: __Request__thread_adopt_exception_handler_t::exc_mask"]
        [::std::mem::offset_of!(__Request__thread_adopt_exception_handler_t, exc_mask) - 48usize];
    ["Offset of field: __Request__thread_adopt_exception_handler_t::behavior_mask"][::std::mem::offset_of!(
        __Request__thread_adopt_exception_handler_t,
        behavior_mask
    ) - 52usize];
    ["Offset of field: __Request__thread_adopt_exception_handler_t::flavor_mask"][::std::mem::offset_of!(
        __Request__thread_adopt_exception_handler_t,
        flavor_mask
    ) - 56usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__thread_act_subsystem {
    pub Request_thread_terminate: __Request__thread_terminate_t,
    pub Request_act_get_state: __Request__act_get_state_t,
    pub Request_act_set_state: __Request__act_set_state_t,
    pub Request_thread_get_state: __Request__thread_get_state_t,
    pub Request_thread_set_state: __Request__thread_set_state_t,
    pub Request_thread_suspend: __Request__thread_suspend_t,
    pub Request_thread_resume: __Request__thread_resume_t,
    pub Request_thread_abort: __Request__thread_abort_t,
    pub Request_thread_abort_safely: __Request__thread_abort_safely_t,
    pub Request_thread_depress_abort: __Request__thread_depress_abort_t,
    pub Request_thread_get_special_port: __Request__thread_get_special_port_t,
    pub Request_thread_set_special_port: __Request__thread_set_special_port_t,
    pub Request_thread_info: __Request__thread_info_t,
    pub Request_thread_set_exception_ports: __Request__thread_set_exception_ports_t,
    pub Request_thread_get_exception_ports: __Request__thread_get_exception_ports_t,
    pub Request_thread_swap_exception_ports: __Request__thread_swap_exception_ports_t,
    pub Request_thread_policy: __Request__thread_policy_t,
    pub Request_thread_policy_set: __Request__thread_policy_set_t,
    pub Request_thread_policy_get: __Request__thread_policy_get_t,
    pub Request_thread_sample: __Request__thread_sample_t,
    pub Request_etap_trace_thread: __Request__etap_trace_thread_t,
    pub Request_thread_assign: __Request__thread_assign_t,
    pub Request_thread_assign_default: __Request__thread_assign_default_t,
    pub Request_thread_get_assignment: __Request__thread_get_assignment_t,
    pub Request_thread_set_policy: __Request__thread_set_policy_t,
    pub Request_thread_get_mach_voucher: __Request__thread_get_mach_voucher_t,
    pub Request_thread_set_mach_voucher: __Request__thread_set_mach_voucher_t,
    pub Request_thread_swap_mach_voucher: __Request__thread_swap_mach_voucher_t,
    pub Request_thread_convert_thread_state: __Request__thread_convert_thread_state_t,
    pub Request_thread_get_exception_ports_info: __Request__thread_get_exception_ports_info_t,
    pub Request_thread_adopt_exception_handler: __Request__thread_adopt_exception_handler_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __RequestUnion__thread_act_subsystem"]
        [::std::mem::size_of::<__RequestUnion__thread_act_subsystem>() - 5232usize];
    ["Alignment of __RequestUnion__thread_act_subsystem"]
        [::std::mem::align_of::<__RequestUnion__thread_act_subsystem>() - 4usize];
    ["Offset of field: __RequestUnion__thread_act_subsystem::Request_thread_terminate"][::std::mem::offset_of!(
        __RequestUnion__thread_act_subsystem,
        Request_thread_terminate
    ) - 0usize];
    ["Offset of field: __RequestUnion__thread_act_subsystem::Request_act_get_state"][::std::mem::offset_of!(
        __RequestUnion__thread_act_subsystem,
        Request_act_get_state
    ) - 0usize];
    ["Offset of field: __RequestUnion__thread_act_subsystem::Request_act_set_state"][::std::mem::offset_of!(
        __RequestUnion__thread_act_subsystem,
        Request_act_set_state
    ) - 0usize];
    ["Offset of field: __RequestUnion__thread_act_subsystem::Request_thread_get_state"][::std::mem::offset_of!(
        __RequestUnion__thread_act_subsystem,
        Request_thread_get_state
    ) - 0usize];
    ["Offset of field: __RequestUnion__thread_act_subsystem::Request_thread_set_state"][::std::mem::offset_of!(
        __RequestUnion__thread_act_subsystem,
        Request_thread_set_state
    ) - 0usize];
    ["Offset of field: __RequestUnion__thread_act_subsystem::Request_thread_suspend"][::std::mem::offset_of!(
        __RequestUnion__thread_act_subsystem,
        Request_thread_suspend
    ) - 0usize];
    ["Offset of field: __RequestUnion__thread_act_subsystem::Request_thread_resume"][::std::mem::offset_of!(
        __RequestUnion__thread_act_subsystem,
        Request_thread_resume
    ) - 0usize];
    ["Offset of field: __RequestUnion__thread_act_subsystem::Request_thread_abort"][::std::mem::offset_of!(
        __RequestUnion__thread_act_subsystem,
        Request_thread_abort
    ) - 0usize];
    ["Offset of field: __RequestUnion__thread_act_subsystem::Request_thread_abort_safely"][::std::mem::offset_of!(
        __RequestUnion__thread_act_subsystem,
        Request_thread_abort_safely
    )
        - 0usize];
    ["Offset of field: __RequestUnion__thread_act_subsystem::Request_thread_depress_abort"][::std::mem::offset_of!(
        __RequestUnion__thread_act_subsystem,
        Request_thread_depress_abort
    )
        - 0usize];
    ["Offset of field: __RequestUnion__thread_act_subsystem::Request_thread_get_special_port"][::std::mem::offset_of!(
        __RequestUnion__thread_act_subsystem,
        Request_thread_get_special_port
    )
        - 0usize];
    ["Offset of field: __RequestUnion__thread_act_subsystem::Request_thread_set_special_port"][::std::mem::offset_of!(
        __RequestUnion__thread_act_subsystem,
        Request_thread_set_special_port
    )
        - 0usize];
    ["Offset of field: __RequestUnion__thread_act_subsystem::Request_thread_info"][::std::mem::offset_of!(
        __RequestUnion__thread_act_subsystem,
        Request_thread_info
    ) - 0usize];
    ["Offset of field: __RequestUnion__thread_act_subsystem::Request_thread_set_exception_ports"][::std::mem::offset_of!(
        __RequestUnion__thread_act_subsystem,
        Request_thread_set_exception_ports
    )
        - 0usize];
    ["Offset of field: __RequestUnion__thread_act_subsystem::Request_thread_get_exception_ports"][::std::mem::offset_of!(
        __RequestUnion__thread_act_subsystem,
        Request_thread_get_exception_ports
    )
        - 0usize];
    ["Offset of field: __RequestUnion__thread_act_subsystem::Request_thread_swap_exception_ports"] [:: std :: mem :: offset_of ! (__RequestUnion__thread_act_subsystem , Request_thread_swap_exception_ports) - 0usize] ;
    ["Offset of field: __RequestUnion__thread_act_subsystem::Request_thread_policy"][::std::mem::offset_of!(
        __RequestUnion__thread_act_subsystem,
        Request_thread_policy
    ) - 0usize];
    ["Offset of field: __RequestUnion__thread_act_subsystem::Request_thread_policy_set"][::std::mem::offset_of!(
        __RequestUnion__thread_act_subsystem,
        Request_thread_policy_set
    )
        - 0usize];
    ["Offset of field: __RequestUnion__thread_act_subsystem::Request_thread_policy_get"][::std::mem::offset_of!(
        __RequestUnion__thread_act_subsystem,
        Request_thread_policy_get
    )
        - 0usize];
    ["Offset of field: __RequestUnion__thread_act_subsystem::Request_thread_sample"][::std::mem::offset_of!(
        __RequestUnion__thread_act_subsystem,
        Request_thread_sample
    ) - 0usize];
    ["Offset of field: __RequestUnion__thread_act_subsystem::Request_etap_trace_thread"][::std::mem::offset_of!(
        __RequestUnion__thread_act_subsystem,
        Request_etap_trace_thread
    )
        - 0usize];
    ["Offset of field: __RequestUnion__thread_act_subsystem::Request_thread_assign"][::std::mem::offset_of!(
        __RequestUnion__thread_act_subsystem,
        Request_thread_assign
    ) - 0usize];
    ["Offset of field: __RequestUnion__thread_act_subsystem::Request_thread_assign_default"][::std::mem::offset_of!(
        __RequestUnion__thread_act_subsystem,
        Request_thread_assign_default
    )
        - 0usize];
    ["Offset of field: __RequestUnion__thread_act_subsystem::Request_thread_get_assignment"][::std::mem::offset_of!(
        __RequestUnion__thread_act_subsystem,
        Request_thread_get_assignment
    )
        - 0usize];
    ["Offset of field: __RequestUnion__thread_act_subsystem::Request_thread_set_policy"][::std::mem::offset_of!(
        __RequestUnion__thread_act_subsystem,
        Request_thread_set_policy
    )
        - 0usize];
    ["Offset of field: __RequestUnion__thread_act_subsystem::Request_thread_get_mach_voucher"][::std::mem::offset_of!(
        __RequestUnion__thread_act_subsystem,
        Request_thread_get_mach_voucher
    )
        - 0usize];
    ["Offset of field: __RequestUnion__thread_act_subsystem::Request_thread_set_mach_voucher"][::std::mem::offset_of!(
        __RequestUnion__thread_act_subsystem,
        Request_thread_set_mach_voucher
    )
        - 0usize];
    ["Offset of field: __RequestUnion__thread_act_subsystem::Request_thread_swap_mach_voucher"][::std::mem::offset_of!(
        __RequestUnion__thread_act_subsystem,
        Request_thread_swap_mach_voucher
    )
        - 0usize];
    ["Offset of field: __RequestUnion__thread_act_subsystem::Request_thread_convert_thread_state"] [:: std :: mem :: offset_of ! (__RequestUnion__thread_act_subsystem , Request_thread_convert_thread_state) - 0usize] ;
    ["Offset of field: __RequestUnion__thread_act_subsystem::Request_thread_get_exception_ports_info"] [:: std :: mem :: offset_of ! (__RequestUnion__thread_act_subsystem , Request_thread_get_exception_ports_info) - 0usize] ;
    ["Offset of field: __RequestUnion__thread_act_subsystem::Request_thread_adopt_exception_handler"] [:: std :: mem :: offset_of ! (__RequestUnion__thread_act_subsystem , Request_thread_adopt_exception_handler) - 0usize] ;
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_terminate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__thread_terminate_t"]
        [::std::mem::size_of::<__Reply__thread_terminate_t>() - 36usize];
    ["Alignment of __Reply__thread_terminate_t"]
        [::std::mem::align_of::<__Reply__thread_terminate_t>() - 4usize];
    ["Offset of field: __Reply__thread_terminate_t::Head"]
        [::std::mem::offset_of!(__Reply__thread_terminate_t, Head) - 0usize];
    ["Offset of field: __Reply__thread_terminate_t::NDR"]
        [::std::mem::offset_of!(__Reply__thread_terminate_t, NDR) - 24usize];
    ["Offset of field: __Reply__thread_terminate_t::RetCode"]
        [::std::mem::offset_of!(__Reply__thread_terminate_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__act_get_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub old_stateCnt: mach_msg_type_number_t,
    pub old_state: [natural_t; 1296usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__act_get_state_t"]
        [::std::mem::size_of::<__Reply__act_get_state_t>() - 5224usize];
    ["Alignment of __Reply__act_get_state_t"]
        [::std::mem::align_of::<__Reply__act_get_state_t>() - 4usize];
    ["Offset of field: __Reply__act_get_state_t::Head"]
        [::std::mem::offset_of!(__Reply__act_get_state_t, Head) - 0usize];
    ["Offset of field: __Reply__act_get_state_t::NDR"]
        [::std::mem::offset_of!(__Reply__act_get_state_t, NDR) - 24usize];
    ["Offset of field: __Reply__act_get_state_t::RetCode"]
        [::std::mem::offset_of!(__Reply__act_get_state_t, RetCode) - 32usize];
    ["Offset of field: __Reply__act_get_state_t::old_stateCnt"]
        [::std::mem::offset_of!(__Reply__act_get_state_t, old_stateCnt) - 36usize];
    ["Offset of field: __Reply__act_get_state_t::old_state"]
        [::std::mem::offset_of!(__Reply__act_get_state_t, old_state) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__act_set_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__act_set_state_t"]
        [::std::mem::size_of::<__Reply__act_set_state_t>() - 36usize];
    ["Alignment of __Reply__act_set_state_t"]
        [::std::mem::align_of::<__Reply__act_set_state_t>() - 4usize];
    ["Offset of field: __Reply__act_set_state_t::Head"]
        [::std::mem::offset_of!(__Reply__act_set_state_t, Head) - 0usize];
    ["Offset of field: __Reply__act_set_state_t::NDR"]
        [::std::mem::offset_of!(__Reply__act_set_state_t, NDR) - 24usize];
    ["Offset of field: __Reply__act_set_state_t::RetCode"]
        [::std::mem::offset_of!(__Reply__act_set_state_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_get_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub old_stateCnt: mach_msg_type_number_t,
    pub old_state: [natural_t; 1296usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__thread_get_state_t"]
        [::std::mem::size_of::<__Reply__thread_get_state_t>() - 5224usize];
    ["Alignment of __Reply__thread_get_state_t"]
        [::std::mem::align_of::<__Reply__thread_get_state_t>() - 4usize];
    ["Offset of field: __Reply__thread_get_state_t::Head"]
        [::std::mem::offset_of!(__Reply__thread_get_state_t, Head) - 0usize];
    ["Offset of field: __Reply__thread_get_state_t::NDR"]
        [::std::mem::offset_of!(__Reply__thread_get_state_t, NDR) - 24usize];
    ["Offset of field: __Reply__thread_get_state_t::RetCode"]
        [::std::mem::offset_of!(__Reply__thread_get_state_t, RetCode) - 32usize];
    ["Offset of field: __Reply__thread_get_state_t::old_stateCnt"]
        [::std::mem::offset_of!(__Reply__thread_get_state_t, old_stateCnt) - 36usize];
    ["Offset of field: __Reply__thread_get_state_t::old_state"]
        [::std::mem::offset_of!(__Reply__thread_get_state_t, old_state) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_set_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__thread_set_state_t"]
        [::std::mem::size_of::<__Reply__thread_set_state_t>() - 36usize];
    ["Alignment of __Reply__thread_set_state_t"]
        [::std::mem::align_of::<__Reply__thread_set_state_t>() - 4usize];
    ["Offset of field: __Reply__thread_set_state_t::Head"]
        [::std::mem::offset_of!(__Reply__thread_set_state_t, Head) - 0usize];
    ["Offset of field: __Reply__thread_set_state_t::NDR"]
        [::std::mem::offset_of!(__Reply__thread_set_state_t, NDR) - 24usize];
    ["Offset of field: __Reply__thread_set_state_t::RetCode"]
        [::std::mem::offset_of!(__Reply__thread_set_state_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_suspend_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__thread_suspend_t"]
        [::std::mem::size_of::<__Reply__thread_suspend_t>() - 36usize];
    ["Alignment of __Reply__thread_suspend_t"]
        [::std::mem::align_of::<__Reply__thread_suspend_t>() - 4usize];
    ["Offset of field: __Reply__thread_suspend_t::Head"]
        [::std::mem::offset_of!(__Reply__thread_suspend_t, Head) - 0usize];
    ["Offset of field: __Reply__thread_suspend_t::NDR"]
        [::std::mem::offset_of!(__Reply__thread_suspend_t, NDR) - 24usize];
    ["Offset of field: __Reply__thread_suspend_t::RetCode"]
        [::std::mem::offset_of!(__Reply__thread_suspend_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_resume_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__thread_resume_t"]
        [::std::mem::size_of::<__Reply__thread_resume_t>() - 36usize];
    ["Alignment of __Reply__thread_resume_t"]
        [::std::mem::align_of::<__Reply__thread_resume_t>() - 4usize];
    ["Offset of field: __Reply__thread_resume_t::Head"]
        [::std::mem::offset_of!(__Reply__thread_resume_t, Head) - 0usize];
    ["Offset of field: __Reply__thread_resume_t::NDR"]
        [::std::mem::offset_of!(__Reply__thread_resume_t, NDR) - 24usize];
    ["Offset of field: __Reply__thread_resume_t::RetCode"]
        [::std::mem::offset_of!(__Reply__thread_resume_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_abort_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__thread_abort_t"][::std::mem::size_of::<__Reply__thread_abort_t>() - 36usize];
    ["Alignment of __Reply__thread_abort_t"]
        [::std::mem::align_of::<__Reply__thread_abort_t>() - 4usize];
    ["Offset of field: __Reply__thread_abort_t::Head"]
        [::std::mem::offset_of!(__Reply__thread_abort_t, Head) - 0usize];
    ["Offset of field: __Reply__thread_abort_t::NDR"]
        [::std::mem::offset_of!(__Reply__thread_abort_t, NDR) - 24usize];
    ["Offset of field: __Reply__thread_abort_t::RetCode"]
        [::std::mem::offset_of!(__Reply__thread_abort_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_abort_safely_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__thread_abort_safely_t"]
        [::std::mem::size_of::<__Reply__thread_abort_safely_t>() - 36usize];
    ["Alignment of __Reply__thread_abort_safely_t"]
        [::std::mem::align_of::<__Reply__thread_abort_safely_t>() - 4usize];
    ["Offset of field: __Reply__thread_abort_safely_t::Head"]
        [::std::mem::offset_of!(__Reply__thread_abort_safely_t, Head) - 0usize];
    ["Offset of field: __Reply__thread_abort_safely_t::NDR"]
        [::std::mem::offset_of!(__Reply__thread_abort_safely_t, NDR) - 24usize];
    ["Offset of field: __Reply__thread_abort_safely_t::RetCode"]
        [::std::mem::offset_of!(__Reply__thread_abort_safely_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_depress_abort_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__thread_depress_abort_t"]
        [::std::mem::size_of::<__Reply__thread_depress_abort_t>() - 36usize];
    ["Alignment of __Reply__thread_depress_abort_t"]
        [::std::mem::align_of::<__Reply__thread_depress_abort_t>() - 4usize];
    ["Offset of field: __Reply__thread_depress_abort_t::Head"]
        [::std::mem::offset_of!(__Reply__thread_depress_abort_t, Head) - 0usize];
    ["Offset of field: __Reply__thread_depress_abort_t::NDR"]
        [::std::mem::offset_of!(__Reply__thread_depress_abort_t, NDR) - 24usize];
    ["Offset of field: __Reply__thread_depress_abort_t::RetCode"]
        [::std::mem::offset_of!(__Reply__thread_depress_abort_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_get_special_port_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub special_port: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__thread_get_special_port_t"]
        [::std::mem::size_of::<__Reply__thread_get_special_port_t>() - 40usize];
    ["Alignment of __Reply__thread_get_special_port_t"]
        [::std::mem::align_of::<__Reply__thread_get_special_port_t>() - 4usize];
    ["Offset of field: __Reply__thread_get_special_port_t::Head"]
        [::std::mem::offset_of!(__Reply__thread_get_special_port_t, Head) - 0usize];
    ["Offset of field: __Reply__thread_get_special_port_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__thread_get_special_port_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__thread_get_special_port_t::special_port"]
        [::std::mem::offset_of!(__Reply__thread_get_special_port_t, special_port) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_set_special_port_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__thread_set_special_port_t"]
        [::std::mem::size_of::<__Reply__thread_set_special_port_t>() - 36usize];
    ["Alignment of __Reply__thread_set_special_port_t"]
        [::std::mem::align_of::<__Reply__thread_set_special_port_t>() - 4usize];
    ["Offset of field: __Reply__thread_set_special_port_t::Head"]
        [::std::mem::offset_of!(__Reply__thread_set_special_port_t, Head) - 0usize];
    ["Offset of field: __Reply__thread_set_special_port_t::NDR"]
        [::std::mem::offset_of!(__Reply__thread_set_special_port_t, NDR) - 24usize];
    ["Offset of field: __Reply__thread_set_special_port_t::RetCode"]
        [::std::mem::offset_of!(__Reply__thread_set_special_port_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub thread_info_outCnt: mach_msg_type_number_t,
    pub thread_info_out: [integer_t; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__thread_info_t"][::std::mem::size_of::<__Reply__thread_info_t>() - 168usize];
    ["Alignment of __Reply__thread_info_t"]
        [::std::mem::align_of::<__Reply__thread_info_t>() - 4usize];
    ["Offset of field: __Reply__thread_info_t::Head"]
        [::std::mem::offset_of!(__Reply__thread_info_t, Head) - 0usize];
    ["Offset of field: __Reply__thread_info_t::NDR"]
        [::std::mem::offset_of!(__Reply__thread_info_t, NDR) - 24usize];
    ["Offset of field: __Reply__thread_info_t::RetCode"]
        [::std::mem::offset_of!(__Reply__thread_info_t, RetCode) - 32usize];
    ["Offset of field: __Reply__thread_info_t::thread_info_outCnt"]
        [::std::mem::offset_of!(__Reply__thread_info_t, thread_info_outCnt) - 36usize];
    ["Offset of field: __Reply__thread_info_t::thread_info_out"]
        [::std::mem::offset_of!(__Reply__thread_info_t, thread_info_out) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_set_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__thread_set_exception_ports_t"]
        [::std::mem::size_of::<__Reply__thread_set_exception_ports_t>() - 36usize];
    ["Alignment of __Reply__thread_set_exception_ports_t"]
        [::std::mem::align_of::<__Reply__thread_set_exception_ports_t>() - 4usize];
    ["Offset of field: __Reply__thread_set_exception_ports_t::Head"]
        [::std::mem::offset_of!(__Reply__thread_set_exception_ports_t, Head) - 0usize];
    ["Offset of field: __Reply__thread_set_exception_ports_t::NDR"]
        [::std::mem::offset_of!(__Reply__thread_set_exception_ports_t, NDR) - 24usize];
    ["Offset of field: __Reply__thread_set_exception_ports_t::RetCode"]
        [::std::mem::offset_of!(__Reply__thread_set_exception_ports_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_get_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub old_handlers: [mach_msg_port_descriptor_t; 32usize],
    pub NDR: NDR_record_t,
    pub masksCnt: mach_msg_type_number_t,
    pub masks: [exception_mask_t; 32usize],
    pub old_behaviors: [exception_behavior_t; 32usize],
    pub old_flavors: [thread_state_flavor_t; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__thread_get_exception_ports_t"]
        [::std::mem::size_of::<__Reply__thread_get_exception_ports_t>() - 808usize];
    ["Alignment of __Reply__thread_get_exception_ports_t"]
        [::std::mem::align_of::<__Reply__thread_get_exception_ports_t>() - 4usize];
    ["Offset of field: __Reply__thread_get_exception_ports_t::Head"]
        [::std::mem::offset_of!(__Reply__thread_get_exception_ports_t, Head) - 0usize];
    ["Offset of field: __Reply__thread_get_exception_ports_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__thread_get_exception_ports_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__thread_get_exception_ports_t::old_handlers"]
        [::std::mem::offset_of!(__Reply__thread_get_exception_ports_t, old_handlers) - 28usize];
    ["Offset of field: __Reply__thread_get_exception_ports_t::NDR"]
        [::std::mem::offset_of!(__Reply__thread_get_exception_ports_t, NDR) - 412usize];
    ["Offset of field: __Reply__thread_get_exception_ports_t::masksCnt"]
        [::std::mem::offset_of!(__Reply__thread_get_exception_ports_t, masksCnt) - 420usize];
    ["Offset of field: __Reply__thread_get_exception_ports_t::masks"]
        [::std::mem::offset_of!(__Reply__thread_get_exception_ports_t, masks) - 424usize];
    ["Offset of field: __Reply__thread_get_exception_ports_t::old_behaviors"]
        [::std::mem::offset_of!(__Reply__thread_get_exception_ports_t, old_behaviors) - 552usize];
    ["Offset of field: __Reply__thread_get_exception_ports_t::old_flavors"]
        [::std::mem::offset_of!(__Reply__thread_get_exception_ports_t, old_flavors) - 680usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_swap_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub old_handlers: [mach_msg_port_descriptor_t; 32usize],
    pub NDR: NDR_record_t,
    pub masksCnt: mach_msg_type_number_t,
    pub masks: [exception_mask_t; 32usize],
    pub old_behaviors: [exception_behavior_t; 32usize],
    pub old_flavors: [thread_state_flavor_t; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__thread_swap_exception_ports_t"]
        [::std::mem::size_of::<__Reply__thread_swap_exception_ports_t>() - 808usize];
    ["Alignment of __Reply__thread_swap_exception_ports_t"]
        [::std::mem::align_of::<__Reply__thread_swap_exception_ports_t>() - 4usize];
    ["Offset of field: __Reply__thread_swap_exception_ports_t::Head"]
        [::std::mem::offset_of!(__Reply__thread_swap_exception_ports_t, Head) - 0usize];
    ["Offset of field: __Reply__thread_swap_exception_ports_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__thread_swap_exception_ports_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__thread_swap_exception_ports_t::old_handlers"]
        [::std::mem::offset_of!(__Reply__thread_swap_exception_ports_t, old_handlers) - 28usize];
    ["Offset of field: __Reply__thread_swap_exception_ports_t::NDR"]
        [::std::mem::offset_of!(__Reply__thread_swap_exception_ports_t, NDR) - 412usize];
    ["Offset of field: __Reply__thread_swap_exception_ports_t::masksCnt"]
        [::std::mem::offset_of!(__Reply__thread_swap_exception_ports_t, masksCnt) - 420usize];
    ["Offset of field: __Reply__thread_swap_exception_ports_t::masks"]
        [::std::mem::offset_of!(__Reply__thread_swap_exception_ports_t, masks) - 424usize];
    ["Offset of field: __Reply__thread_swap_exception_ports_t::old_behaviors"]
        [::std::mem::offset_of!(__Reply__thread_swap_exception_ports_t, old_behaviors) - 552usize];
    ["Offset of field: __Reply__thread_swap_exception_ports_t::old_flavors"]
        [::std::mem::offset_of!(__Reply__thread_swap_exception_ports_t, old_flavors) - 680usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_policy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__thread_policy_t"]
        [::std::mem::size_of::<__Reply__thread_policy_t>() - 36usize];
    ["Alignment of __Reply__thread_policy_t"]
        [::std::mem::align_of::<__Reply__thread_policy_t>() - 4usize];
    ["Offset of field: __Reply__thread_policy_t::Head"]
        [::std::mem::offset_of!(__Reply__thread_policy_t, Head) - 0usize];
    ["Offset of field: __Reply__thread_policy_t::NDR"]
        [::std::mem::offset_of!(__Reply__thread_policy_t, NDR) - 24usize];
    ["Offset of field: __Reply__thread_policy_t::RetCode"]
        [::std::mem::offset_of!(__Reply__thread_policy_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_policy_set_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__thread_policy_set_t"]
        [::std::mem::size_of::<__Reply__thread_policy_set_t>() - 36usize];
    ["Alignment of __Reply__thread_policy_set_t"]
        [::std::mem::align_of::<__Reply__thread_policy_set_t>() - 4usize];
    ["Offset of field: __Reply__thread_policy_set_t::Head"]
        [::std::mem::offset_of!(__Reply__thread_policy_set_t, Head) - 0usize];
    ["Offset of field: __Reply__thread_policy_set_t::NDR"]
        [::std::mem::offset_of!(__Reply__thread_policy_set_t, NDR) - 24usize];
    ["Offset of field: __Reply__thread_policy_set_t::RetCode"]
        [::std::mem::offset_of!(__Reply__thread_policy_set_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_policy_get_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub policy_infoCnt: mach_msg_type_number_t,
    pub policy_info: [integer_t; 16usize],
    pub get_default: boolean_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__thread_policy_get_t"]
        [::std::mem::size_of::<__Reply__thread_policy_get_t>() - 108usize];
    ["Alignment of __Reply__thread_policy_get_t"]
        [::std::mem::align_of::<__Reply__thread_policy_get_t>() - 4usize];
    ["Offset of field: __Reply__thread_policy_get_t::Head"]
        [::std::mem::offset_of!(__Reply__thread_policy_get_t, Head) - 0usize];
    ["Offset of field: __Reply__thread_policy_get_t::NDR"]
        [::std::mem::offset_of!(__Reply__thread_policy_get_t, NDR) - 24usize];
    ["Offset of field: __Reply__thread_policy_get_t::RetCode"]
        [::std::mem::offset_of!(__Reply__thread_policy_get_t, RetCode) - 32usize];
    ["Offset of field: __Reply__thread_policy_get_t::policy_infoCnt"]
        [::std::mem::offset_of!(__Reply__thread_policy_get_t, policy_infoCnt) - 36usize];
    ["Offset of field: __Reply__thread_policy_get_t::policy_info"]
        [::std::mem::offset_of!(__Reply__thread_policy_get_t, policy_info) - 40usize];
    ["Offset of field: __Reply__thread_policy_get_t::get_default"]
        [::std::mem::offset_of!(__Reply__thread_policy_get_t, get_default) - 104usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_sample_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__thread_sample_t"]
        [::std::mem::size_of::<__Reply__thread_sample_t>() - 36usize];
    ["Alignment of __Reply__thread_sample_t"]
        [::std::mem::align_of::<__Reply__thread_sample_t>() - 4usize];
    ["Offset of field: __Reply__thread_sample_t::Head"]
        [::std::mem::offset_of!(__Reply__thread_sample_t, Head) - 0usize];
    ["Offset of field: __Reply__thread_sample_t::NDR"]
        [::std::mem::offset_of!(__Reply__thread_sample_t, NDR) - 24usize];
    ["Offset of field: __Reply__thread_sample_t::RetCode"]
        [::std::mem::offset_of!(__Reply__thread_sample_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__etap_trace_thread_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__etap_trace_thread_t"]
        [::std::mem::size_of::<__Reply__etap_trace_thread_t>() - 36usize];
    ["Alignment of __Reply__etap_trace_thread_t"]
        [::std::mem::align_of::<__Reply__etap_trace_thread_t>() - 4usize];
    ["Offset of field: __Reply__etap_trace_thread_t::Head"]
        [::std::mem::offset_of!(__Reply__etap_trace_thread_t, Head) - 0usize];
    ["Offset of field: __Reply__etap_trace_thread_t::NDR"]
        [::std::mem::offset_of!(__Reply__etap_trace_thread_t, NDR) - 24usize];
    ["Offset of field: __Reply__etap_trace_thread_t::RetCode"]
        [::std::mem::offset_of!(__Reply__etap_trace_thread_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_assign_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__thread_assign_t"]
        [::std::mem::size_of::<__Reply__thread_assign_t>() - 36usize];
    ["Alignment of __Reply__thread_assign_t"]
        [::std::mem::align_of::<__Reply__thread_assign_t>() - 4usize];
    ["Offset of field: __Reply__thread_assign_t::Head"]
        [::std::mem::offset_of!(__Reply__thread_assign_t, Head) - 0usize];
    ["Offset of field: __Reply__thread_assign_t::NDR"]
        [::std::mem::offset_of!(__Reply__thread_assign_t, NDR) - 24usize];
    ["Offset of field: __Reply__thread_assign_t::RetCode"]
        [::std::mem::offset_of!(__Reply__thread_assign_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_assign_default_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__thread_assign_default_t"]
        [::std::mem::size_of::<__Reply__thread_assign_default_t>() - 36usize];
    ["Alignment of __Reply__thread_assign_default_t"]
        [::std::mem::align_of::<__Reply__thread_assign_default_t>() - 4usize];
    ["Offset of field: __Reply__thread_assign_default_t::Head"]
        [::std::mem::offset_of!(__Reply__thread_assign_default_t, Head) - 0usize];
    ["Offset of field: __Reply__thread_assign_default_t::NDR"]
        [::std::mem::offset_of!(__Reply__thread_assign_default_t, NDR) - 24usize];
    ["Offset of field: __Reply__thread_assign_default_t::RetCode"]
        [::std::mem::offset_of!(__Reply__thread_assign_default_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_get_assignment_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub assigned_set: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__thread_get_assignment_t"]
        [::std::mem::size_of::<__Reply__thread_get_assignment_t>() - 40usize];
    ["Alignment of __Reply__thread_get_assignment_t"]
        [::std::mem::align_of::<__Reply__thread_get_assignment_t>() - 4usize];
    ["Offset of field: __Reply__thread_get_assignment_t::Head"]
        [::std::mem::offset_of!(__Reply__thread_get_assignment_t, Head) - 0usize];
    ["Offset of field: __Reply__thread_get_assignment_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__thread_get_assignment_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__thread_get_assignment_t::assigned_set"]
        [::std::mem::offset_of!(__Reply__thread_get_assignment_t, assigned_set) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_set_policy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__thread_set_policy_t"]
        [::std::mem::size_of::<__Reply__thread_set_policy_t>() - 36usize];
    ["Alignment of __Reply__thread_set_policy_t"]
        [::std::mem::align_of::<__Reply__thread_set_policy_t>() - 4usize];
    ["Offset of field: __Reply__thread_set_policy_t::Head"]
        [::std::mem::offset_of!(__Reply__thread_set_policy_t, Head) - 0usize];
    ["Offset of field: __Reply__thread_set_policy_t::NDR"]
        [::std::mem::offset_of!(__Reply__thread_set_policy_t, NDR) - 24usize];
    ["Offset of field: __Reply__thread_set_policy_t::RetCode"]
        [::std::mem::offset_of!(__Reply__thread_set_policy_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_get_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub voucher: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__thread_get_mach_voucher_t"]
        [::std::mem::size_of::<__Reply__thread_get_mach_voucher_t>() - 40usize];
    ["Alignment of __Reply__thread_get_mach_voucher_t"]
        [::std::mem::align_of::<__Reply__thread_get_mach_voucher_t>() - 4usize];
    ["Offset of field: __Reply__thread_get_mach_voucher_t::Head"]
        [::std::mem::offset_of!(__Reply__thread_get_mach_voucher_t, Head) - 0usize];
    ["Offset of field: __Reply__thread_get_mach_voucher_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__thread_get_mach_voucher_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__thread_get_mach_voucher_t::voucher"]
        [::std::mem::offset_of!(__Reply__thread_get_mach_voucher_t, voucher) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_set_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__thread_set_mach_voucher_t"]
        [::std::mem::size_of::<__Reply__thread_set_mach_voucher_t>() - 36usize];
    ["Alignment of __Reply__thread_set_mach_voucher_t"]
        [::std::mem::align_of::<__Reply__thread_set_mach_voucher_t>() - 4usize];
    ["Offset of field: __Reply__thread_set_mach_voucher_t::Head"]
        [::std::mem::offset_of!(__Reply__thread_set_mach_voucher_t, Head) - 0usize];
    ["Offset of field: __Reply__thread_set_mach_voucher_t::NDR"]
        [::std::mem::offset_of!(__Reply__thread_set_mach_voucher_t, NDR) - 24usize];
    ["Offset of field: __Reply__thread_set_mach_voucher_t::RetCode"]
        [::std::mem::offset_of!(__Reply__thread_set_mach_voucher_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_swap_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub old_voucher: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__thread_swap_mach_voucher_t"]
        [::std::mem::size_of::<__Reply__thread_swap_mach_voucher_t>() - 40usize];
    ["Alignment of __Reply__thread_swap_mach_voucher_t"]
        [::std::mem::align_of::<__Reply__thread_swap_mach_voucher_t>() - 4usize];
    ["Offset of field: __Reply__thread_swap_mach_voucher_t::Head"]
        [::std::mem::offset_of!(__Reply__thread_swap_mach_voucher_t, Head) - 0usize];
    ["Offset of field: __Reply__thread_swap_mach_voucher_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__thread_swap_mach_voucher_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__thread_swap_mach_voucher_t::old_voucher"]
        [::std::mem::offset_of!(__Reply__thread_swap_mach_voucher_t, old_voucher) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_convert_thread_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub out_stateCnt: mach_msg_type_number_t,
    pub out_state: [natural_t; 1296usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__thread_convert_thread_state_t"]
        [::std::mem::size_of::<__Reply__thread_convert_thread_state_t>() - 5224usize];
    ["Alignment of __Reply__thread_convert_thread_state_t"]
        [::std::mem::align_of::<__Reply__thread_convert_thread_state_t>() - 4usize];
    ["Offset of field: __Reply__thread_convert_thread_state_t::Head"]
        [::std::mem::offset_of!(__Reply__thread_convert_thread_state_t, Head) - 0usize];
    ["Offset of field: __Reply__thread_convert_thread_state_t::NDR"]
        [::std::mem::offset_of!(__Reply__thread_convert_thread_state_t, NDR) - 24usize];
    ["Offset of field: __Reply__thread_convert_thread_state_t::RetCode"]
        [::std::mem::offset_of!(__Reply__thread_convert_thread_state_t, RetCode) - 32usize];
    ["Offset of field: __Reply__thread_convert_thread_state_t::out_stateCnt"]
        [::std::mem::offset_of!(__Reply__thread_convert_thread_state_t, out_stateCnt) - 36usize];
    ["Offset of field: __Reply__thread_convert_thread_state_t::out_state"]
        [::std::mem::offset_of!(__Reply__thread_convert_thread_state_t, out_state) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_get_exception_ports_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub masksCnt: mach_msg_type_number_t,
    pub masks: [exception_mask_t; 32usize],
    pub old_handlers_info: [exception_handler_info_t; 32usize],
    pub old_behaviors: [exception_behavior_t; 32usize],
    pub old_flavors: [thread_state_flavor_t; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__thread_get_exception_ports_info_t"]
        [::std::mem::size_of::<__Reply__thread_get_exception_ports_info_t>() - 680usize];
    ["Alignment of __Reply__thread_get_exception_ports_info_t"]
        [::std::mem::align_of::<__Reply__thread_get_exception_ports_info_t>() - 4usize];
    ["Offset of field: __Reply__thread_get_exception_ports_info_t::Head"]
        [::std::mem::offset_of!(__Reply__thread_get_exception_ports_info_t, Head) - 0usize];
    ["Offset of field: __Reply__thread_get_exception_ports_info_t::NDR"]
        [::std::mem::offset_of!(__Reply__thread_get_exception_ports_info_t, NDR) - 24usize];
    ["Offset of field: __Reply__thread_get_exception_ports_info_t::RetCode"]
        [::std::mem::offset_of!(__Reply__thread_get_exception_ports_info_t, RetCode) - 32usize];
    ["Offset of field: __Reply__thread_get_exception_ports_info_t::masksCnt"]
        [::std::mem::offset_of!(__Reply__thread_get_exception_ports_info_t, masksCnt) - 36usize];
    ["Offset of field: __Reply__thread_get_exception_ports_info_t::masks"]
        [::std::mem::offset_of!(__Reply__thread_get_exception_ports_info_t, masks) - 40usize];
    ["Offset of field: __Reply__thread_get_exception_ports_info_t::old_handlers_info"][::std::mem::offset_of!(
        __Reply__thread_get_exception_ports_info_t,
        old_handlers_info
    )
        - 168usize];
    ["Offset of field: __Reply__thread_get_exception_ports_info_t::old_behaviors"][::std::mem::offset_of!(
        __Reply__thread_get_exception_ports_info_t,
        old_behaviors
    ) - 424usize];
    ["Offset of field: __Reply__thread_get_exception_ports_info_t::old_flavors"][::std::mem::offset_of!(
        __Reply__thread_get_exception_ports_info_t,
        old_flavors
    ) - 552usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_adopt_exception_handler_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__thread_adopt_exception_handler_t"]
        [::std::mem::size_of::<__Reply__thread_adopt_exception_handler_t>() - 36usize];
    ["Alignment of __Reply__thread_adopt_exception_handler_t"]
        [::std::mem::align_of::<__Reply__thread_adopt_exception_handler_t>() - 4usize];
    ["Offset of field: __Reply__thread_adopt_exception_handler_t::Head"]
        [::std::mem::offset_of!(__Reply__thread_adopt_exception_handler_t, Head) - 0usize];
    ["Offset of field: __Reply__thread_adopt_exception_handler_t::NDR"]
        [::std::mem::offset_of!(__Reply__thread_adopt_exception_handler_t, NDR) - 24usize];
    ["Offset of field: __Reply__thread_adopt_exception_handler_t::RetCode"]
        [::std::mem::offset_of!(__Reply__thread_adopt_exception_handler_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__thread_act_subsystem {
    pub Reply_thread_terminate: __Reply__thread_terminate_t,
    pub Reply_act_get_state: __Reply__act_get_state_t,
    pub Reply_act_set_state: __Reply__act_set_state_t,
    pub Reply_thread_get_state: __Reply__thread_get_state_t,
    pub Reply_thread_set_state: __Reply__thread_set_state_t,
    pub Reply_thread_suspend: __Reply__thread_suspend_t,
    pub Reply_thread_resume: __Reply__thread_resume_t,
    pub Reply_thread_abort: __Reply__thread_abort_t,
    pub Reply_thread_abort_safely: __Reply__thread_abort_safely_t,
    pub Reply_thread_depress_abort: __Reply__thread_depress_abort_t,
    pub Reply_thread_get_special_port: __Reply__thread_get_special_port_t,
    pub Reply_thread_set_special_port: __Reply__thread_set_special_port_t,
    pub Reply_thread_info: __Reply__thread_info_t,
    pub Reply_thread_set_exception_ports: __Reply__thread_set_exception_ports_t,
    pub Reply_thread_get_exception_ports: __Reply__thread_get_exception_ports_t,
    pub Reply_thread_swap_exception_ports: __Reply__thread_swap_exception_ports_t,
    pub Reply_thread_policy: __Reply__thread_policy_t,
    pub Reply_thread_policy_set: __Reply__thread_policy_set_t,
    pub Reply_thread_policy_get: __Reply__thread_policy_get_t,
    pub Reply_thread_sample: __Reply__thread_sample_t,
    pub Reply_etap_trace_thread: __Reply__etap_trace_thread_t,
    pub Reply_thread_assign: __Reply__thread_assign_t,
    pub Reply_thread_assign_default: __Reply__thread_assign_default_t,
    pub Reply_thread_get_assignment: __Reply__thread_get_assignment_t,
    pub Reply_thread_set_policy: __Reply__thread_set_policy_t,
    pub Reply_thread_get_mach_voucher: __Reply__thread_get_mach_voucher_t,
    pub Reply_thread_set_mach_voucher: __Reply__thread_set_mach_voucher_t,
    pub Reply_thread_swap_mach_voucher: __Reply__thread_swap_mach_voucher_t,
    pub Reply_thread_convert_thread_state: __Reply__thread_convert_thread_state_t,
    pub Reply_thread_get_exception_ports_info: __Reply__thread_get_exception_ports_info_t,
    pub Reply_thread_adopt_exception_handler: __Reply__thread_adopt_exception_handler_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __ReplyUnion__thread_act_subsystem"]
        [::std::mem::size_of::<__ReplyUnion__thread_act_subsystem>() - 5224usize];
    ["Alignment of __ReplyUnion__thread_act_subsystem"]
        [::std::mem::align_of::<__ReplyUnion__thread_act_subsystem>() - 4usize];
    ["Offset of field: __ReplyUnion__thread_act_subsystem::Reply_thread_terminate"][::std::mem::offset_of!(
        __ReplyUnion__thread_act_subsystem,
        Reply_thread_terminate
    ) - 0usize];
    ["Offset of field: __ReplyUnion__thread_act_subsystem::Reply_act_get_state"]
        [::std::mem::offset_of!(__ReplyUnion__thread_act_subsystem, Reply_act_get_state) - 0usize];
    ["Offset of field: __ReplyUnion__thread_act_subsystem::Reply_act_set_state"]
        [::std::mem::offset_of!(__ReplyUnion__thread_act_subsystem, Reply_act_set_state) - 0usize];
    ["Offset of field: __ReplyUnion__thread_act_subsystem::Reply_thread_get_state"][::std::mem::offset_of!(
        __ReplyUnion__thread_act_subsystem,
        Reply_thread_get_state
    ) - 0usize];
    ["Offset of field: __ReplyUnion__thread_act_subsystem::Reply_thread_set_state"][::std::mem::offset_of!(
        __ReplyUnion__thread_act_subsystem,
        Reply_thread_set_state
    ) - 0usize];
    ["Offset of field: __ReplyUnion__thread_act_subsystem::Reply_thread_suspend"]
        [::std::mem::offset_of!(__ReplyUnion__thread_act_subsystem, Reply_thread_suspend) - 0usize];
    ["Offset of field: __ReplyUnion__thread_act_subsystem::Reply_thread_resume"]
        [::std::mem::offset_of!(__ReplyUnion__thread_act_subsystem, Reply_thread_resume) - 0usize];
    ["Offset of field: __ReplyUnion__thread_act_subsystem::Reply_thread_abort"]
        [::std::mem::offset_of!(__ReplyUnion__thread_act_subsystem, Reply_thread_abort) - 0usize];
    ["Offset of field: __ReplyUnion__thread_act_subsystem::Reply_thread_abort_safely"][::std::mem::offset_of!(
        __ReplyUnion__thread_act_subsystem,
        Reply_thread_abort_safely
    ) - 0usize];
    ["Offset of field: __ReplyUnion__thread_act_subsystem::Reply_thread_depress_abort"][::std::mem::offset_of!(
        __ReplyUnion__thread_act_subsystem,
        Reply_thread_depress_abort
    ) - 0usize];
    ["Offset of field: __ReplyUnion__thread_act_subsystem::Reply_thread_get_special_port"][::std::mem::offset_of!(
        __ReplyUnion__thread_act_subsystem,
        Reply_thread_get_special_port
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__thread_act_subsystem::Reply_thread_set_special_port"][::std::mem::offset_of!(
        __ReplyUnion__thread_act_subsystem,
        Reply_thread_set_special_port
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__thread_act_subsystem::Reply_thread_info"]
        [::std::mem::offset_of!(__ReplyUnion__thread_act_subsystem, Reply_thread_info) - 0usize];
    ["Offset of field: __ReplyUnion__thread_act_subsystem::Reply_thread_set_exception_ports"][::std::mem::offset_of!(
        __ReplyUnion__thread_act_subsystem,
        Reply_thread_set_exception_ports
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__thread_act_subsystem::Reply_thread_get_exception_ports"][::std::mem::offset_of!(
        __ReplyUnion__thread_act_subsystem,
        Reply_thread_get_exception_ports
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__thread_act_subsystem::Reply_thread_swap_exception_ports"][::std::mem::offset_of!(
        __ReplyUnion__thread_act_subsystem,
        Reply_thread_swap_exception_ports
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__thread_act_subsystem::Reply_thread_policy"]
        [::std::mem::offset_of!(__ReplyUnion__thread_act_subsystem, Reply_thread_policy) - 0usize];
    ["Offset of field: __ReplyUnion__thread_act_subsystem::Reply_thread_policy_set"][::std::mem::offset_of!(
        __ReplyUnion__thread_act_subsystem,
        Reply_thread_policy_set
    ) - 0usize];
    ["Offset of field: __ReplyUnion__thread_act_subsystem::Reply_thread_policy_get"][::std::mem::offset_of!(
        __ReplyUnion__thread_act_subsystem,
        Reply_thread_policy_get
    ) - 0usize];
    ["Offset of field: __ReplyUnion__thread_act_subsystem::Reply_thread_sample"]
        [::std::mem::offset_of!(__ReplyUnion__thread_act_subsystem, Reply_thread_sample) - 0usize];
    ["Offset of field: __ReplyUnion__thread_act_subsystem::Reply_etap_trace_thread"][::std::mem::offset_of!(
        __ReplyUnion__thread_act_subsystem,
        Reply_etap_trace_thread
    ) - 0usize];
    ["Offset of field: __ReplyUnion__thread_act_subsystem::Reply_thread_assign"]
        [::std::mem::offset_of!(__ReplyUnion__thread_act_subsystem, Reply_thread_assign) - 0usize];
    ["Offset of field: __ReplyUnion__thread_act_subsystem::Reply_thread_assign_default"][::std::mem::offset_of!(
        __ReplyUnion__thread_act_subsystem,
        Reply_thread_assign_default
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__thread_act_subsystem::Reply_thread_get_assignment"][::std::mem::offset_of!(
        __ReplyUnion__thread_act_subsystem,
        Reply_thread_get_assignment
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__thread_act_subsystem::Reply_thread_set_policy"][::std::mem::offset_of!(
        __ReplyUnion__thread_act_subsystem,
        Reply_thread_set_policy
    ) - 0usize];
    ["Offset of field: __ReplyUnion__thread_act_subsystem::Reply_thread_get_mach_voucher"][::std::mem::offset_of!(
        __ReplyUnion__thread_act_subsystem,
        Reply_thread_get_mach_voucher
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__thread_act_subsystem::Reply_thread_set_mach_voucher"][::std::mem::offset_of!(
        __ReplyUnion__thread_act_subsystem,
        Reply_thread_set_mach_voucher
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__thread_act_subsystem::Reply_thread_swap_mach_voucher"][::std::mem::offset_of!(
        __ReplyUnion__thread_act_subsystem,
        Reply_thread_swap_mach_voucher
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__thread_act_subsystem::Reply_thread_convert_thread_state"][::std::mem::offset_of!(
        __ReplyUnion__thread_act_subsystem,
        Reply_thread_convert_thread_state
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__thread_act_subsystem::Reply_thread_get_exception_ports_info"] [:: std :: mem :: offset_of ! (__ReplyUnion__thread_act_subsystem , Reply_thread_get_exception_ports_info) - 0usize] ;
    ["Offset of field: __ReplyUnion__thread_act_subsystem::Reply_thread_adopt_exception_handler"][::std::mem::offset_of!(
        __ReplyUnion__thread_act_subsystem,
        Reply_thread_adopt_exception_handler
    )
        - 0usize];
};
unsafe extern "C" {
    pub fn vm_region(
        target_task: vm_map_read_t,
        address: *mut vm_address_t,
        size: *mut vm_size_t,
        flavor: vm_region_flavor_t,
        info: vm_region_info_t,
        infoCnt: *mut mach_msg_type_number_t,
        object_name: *mut mach_port_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn vm_allocate(
        target_task: vm_map_t,
        address: *mut vm_address_t,
        size: vm_size_t,
        flags: ::std::os::raw::c_int,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn vm_deallocate(
        target_task: vm_map_t,
        address: vm_address_t,
        size: vm_size_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn vm_protect(
        target_task: vm_map_t,
        address: vm_address_t,
        size: vm_size_t,
        set_maximum: boolean_t,
        new_protection: vm_prot_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn vm_inherit(
        target_task: vm_map_t,
        address: vm_address_t,
        size: vm_size_t,
        new_inheritance: vm_inherit_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn vm_read(
        target_task: vm_map_read_t,
        address: vm_address_t,
        size: vm_size_t,
        data: *mut vm_offset_t,
        dataCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn vm_read_list(
        target_task: vm_map_read_t,
        data_list: *mut vm_read_entry,
        count: natural_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn vm_write(
        target_task: vm_map_t,
        address: vm_address_t,
        data: vm_offset_t,
        dataCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn vm_copy(
        target_task: vm_map_t,
        source_address: vm_address_t,
        size: vm_size_t,
        dest_address: vm_address_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn vm_read_overwrite(
        target_task: vm_map_read_t,
        address: vm_address_t,
        size: vm_size_t,
        data: vm_address_t,
        outsize: *mut vm_size_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn vm_msync(
        target_task: vm_map_t,
        address: vm_address_t,
        size: vm_size_t,
        sync_flags: vm_sync_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn vm_behavior_set(
        target_task: vm_map_t,
        address: vm_address_t,
        size: vm_size_t,
        new_behavior: vm_behavior_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn vm_map(
        target_task: vm_map_t,
        address: *mut vm_address_t,
        size: vm_size_t,
        mask: vm_address_t,
        flags: ::std::os::raw::c_int,
        object: mem_entry_name_port_t,
        offset: vm_offset_t,
        copy: boolean_t,
        cur_protection: vm_prot_t,
        max_protection: vm_prot_t,
        inheritance: vm_inherit_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn vm_machine_attribute(
        target_task: vm_map_t,
        address: vm_address_t,
        size: vm_size_t,
        attribute: vm_machine_attribute_t,
        value: *mut vm_machine_attribute_val_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn vm_remap(
        target_task: vm_map_t,
        target_address: *mut vm_address_t,
        size: vm_size_t,
        mask: vm_address_t,
        flags: ::std::os::raw::c_int,
        src_task: vm_map_t,
        src_address: vm_address_t,
        copy: boolean_t,
        cur_protection: *mut vm_prot_t,
        max_protection: *mut vm_prot_t,
        inheritance: vm_inherit_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn task_wire(target_task: vm_map_t, must_wire: boolean_t) -> kern_return_t;
}
unsafe extern "C" {
    pub fn mach_make_memory_entry(
        target_task: vm_map_t,
        size: *mut vm_size_t,
        offset: vm_offset_t,
        permission: vm_prot_t,
        object_handle: *mut mem_entry_name_port_t,
        parent_entry: mem_entry_name_port_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn vm_map_page_query(
        target_map: vm_map_read_t,
        offset: vm_offset_t,
        disposition: *mut integer_t,
        ref_count: *mut integer_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn mach_vm_region_info(
        task: vm_map_read_t,
        address: vm_address_t,
        region: *mut vm_info_region_t,
        objects: *mut vm_info_object_array_t,
        objectsCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn vm_mapped_pages_info(
        task: vm_map_read_t,
        pages: *mut page_address_array_t,
        pagesCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn vm_region_recurse(
        target_task: vm_map_read_t,
        address: *mut vm_address_t,
        size: *mut vm_size_t,
        nesting_depth: *mut natural_t,
        info: vm_region_recurse_info_t,
        infoCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn vm_region_recurse_64(
        target_task: vm_map_read_t,
        address: *mut vm_address_t,
        size: *mut vm_size_t,
        nesting_depth: *mut natural_t,
        info: vm_region_recurse_info_t,
        infoCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn mach_vm_region_info_64(
        task: vm_map_read_t,
        address: vm_address_t,
        region: *mut vm_info_region_64_t,
        objects: *mut vm_info_object_array_t,
        objectsCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn vm_region_64(
        target_task: vm_map_read_t,
        address: *mut vm_address_t,
        size: *mut vm_size_t,
        flavor: vm_region_flavor_t,
        info: vm_region_info_t,
        infoCnt: *mut mach_msg_type_number_t,
        object_name: *mut mach_port_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn mach_make_memory_entry_64(
        target_task: vm_map_t,
        size: *mut memory_object_size_t,
        offset: memory_object_offset_t,
        permission: vm_prot_t,
        object_handle: *mut mach_port_t,
        parent_entry: mem_entry_name_port_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn vm_map_64(
        target_task: vm_map_t,
        address: *mut vm_address_t,
        size: vm_size_t,
        mask: vm_address_t,
        flags: ::std::os::raw::c_int,
        object: mem_entry_name_port_t,
        offset: memory_object_offset_t,
        copy: boolean_t,
        cur_protection: vm_prot_t,
        max_protection: vm_prot_t,
        inheritance: vm_inherit_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn vm_purgable_control(
        target_task: vm_map_t,
        address: vm_address_t,
        control: vm_purgable_t,
        state: *mut ::std::os::raw::c_int,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn vm_map_exec_lockdown(target_task: vm_map_t) -> kern_return_t;
}
unsafe extern "C" {
    pub fn vm_remap_new(
        target_task: vm_map_t,
        target_address: *mut vm_address_t,
        size: vm_size_t,
        mask: vm_address_t,
        flags: ::std::os::raw::c_int,
        src_task: vm_map_read_t,
        src_address: vm_address_t,
        copy: boolean_t,
        cur_protection: *mut vm_prot_t,
        max_protection: *mut vm_prot_t,
        inheritance: vm_inherit_t,
    ) -> kern_return_t;
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_region_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub flavor: vm_region_flavor_t,
    pub infoCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__vm_region_t"][::std::mem::size_of::<__Request__vm_region_t>() - 48usize];
    ["Alignment of __Request__vm_region_t"]
        [::std::mem::align_of::<__Request__vm_region_t>() - 4usize];
    ["Offset of field: __Request__vm_region_t::Head"]
        [::std::mem::offset_of!(__Request__vm_region_t, Head) - 0usize];
    ["Offset of field: __Request__vm_region_t::NDR"]
        [::std::mem::offset_of!(__Request__vm_region_t, NDR) - 24usize];
    ["Offset of field: __Request__vm_region_t::address"]
        [::std::mem::offset_of!(__Request__vm_region_t, address) - 32usize];
    ["Offset of field: __Request__vm_region_t::flavor"]
        [::std::mem::offset_of!(__Request__vm_region_t, flavor) - 40usize];
    ["Offset of field: __Request__vm_region_t::infoCnt"]
        [::std::mem::offset_of!(__Request__vm_region_t, infoCnt) - 44usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_allocate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub flags: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__vm_allocate_t"]
        [::std::mem::size_of::<__Request__vm_allocate_t>() - 52usize];
    ["Alignment of __Request__vm_allocate_t"]
        [::std::mem::align_of::<__Request__vm_allocate_t>() - 4usize];
    ["Offset of field: __Request__vm_allocate_t::Head"]
        [::std::mem::offset_of!(__Request__vm_allocate_t, Head) - 0usize];
    ["Offset of field: __Request__vm_allocate_t::NDR"]
        [::std::mem::offset_of!(__Request__vm_allocate_t, NDR) - 24usize];
    ["Offset of field: __Request__vm_allocate_t::address"]
        [::std::mem::offset_of!(__Request__vm_allocate_t, address) - 32usize];
    ["Offset of field: __Request__vm_allocate_t::size"]
        [::std::mem::offset_of!(__Request__vm_allocate_t, size) - 40usize];
    ["Offset of field: __Request__vm_allocate_t::flags"]
        [::std::mem::offset_of!(__Request__vm_allocate_t, flags) - 48usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_deallocate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__vm_deallocate_t"]
        [::std::mem::size_of::<__Request__vm_deallocate_t>() - 48usize];
    ["Alignment of __Request__vm_deallocate_t"]
        [::std::mem::align_of::<__Request__vm_deallocate_t>() - 4usize];
    ["Offset of field: __Request__vm_deallocate_t::Head"]
        [::std::mem::offset_of!(__Request__vm_deallocate_t, Head) - 0usize];
    ["Offset of field: __Request__vm_deallocate_t::NDR"]
        [::std::mem::offset_of!(__Request__vm_deallocate_t, NDR) - 24usize];
    ["Offset of field: __Request__vm_deallocate_t::address"]
        [::std::mem::offset_of!(__Request__vm_deallocate_t, address) - 32usize];
    ["Offset of field: __Request__vm_deallocate_t::size"]
        [::std::mem::offset_of!(__Request__vm_deallocate_t, size) - 40usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_protect_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub set_maximum: boolean_t,
    pub new_protection: vm_prot_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__vm_protect_t"][::std::mem::size_of::<__Request__vm_protect_t>() - 56usize];
    ["Alignment of __Request__vm_protect_t"]
        [::std::mem::align_of::<__Request__vm_protect_t>() - 4usize];
    ["Offset of field: __Request__vm_protect_t::Head"]
        [::std::mem::offset_of!(__Request__vm_protect_t, Head) - 0usize];
    ["Offset of field: __Request__vm_protect_t::NDR"]
        [::std::mem::offset_of!(__Request__vm_protect_t, NDR) - 24usize];
    ["Offset of field: __Request__vm_protect_t::address"]
        [::std::mem::offset_of!(__Request__vm_protect_t, address) - 32usize];
    ["Offset of field: __Request__vm_protect_t::size"]
        [::std::mem::offset_of!(__Request__vm_protect_t, size) - 40usize];
    ["Offset of field: __Request__vm_protect_t::set_maximum"]
        [::std::mem::offset_of!(__Request__vm_protect_t, set_maximum) - 48usize];
    ["Offset of field: __Request__vm_protect_t::new_protection"]
        [::std::mem::offset_of!(__Request__vm_protect_t, new_protection) - 52usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_inherit_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub new_inheritance: vm_inherit_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__vm_inherit_t"][::std::mem::size_of::<__Request__vm_inherit_t>() - 52usize];
    ["Alignment of __Request__vm_inherit_t"]
        [::std::mem::align_of::<__Request__vm_inherit_t>() - 4usize];
    ["Offset of field: __Request__vm_inherit_t::Head"]
        [::std::mem::offset_of!(__Request__vm_inherit_t, Head) - 0usize];
    ["Offset of field: __Request__vm_inherit_t::NDR"]
        [::std::mem::offset_of!(__Request__vm_inherit_t, NDR) - 24usize];
    ["Offset of field: __Request__vm_inherit_t::address"]
        [::std::mem::offset_of!(__Request__vm_inherit_t, address) - 32usize];
    ["Offset of field: __Request__vm_inherit_t::size"]
        [::std::mem::offset_of!(__Request__vm_inherit_t, size) - 40usize];
    ["Offset of field: __Request__vm_inherit_t::new_inheritance"]
        [::std::mem::offset_of!(__Request__vm_inherit_t, new_inheritance) - 48usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_read_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__vm_read_t"][::std::mem::size_of::<__Request__vm_read_t>() - 48usize];
    ["Alignment of __Request__vm_read_t"][::std::mem::align_of::<__Request__vm_read_t>() - 4usize];
    ["Offset of field: __Request__vm_read_t::Head"]
        [::std::mem::offset_of!(__Request__vm_read_t, Head) - 0usize];
    ["Offset of field: __Request__vm_read_t::NDR"]
        [::std::mem::offset_of!(__Request__vm_read_t, NDR) - 24usize];
    ["Offset of field: __Request__vm_read_t::address"]
        [::std::mem::offset_of!(__Request__vm_read_t, address) - 32usize];
    ["Offset of field: __Request__vm_read_t::size"]
        [::std::mem::offset_of!(__Request__vm_read_t, size) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_read_list_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub data_list: vm_read_entry_t,
    pub count: natural_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__vm_read_list_t"]
        [::std::mem::size_of::<__Request__vm_read_list_t>() - 4132usize];
    ["Alignment of __Request__vm_read_list_t"]
        [::std::mem::align_of::<__Request__vm_read_list_t>() - 4usize];
    ["Offset of field: __Request__vm_read_list_t::Head"]
        [::std::mem::offset_of!(__Request__vm_read_list_t, Head) - 0usize];
    ["Offset of field: __Request__vm_read_list_t::NDR"]
        [::std::mem::offset_of!(__Request__vm_read_list_t, NDR) - 24usize];
    ["Offset of field: __Request__vm_read_list_t::data_list"]
        [::std::mem::offset_of!(__Request__vm_read_list_t, data_list) - 32usize];
    ["Offset of field: __Request__vm_read_list_t::count"]
        [::std::mem::offset_of!(__Request__vm_read_list_t, count) - 4128usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_write_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub data: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub dataCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__vm_write_t"][::std::mem::size_of::<__Request__vm_write_t>() - 64usize];
    ["Alignment of __Request__vm_write_t"]
        [::std::mem::align_of::<__Request__vm_write_t>() - 4usize];
    ["Offset of field: __Request__vm_write_t::Head"]
        [::std::mem::offset_of!(__Request__vm_write_t, Head) - 0usize];
    ["Offset of field: __Request__vm_write_t::msgh_body"]
        [::std::mem::offset_of!(__Request__vm_write_t, msgh_body) - 24usize];
    ["Offset of field: __Request__vm_write_t::data"]
        [::std::mem::offset_of!(__Request__vm_write_t, data) - 28usize];
    ["Offset of field: __Request__vm_write_t::NDR"]
        [::std::mem::offset_of!(__Request__vm_write_t, NDR) - 44usize];
    ["Offset of field: __Request__vm_write_t::address"]
        [::std::mem::offset_of!(__Request__vm_write_t, address) - 52usize];
    ["Offset of field: __Request__vm_write_t::dataCnt"]
        [::std::mem::offset_of!(__Request__vm_write_t, dataCnt) - 60usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_copy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub source_address: vm_address_t,
    pub size: vm_size_t,
    pub dest_address: vm_address_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__vm_copy_t"][::std::mem::size_of::<__Request__vm_copy_t>() - 56usize];
    ["Alignment of __Request__vm_copy_t"][::std::mem::align_of::<__Request__vm_copy_t>() - 4usize];
    ["Offset of field: __Request__vm_copy_t::Head"]
        [::std::mem::offset_of!(__Request__vm_copy_t, Head) - 0usize];
    ["Offset of field: __Request__vm_copy_t::NDR"]
        [::std::mem::offset_of!(__Request__vm_copy_t, NDR) - 24usize];
    ["Offset of field: __Request__vm_copy_t::source_address"]
        [::std::mem::offset_of!(__Request__vm_copy_t, source_address) - 32usize];
    ["Offset of field: __Request__vm_copy_t::size"]
        [::std::mem::offset_of!(__Request__vm_copy_t, size) - 40usize];
    ["Offset of field: __Request__vm_copy_t::dest_address"]
        [::std::mem::offset_of!(__Request__vm_copy_t, dest_address) - 48usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_read_overwrite_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub data: vm_address_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__vm_read_overwrite_t"]
        [::std::mem::size_of::<__Request__vm_read_overwrite_t>() - 56usize];
    ["Alignment of __Request__vm_read_overwrite_t"]
        [::std::mem::align_of::<__Request__vm_read_overwrite_t>() - 4usize];
    ["Offset of field: __Request__vm_read_overwrite_t::Head"]
        [::std::mem::offset_of!(__Request__vm_read_overwrite_t, Head) - 0usize];
    ["Offset of field: __Request__vm_read_overwrite_t::NDR"]
        [::std::mem::offset_of!(__Request__vm_read_overwrite_t, NDR) - 24usize];
    ["Offset of field: __Request__vm_read_overwrite_t::address"]
        [::std::mem::offset_of!(__Request__vm_read_overwrite_t, address) - 32usize];
    ["Offset of field: __Request__vm_read_overwrite_t::size"]
        [::std::mem::offset_of!(__Request__vm_read_overwrite_t, size) - 40usize];
    ["Offset of field: __Request__vm_read_overwrite_t::data"]
        [::std::mem::offset_of!(__Request__vm_read_overwrite_t, data) - 48usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_msync_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub sync_flags: vm_sync_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__vm_msync_t"][::std::mem::size_of::<__Request__vm_msync_t>() - 52usize];
    ["Alignment of __Request__vm_msync_t"]
        [::std::mem::align_of::<__Request__vm_msync_t>() - 4usize];
    ["Offset of field: __Request__vm_msync_t::Head"]
        [::std::mem::offset_of!(__Request__vm_msync_t, Head) - 0usize];
    ["Offset of field: __Request__vm_msync_t::NDR"]
        [::std::mem::offset_of!(__Request__vm_msync_t, NDR) - 24usize];
    ["Offset of field: __Request__vm_msync_t::address"]
        [::std::mem::offset_of!(__Request__vm_msync_t, address) - 32usize];
    ["Offset of field: __Request__vm_msync_t::size"]
        [::std::mem::offset_of!(__Request__vm_msync_t, size) - 40usize];
    ["Offset of field: __Request__vm_msync_t::sync_flags"]
        [::std::mem::offset_of!(__Request__vm_msync_t, sync_flags) - 48usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_behavior_set_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub new_behavior: vm_behavior_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__vm_behavior_set_t"]
        [::std::mem::size_of::<__Request__vm_behavior_set_t>() - 52usize];
    ["Alignment of __Request__vm_behavior_set_t"]
        [::std::mem::align_of::<__Request__vm_behavior_set_t>() - 4usize];
    ["Offset of field: __Request__vm_behavior_set_t::Head"]
        [::std::mem::offset_of!(__Request__vm_behavior_set_t, Head) - 0usize];
    ["Offset of field: __Request__vm_behavior_set_t::NDR"]
        [::std::mem::offset_of!(__Request__vm_behavior_set_t, NDR) - 24usize];
    ["Offset of field: __Request__vm_behavior_set_t::address"]
        [::std::mem::offset_of!(__Request__vm_behavior_set_t, address) - 32usize];
    ["Offset of field: __Request__vm_behavior_set_t::size"]
        [::std::mem::offset_of!(__Request__vm_behavior_set_t, size) - 40usize];
    ["Offset of field: __Request__vm_behavior_set_t::new_behavior"]
        [::std::mem::offset_of!(__Request__vm_behavior_set_t, new_behavior) - 48usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_map_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub object: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub mask: vm_address_t,
    pub flags: ::std::os::raw::c_int,
    pub offset: vm_offset_t,
    pub copy: boolean_t,
    pub cur_protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__vm_map_t"][::std::mem::size_of::<__Request__vm_map_t>() - 100usize];
    ["Alignment of __Request__vm_map_t"][::std::mem::align_of::<__Request__vm_map_t>() - 4usize];
    ["Offset of field: __Request__vm_map_t::Head"]
        [::std::mem::offset_of!(__Request__vm_map_t, Head) - 0usize];
    ["Offset of field: __Request__vm_map_t::msgh_body"]
        [::std::mem::offset_of!(__Request__vm_map_t, msgh_body) - 24usize];
    ["Offset of field: __Request__vm_map_t::object"]
        [::std::mem::offset_of!(__Request__vm_map_t, object) - 28usize];
    ["Offset of field: __Request__vm_map_t::NDR"]
        [::std::mem::offset_of!(__Request__vm_map_t, NDR) - 40usize];
    ["Offset of field: __Request__vm_map_t::address"]
        [::std::mem::offset_of!(__Request__vm_map_t, address) - 48usize];
    ["Offset of field: __Request__vm_map_t::size"]
        [::std::mem::offset_of!(__Request__vm_map_t, size) - 56usize];
    ["Offset of field: __Request__vm_map_t::mask"]
        [::std::mem::offset_of!(__Request__vm_map_t, mask) - 64usize];
    ["Offset of field: __Request__vm_map_t::flags"]
        [::std::mem::offset_of!(__Request__vm_map_t, flags) - 72usize];
    ["Offset of field: __Request__vm_map_t::offset"]
        [::std::mem::offset_of!(__Request__vm_map_t, offset) - 76usize];
    ["Offset of field: __Request__vm_map_t::copy"]
        [::std::mem::offset_of!(__Request__vm_map_t, copy) - 84usize];
    ["Offset of field: __Request__vm_map_t::cur_protection"]
        [::std::mem::offset_of!(__Request__vm_map_t, cur_protection) - 88usize];
    ["Offset of field: __Request__vm_map_t::max_protection"]
        [::std::mem::offset_of!(__Request__vm_map_t, max_protection) - 92usize];
    ["Offset of field: __Request__vm_map_t::inheritance"]
        [::std::mem::offset_of!(__Request__vm_map_t, inheritance) - 96usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_machine_attribute_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub attribute: vm_machine_attribute_t,
    pub value: vm_machine_attribute_val_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__vm_machine_attribute_t"]
        [::std::mem::size_of::<__Request__vm_machine_attribute_t>() - 56usize];
    ["Alignment of __Request__vm_machine_attribute_t"]
        [::std::mem::align_of::<__Request__vm_machine_attribute_t>() - 4usize];
    ["Offset of field: __Request__vm_machine_attribute_t::Head"]
        [::std::mem::offset_of!(__Request__vm_machine_attribute_t, Head) - 0usize];
    ["Offset of field: __Request__vm_machine_attribute_t::NDR"]
        [::std::mem::offset_of!(__Request__vm_machine_attribute_t, NDR) - 24usize];
    ["Offset of field: __Request__vm_machine_attribute_t::address"]
        [::std::mem::offset_of!(__Request__vm_machine_attribute_t, address) - 32usize];
    ["Offset of field: __Request__vm_machine_attribute_t::size"]
        [::std::mem::offset_of!(__Request__vm_machine_attribute_t, size) - 40usize];
    ["Offset of field: __Request__vm_machine_attribute_t::attribute"]
        [::std::mem::offset_of!(__Request__vm_machine_attribute_t, attribute) - 48usize];
    ["Offset of field: __Request__vm_machine_attribute_t::value"]
        [::std::mem::offset_of!(__Request__vm_machine_attribute_t, value) - 52usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_remap_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub src_task: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub target_address: vm_address_t,
    pub size: vm_size_t,
    pub mask: vm_address_t,
    pub flags: ::std::os::raw::c_int,
    pub src_address: vm_address_t,
    pub copy: boolean_t,
    pub inheritance: vm_inherit_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__vm_remap_t"][::std::mem::size_of::<__Request__vm_remap_t>() - 92usize];
    ["Alignment of __Request__vm_remap_t"]
        [::std::mem::align_of::<__Request__vm_remap_t>() - 4usize];
    ["Offset of field: __Request__vm_remap_t::Head"]
        [::std::mem::offset_of!(__Request__vm_remap_t, Head) - 0usize];
    ["Offset of field: __Request__vm_remap_t::msgh_body"]
        [::std::mem::offset_of!(__Request__vm_remap_t, msgh_body) - 24usize];
    ["Offset of field: __Request__vm_remap_t::src_task"]
        [::std::mem::offset_of!(__Request__vm_remap_t, src_task) - 28usize];
    ["Offset of field: __Request__vm_remap_t::NDR"]
        [::std::mem::offset_of!(__Request__vm_remap_t, NDR) - 40usize];
    ["Offset of field: __Request__vm_remap_t::target_address"]
        [::std::mem::offset_of!(__Request__vm_remap_t, target_address) - 48usize];
    ["Offset of field: __Request__vm_remap_t::size"]
        [::std::mem::offset_of!(__Request__vm_remap_t, size) - 56usize];
    ["Offset of field: __Request__vm_remap_t::mask"]
        [::std::mem::offset_of!(__Request__vm_remap_t, mask) - 64usize];
    ["Offset of field: __Request__vm_remap_t::flags"]
        [::std::mem::offset_of!(__Request__vm_remap_t, flags) - 72usize];
    ["Offset of field: __Request__vm_remap_t::src_address"]
        [::std::mem::offset_of!(__Request__vm_remap_t, src_address) - 76usize];
    ["Offset of field: __Request__vm_remap_t::copy"]
        [::std::mem::offset_of!(__Request__vm_remap_t, copy) - 84usize];
    ["Offset of field: __Request__vm_remap_t::inheritance"]
        [::std::mem::offset_of!(__Request__vm_remap_t, inheritance) - 88usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_wire_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub must_wire: boolean_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_wire_t"][::std::mem::size_of::<__Request__task_wire_t>() - 36usize];
    ["Alignment of __Request__task_wire_t"]
        [::std::mem::align_of::<__Request__task_wire_t>() - 4usize];
    ["Offset of field: __Request__task_wire_t::Head"]
        [::std::mem::offset_of!(__Request__task_wire_t, Head) - 0usize];
    ["Offset of field: __Request__task_wire_t::NDR"]
        [::std::mem::offset_of!(__Request__task_wire_t, NDR) - 24usize];
    ["Offset of field: __Request__task_wire_t::must_wire"]
        [::std::mem::offset_of!(__Request__task_wire_t, must_wire) - 32usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_make_memory_entry_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub parent_entry: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub size: vm_size_t,
    pub offset: vm_offset_t,
    pub permission: vm_prot_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_make_memory_entry_t"]
        [::std::mem::size_of::<__Request__mach_make_memory_entry_t>() - 68usize];
    ["Alignment of __Request__mach_make_memory_entry_t"]
        [::std::mem::align_of::<__Request__mach_make_memory_entry_t>() - 4usize];
    ["Offset of field: __Request__mach_make_memory_entry_t::Head"]
        [::std::mem::offset_of!(__Request__mach_make_memory_entry_t, Head) - 0usize];
    ["Offset of field: __Request__mach_make_memory_entry_t::msgh_body"]
        [::std::mem::offset_of!(__Request__mach_make_memory_entry_t, msgh_body) - 24usize];
    ["Offset of field: __Request__mach_make_memory_entry_t::parent_entry"]
        [::std::mem::offset_of!(__Request__mach_make_memory_entry_t, parent_entry) - 28usize];
    ["Offset of field: __Request__mach_make_memory_entry_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_make_memory_entry_t, NDR) - 40usize];
    ["Offset of field: __Request__mach_make_memory_entry_t::size"]
        [::std::mem::offset_of!(__Request__mach_make_memory_entry_t, size) - 48usize];
    ["Offset of field: __Request__mach_make_memory_entry_t::offset"]
        [::std::mem::offset_of!(__Request__mach_make_memory_entry_t, offset) - 56usize];
    ["Offset of field: __Request__mach_make_memory_entry_t::permission"]
        [::std::mem::offset_of!(__Request__mach_make_memory_entry_t, permission) - 64usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_map_page_query_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub offset: vm_offset_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__vm_map_page_query_t"]
        [::std::mem::size_of::<__Request__vm_map_page_query_t>() - 40usize];
    ["Alignment of __Request__vm_map_page_query_t"]
        [::std::mem::align_of::<__Request__vm_map_page_query_t>() - 4usize];
    ["Offset of field: __Request__vm_map_page_query_t::Head"]
        [::std::mem::offset_of!(__Request__vm_map_page_query_t, Head) - 0usize];
    ["Offset of field: __Request__vm_map_page_query_t::NDR"]
        [::std::mem::offset_of!(__Request__vm_map_page_query_t, NDR) - 24usize];
    ["Offset of field: __Request__vm_map_page_query_t::offset"]
        [::std::mem::offset_of!(__Request__vm_map_page_query_t, offset) - 32usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_region_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_vm_region_info_t"]
        [::std::mem::size_of::<__Request__mach_vm_region_info_t>() - 40usize];
    ["Alignment of __Request__mach_vm_region_info_t"]
        [::std::mem::align_of::<__Request__mach_vm_region_info_t>() - 4usize];
    ["Offset of field: __Request__mach_vm_region_info_t::Head"]
        [::std::mem::offset_of!(__Request__mach_vm_region_info_t, Head) - 0usize];
    ["Offset of field: __Request__mach_vm_region_info_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_vm_region_info_t, NDR) - 24usize];
    ["Offset of field: __Request__mach_vm_region_info_t::address"]
        [::std::mem::offset_of!(__Request__mach_vm_region_info_t, address) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_mapped_pages_info_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__vm_mapped_pages_info_t"]
        [::std::mem::size_of::<__Request__vm_mapped_pages_info_t>() - 24usize];
    ["Alignment of __Request__vm_mapped_pages_info_t"]
        [::std::mem::align_of::<__Request__vm_mapped_pages_info_t>() - 4usize];
    ["Offset of field: __Request__vm_mapped_pages_info_t::Head"]
        [::std::mem::offset_of!(__Request__vm_mapped_pages_info_t, Head) - 0usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_region_recurse_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub nesting_depth: natural_t,
    pub infoCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__vm_region_recurse_t"]
        [::std::mem::size_of::<__Request__vm_region_recurse_t>() - 48usize];
    ["Alignment of __Request__vm_region_recurse_t"]
        [::std::mem::align_of::<__Request__vm_region_recurse_t>() - 4usize];
    ["Offset of field: __Request__vm_region_recurse_t::Head"]
        [::std::mem::offset_of!(__Request__vm_region_recurse_t, Head) - 0usize];
    ["Offset of field: __Request__vm_region_recurse_t::NDR"]
        [::std::mem::offset_of!(__Request__vm_region_recurse_t, NDR) - 24usize];
    ["Offset of field: __Request__vm_region_recurse_t::address"]
        [::std::mem::offset_of!(__Request__vm_region_recurse_t, address) - 32usize];
    ["Offset of field: __Request__vm_region_recurse_t::nesting_depth"]
        [::std::mem::offset_of!(__Request__vm_region_recurse_t, nesting_depth) - 40usize];
    ["Offset of field: __Request__vm_region_recurse_t::infoCnt"]
        [::std::mem::offset_of!(__Request__vm_region_recurse_t, infoCnt) - 44usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_region_recurse_64_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub nesting_depth: natural_t,
    pub infoCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__vm_region_recurse_64_t"]
        [::std::mem::size_of::<__Request__vm_region_recurse_64_t>() - 48usize];
    ["Alignment of __Request__vm_region_recurse_64_t"]
        [::std::mem::align_of::<__Request__vm_region_recurse_64_t>() - 4usize];
    ["Offset of field: __Request__vm_region_recurse_64_t::Head"]
        [::std::mem::offset_of!(__Request__vm_region_recurse_64_t, Head) - 0usize];
    ["Offset of field: __Request__vm_region_recurse_64_t::NDR"]
        [::std::mem::offset_of!(__Request__vm_region_recurse_64_t, NDR) - 24usize];
    ["Offset of field: __Request__vm_region_recurse_64_t::address"]
        [::std::mem::offset_of!(__Request__vm_region_recurse_64_t, address) - 32usize];
    ["Offset of field: __Request__vm_region_recurse_64_t::nesting_depth"]
        [::std::mem::offset_of!(__Request__vm_region_recurse_64_t, nesting_depth) - 40usize];
    ["Offset of field: __Request__vm_region_recurse_64_t::infoCnt"]
        [::std::mem::offset_of!(__Request__vm_region_recurse_64_t, infoCnt) - 44usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_region_info_64_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_vm_region_info_64_t"]
        [::std::mem::size_of::<__Request__mach_vm_region_info_64_t>() - 40usize];
    ["Alignment of __Request__mach_vm_region_info_64_t"]
        [::std::mem::align_of::<__Request__mach_vm_region_info_64_t>() - 4usize];
    ["Offset of field: __Request__mach_vm_region_info_64_t::Head"]
        [::std::mem::offset_of!(__Request__mach_vm_region_info_64_t, Head) - 0usize];
    ["Offset of field: __Request__mach_vm_region_info_64_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_vm_region_info_64_t, NDR) - 24usize];
    ["Offset of field: __Request__mach_vm_region_info_64_t::address"]
        [::std::mem::offset_of!(__Request__mach_vm_region_info_64_t, address) - 32usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_region_64_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub flavor: vm_region_flavor_t,
    pub infoCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__vm_region_64_t"]
        [::std::mem::size_of::<__Request__vm_region_64_t>() - 48usize];
    ["Alignment of __Request__vm_region_64_t"]
        [::std::mem::align_of::<__Request__vm_region_64_t>() - 4usize];
    ["Offset of field: __Request__vm_region_64_t::Head"]
        [::std::mem::offset_of!(__Request__vm_region_64_t, Head) - 0usize];
    ["Offset of field: __Request__vm_region_64_t::NDR"]
        [::std::mem::offset_of!(__Request__vm_region_64_t, NDR) - 24usize];
    ["Offset of field: __Request__vm_region_64_t::address"]
        [::std::mem::offset_of!(__Request__vm_region_64_t, address) - 32usize];
    ["Offset of field: __Request__vm_region_64_t::flavor"]
        [::std::mem::offset_of!(__Request__vm_region_64_t, flavor) - 40usize];
    ["Offset of field: __Request__vm_region_64_t::infoCnt"]
        [::std::mem::offset_of!(__Request__vm_region_64_t, infoCnt) - 44usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_make_memory_entry_64_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub parent_entry: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub size: memory_object_size_t,
    pub offset: memory_object_offset_t,
    pub permission: vm_prot_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_make_memory_entry_64_t"]
        [::std::mem::size_of::<__Request__mach_make_memory_entry_64_t>() - 68usize];
    ["Alignment of __Request__mach_make_memory_entry_64_t"]
        [::std::mem::align_of::<__Request__mach_make_memory_entry_64_t>() - 4usize];
    ["Offset of field: __Request__mach_make_memory_entry_64_t::Head"]
        [::std::mem::offset_of!(__Request__mach_make_memory_entry_64_t, Head) - 0usize];
    ["Offset of field: __Request__mach_make_memory_entry_64_t::msgh_body"]
        [::std::mem::offset_of!(__Request__mach_make_memory_entry_64_t, msgh_body) - 24usize];
    ["Offset of field: __Request__mach_make_memory_entry_64_t::parent_entry"]
        [::std::mem::offset_of!(__Request__mach_make_memory_entry_64_t, parent_entry) - 28usize];
    ["Offset of field: __Request__mach_make_memory_entry_64_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_make_memory_entry_64_t, NDR) - 40usize];
    ["Offset of field: __Request__mach_make_memory_entry_64_t::size"]
        [::std::mem::offset_of!(__Request__mach_make_memory_entry_64_t, size) - 48usize];
    ["Offset of field: __Request__mach_make_memory_entry_64_t::offset"]
        [::std::mem::offset_of!(__Request__mach_make_memory_entry_64_t, offset) - 56usize];
    ["Offset of field: __Request__mach_make_memory_entry_64_t::permission"]
        [::std::mem::offset_of!(__Request__mach_make_memory_entry_64_t, permission) - 64usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_map_64_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub object: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub mask: vm_address_t,
    pub flags: ::std::os::raw::c_int,
    pub offset: memory_object_offset_t,
    pub copy: boolean_t,
    pub cur_protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__vm_map_64_t"][::std::mem::size_of::<__Request__vm_map_64_t>() - 100usize];
    ["Alignment of __Request__vm_map_64_t"]
        [::std::mem::align_of::<__Request__vm_map_64_t>() - 4usize];
    ["Offset of field: __Request__vm_map_64_t::Head"]
        [::std::mem::offset_of!(__Request__vm_map_64_t, Head) - 0usize];
    ["Offset of field: __Request__vm_map_64_t::msgh_body"]
        [::std::mem::offset_of!(__Request__vm_map_64_t, msgh_body) - 24usize];
    ["Offset of field: __Request__vm_map_64_t::object"]
        [::std::mem::offset_of!(__Request__vm_map_64_t, object) - 28usize];
    ["Offset of field: __Request__vm_map_64_t::NDR"]
        [::std::mem::offset_of!(__Request__vm_map_64_t, NDR) - 40usize];
    ["Offset of field: __Request__vm_map_64_t::address"]
        [::std::mem::offset_of!(__Request__vm_map_64_t, address) - 48usize];
    ["Offset of field: __Request__vm_map_64_t::size"]
        [::std::mem::offset_of!(__Request__vm_map_64_t, size) - 56usize];
    ["Offset of field: __Request__vm_map_64_t::mask"]
        [::std::mem::offset_of!(__Request__vm_map_64_t, mask) - 64usize];
    ["Offset of field: __Request__vm_map_64_t::flags"]
        [::std::mem::offset_of!(__Request__vm_map_64_t, flags) - 72usize];
    ["Offset of field: __Request__vm_map_64_t::offset"]
        [::std::mem::offset_of!(__Request__vm_map_64_t, offset) - 76usize];
    ["Offset of field: __Request__vm_map_64_t::copy"]
        [::std::mem::offset_of!(__Request__vm_map_64_t, copy) - 84usize];
    ["Offset of field: __Request__vm_map_64_t::cur_protection"]
        [::std::mem::offset_of!(__Request__vm_map_64_t, cur_protection) - 88usize];
    ["Offset of field: __Request__vm_map_64_t::max_protection"]
        [::std::mem::offset_of!(__Request__vm_map_64_t, max_protection) - 92usize];
    ["Offset of field: __Request__vm_map_64_t::inheritance"]
        [::std::mem::offset_of!(__Request__vm_map_64_t, inheritance) - 96usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_purgable_control_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub control: vm_purgable_t,
    pub state: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__vm_purgable_control_t"]
        [::std::mem::size_of::<__Request__vm_purgable_control_t>() - 48usize];
    ["Alignment of __Request__vm_purgable_control_t"]
        [::std::mem::align_of::<__Request__vm_purgable_control_t>() - 4usize];
    ["Offset of field: __Request__vm_purgable_control_t::Head"]
        [::std::mem::offset_of!(__Request__vm_purgable_control_t, Head) - 0usize];
    ["Offset of field: __Request__vm_purgable_control_t::NDR"]
        [::std::mem::offset_of!(__Request__vm_purgable_control_t, NDR) - 24usize];
    ["Offset of field: __Request__vm_purgable_control_t::address"]
        [::std::mem::offset_of!(__Request__vm_purgable_control_t, address) - 32usize];
    ["Offset of field: __Request__vm_purgable_control_t::control"]
        [::std::mem::offset_of!(__Request__vm_purgable_control_t, control) - 40usize];
    ["Offset of field: __Request__vm_purgable_control_t::state"]
        [::std::mem::offset_of!(__Request__vm_purgable_control_t, state) - 44usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_map_exec_lockdown_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__vm_map_exec_lockdown_t"]
        [::std::mem::size_of::<__Request__vm_map_exec_lockdown_t>() - 24usize];
    ["Alignment of __Request__vm_map_exec_lockdown_t"]
        [::std::mem::align_of::<__Request__vm_map_exec_lockdown_t>() - 4usize];
    ["Offset of field: __Request__vm_map_exec_lockdown_t::Head"]
        [::std::mem::offset_of!(__Request__vm_map_exec_lockdown_t, Head) - 0usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_remap_new_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub src_task: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub target_address: vm_address_t,
    pub size: vm_size_t,
    pub mask: vm_address_t,
    pub flags: ::std::os::raw::c_int,
    pub src_address: vm_address_t,
    pub copy: boolean_t,
    pub cur_protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__vm_remap_new_t"]
        [::std::mem::size_of::<__Request__vm_remap_new_t>() - 100usize];
    ["Alignment of __Request__vm_remap_new_t"]
        [::std::mem::align_of::<__Request__vm_remap_new_t>() - 4usize];
    ["Offset of field: __Request__vm_remap_new_t::Head"]
        [::std::mem::offset_of!(__Request__vm_remap_new_t, Head) - 0usize];
    ["Offset of field: __Request__vm_remap_new_t::msgh_body"]
        [::std::mem::offset_of!(__Request__vm_remap_new_t, msgh_body) - 24usize];
    ["Offset of field: __Request__vm_remap_new_t::src_task"]
        [::std::mem::offset_of!(__Request__vm_remap_new_t, src_task) - 28usize];
    ["Offset of field: __Request__vm_remap_new_t::NDR"]
        [::std::mem::offset_of!(__Request__vm_remap_new_t, NDR) - 40usize];
    ["Offset of field: __Request__vm_remap_new_t::target_address"]
        [::std::mem::offset_of!(__Request__vm_remap_new_t, target_address) - 48usize];
    ["Offset of field: __Request__vm_remap_new_t::size"]
        [::std::mem::offset_of!(__Request__vm_remap_new_t, size) - 56usize];
    ["Offset of field: __Request__vm_remap_new_t::mask"]
        [::std::mem::offset_of!(__Request__vm_remap_new_t, mask) - 64usize];
    ["Offset of field: __Request__vm_remap_new_t::flags"]
        [::std::mem::offset_of!(__Request__vm_remap_new_t, flags) - 72usize];
    ["Offset of field: __Request__vm_remap_new_t::src_address"]
        [::std::mem::offset_of!(__Request__vm_remap_new_t, src_address) - 76usize];
    ["Offset of field: __Request__vm_remap_new_t::copy"]
        [::std::mem::offset_of!(__Request__vm_remap_new_t, copy) - 84usize];
    ["Offset of field: __Request__vm_remap_new_t::cur_protection"]
        [::std::mem::offset_of!(__Request__vm_remap_new_t, cur_protection) - 88usize];
    ["Offset of field: __Request__vm_remap_new_t::max_protection"]
        [::std::mem::offset_of!(__Request__vm_remap_new_t, max_protection) - 92usize];
    ["Offset of field: __Request__vm_remap_new_t::inheritance"]
        [::std::mem::offset_of!(__Request__vm_remap_new_t, inheritance) - 96usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__vm_map_subsystem {
    pub Request_vm_region: __Request__vm_region_t,
    pub Request_vm_allocate: __Request__vm_allocate_t,
    pub Request_vm_deallocate: __Request__vm_deallocate_t,
    pub Request_vm_protect: __Request__vm_protect_t,
    pub Request_vm_inherit: __Request__vm_inherit_t,
    pub Request_vm_read: __Request__vm_read_t,
    pub Request_vm_read_list: __Request__vm_read_list_t,
    pub Request_vm_write: __Request__vm_write_t,
    pub Request_vm_copy: __Request__vm_copy_t,
    pub Request_vm_read_overwrite: __Request__vm_read_overwrite_t,
    pub Request_vm_msync: __Request__vm_msync_t,
    pub Request_vm_behavior_set: __Request__vm_behavior_set_t,
    pub Request_vm_map: __Request__vm_map_t,
    pub Request_vm_machine_attribute: __Request__vm_machine_attribute_t,
    pub Request_vm_remap: __Request__vm_remap_t,
    pub Request_task_wire: __Request__task_wire_t,
    pub Request_mach_make_memory_entry: __Request__mach_make_memory_entry_t,
    pub Request_vm_map_page_query: __Request__vm_map_page_query_t,
    pub Request_mach_vm_region_info: __Request__mach_vm_region_info_t,
    pub Request_vm_mapped_pages_info: __Request__vm_mapped_pages_info_t,
    pub Request_vm_region_recurse: __Request__vm_region_recurse_t,
    pub Request_vm_region_recurse_64: __Request__vm_region_recurse_64_t,
    pub Request_mach_vm_region_info_64: __Request__mach_vm_region_info_64_t,
    pub Request_vm_region_64: __Request__vm_region_64_t,
    pub Request_mach_make_memory_entry_64: __Request__mach_make_memory_entry_64_t,
    pub Request_vm_map_64: __Request__vm_map_64_t,
    pub Request_vm_purgable_control: __Request__vm_purgable_control_t,
    pub Request_vm_map_exec_lockdown: __Request__vm_map_exec_lockdown_t,
    pub Request_vm_remap_new: __Request__vm_remap_new_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __RequestUnion__vm_map_subsystem"]
        [::std::mem::size_of::<__RequestUnion__vm_map_subsystem>() - 4132usize];
    ["Alignment of __RequestUnion__vm_map_subsystem"]
        [::std::mem::align_of::<__RequestUnion__vm_map_subsystem>() - 4usize];
    ["Offset of field: __RequestUnion__vm_map_subsystem::Request_vm_region"]
        [::std::mem::offset_of!(__RequestUnion__vm_map_subsystem, Request_vm_region) - 0usize];
    ["Offset of field: __RequestUnion__vm_map_subsystem::Request_vm_allocate"]
        [::std::mem::offset_of!(__RequestUnion__vm_map_subsystem, Request_vm_allocate) - 0usize];
    ["Offset of field: __RequestUnion__vm_map_subsystem::Request_vm_deallocate"]
        [::std::mem::offset_of!(__RequestUnion__vm_map_subsystem, Request_vm_deallocate) - 0usize];
    ["Offset of field: __RequestUnion__vm_map_subsystem::Request_vm_protect"]
        [::std::mem::offset_of!(__RequestUnion__vm_map_subsystem, Request_vm_protect) - 0usize];
    ["Offset of field: __RequestUnion__vm_map_subsystem::Request_vm_inherit"]
        [::std::mem::offset_of!(__RequestUnion__vm_map_subsystem, Request_vm_inherit) - 0usize];
    ["Offset of field: __RequestUnion__vm_map_subsystem::Request_vm_read"]
        [::std::mem::offset_of!(__RequestUnion__vm_map_subsystem, Request_vm_read) - 0usize];
    ["Offset of field: __RequestUnion__vm_map_subsystem::Request_vm_read_list"]
        [::std::mem::offset_of!(__RequestUnion__vm_map_subsystem, Request_vm_read_list) - 0usize];
    ["Offset of field: __RequestUnion__vm_map_subsystem::Request_vm_write"]
        [::std::mem::offset_of!(__RequestUnion__vm_map_subsystem, Request_vm_write) - 0usize];
    ["Offset of field: __RequestUnion__vm_map_subsystem::Request_vm_copy"]
        [::std::mem::offset_of!(__RequestUnion__vm_map_subsystem, Request_vm_copy) - 0usize];
    ["Offset of field: __RequestUnion__vm_map_subsystem::Request_vm_read_overwrite"][::std::mem::offset_of!(
        __RequestUnion__vm_map_subsystem,
        Request_vm_read_overwrite
    ) - 0usize];
    ["Offset of field: __RequestUnion__vm_map_subsystem::Request_vm_msync"]
        [::std::mem::offset_of!(__RequestUnion__vm_map_subsystem, Request_vm_msync) - 0usize];
    ["Offset of field: __RequestUnion__vm_map_subsystem::Request_vm_behavior_set"][::std::mem::offset_of!(
        __RequestUnion__vm_map_subsystem,
        Request_vm_behavior_set
    ) - 0usize];
    ["Offset of field: __RequestUnion__vm_map_subsystem::Request_vm_map"]
        [::std::mem::offset_of!(__RequestUnion__vm_map_subsystem, Request_vm_map) - 0usize];
    ["Offset of field: __RequestUnion__vm_map_subsystem::Request_vm_machine_attribute"][::std::mem::offset_of!(
        __RequestUnion__vm_map_subsystem,
        Request_vm_machine_attribute
    ) - 0usize];
    ["Offset of field: __RequestUnion__vm_map_subsystem::Request_vm_remap"]
        [::std::mem::offset_of!(__RequestUnion__vm_map_subsystem, Request_vm_remap) - 0usize];
    ["Offset of field: __RequestUnion__vm_map_subsystem::Request_task_wire"]
        [::std::mem::offset_of!(__RequestUnion__vm_map_subsystem, Request_task_wire) - 0usize];
    ["Offset of field: __RequestUnion__vm_map_subsystem::Request_mach_make_memory_entry"][::std::mem::offset_of!(
        __RequestUnion__vm_map_subsystem,
        Request_mach_make_memory_entry
    )
        - 0usize];
    ["Offset of field: __RequestUnion__vm_map_subsystem::Request_vm_map_page_query"][::std::mem::offset_of!(
        __RequestUnion__vm_map_subsystem,
        Request_vm_map_page_query
    ) - 0usize];
    ["Offset of field: __RequestUnion__vm_map_subsystem::Request_mach_vm_region_info"][::std::mem::offset_of!(
        __RequestUnion__vm_map_subsystem,
        Request_mach_vm_region_info
    ) - 0usize];
    ["Offset of field: __RequestUnion__vm_map_subsystem::Request_vm_mapped_pages_info"][::std::mem::offset_of!(
        __RequestUnion__vm_map_subsystem,
        Request_vm_mapped_pages_info
    ) - 0usize];
    ["Offset of field: __RequestUnion__vm_map_subsystem::Request_vm_region_recurse"][::std::mem::offset_of!(
        __RequestUnion__vm_map_subsystem,
        Request_vm_region_recurse
    ) - 0usize];
    ["Offset of field: __RequestUnion__vm_map_subsystem::Request_vm_region_recurse_64"][::std::mem::offset_of!(
        __RequestUnion__vm_map_subsystem,
        Request_vm_region_recurse_64
    ) - 0usize];
    ["Offset of field: __RequestUnion__vm_map_subsystem::Request_mach_vm_region_info_64"][::std::mem::offset_of!(
        __RequestUnion__vm_map_subsystem,
        Request_mach_vm_region_info_64
    )
        - 0usize];
    ["Offset of field: __RequestUnion__vm_map_subsystem::Request_vm_region_64"]
        [::std::mem::offset_of!(__RequestUnion__vm_map_subsystem, Request_vm_region_64) - 0usize];
    ["Offset of field: __RequestUnion__vm_map_subsystem::Request_mach_make_memory_entry_64"][::std::mem::offset_of!(
        __RequestUnion__vm_map_subsystem,
        Request_mach_make_memory_entry_64
    )
        - 0usize];
    ["Offset of field: __RequestUnion__vm_map_subsystem::Request_vm_map_64"]
        [::std::mem::offset_of!(__RequestUnion__vm_map_subsystem, Request_vm_map_64) - 0usize];
    ["Offset of field: __RequestUnion__vm_map_subsystem::Request_vm_purgable_control"][::std::mem::offset_of!(
        __RequestUnion__vm_map_subsystem,
        Request_vm_purgable_control
    ) - 0usize];
    ["Offset of field: __RequestUnion__vm_map_subsystem::Request_vm_map_exec_lockdown"][::std::mem::offset_of!(
        __RequestUnion__vm_map_subsystem,
        Request_vm_map_exec_lockdown
    ) - 0usize];
    ["Offset of field: __RequestUnion__vm_map_subsystem::Request_vm_remap_new"]
        [::std::mem::offset_of!(__RequestUnion__vm_map_subsystem, Request_vm_remap_new) - 0usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_region_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub object_name: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub infoCnt: mach_msg_type_number_t,
    pub info: [::std::os::raw::c_int; 10usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__vm_region_t"][::std::mem::size_of::<__Reply__vm_region_t>() - 108usize];
    ["Alignment of __Reply__vm_region_t"][::std::mem::align_of::<__Reply__vm_region_t>() - 4usize];
    ["Offset of field: __Reply__vm_region_t::Head"]
        [::std::mem::offset_of!(__Reply__vm_region_t, Head) - 0usize];
    ["Offset of field: __Reply__vm_region_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__vm_region_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__vm_region_t::object_name"]
        [::std::mem::offset_of!(__Reply__vm_region_t, object_name) - 28usize];
    ["Offset of field: __Reply__vm_region_t::NDR"]
        [::std::mem::offset_of!(__Reply__vm_region_t, NDR) - 40usize];
    ["Offset of field: __Reply__vm_region_t::address"]
        [::std::mem::offset_of!(__Reply__vm_region_t, address) - 48usize];
    ["Offset of field: __Reply__vm_region_t::size"]
        [::std::mem::offset_of!(__Reply__vm_region_t, size) - 56usize];
    ["Offset of field: __Reply__vm_region_t::infoCnt"]
        [::std::mem::offset_of!(__Reply__vm_region_t, infoCnt) - 64usize];
    ["Offset of field: __Reply__vm_region_t::info"]
        [::std::mem::offset_of!(__Reply__vm_region_t, info) - 68usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_allocate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub address: vm_address_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__vm_allocate_t"][::std::mem::size_of::<__Reply__vm_allocate_t>() - 44usize];
    ["Alignment of __Reply__vm_allocate_t"]
        [::std::mem::align_of::<__Reply__vm_allocate_t>() - 4usize];
    ["Offset of field: __Reply__vm_allocate_t::Head"]
        [::std::mem::offset_of!(__Reply__vm_allocate_t, Head) - 0usize];
    ["Offset of field: __Reply__vm_allocate_t::NDR"]
        [::std::mem::offset_of!(__Reply__vm_allocate_t, NDR) - 24usize];
    ["Offset of field: __Reply__vm_allocate_t::RetCode"]
        [::std::mem::offset_of!(__Reply__vm_allocate_t, RetCode) - 32usize];
    ["Offset of field: __Reply__vm_allocate_t::address"]
        [::std::mem::offset_of!(__Reply__vm_allocate_t, address) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_deallocate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__vm_deallocate_t"]
        [::std::mem::size_of::<__Reply__vm_deallocate_t>() - 36usize];
    ["Alignment of __Reply__vm_deallocate_t"]
        [::std::mem::align_of::<__Reply__vm_deallocate_t>() - 4usize];
    ["Offset of field: __Reply__vm_deallocate_t::Head"]
        [::std::mem::offset_of!(__Reply__vm_deallocate_t, Head) - 0usize];
    ["Offset of field: __Reply__vm_deallocate_t::NDR"]
        [::std::mem::offset_of!(__Reply__vm_deallocate_t, NDR) - 24usize];
    ["Offset of field: __Reply__vm_deallocate_t::RetCode"]
        [::std::mem::offset_of!(__Reply__vm_deallocate_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_protect_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__vm_protect_t"][::std::mem::size_of::<__Reply__vm_protect_t>() - 36usize];
    ["Alignment of __Reply__vm_protect_t"]
        [::std::mem::align_of::<__Reply__vm_protect_t>() - 4usize];
    ["Offset of field: __Reply__vm_protect_t::Head"]
        [::std::mem::offset_of!(__Reply__vm_protect_t, Head) - 0usize];
    ["Offset of field: __Reply__vm_protect_t::NDR"]
        [::std::mem::offset_of!(__Reply__vm_protect_t, NDR) - 24usize];
    ["Offset of field: __Reply__vm_protect_t::RetCode"]
        [::std::mem::offset_of!(__Reply__vm_protect_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_inherit_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__vm_inherit_t"][::std::mem::size_of::<__Reply__vm_inherit_t>() - 36usize];
    ["Alignment of __Reply__vm_inherit_t"]
        [::std::mem::align_of::<__Reply__vm_inherit_t>() - 4usize];
    ["Offset of field: __Reply__vm_inherit_t::Head"]
        [::std::mem::offset_of!(__Reply__vm_inherit_t, Head) - 0usize];
    ["Offset of field: __Reply__vm_inherit_t::NDR"]
        [::std::mem::offset_of!(__Reply__vm_inherit_t, NDR) - 24usize];
    ["Offset of field: __Reply__vm_inherit_t::RetCode"]
        [::std::mem::offset_of!(__Reply__vm_inherit_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_read_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub data: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub dataCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__vm_read_t"][::std::mem::size_of::<__Reply__vm_read_t>() - 56usize];
    ["Alignment of __Reply__vm_read_t"][::std::mem::align_of::<__Reply__vm_read_t>() - 4usize];
    ["Offset of field: __Reply__vm_read_t::Head"]
        [::std::mem::offset_of!(__Reply__vm_read_t, Head) - 0usize];
    ["Offset of field: __Reply__vm_read_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__vm_read_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__vm_read_t::data"]
        [::std::mem::offset_of!(__Reply__vm_read_t, data) - 28usize];
    ["Offset of field: __Reply__vm_read_t::NDR"]
        [::std::mem::offset_of!(__Reply__vm_read_t, NDR) - 44usize];
    ["Offset of field: __Reply__vm_read_t::dataCnt"]
        [::std::mem::offset_of!(__Reply__vm_read_t, dataCnt) - 52usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_read_list_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub data_list: vm_read_entry_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__vm_read_list_t"]
        [::std::mem::size_of::<__Reply__vm_read_list_t>() - 4132usize];
    ["Alignment of __Reply__vm_read_list_t"]
        [::std::mem::align_of::<__Reply__vm_read_list_t>() - 4usize];
    ["Offset of field: __Reply__vm_read_list_t::Head"]
        [::std::mem::offset_of!(__Reply__vm_read_list_t, Head) - 0usize];
    ["Offset of field: __Reply__vm_read_list_t::NDR"]
        [::std::mem::offset_of!(__Reply__vm_read_list_t, NDR) - 24usize];
    ["Offset of field: __Reply__vm_read_list_t::RetCode"]
        [::std::mem::offset_of!(__Reply__vm_read_list_t, RetCode) - 32usize];
    ["Offset of field: __Reply__vm_read_list_t::data_list"]
        [::std::mem::offset_of!(__Reply__vm_read_list_t, data_list) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_write_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__vm_write_t"][::std::mem::size_of::<__Reply__vm_write_t>() - 36usize];
    ["Alignment of __Reply__vm_write_t"][::std::mem::align_of::<__Reply__vm_write_t>() - 4usize];
    ["Offset of field: __Reply__vm_write_t::Head"]
        [::std::mem::offset_of!(__Reply__vm_write_t, Head) - 0usize];
    ["Offset of field: __Reply__vm_write_t::NDR"]
        [::std::mem::offset_of!(__Reply__vm_write_t, NDR) - 24usize];
    ["Offset of field: __Reply__vm_write_t::RetCode"]
        [::std::mem::offset_of!(__Reply__vm_write_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_copy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__vm_copy_t"][::std::mem::size_of::<__Reply__vm_copy_t>() - 36usize];
    ["Alignment of __Reply__vm_copy_t"][::std::mem::align_of::<__Reply__vm_copy_t>() - 4usize];
    ["Offset of field: __Reply__vm_copy_t::Head"]
        [::std::mem::offset_of!(__Reply__vm_copy_t, Head) - 0usize];
    ["Offset of field: __Reply__vm_copy_t::NDR"]
        [::std::mem::offset_of!(__Reply__vm_copy_t, NDR) - 24usize];
    ["Offset of field: __Reply__vm_copy_t::RetCode"]
        [::std::mem::offset_of!(__Reply__vm_copy_t, RetCode) - 32usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_read_overwrite_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub outsize: vm_size_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__vm_read_overwrite_t"]
        [::std::mem::size_of::<__Reply__vm_read_overwrite_t>() - 44usize];
    ["Alignment of __Reply__vm_read_overwrite_t"]
        [::std::mem::align_of::<__Reply__vm_read_overwrite_t>() - 4usize];
    ["Offset of field: __Reply__vm_read_overwrite_t::Head"]
        [::std::mem::offset_of!(__Reply__vm_read_overwrite_t, Head) - 0usize];
    ["Offset of field: __Reply__vm_read_overwrite_t::NDR"]
        [::std::mem::offset_of!(__Reply__vm_read_overwrite_t, NDR) - 24usize];
    ["Offset of field: __Reply__vm_read_overwrite_t::RetCode"]
        [::std::mem::offset_of!(__Reply__vm_read_overwrite_t, RetCode) - 32usize];
    ["Offset of field: __Reply__vm_read_overwrite_t::outsize"]
        [::std::mem::offset_of!(__Reply__vm_read_overwrite_t, outsize) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_msync_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__vm_msync_t"][::std::mem::size_of::<__Reply__vm_msync_t>() - 36usize];
    ["Alignment of __Reply__vm_msync_t"][::std::mem::align_of::<__Reply__vm_msync_t>() - 4usize];
    ["Offset of field: __Reply__vm_msync_t::Head"]
        [::std::mem::offset_of!(__Reply__vm_msync_t, Head) - 0usize];
    ["Offset of field: __Reply__vm_msync_t::NDR"]
        [::std::mem::offset_of!(__Reply__vm_msync_t, NDR) - 24usize];
    ["Offset of field: __Reply__vm_msync_t::RetCode"]
        [::std::mem::offset_of!(__Reply__vm_msync_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_behavior_set_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__vm_behavior_set_t"]
        [::std::mem::size_of::<__Reply__vm_behavior_set_t>() - 36usize];
    ["Alignment of __Reply__vm_behavior_set_t"]
        [::std::mem::align_of::<__Reply__vm_behavior_set_t>() - 4usize];
    ["Offset of field: __Reply__vm_behavior_set_t::Head"]
        [::std::mem::offset_of!(__Reply__vm_behavior_set_t, Head) - 0usize];
    ["Offset of field: __Reply__vm_behavior_set_t::NDR"]
        [::std::mem::offset_of!(__Reply__vm_behavior_set_t, NDR) - 24usize];
    ["Offset of field: __Reply__vm_behavior_set_t::RetCode"]
        [::std::mem::offset_of!(__Reply__vm_behavior_set_t, RetCode) - 32usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_map_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub address: vm_address_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__vm_map_t"][::std::mem::size_of::<__Reply__vm_map_t>() - 44usize];
    ["Alignment of __Reply__vm_map_t"][::std::mem::align_of::<__Reply__vm_map_t>() - 4usize];
    ["Offset of field: __Reply__vm_map_t::Head"]
        [::std::mem::offset_of!(__Reply__vm_map_t, Head) - 0usize];
    ["Offset of field: __Reply__vm_map_t::NDR"]
        [::std::mem::offset_of!(__Reply__vm_map_t, NDR) - 24usize];
    ["Offset of field: __Reply__vm_map_t::RetCode"]
        [::std::mem::offset_of!(__Reply__vm_map_t, RetCode) - 32usize];
    ["Offset of field: __Reply__vm_map_t::address"]
        [::std::mem::offset_of!(__Reply__vm_map_t, address) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_machine_attribute_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub value: vm_machine_attribute_val_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__vm_machine_attribute_t"]
        [::std::mem::size_of::<__Reply__vm_machine_attribute_t>() - 40usize];
    ["Alignment of __Reply__vm_machine_attribute_t"]
        [::std::mem::align_of::<__Reply__vm_machine_attribute_t>() - 4usize];
    ["Offset of field: __Reply__vm_machine_attribute_t::Head"]
        [::std::mem::offset_of!(__Reply__vm_machine_attribute_t, Head) - 0usize];
    ["Offset of field: __Reply__vm_machine_attribute_t::NDR"]
        [::std::mem::offset_of!(__Reply__vm_machine_attribute_t, NDR) - 24usize];
    ["Offset of field: __Reply__vm_machine_attribute_t::RetCode"]
        [::std::mem::offset_of!(__Reply__vm_machine_attribute_t, RetCode) - 32usize];
    ["Offset of field: __Reply__vm_machine_attribute_t::value"]
        [::std::mem::offset_of!(__Reply__vm_machine_attribute_t, value) - 36usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_remap_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub target_address: vm_address_t,
    pub cur_protection: vm_prot_t,
    pub max_protection: vm_prot_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__vm_remap_t"][::std::mem::size_of::<__Reply__vm_remap_t>() - 52usize];
    ["Alignment of __Reply__vm_remap_t"][::std::mem::align_of::<__Reply__vm_remap_t>() - 4usize];
    ["Offset of field: __Reply__vm_remap_t::Head"]
        [::std::mem::offset_of!(__Reply__vm_remap_t, Head) - 0usize];
    ["Offset of field: __Reply__vm_remap_t::NDR"]
        [::std::mem::offset_of!(__Reply__vm_remap_t, NDR) - 24usize];
    ["Offset of field: __Reply__vm_remap_t::RetCode"]
        [::std::mem::offset_of!(__Reply__vm_remap_t, RetCode) - 32usize];
    ["Offset of field: __Reply__vm_remap_t::target_address"]
        [::std::mem::offset_of!(__Reply__vm_remap_t, target_address) - 36usize];
    ["Offset of field: __Reply__vm_remap_t::cur_protection"]
        [::std::mem::offset_of!(__Reply__vm_remap_t, cur_protection) - 44usize];
    ["Offset of field: __Reply__vm_remap_t::max_protection"]
        [::std::mem::offset_of!(__Reply__vm_remap_t, max_protection) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_wire_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_wire_t"][::std::mem::size_of::<__Reply__task_wire_t>() - 36usize];
    ["Alignment of __Reply__task_wire_t"][::std::mem::align_of::<__Reply__task_wire_t>() - 4usize];
    ["Offset of field: __Reply__task_wire_t::Head"]
        [::std::mem::offset_of!(__Reply__task_wire_t, Head) - 0usize];
    ["Offset of field: __Reply__task_wire_t::NDR"]
        [::std::mem::offset_of!(__Reply__task_wire_t, NDR) - 24usize];
    ["Offset of field: __Reply__task_wire_t::RetCode"]
        [::std::mem::offset_of!(__Reply__task_wire_t, RetCode) - 32usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_make_memory_entry_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub object_handle: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub size: vm_size_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_make_memory_entry_t"]
        [::std::mem::size_of::<__Reply__mach_make_memory_entry_t>() - 56usize];
    ["Alignment of __Reply__mach_make_memory_entry_t"]
        [::std::mem::align_of::<__Reply__mach_make_memory_entry_t>() - 4usize];
    ["Offset of field: __Reply__mach_make_memory_entry_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_make_memory_entry_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_make_memory_entry_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__mach_make_memory_entry_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__mach_make_memory_entry_t::object_handle"]
        [::std::mem::offset_of!(__Reply__mach_make_memory_entry_t, object_handle) - 28usize];
    ["Offset of field: __Reply__mach_make_memory_entry_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_make_memory_entry_t, NDR) - 40usize];
    ["Offset of field: __Reply__mach_make_memory_entry_t::size"]
        [::std::mem::offset_of!(__Reply__mach_make_memory_entry_t, size) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_map_page_query_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub disposition: integer_t,
    pub ref_count: integer_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__vm_map_page_query_t"]
        [::std::mem::size_of::<__Reply__vm_map_page_query_t>() - 44usize];
    ["Alignment of __Reply__vm_map_page_query_t"]
        [::std::mem::align_of::<__Reply__vm_map_page_query_t>() - 4usize];
    ["Offset of field: __Reply__vm_map_page_query_t::Head"]
        [::std::mem::offset_of!(__Reply__vm_map_page_query_t, Head) - 0usize];
    ["Offset of field: __Reply__vm_map_page_query_t::NDR"]
        [::std::mem::offset_of!(__Reply__vm_map_page_query_t, NDR) - 24usize];
    ["Offset of field: __Reply__vm_map_page_query_t::RetCode"]
        [::std::mem::offset_of!(__Reply__vm_map_page_query_t, RetCode) - 32usize];
    ["Offset of field: __Reply__vm_map_page_query_t::disposition"]
        [::std::mem::offset_of!(__Reply__vm_map_page_query_t, disposition) - 36usize];
    ["Offset of field: __Reply__vm_map_page_query_t::ref_count"]
        [::std::mem::offset_of!(__Reply__vm_map_page_query_t, ref_count) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_region_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub objects: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub region: vm_info_region_t,
    pub objectsCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_vm_region_info_t"]
        [::std::mem::size_of::<__Reply__mach_vm_region_info_t>() - 96usize];
    ["Alignment of __Reply__mach_vm_region_info_t"]
        [::std::mem::align_of::<__Reply__mach_vm_region_info_t>() - 4usize];
    ["Offset of field: __Reply__mach_vm_region_info_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_vm_region_info_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_vm_region_info_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__mach_vm_region_info_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__mach_vm_region_info_t::objects"]
        [::std::mem::offset_of!(__Reply__mach_vm_region_info_t, objects) - 28usize];
    ["Offset of field: __Reply__mach_vm_region_info_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_vm_region_info_t, NDR) - 44usize];
    ["Offset of field: __Reply__mach_vm_region_info_t::region"]
        [::std::mem::offset_of!(__Reply__mach_vm_region_info_t, region) - 52usize];
    ["Offset of field: __Reply__mach_vm_region_info_t::objectsCnt"]
        [::std::mem::offset_of!(__Reply__mach_vm_region_info_t, objectsCnt) - 92usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_mapped_pages_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub pages: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub pagesCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__vm_mapped_pages_info_t"]
        [::std::mem::size_of::<__Reply__vm_mapped_pages_info_t>() - 56usize];
    ["Alignment of __Reply__vm_mapped_pages_info_t"]
        [::std::mem::align_of::<__Reply__vm_mapped_pages_info_t>() - 4usize];
    ["Offset of field: __Reply__vm_mapped_pages_info_t::Head"]
        [::std::mem::offset_of!(__Reply__vm_mapped_pages_info_t, Head) - 0usize];
    ["Offset of field: __Reply__vm_mapped_pages_info_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__vm_mapped_pages_info_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__vm_mapped_pages_info_t::pages"]
        [::std::mem::offset_of!(__Reply__vm_mapped_pages_info_t, pages) - 28usize];
    ["Offset of field: __Reply__vm_mapped_pages_info_t::NDR"]
        [::std::mem::offset_of!(__Reply__vm_mapped_pages_info_t, NDR) - 44usize];
    ["Offset of field: __Reply__vm_mapped_pages_info_t::pagesCnt"]
        [::std::mem::offset_of!(__Reply__vm_mapped_pages_info_t, pagesCnt) - 52usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_region_recurse_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub nesting_depth: natural_t,
    pub infoCnt: mach_msg_type_number_t,
    pub info: [::std::os::raw::c_int; 19usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__vm_region_recurse_t"]
        [::std::mem::size_of::<__Reply__vm_region_recurse_t>() - 136usize];
    ["Alignment of __Reply__vm_region_recurse_t"]
        [::std::mem::align_of::<__Reply__vm_region_recurse_t>() - 4usize];
    ["Offset of field: __Reply__vm_region_recurse_t::Head"]
        [::std::mem::offset_of!(__Reply__vm_region_recurse_t, Head) - 0usize];
    ["Offset of field: __Reply__vm_region_recurse_t::NDR"]
        [::std::mem::offset_of!(__Reply__vm_region_recurse_t, NDR) - 24usize];
    ["Offset of field: __Reply__vm_region_recurse_t::RetCode"]
        [::std::mem::offset_of!(__Reply__vm_region_recurse_t, RetCode) - 32usize];
    ["Offset of field: __Reply__vm_region_recurse_t::address"]
        [::std::mem::offset_of!(__Reply__vm_region_recurse_t, address) - 36usize];
    ["Offset of field: __Reply__vm_region_recurse_t::size"]
        [::std::mem::offset_of!(__Reply__vm_region_recurse_t, size) - 44usize];
    ["Offset of field: __Reply__vm_region_recurse_t::nesting_depth"]
        [::std::mem::offset_of!(__Reply__vm_region_recurse_t, nesting_depth) - 52usize];
    ["Offset of field: __Reply__vm_region_recurse_t::infoCnt"]
        [::std::mem::offset_of!(__Reply__vm_region_recurse_t, infoCnt) - 56usize];
    ["Offset of field: __Reply__vm_region_recurse_t::info"]
        [::std::mem::offset_of!(__Reply__vm_region_recurse_t, info) - 60usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_region_recurse_64_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub nesting_depth: natural_t,
    pub infoCnt: mach_msg_type_number_t,
    pub info: [::std::os::raw::c_int; 19usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__vm_region_recurse_64_t"]
        [::std::mem::size_of::<__Reply__vm_region_recurse_64_t>() - 136usize];
    ["Alignment of __Reply__vm_region_recurse_64_t"]
        [::std::mem::align_of::<__Reply__vm_region_recurse_64_t>() - 4usize];
    ["Offset of field: __Reply__vm_region_recurse_64_t::Head"]
        [::std::mem::offset_of!(__Reply__vm_region_recurse_64_t, Head) - 0usize];
    ["Offset of field: __Reply__vm_region_recurse_64_t::NDR"]
        [::std::mem::offset_of!(__Reply__vm_region_recurse_64_t, NDR) - 24usize];
    ["Offset of field: __Reply__vm_region_recurse_64_t::RetCode"]
        [::std::mem::offset_of!(__Reply__vm_region_recurse_64_t, RetCode) - 32usize];
    ["Offset of field: __Reply__vm_region_recurse_64_t::address"]
        [::std::mem::offset_of!(__Reply__vm_region_recurse_64_t, address) - 36usize];
    ["Offset of field: __Reply__vm_region_recurse_64_t::size"]
        [::std::mem::offset_of!(__Reply__vm_region_recurse_64_t, size) - 44usize];
    ["Offset of field: __Reply__vm_region_recurse_64_t::nesting_depth"]
        [::std::mem::offset_of!(__Reply__vm_region_recurse_64_t, nesting_depth) - 52usize];
    ["Offset of field: __Reply__vm_region_recurse_64_t::infoCnt"]
        [::std::mem::offset_of!(__Reply__vm_region_recurse_64_t, infoCnt) - 56usize];
    ["Offset of field: __Reply__vm_region_recurse_64_t::info"]
        [::std::mem::offset_of!(__Reply__vm_region_recurse_64_t, info) - 60usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_region_info_64_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub objects: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub region: vm_info_region_64_t,
    pub objectsCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_vm_region_info_64_t"]
        [::std::mem::size_of::<__Reply__mach_vm_region_info_64_t>() - 100usize];
    ["Alignment of __Reply__mach_vm_region_info_64_t"]
        [::std::mem::align_of::<__Reply__mach_vm_region_info_64_t>() - 4usize];
    ["Offset of field: __Reply__mach_vm_region_info_64_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_vm_region_info_64_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_vm_region_info_64_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__mach_vm_region_info_64_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__mach_vm_region_info_64_t::objects"]
        [::std::mem::offset_of!(__Reply__mach_vm_region_info_64_t, objects) - 28usize];
    ["Offset of field: __Reply__mach_vm_region_info_64_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_vm_region_info_64_t, NDR) - 44usize];
    ["Offset of field: __Reply__mach_vm_region_info_64_t::region"]
        [::std::mem::offset_of!(__Reply__mach_vm_region_info_64_t, region) - 52usize];
    ["Offset of field: __Reply__mach_vm_region_info_64_t::objectsCnt"]
        [::std::mem::offset_of!(__Reply__mach_vm_region_info_64_t, objectsCnt) - 96usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_region_64_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub object_name: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub infoCnt: mach_msg_type_number_t,
    pub info: [::std::os::raw::c_int; 10usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__vm_region_64_t"]
        [::std::mem::size_of::<__Reply__vm_region_64_t>() - 108usize];
    ["Alignment of __Reply__vm_region_64_t"]
        [::std::mem::align_of::<__Reply__vm_region_64_t>() - 4usize];
    ["Offset of field: __Reply__vm_region_64_t::Head"]
        [::std::mem::offset_of!(__Reply__vm_region_64_t, Head) - 0usize];
    ["Offset of field: __Reply__vm_region_64_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__vm_region_64_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__vm_region_64_t::object_name"]
        [::std::mem::offset_of!(__Reply__vm_region_64_t, object_name) - 28usize];
    ["Offset of field: __Reply__vm_region_64_t::NDR"]
        [::std::mem::offset_of!(__Reply__vm_region_64_t, NDR) - 40usize];
    ["Offset of field: __Reply__vm_region_64_t::address"]
        [::std::mem::offset_of!(__Reply__vm_region_64_t, address) - 48usize];
    ["Offset of field: __Reply__vm_region_64_t::size"]
        [::std::mem::offset_of!(__Reply__vm_region_64_t, size) - 56usize];
    ["Offset of field: __Reply__vm_region_64_t::infoCnt"]
        [::std::mem::offset_of!(__Reply__vm_region_64_t, infoCnt) - 64usize];
    ["Offset of field: __Reply__vm_region_64_t::info"]
        [::std::mem::offset_of!(__Reply__vm_region_64_t, info) - 68usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_make_memory_entry_64_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub object_handle: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub size: memory_object_size_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_make_memory_entry_64_t"]
        [::std::mem::size_of::<__Reply__mach_make_memory_entry_64_t>() - 56usize];
    ["Alignment of __Reply__mach_make_memory_entry_64_t"]
        [::std::mem::align_of::<__Reply__mach_make_memory_entry_64_t>() - 4usize];
    ["Offset of field: __Reply__mach_make_memory_entry_64_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_make_memory_entry_64_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_make_memory_entry_64_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__mach_make_memory_entry_64_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__mach_make_memory_entry_64_t::object_handle"]
        [::std::mem::offset_of!(__Reply__mach_make_memory_entry_64_t, object_handle) - 28usize];
    ["Offset of field: __Reply__mach_make_memory_entry_64_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_make_memory_entry_64_t, NDR) - 40usize];
    ["Offset of field: __Reply__mach_make_memory_entry_64_t::size"]
        [::std::mem::offset_of!(__Reply__mach_make_memory_entry_64_t, size) - 48usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_map_64_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub address: vm_address_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__vm_map_64_t"][::std::mem::size_of::<__Reply__vm_map_64_t>() - 44usize];
    ["Alignment of __Reply__vm_map_64_t"][::std::mem::align_of::<__Reply__vm_map_64_t>() - 4usize];
    ["Offset of field: __Reply__vm_map_64_t::Head"]
        [::std::mem::offset_of!(__Reply__vm_map_64_t, Head) - 0usize];
    ["Offset of field: __Reply__vm_map_64_t::NDR"]
        [::std::mem::offset_of!(__Reply__vm_map_64_t, NDR) - 24usize];
    ["Offset of field: __Reply__vm_map_64_t::RetCode"]
        [::std::mem::offset_of!(__Reply__vm_map_64_t, RetCode) - 32usize];
    ["Offset of field: __Reply__vm_map_64_t::address"]
        [::std::mem::offset_of!(__Reply__vm_map_64_t, address) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_purgable_control_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub state: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__vm_purgable_control_t"]
        [::std::mem::size_of::<__Reply__vm_purgable_control_t>() - 40usize];
    ["Alignment of __Reply__vm_purgable_control_t"]
        [::std::mem::align_of::<__Reply__vm_purgable_control_t>() - 4usize];
    ["Offset of field: __Reply__vm_purgable_control_t::Head"]
        [::std::mem::offset_of!(__Reply__vm_purgable_control_t, Head) - 0usize];
    ["Offset of field: __Reply__vm_purgable_control_t::NDR"]
        [::std::mem::offset_of!(__Reply__vm_purgable_control_t, NDR) - 24usize];
    ["Offset of field: __Reply__vm_purgable_control_t::RetCode"]
        [::std::mem::offset_of!(__Reply__vm_purgable_control_t, RetCode) - 32usize];
    ["Offset of field: __Reply__vm_purgable_control_t::state"]
        [::std::mem::offset_of!(__Reply__vm_purgable_control_t, state) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_map_exec_lockdown_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__vm_map_exec_lockdown_t"]
        [::std::mem::size_of::<__Reply__vm_map_exec_lockdown_t>() - 36usize];
    ["Alignment of __Reply__vm_map_exec_lockdown_t"]
        [::std::mem::align_of::<__Reply__vm_map_exec_lockdown_t>() - 4usize];
    ["Offset of field: __Reply__vm_map_exec_lockdown_t::Head"]
        [::std::mem::offset_of!(__Reply__vm_map_exec_lockdown_t, Head) - 0usize];
    ["Offset of field: __Reply__vm_map_exec_lockdown_t::NDR"]
        [::std::mem::offset_of!(__Reply__vm_map_exec_lockdown_t, NDR) - 24usize];
    ["Offset of field: __Reply__vm_map_exec_lockdown_t::RetCode"]
        [::std::mem::offset_of!(__Reply__vm_map_exec_lockdown_t, RetCode) - 32usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_remap_new_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub target_address: vm_address_t,
    pub cur_protection: vm_prot_t,
    pub max_protection: vm_prot_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__vm_remap_new_t"][::std::mem::size_of::<__Reply__vm_remap_new_t>() - 52usize];
    ["Alignment of __Reply__vm_remap_new_t"]
        [::std::mem::align_of::<__Reply__vm_remap_new_t>() - 4usize];
    ["Offset of field: __Reply__vm_remap_new_t::Head"]
        [::std::mem::offset_of!(__Reply__vm_remap_new_t, Head) - 0usize];
    ["Offset of field: __Reply__vm_remap_new_t::NDR"]
        [::std::mem::offset_of!(__Reply__vm_remap_new_t, NDR) - 24usize];
    ["Offset of field: __Reply__vm_remap_new_t::RetCode"]
        [::std::mem::offset_of!(__Reply__vm_remap_new_t, RetCode) - 32usize];
    ["Offset of field: __Reply__vm_remap_new_t::target_address"]
        [::std::mem::offset_of!(__Reply__vm_remap_new_t, target_address) - 36usize];
    ["Offset of field: __Reply__vm_remap_new_t::cur_protection"]
        [::std::mem::offset_of!(__Reply__vm_remap_new_t, cur_protection) - 44usize];
    ["Offset of field: __Reply__vm_remap_new_t::max_protection"]
        [::std::mem::offset_of!(__Reply__vm_remap_new_t, max_protection) - 48usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__vm_map_subsystem {
    pub Reply_vm_region: __Reply__vm_region_t,
    pub Reply_vm_allocate: __Reply__vm_allocate_t,
    pub Reply_vm_deallocate: __Reply__vm_deallocate_t,
    pub Reply_vm_protect: __Reply__vm_protect_t,
    pub Reply_vm_inherit: __Reply__vm_inherit_t,
    pub Reply_vm_read: __Reply__vm_read_t,
    pub Reply_vm_read_list: __Reply__vm_read_list_t,
    pub Reply_vm_write: __Reply__vm_write_t,
    pub Reply_vm_copy: __Reply__vm_copy_t,
    pub Reply_vm_read_overwrite: __Reply__vm_read_overwrite_t,
    pub Reply_vm_msync: __Reply__vm_msync_t,
    pub Reply_vm_behavior_set: __Reply__vm_behavior_set_t,
    pub Reply_vm_map: __Reply__vm_map_t,
    pub Reply_vm_machine_attribute: __Reply__vm_machine_attribute_t,
    pub Reply_vm_remap: __Reply__vm_remap_t,
    pub Reply_task_wire: __Reply__task_wire_t,
    pub Reply_mach_make_memory_entry: __Reply__mach_make_memory_entry_t,
    pub Reply_vm_map_page_query: __Reply__vm_map_page_query_t,
    pub Reply_mach_vm_region_info: __Reply__mach_vm_region_info_t,
    pub Reply_vm_mapped_pages_info: __Reply__vm_mapped_pages_info_t,
    pub Reply_vm_region_recurse: __Reply__vm_region_recurse_t,
    pub Reply_vm_region_recurse_64: __Reply__vm_region_recurse_64_t,
    pub Reply_mach_vm_region_info_64: __Reply__mach_vm_region_info_64_t,
    pub Reply_vm_region_64: __Reply__vm_region_64_t,
    pub Reply_mach_make_memory_entry_64: __Reply__mach_make_memory_entry_64_t,
    pub Reply_vm_map_64: __Reply__vm_map_64_t,
    pub Reply_vm_purgable_control: __Reply__vm_purgable_control_t,
    pub Reply_vm_map_exec_lockdown: __Reply__vm_map_exec_lockdown_t,
    pub Reply_vm_remap_new: __Reply__vm_remap_new_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __ReplyUnion__vm_map_subsystem"]
        [::std::mem::size_of::<__ReplyUnion__vm_map_subsystem>() - 4132usize];
    ["Alignment of __ReplyUnion__vm_map_subsystem"]
        [::std::mem::align_of::<__ReplyUnion__vm_map_subsystem>() - 4usize];
    ["Offset of field: __ReplyUnion__vm_map_subsystem::Reply_vm_region"]
        [::std::mem::offset_of!(__ReplyUnion__vm_map_subsystem, Reply_vm_region) - 0usize];
    ["Offset of field: __ReplyUnion__vm_map_subsystem::Reply_vm_allocate"]
        [::std::mem::offset_of!(__ReplyUnion__vm_map_subsystem, Reply_vm_allocate) - 0usize];
    ["Offset of field: __ReplyUnion__vm_map_subsystem::Reply_vm_deallocate"]
        [::std::mem::offset_of!(__ReplyUnion__vm_map_subsystem, Reply_vm_deallocate) - 0usize];
    ["Offset of field: __ReplyUnion__vm_map_subsystem::Reply_vm_protect"]
        [::std::mem::offset_of!(__ReplyUnion__vm_map_subsystem, Reply_vm_protect) - 0usize];
    ["Offset of field: __ReplyUnion__vm_map_subsystem::Reply_vm_inherit"]
        [::std::mem::offset_of!(__ReplyUnion__vm_map_subsystem, Reply_vm_inherit) - 0usize];
    ["Offset of field: __ReplyUnion__vm_map_subsystem::Reply_vm_read"]
        [::std::mem::offset_of!(__ReplyUnion__vm_map_subsystem, Reply_vm_read) - 0usize];
    ["Offset of field: __ReplyUnion__vm_map_subsystem::Reply_vm_read_list"]
        [::std::mem::offset_of!(__ReplyUnion__vm_map_subsystem, Reply_vm_read_list) - 0usize];
    ["Offset of field: __ReplyUnion__vm_map_subsystem::Reply_vm_write"]
        [::std::mem::offset_of!(__ReplyUnion__vm_map_subsystem, Reply_vm_write) - 0usize];
    ["Offset of field: __ReplyUnion__vm_map_subsystem::Reply_vm_copy"]
        [::std::mem::offset_of!(__ReplyUnion__vm_map_subsystem, Reply_vm_copy) - 0usize];
    ["Offset of field: __ReplyUnion__vm_map_subsystem::Reply_vm_read_overwrite"]
        [::std::mem::offset_of!(__ReplyUnion__vm_map_subsystem, Reply_vm_read_overwrite) - 0usize];
    ["Offset of field: __ReplyUnion__vm_map_subsystem::Reply_vm_msync"]
        [::std::mem::offset_of!(__ReplyUnion__vm_map_subsystem, Reply_vm_msync) - 0usize];
    ["Offset of field: __ReplyUnion__vm_map_subsystem::Reply_vm_behavior_set"]
        [::std::mem::offset_of!(__ReplyUnion__vm_map_subsystem, Reply_vm_behavior_set) - 0usize];
    ["Offset of field: __ReplyUnion__vm_map_subsystem::Reply_vm_map"]
        [::std::mem::offset_of!(__ReplyUnion__vm_map_subsystem, Reply_vm_map) - 0usize];
    ["Offset of field: __ReplyUnion__vm_map_subsystem::Reply_vm_machine_attribute"][::std::mem::offset_of!(
        __ReplyUnion__vm_map_subsystem,
        Reply_vm_machine_attribute
    ) - 0usize];
    ["Offset of field: __ReplyUnion__vm_map_subsystem::Reply_vm_remap"]
        [::std::mem::offset_of!(__ReplyUnion__vm_map_subsystem, Reply_vm_remap) - 0usize];
    ["Offset of field: __ReplyUnion__vm_map_subsystem::Reply_task_wire"]
        [::std::mem::offset_of!(__ReplyUnion__vm_map_subsystem, Reply_task_wire) - 0usize];
    ["Offset of field: __ReplyUnion__vm_map_subsystem::Reply_mach_make_memory_entry"][::std::mem::offset_of!(
        __ReplyUnion__vm_map_subsystem,
        Reply_mach_make_memory_entry
    ) - 0usize];
    ["Offset of field: __ReplyUnion__vm_map_subsystem::Reply_vm_map_page_query"]
        [::std::mem::offset_of!(__ReplyUnion__vm_map_subsystem, Reply_vm_map_page_query) - 0usize];
    ["Offset of field: __ReplyUnion__vm_map_subsystem::Reply_mach_vm_region_info"][::std::mem::offset_of!(
        __ReplyUnion__vm_map_subsystem,
        Reply_mach_vm_region_info
    ) - 0usize];
    ["Offset of field: __ReplyUnion__vm_map_subsystem::Reply_vm_mapped_pages_info"][::std::mem::offset_of!(
        __ReplyUnion__vm_map_subsystem,
        Reply_vm_mapped_pages_info
    ) - 0usize];
    ["Offset of field: __ReplyUnion__vm_map_subsystem::Reply_vm_region_recurse"]
        [::std::mem::offset_of!(__ReplyUnion__vm_map_subsystem, Reply_vm_region_recurse) - 0usize];
    ["Offset of field: __ReplyUnion__vm_map_subsystem::Reply_vm_region_recurse_64"][::std::mem::offset_of!(
        __ReplyUnion__vm_map_subsystem,
        Reply_vm_region_recurse_64
    ) - 0usize];
    ["Offset of field: __ReplyUnion__vm_map_subsystem::Reply_mach_vm_region_info_64"][::std::mem::offset_of!(
        __ReplyUnion__vm_map_subsystem,
        Reply_mach_vm_region_info_64
    ) - 0usize];
    ["Offset of field: __ReplyUnion__vm_map_subsystem::Reply_vm_region_64"]
        [::std::mem::offset_of!(__ReplyUnion__vm_map_subsystem, Reply_vm_region_64) - 0usize];
    ["Offset of field: __ReplyUnion__vm_map_subsystem::Reply_mach_make_memory_entry_64"][::std::mem::offset_of!(
        __ReplyUnion__vm_map_subsystem,
        Reply_mach_make_memory_entry_64
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__vm_map_subsystem::Reply_vm_map_64"]
        [::std::mem::offset_of!(__ReplyUnion__vm_map_subsystem, Reply_vm_map_64) - 0usize];
    ["Offset of field: __ReplyUnion__vm_map_subsystem::Reply_vm_purgable_control"][::std::mem::offset_of!(
        __ReplyUnion__vm_map_subsystem,
        Reply_vm_purgable_control
    ) - 0usize];
    ["Offset of field: __ReplyUnion__vm_map_subsystem::Reply_vm_map_exec_lockdown"][::std::mem::offset_of!(
        __ReplyUnion__vm_map_subsystem,
        Reply_vm_map_exec_lockdown
    ) - 0usize];
    ["Offset of field: __ReplyUnion__vm_map_subsystem::Reply_vm_remap_new"]
        [::std::mem::offset_of!(__ReplyUnion__vm_map_subsystem, Reply_vm_remap_new) - 0usize];
};
unsafe extern "C" {
    pub fn mach_port_names(
        task: ipc_space_t,
        names: *mut mach_port_name_array_t,
        namesCnt: *mut mach_msg_type_number_t,
        types: *mut mach_port_type_array_t,
        typesCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn mach_port_type(
        task: ipc_space_t,
        name: mach_port_name_t,
        ptype: *mut mach_port_type_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn mach_port_rename(
        task: ipc_space_t,
        old_name: mach_port_name_t,
        new_name: mach_port_name_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn mach_port_allocate_name(
        task: ipc_space_t,
        right: mach_port_right_t,
        name: mach_port_name_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn mach_port_allocate(
        task: ipc_space_t,
        right: mach_port_right_t,
        name: *mut mach_port_name_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn mach_port_destroy(task: ipc_space_t, name: mach_port_name_t) -> kern_return_t;
}
unsafe extern "C" {
    pub fn mach_port_deallocate(task: ipc_space_t, name: mach_port_name_t) -> kern_return_t;
}
unsafe extern "C" {
    pub fn mach_port_get_refs(
        task: ipc_space_t,
        name: mach_port_name_t,
        right: mach_port_right_t,
        refs: *mut mach_port_urefs_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn mach_port_mod_refs(
        task: ipc_space_t,
        name: mach_port_name_t,
        right: mach_port_right_t,
        delta: mach_port_delta_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn mach_port_peek(
        task: ipc_space_t,
        name: mach_port_name_t,
        trailer_type: mach_msg_trailer_type_t,
        request_seqnop: *mut mach_port_seqno_t,
        msg_sizep: *mut mach_msg_size_t,
        msg_idp: *mut mach_msg_id_t,
        trailer_infop: mach_msg_trailer_info_t,
        trailer_infopCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn mach_port_set_mscount(
        task: ipc_space_t,
        name: mach_port_name_t,
        mscount: mach_port_mscount_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn mach_port_get_set_status(
        task: ipc_space_read_t,
        name: mach_port_name_t,
        members: *mut mach_port_name_array_t,
        membersCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn mach_port_move_member(
        task: ipc_space_t,
        member: mach_port_name_t,
        after: mach_port_name_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn mach_port_request_notification(
        task: ipc_space_t,
        name: mach_port_name_t,
        msgid: mach_msg_id_t,
        sync: mach_port_mscount_t,
        notify: mach_port_t,
        notifyPoly: mach_msg_type_name_t,
        previous: *mut mach_port_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn mach_port_insert_right(
        task: ipc_space_t,
        name: mach_port_name_t,
        poly: mach_port_t,
        polyPoly: mach_msg_type_name_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn mach_port_extract_right(
        task: ipc_space_t,
        name: mach_port_name_t,
        msgt_name: mach_msg_type_name_t,
        poly: *mut mach_port_t,
        polyPoly: *mut mach_msg_type_name_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn mach_port_set_seqno(
        task: ipc_space_t,
        name: mach_port_name_t,
        seqno: mach_port_seqno_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn mach_port_get_attributes(
        task: ipc_space_read_t,
        name: mach_port_name_t,
        flavor: mach_port_flavor_t,
        port_info_out: mach_port_info_t,
        port_info_outCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn mach_port_set_attributes(
        task: ipc_space_t,
        name: mach_port_name_t,
        flavor: mach_port_flavor_t,
        port_info: mach_port_info_t,
        port_infoCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn mach_port_allocate_qos(
        task: ipc_space_t,
        right: mach_port_right_t,
        qos: *mut mach_port_qos_t,
        name: *mut mach_port_name_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn mach_port_allocate_full(
        task: ipc_space_t,
        right: mach_port_right_t,
        proto: mach_port_t,
        qos: *mut mach_port_qos_t,
        name: *mut mach_port_name_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn task_set_port_space(
        task: ipc_space_t,
        table_entries: ::std::os::raw::c_int,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn mach_port_get_srights(
        task: ipc_space_t,
        name: mach_port_name_t,
        srights: *mut mach_port_rights_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn mach_port_space_info(
        space: ipc_space_read_t,
        space_info: *mut ipc_info_space_t,
        table_info: *mut ipc_info_name_array_t,
        table_infoCnt: *mut mach_msg_type_number_t,
        tree_info: *mut ipc_info_tree_name_array_t,
        tree_infoCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn mach_port_dnrequest_info(
        task: ipc_space_t,
        name: mach_port_name_t,
        dnr_total: *mut ::std::os::raw::c_uint,
        dnr_used: *mut ::std::os::raw::c_uint,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn mach_port_kernel_object(
        task: ipc_space_read_t,
        name: mach_port_name_t,
        object_type: *mut ::std::os::raw::c_uint,
        object_addr: *mut ::std::os::raw::c_uint,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn mach_port_insert_member(
        task: ipc_space_t,
        name: mach_port_name_t,
        pset: mach_port_name_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn mach_port_extract_member(
        task: ipc_space_t,
        name: mach_port_name_t,
        pset: mach_port_name_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn mach_port_get_context(
        task: ipc_space_read_t,
        name: mach_port_name_t,
        context: *mut mach_port_context_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn mach_port_set_context(
        task: ipc_space_t,
        name: mach_port_name_t,
        context: mach_port_context_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn mach_port_kobject(
        task: ipc_space_read_t,
        name: mach_port_name_t,
        object_type: *mut natural_t,
        object_addr: *mut mach_vm_address_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn mach_port_construct(
        task: ipc_space_t,
        options: mach_port_options_ptr_t,
        context: mach_port_context_t,
        name: *mut mach_port_name_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn mach_port_destruct(
        task: ipc_space_t,
        name: mach_port_name_t,
        srdelta: mach_port_delta_t,
        guard: mach_port_context_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn mach_port_guard(
        task: ipc_space_t,
        name: mach_port_name_t,
        guard: mach_port_context_t,
        strict: boolean_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn mach_port_unguard(
        task: ipc_space_t,
        name: mach_port_name_t,
        guard: mach_port_context_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn mach_port_space_basic_info(
        task: ipc_space_inspect_t,
        basic_info: *mut ipc_info_space_basic_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn mach_port_guard_with_flags(
        task: ipc_space_t,
        name: mach_port_name_t,
        guard: mach_port_context_t,
        flags: u64,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn mach_port_swap_guard(
        task: ipc_space_t,
        name: mach_port_name_t,
        old_guard: mach_port_context_t,
        new_guard: mach_port_context_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn mach_port_kobject_description(
        task: ipc_space_read_t,
        name: mach_port_name_t,
        object_type: *mut natural_t,
        object_addr: *mut mach_vm_address_t,
        description: *mut ::std::os::raw::c_char,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn mach_port_is_connection_for_service(
        task: ipc_space_t,
        connection_port: mach_port_name_t,
        service_port: mach_port_name_t,
        filter_policy_id: *mut u64,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn mach_port_get_service_port_info(
        task: ipc_space_read_t,
        name: mach_port_name_t,
        sp_info_out: *mut mach_service_port_info_data_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn mach_port_assert_attributes(
        task: ipc_space_t,
        name: mach_port_name_t,
        flavor: mach_port_flavor_t,
        info: mach_port_info_t,
        infoCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_names_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_port_names_t"]
        [::std::mem::size_of::<__Request__mach_port_names_t>() - 24usize];
    ["Alignment of __Request__mach_port_names_t"]
        [::std::mem::align_of::<__Request__mach_port_names_t>() - 4usize];
    ["Offset of field: __Request__mach_port_names_t::Head"]
        [::std::mem::offset_of!(__Request__mach_port_names_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_type_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_port_type_t"]
        [::std::mem::size_of::<__Request__mach_port_type_t>() - 36usize];
    ["Alignment of __Request__mach_port_type_t"]
        [::std::mem::align_of::<__Request__mach_port_type_t>() - 4usize];
    ["Offset of field: __Request__mach_port_type_t::Head"]
        [::std::mem::offset_of!(__Request__mach_port_type_t, Head) - 0usize];
    ["Offset of field: __Request__mach_port_type_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_port_type_t, NDR) - 24usize];
    ["Offset of field: __Request__mach_port_type_t::name"]
        [::std::mem::offset_of!(__Request__mach_port_type_t, name) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_rename_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub old_name: mach_port_name_t,
    pub new_name: mach_port_name_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_port_rename_t"]
        [::std::mem::size_of::<__Request__mach_port_rename_t>() - 40usize];
    ["Alignment of __Request__mach_port_rename_t"]
        [::std::mem::align_of::<__Request__mach_port_rename_t>() - 4usize];
    ["Offset of field: __Request__mach_port_rename_t::Head"]
        [::std::mem::offset_of!(__Request__mach_port_rename_t, Head) - 0usize];
    ["Offset of field: __Request__mach_port_rename_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_port_rename_t, NDR) - 24usize];
    ["Offset of field: __Request__mach_port_rename_t::old_name"]
        [::std::mem::offset_of!(__Request__mach_port_rename_t, old_name) - 32usize];
    ["Offset of field: __Request__mach_port_rename_t::new_name"]
        [::std::mem::offset_of!(__Request__mach_port_rename_t, new_name) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_allocate_name_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub right: mach_port_right_t,
    pub name: mach_port_name_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_port_allocate_name_t"]
        [::std::mem::size_of::<__Request__mach_port_allocate_name_t>() - 40usize];
    ["Alignment of __Request__mach_port_allocate_name_t"]
        [::std::mem::align_of::<__Request__mach_port_allocate_name_t>() - 4usize];
    ["Offset of field: __Request__mach_port_allocate_name_t::Head"]
        [::std::mem::offset_of!(__Request__mach_port_allocate_name_t, Head) - 0usize];
    ["Offset of field: __Request__mach_port_allocate_name_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_port_allocate_name_t, NDR) - 24usize];
    ["Offset of field: __Request__mach_port_allocate_name_t::right"]
        [::std::mem::offset_of!(__Request__mach_port_allocate_name_t, right) - 32usize];
    ["Offset of field: __Request__mach_port_allocate_name_t::name"]
        [::std::mem::offset_of!(__Request__mach_port_allocate_name_t, name) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_allocate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub right: mach_port_right_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_port_allocate_t"]
        [::std::mem::size_of::<__Request__mach_port_allocate_t>() - 36usize];
    ["Alignment of __Request__mach_port_allocate_t"]
        [::std::mem::align_of::<__Request__mach_port_allocate_t>() - 4usize];
    ["Offset of field: __Request__mach_port_allocate_t::Head"]
        [::std::mem::offset_of!(__Request__mach_port_allocate_t, Head) - 0usize];
    ["Offset of field: __Request__mach_port_allocate_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_port_allocate_t, NDR) - 24usize];
    ["Offset of field: __Request__mach_port_allocate_t::right"]
        [::std::mem::offset_of!(__Request__mach_port_allocate_t, right) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_destroy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_port_destroy_t"]
        [::std::mem::size_of::<__Request__mach_port_destroy_t>() - 36usize];
    ["Alignment of __Request__mach_port_destroy_t"]
        [::std::mem::align_of::<__Request__mach_port_destroy_t>() - 4usize];
    ["Offset of field: __Request__mach_port_destroy_t::Head"]
        [::std::mem::offset_of!(__Request__mach_port_destroy_t, Head) - 0usize];
    ["Offset of field: __Request__mach_port_destroy_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_port_destroy_t, NDR) - 24usize];
    ["Offset of field: __Request__mach_port_destroy_t::name"]
        [::std::mem::offset_of!(__Request__mach_port_destroy_t, name) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_deallocate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_port_deallocate_t"]
        [::std::mem::size_of::<__Request__mach_port_deallocate_t>() - 36usize];
    ["Alignment of __Request__mach_port_deallocate_t"]
        [::std::mem::align_of::<__Request__mach_port_deallocate_t>() - 4usize];
    ["Offset of field: __Request__mach_port_deallocate_t::Head"]
        [::std::mem::offset_of!(__Request__mach_port_deallocate_t, Head) - 0usize];
    ["Offset of field: __Request__mach_port_deallocate_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_port_deallocate_t, NDR) - 24usize];
    ["Offset of field: __Request__mach_port_deallocate_t::name"]
        [::std::mem::offset_of!(__Request__mach_port_deallocate_t, name) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_get_refs_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub right: mach_port_right_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_port_get_refs_t"]
        [::std::mem::size_of::<__Request__mach_port_get_refs_t>() - 40usize];
    ["Alignment of __Request__mach_port_get_refs_t"]
        [::std::mem::align_of::<__Request__mach_port_get_refs_t>() - 4usize];
    ["Offset of field: __Request__mach_port_get_refs_t::Head"]
        [::std::mem::offset_of!(__Request__mach_port_get_refs_t, Head) - 0usize];
    ["Offset of field: __Request__mach_port_get_refs_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_port_get_refs_t, NDR) - 24usize];
    ["Offset of field: __Request__mach_port_get_refs_t::name"]
        [::std::mem::offset_of!(__Request__mach_port_get_refs_t, name) - 32usize];
    ["Offset of field: __Request__mach_port_get_refs_t::right"]
        [::std::mem::offset_of!(__Request__mach_port_get_refs_t, right) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_mod_refs_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub right: mach_port_right_t,
    pub delta: mach_port_delta_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_port_mod_refs_t"]
        [::std::mem::size_of::<__Request__mach_port_mod_refs_t>() - 44usize];
    ["Alignment of __Request__mach_port_mod_refs_t"]
        [::std::mem::align_of::<__Request__mach_port_mod_refs_t>() - 4usize];
    ["Offset of field: __Request__mach_port_mod_refs_t::Head"]
        [::std::mem::offset_of!(__Request__mach_port_mod_refs_t, Head) - 0usize];
    ["Offset of field: __Request__mach_port_mod_refs_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_port_mod_refs_t, NDR) - 24usize];
    ["Offset of field: __Request__mach_port_mod_refs_t::name"]
        [::std::mem::offset_of!(__Request__mach_port_mod_refs_t, name) - 32usize];
    ["Offset of field: __Request__mach_port_mod_refs_t::right"]
        [::std::mem::offset_of!(__Request__mach_port_mod_refs_t, right) - 36usize];
    ["Offset of field: __Request__mach_port_mod_refs_t::delta"]
        [::std::mem::offset_of!(__Request__mach_port_mod_refs_t, delta) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_peek_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub trailer_type: mach_msg_trailer_type_t,
    pub request_seqnop: mach_port_seqno_t,
    pub trailer_infopCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_port_peek_t"]
        [::std::mem::size_of::<__Request__mach_port_peek_t>() - 48usize];
    ["Alignment of __Request__mach_port_peek_t"]
        [::std::mem::align_of::<__Request__mach_port_peek_t>() - 4usize];
    ["Offset of field: __Request__mach_port_peek_t::Head"]
        [::std::mem::offset_of!(__Request__mach_port_peek_t, Head) - 0usize];
    ["Offset of field: __Request__mach_port_peek_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_port_peek_t, NDR) - 24usize];
    ["Offset of field: __Request__mach_port_peek_t::name"]
        [::std::mem::offset_of!(__Request__mach_port_peek_t, name) - 32usize];
    ["Offset of field: __Request__mach_port_peek_t::trailer_type"]
        [::std::mem::offset_of!(__Request__mach_port_peek_t, trailer_type) - 36usize];
    ["Offset of field: __Request__mach_port_peek_t::request_seqnop"]
        [::std::mem::offset_of!(__Request__mach_port_peek_t, request_seqnop) - 40usize];
    ["Offset of field: __Request__mach_port_peek_t::trailer_infopCnt"]
        [::std::mem::offset_of!(__Request__mach_port_peek_t, trailer_infopCnt) - 44usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_set_mscount_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub mscount: mach_port_mscount_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_port_set_mscount_t"]
        [::std::mem::size_of::<__Request__mach_port_set_mscount_t>() - 40usize];
    ["Alignment of __Request__mach_port_set_mscount_t"]
        [::std::mem::align_of::<__Request__mach_port_set_mscount_t>() - 4usize];
    ["Offset of field: __Request__mach_port_set_mscount_t::Head"]
        [::std::mem::offset_of!(__Request__mach_port_set_mscount_t, Head) - 0usize];
    ["Offset of field: __Request__mach_port_set_mscount_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_port_set_mscount_t, NDR) - 24usize];
    ["Offset of field: __Request__mach_port_set_mscount_t::name"]
        [::std::mem::offset_of!(__Request__mach_port_set_mscount_t, name) - 32usize];
    ["Offset of field: __Request__mach_port_set_mscount_t::mscount"]
        [::std::mem::offset_of!(__Request__mach_port_set_mscount_t, mscount) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_get_set_status_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_port_get_set_status_t"]
        [::std::mem::size_of::<__Request__mach_port_get_set_status_t>() - 36usize];
    ["Alignment of __Request__mach_port_get_set_status_t"]
        [::std::mem::align_of::<__Request__mach_port_get_set_status_t>() - 4usize];
    ["Offset of field: __Request__mach_port_get_set_status_t::Head"]
        [::std::mem::offset_of!(__Request__mach_port_get_set_status_t, Head) - 0usize];
    ["Offset of field: __Request__mach_port_get_set_status_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_port_get_set_status_t, NDR) - 24usize];
    ["Offset of field: __Request__mach_port_get_set_status_t::name"]
        [::std::mem::offset_of!(__Request__mach_port_get_set_status_t, name) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_move_member_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub member: mach_port_name_t,
    pub after: mach_port_name_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_port_move_member_t"]
        [::std::mem::size_of::<__Request__mach_port_move_member_t>() - 40usize];
    ["Alignment of __Request__mach_port_move_member_t"]
        [::std::mem::align_of::<__Request__mach_port_move_member_t>() - 4usize];
    ["Offset of field: __Request__mach_port_move_member_t::Head"]
        [::std::mem::offset_of!(__Request__mach_port_move_member_t, Head) - 0usize];
    ["Offset of field: __Request__mach_port_move_member_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_port_move_member_t, NDR) - 24usize];
    ["Offset of field: __Request__mach_port_move_member_t::member"]
        [::std::mem::offset_of!(__Request__mach_port_move_member_t, member) - 32usize];
    ["Offset of field: __Request__mach_port_move_member_t::after"]
        [::std::mem::offset_of!(__Request__mach_port_move_member_t, after) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_request_notification_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub notify: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub msgid: mach_msg_id_t,
    pub sync: mach_port_mscount_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_port_request_notification_t"]
        [::std::mem::size_of::<__Request__mach_port_request_notification_t>() - 60usize];
    ["Alignment of __Request__mach_port_request_notification_t"]
        [::std::mem::align_of::<__Request__mach_port_request_notification_t>() - 4usize];
    ["Offset of field: __Request__mach_port_request_notification_t::Head"]
        [::std::mem::offset_of!(__Request__mach_port_request_notification_t, Head) - 0usize];
    ["Offset of field: __Request__mach_port_request_notification_t::msgh_body"]
        [::std::mem::offset_of!(__Request__mach_port_request_notification_t, msgh_body) - 24usize];
    ["Offset of field: __Request__mach_port_request_notification_t::notify"]
        [::std::mem::offset_of!(__Request__mach_port_request_notification_t, notify) - 28usize];
    ["Offset of field: __Request__mach_port_request_notification_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_port_request_notification_t, NDR) - 40usize];
    ["Offset of field: __Request__mach_port_request_notification_t::name"]
        [::std::mem::offset_of!(__Request__mach_port_request_notification_t, name) - 48usize];
    ["Offset of field: __Request__mach_port_request_notification_t::msgid"]
        [::std::mem::offset_of!(__Request__mach_port_request_notification_t, msgid) - 52usize];
    ["Offset of field: __Request__mach_port_request_notification_t::sync"]
        [::std::mem::offset_of!(__Request__mach_port_request_notification_t, sync) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_insert_right_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub poly: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_port_insert_right_t"]
        [::std::mem::size_of::<__Request__mach_port_insert_right_t>() - 52usize];
    ["Alignment of __Request__mach_port_insert_right_t"]
        [::std::mem::align_of::<__Request__mach_port_insert_right_t>() - 4usize];
    ["Offset of field: __Request__mach_port_insert_right_t::Head"]
        [::std::mem::offset_of!(__Request__mach_port_insert_right_t, Head) - 0usize];
    ["Offset of field: __Request__mach_port_insert_right_t::msgh_body"]
        [::std::mem::offset_of!(__Request__mach_port_insert_right_t, msgh_body) - 24usize];
    ["Offset of field: __Request__mach_port_insert_right_t::poly"]
        [::std::mem::offset_of!(__Request__mach_port_insert_right_t, poly) - 28usize];
    ["Offset of field: __Request__mach_port_insert_right_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_port_insert_right_t, NDR) - 40usize];
    ["Offset of field: __Request__mach_port_insert_right_t::name"]
        [::std::mem::offset_of!(__Request__mach_port_insert_right_t, name) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_extract_right_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub msgt_name: mach_msg_type_name_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_port_extract_right_t"]
        [::std::mem::size_of::<__Request__mach_port_extract_right_t>() - 40usize];
    ["Alignment of __Request__mach_port_extract_right_t"]
        [::std::mem::align_of::<__Request__mach_port_extract_right_t>() - 4usize];
    ["Offset of field: __Request__mach_port_extract_right_t::Head"]
        [::std::mem::offset_of!(__Request__mach_port_extract_right_t, Head) - 0usize];
    ["Offset of field: __Request__mach_port_extract_right_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_port_extract_right_t, NDR) - 24usize];
    ["Offset of field: __Request__mach_port_extract_right_t::name"]
        [::std::mem::offset_of!(__Request__mach_port_extract_right_t, name) - 32usize];
    ["Offset of field: __Request__mach_port_extract_right_t::msgt_name"]
        [::std::mem::offset_of!(__Request__mach_port_extract_right_t, msgt_name) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_set_seqno_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub seqno: mach_port_seqno_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_port_set_seqno_t"]
        [::std::mem::size_of::<__Request__mach_port_set_seqno_t>() - 40usize];
    ["Alignment of __Request__mach_port_set_seqno_t"]
        [::std::mem::align_of::<__Request__mach_port_set_seqno_t>() - 4usize];
    ["Offset of field: __Request__mach_port_set_seqno_t::Head"]
        [::std::mem::offset_of!(__Request__mach_port_set_seqno_t, Head) - 0usize];
    ["Offset of field: __Request__mach_port_set_seqno_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_port_set_seqno_t, NDR) - 24usize];
    ["Offset of field: __Request__mach_port_set_seqno_t::name"]
        [::std::mem::offset_of!(__Request__mach_port_set_seqno_t, name) - 32usize];
    ["Offset of field: __Request__mach_port_set_seqno_t::seqno"]
        [::std::mem::offset_of!(__Request__mach_port_set_seqno_t, seqno) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_get_attributes_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub flavor: mach_port_flavor_t,
    pub port_info_outCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_port_get_attributes_t"]
        [::std::mem::size_of::<__Request__mach_port_get_attributes_t>() - 44usize];
    ["Alignment of __Request__mach_port_get_attributes_t"]
        [::std::mem::align_of::<__Request__mach_port_get_attributes_t>() - 4usize];
    ["Offset of field: __Request__mach_port_get_attributes_t::Head"]
        [::std::mem::offset_of!(__Request__mach_port_get_attributes_t, Head) - 0usize];
    ["Offset of field: __Request__mach_port_get_attributes_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_port_get_attributes_t, NDR) - 24usize];
    ["Offset of field: __Request__mach_port_get_attributes_t::name"]
        [::std::mem::offset_of!(__Request__mach_port_get_attributes_t, name) - 32usize];
    ["Offset of field: __Request__mach_port_get_attributes_t::flavor"]
        [::std::mem::offset_of!(__Request__mach_port_get_attributes_t, flavor) - 36usize];
    ["Offset of field: __Request__mach_port_get_attributes_t::port_info_outCnt"]
        [::std::mem::offset_of!(__Request__mach_port_get_attributes_t, port_info_outCnt) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_set_attributes_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub flavor: mach_port_flavor_t,
    pub port_infoCnt: mach_msg_type_number_t,
    pub port_info: [integer_t; 17usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_port_set_attributes_t"]
        [::std::mem::size_of::<__Request__mach_port_set_attributes_t>() - 112usize];
    ["Alignment of __Request__mach_port_set_attributes_t"]
        [::std::mem::align_of::<__Request__mach_port_set_attributes_t>() - 4usize];
    ["Offset of field: __Request__mach_port_set_attributes_t::Head"]
        [::std::mem::offset_of!(__Request__mach_port_set_attributes_t, Head) - 0usize];
    ["Offset of field: __Request__mach_port_set_attributes_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_port_set_attributes_t, NDR) - 24usize];
    ["Offset of field: __Request__mach_port_set_attributes_t::name"]
        [::std::mem::offset_of!(__Request__mach_port_set_attributes_t, name) - 32usize];
    ["Offset of field: __Request__mach_port_set_attributes_t::flavor"]
        [::std::mem::offset_of!(__Request__mach_port_set_attributes_t, flavor) - 36usize];
    ["Offset of field: __Request__mach_port_set_attributes_t::port_infoCnt"]
        [::std::mem::offset_of!(__Request__mach_port_set_attributes_t, port_infoCnt) - 40usize];
    ["Offset of field: __Request__mach_port_set_attributes_t::port_info"]
        [::std::mem::offset_of!(__Request__mach_port_set_attributes_t, port_info) - 44usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_allocate_qos_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub right: mach_port_right_t,
    pub qos: mach_port_qos_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_port_allocate_qos_t"]
        [::std::mem::size_of::<__Request__mach_port_allocate_qos_t>() - 44usize];
    ["Alignment of __Request__mach_port_allocate_qos_t"]
        [::std::mem::align_of::<__Request__mach_port_allocate_qos_t>() - 4usize];
    ["Offset of field: __Request__mach_port_allocate_qos_t::Head"]
        [::std::mem::offset_of!(__Request__mach_port_allocate_qos_t, Head) - 0usize];
    ["Offset of field: __Request__mach_port_allocate_qos_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_port_allocate_qos_t, NDR) - 24usize];
    ["Offset of field: __Request__mach_port_allocate_qos_t::right"]
        [::std::mem::offset_of!(__Request__mach_port_allocate_qos_t, right) - 32usize];
    ["Offset of field: __Request__mach_port_allocate_qos_t::qos"]
        [::std::mem::offset_of!(__Request__mach_port_allocate_qos_t, qos) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_allocate_full_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub proto: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub right: mach_port_right_t,
    pub qos: mach_port_qos_t,
    pub name: mach_port_name_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_port_allocate_full_t"]
        [::std::mem::size_of::<__Request__mach_port_allocate_full_t>() - 64usize];
    ["Alignment of __Request__mach_port_allocate_full_t"]
        [::std::mem::align_of::<__Request__mach_port_allocate_full_t>() - 4usize];
    ["Offset of field: __Request__mach_port_allocate_full_t::Head"]
        [::std::mem::offset_of!(__Request__mach_port_allocate_full_t, Head) - 0usize];
    ["Offset of field: __Request__mach_port_allocate_full_t::msgh_body"]
        [::std::mem::offset_of!(__Request__mach_port_allocate_full_t, msgh_body) - 24usize];
    ["Offset of field: __Request__mach_port_allocate_full_t::proto"]
        [::std::mem::offset_of!(__Request__mach_port_allocate_full_t, proto) - 28usize];
    ["Offset of field: __Request__mach_port_allocate_full_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_port_allocate_full_t, NDR) - 40usize];
    ["Offset of field: __Request__mach_port_allocate_full_t::right"]
        [::std::mem::offset_of!(__Request__mach_port_allocate_full_t, right) - 48usize];
    ["Offset of field: __Request__mach_port_allocate_full_t::qos"]
        [::std::mem::offset_of!(__Request__mach_port_allocate_full_t, qos) - 52usize];
    ["Offset of field: __Request__mach_port_allocate_full_t::name"]
        [::std::mem::offset_of!(__Request__mach_port_allocate_full_t, name) - 60usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_set_port_space_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub table_entries: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_set_port_space_t"]
        [::std::mem::size_of::<__Request__task_set_port_space_t>() - 36usize];
    ["Alignment of __Request__task_set_port_space_t"]
        [::std::mem::align_of::<__Request__task_set_port_space_t>() - 4usize];
    ["Offset of field: __Request__task_set_port_space_t::Head"]
        [::std::mem::offset_of!(__Request__task_set_port_space_t, Head) - 0usize];
    ["Offset of field: __Request__task_set_port_space_t::NDR"]
        [::std::mem::offset_of!(__Request__task_set_port_space_t, NDR) - 24usize];
    ["Offset of field: __Request__task_set_port_space_t::table_entries"]
        [::std::mem::offset_of!(__Request__task_set_port_space_t, table_entries) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_get_srights_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_port_get_srights_t"]
        [::std::mem::size_of::<__Request__mach_port_get_srights_t>() - 36usize];
    ["Alignment of __Request__mach_port_get_srights_t"]
        [::std::mem::align_of::<__Request__mach_port_get_srights_t>() - 4usize];
    ["Offset of field: __Request__mach_port_get_srights_t::Head"]
        [::std::mem::offset_of!(__Request__mach_port_get_srights_t, Head) - 0usize];
    ["Offset of field: __Request__mach_port_get_srights_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_port_get_srights_t, NDR) - 24usize];
    ["Offset of field: __Request__mach_port_get_srights_t::name"]
        [::std::mem::offset_of!(__Request__mach_port_get_srights_t, name) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_space_info_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_port_space_info_t"]
        [::std::mem::size_of::<__Request__mach_port_space_info_t>() - 24usize];
    ["Alignment of __Request__mach_port_space_info_t"]
        [::std::mem::align_of::<__Request__mach_port_space_info_t>() - 4usize];
    ["Offset of field: __Request__mach_port_space_info_t::Head"]
        [::std::mem::offset_of!(__Request__mach_port_space_info_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_dnrequest_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_port_dnrequest_info_t"]
        [::std::mem::size_of::<__Request__mach_port_dnrequest_info_t>() - 36usize];
    ["Alignment of __Request__mach_port_dnrequest_info_t"]
        [::std::mem::align_of::<__Request__mach_port_dnrequest_info_t>() - 4usize];
    ["Offset of field: __Request__mach_port_dnrequest_info_t::Head"]
        [::std::mem::offset_of!(__Request__mach_port_dnrequest_info_t, Head) - 0usize];
    ["Offset of field: __Request__mach_port_dnrequest_info_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_port_dnrequest_info_t, NDR) - 24usize];
    ["Offset of field: __Request__mach_port_dnrequest_info_t::name"]
        [::std::mem::offset_of!(__Request__mach_port_dnrequest_info_t, name) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_kernel_object_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_port_kernel_object_t"]
        [::std::mem::size_of::<__Request__mach_port_kernel_object_t>() - 36usize];
    ["Alignment of __Request__mach_port_kernel_object_t"]
        [::std::mem::align_of::<__Request__mach_port_kernel_object_t>() - 4usize];
    ["Offset of field: __Request__mach_port_kernel_object_t::Head"]
        [::std::mem::offset_of!(__Request__mach_port_kernel_object_t, Head) - 0usize];
    ["Offset of field: __Request__mach_port_kernel_object_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_port_kernel_object_t, NDR) - 24usize];
    ["Offset of field: __Request__mach_port_kernel_object_t::name"]
        [::std::mem::offset_of!(__Request__mach_port_kernel_object_t, name) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_insert_member_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub pset: mach_port_name_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_port_insert_member_t"]
        [::std::mem::size_of::<__Request__mach_port_insert_member_t>() - 40usize];
    ["Alignment of __Request__mach_port_insert_member_t"]
        [::std::mem::align_of::<__Request__mach_port_insert_member_t>() - 4usize];
    ["Offset of field: __Request__mach_port_insert_member_t::Head"]
        [::std::mem::offset_of!(__Request__mach_port_insert_member_t, Head) - 0usize];
    ["Offset of field: __Request__mach_port_insert_member_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_port_insert_member_t, NDR) - 24usize];
    ["Offset of field: __Request__mach_port_insert_member_t::name"]
        [::std::mem::offset_of!(__Request__mach_port_insert_member_t, name) - 32usize];
    ["Offset of field: __Request__mach_port_insert_member_t::pset"]
        [::std::mem::offset_of!(__Request__mach_port_insert_member_t, pset) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_extract_member_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub pset: mach_port_name_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_port_extract_member_t"]
        [::std::mem::size_of::<__Request__mach_port_extract_member_t>() - 40usize];
    ["Alignment of __Request__mach_port_extract_member_t"]
        [::std::mem::align_of::<__Request__mach_port_extract_member_t>() - 4usize];
    ["Offset of field: __Request__mach_port_extract_member_t::Head"]
        [::std::mem::offset_of!(__Request__mach_port_extract_member_t, Head) - 0usize];
    ["Offset of field: __Request__mach_port_extract_member_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_port_extract_member_t, NDR) - 24usize];
    ["Offset of field: __Request__mach_port_extract_member_t::name"]
        [::std::mem::offset_of!(__Request__mach_port_extract_member_t, name) - 32usize];
    ["Offset of field: __Request__mach_port_extract_member_t::pset"]
        [::std::mem::offset_of!(__Request__mach_port_extract_member_t, pset) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_get_context_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_port_get_context_t"]
        [::std::mem::size_of::<__Request__mach_port_get_context_t>() - 36usize];
    ["Alignment of __Request__mach_port_get_context_t"]
        [::std::mem::align_of::<__Request__mach_port_get_context_t>() - 4usize];
    ["Offset of field: __Request__mach_port_get_context_t::Head"]
        [::std::mem::offset_of!(__Request__mach_port_get_context_t, Head) - 0usize];
    ["Offset of field: __Request__mach_port_get_context_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_port_get_context_t, NDR) - 24usize];
    ["Offset of field: __Request__mach_port_get_context_t::name"]
        [::std::mem::offset_of!(__Request__mach_port_get_context_t, name) - 32usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_set_context_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub context: mach_port_context_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_port_set_context_t"]
        [::std::mem::size_of::<__Request__mach_port_set_context_t>() - 44usize];
    ["Alignment of __Request__mach_port_set_context_t"]
        [::std::mem::align_of::<__Request__mach_port_set_context_t>() - 4usize];
    ["Offset of field: __Request__mach_port_set_context_t::Head"]
        [::std::mem::offset_of!(__Request__mach_port_set_context_t, Head) - 0usize];
    ["Offset of field: __Request__mach_port_set_context_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_port_set_context_t, NDR) - 24usize];
    ["Offset of field: __Request__mach_port_set_context_t::name"]
        [::std::mem::offset_of!(__Request__mach_port_set_context_t, name) - 32usize];
    ["Offset of field: __Request__mach_port_set_context_t::context"]
        [::std::mem::offset_of!(__Request__mach_port_set_context_t, context) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_kobject_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_port_kobject_t"]
        [::std::mem::size_of::<__Request__mach_port_kobject_t>() - 36usize];
    ["Alignment of __Request__mach_port_kobject_t"]
        [::std::mem::align_of::<__Request__mach_port_kobject_t>() - 4usize];
    ["Offset of field: __Request__mach_port_kobject_t::Head"]
        [::std::mem::offset_of!(__Request__mach_port_kobject_t, Head) - 0usize];
    ["Offset of field: __Request__mach_port_kobject_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_port_kobject_t, NDR) - 24usize];
    ["Offset of field: __Request__mach_port_kobject_t::name"]
        [::std::mem::offset_of!(__Request__mach_port_kobject_t, name) - 32usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_construct_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub options: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub context: mach_port_context_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_port_construct_t"]
        [::std::mem::size_of::<__Request__mach_port_construct_t>() - 60usize];
    ["Alignment of __Request__mach_port_construct_t"]
        [::std::mem::align_of::<__Request__mach_port_construct_t>() - 4usize];
    ["Offset of field: __Request__mach_port_construct_t::Head"]
        [::std::mem::offset_of!(__Request__mach_port_construct_t, Head) - 0usize];
    ["Offset of field: __Request__mach_port_construct_t::msgh_body"]
        [::std::mem::offset_of!(__Request__mach_port_construct_t, msgh_body) - 24usize];
    ["Offset of field: __Request__mach_port_construct_t::options"]
        [::std::mem::offset_of!(__Request__mach_port_construct_t, options) - 28usize];
    ["Offset of field: __Request__mach_port_construct_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_port_construct_t, NDR) - 44usize];
    ["Offset of field: __Request__mach_port_construct_t::context"]
        [::std::mem::offset_of!(__Request__mach_port_construct_t, context) - 52usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_destruct_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub srdelta: mach_port_delta_t,
    pub guard: mach_port_context_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_port_destruct_t"]
        [::std::mem::size_of::<__Request__mach_port_destruct_t>() - 48usize];
    ["Alignment of __Request__mach_port_destruct_t"]
        [::std::mem::align_of::<__Request__mach_port_destruct_t>() - 4usize];
    ["Offset of field: __Request__mach_port_destruct_t::Head"]
        [::std::mem::offset_of!(__Request__mach_port_destruct_t, Head) - 0usize];
    ["Offset of field: __Request__mach_port_destruct_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_port_destruct_t, NDR) - 24usize];
    ["Offset of field: __Request__mach_port_destruct_t::name"]
        [::std::mem::offset_of!(__Request__mach_port_destruct_t, name) - 32usize];
    ["Offset of field: __Request__mach_port_destruct_t::srdelta"]
        [::std::mem::offset_of!(__Request__mach_port_destruct_t, srdelta) - 36usize];
    ["Offset of field: __Request__mach_port_destruct_t::guard"]
        [::std::mem::offset_of!(__Request__mach_port_destruct_t, guard) - 40usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_guard_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub guard: mach_port_context_t,
    pub strict: boolean_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_port_guard_t"]
        [::std::mem::size_of::<__Request__mach_port_guard_t>() - 48usize];
    ["Alignment of __Request__mach_port_guard_t"]
        [::std::mem::align_of::<__Request__mach_port_guard_t>() - 4usize];
    ["Offset of field: __Request__mach_port_guard_t::Head"]
        [::std::mem::offset_of!(__Request__mach_port_guard_t, Head) - 0usize];
    ["Offset of field: __Request__mach_port_guard_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_port_guard_t, NDR) - 24usize];
    ["Offset of field: __Request__mach_port_guard_t::name"]
        [::std::mem::offset_of!(__Request__mach_port_guard_t, name) - 32usize];
    ["Offset of field: __Request__mach_port_guard_t::guard"]
        [::std::mem::offset_of!(__Request__mach_port_guard_t, guard) - 36usize];
    ["Offset of field: __Request__mach_port_guard_t::strict"]
        [::std::mem::offset_of!(__Request__mach_port_guard_t, strict) - 44usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_unguard_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub guard: mach_port_context_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_port_unguard_t"]
        [::std::mem::size_of::<__Request__mach_port_unguard_t>() - 44usize];
    ["Alignment of __Request__mach_port_unguard_t"]
        [::std::mem::align_of::<__Request__mach_port_unguard_t>() - 4usize];
    ["Offset of field: __Request__mach_port_unguard_t::Head"]
        [::std::mem::offset_of!(__Request__mach_port_unguard_t, Head) - 0usize];
    ["Offset of field: __Request__mach_port_unguard_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_port_unguard_t, NDR) - 24usize];
    ["Offset of field: __Request__mach_port_unguard_t::name"]
        [::std::mem::offset_of!(__Request__mach_port_unguard_t, name) - 32usize];
    ["Offset of field: __Request__mach_port_unguard_t::guard"]
        [::std::mem::offset_of!(__Request__mach_port_unguard_t, guard) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_space_basic_info_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_port_space_basic_info_t"]
        [::std::mem::size_of::<__Request__mach_port_space_basic_info_t>() - 24usize];
    ["Alignment of __Request__mach_port_space_basic_info_t"]
        [::std::mem::align_of::<__Request__mach_port_space_basic_info_t>() - 4usize];
    ["Offset of field: __Request__mach_port_space_basic_info_t::Head"]
        [::std::mem::offset_of!(__Request__mach_port_space_basic_info_t, Head) - 0usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_guard_with_flags_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub guard: mach_port_context_t,
    pub flags: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_port_guard_with_flags_t"]
        [::std::mem::size_of::<__Request__mach_port_guard_with_flags_t>() - 52usize];
    ["Alignment of __Request__mach_port_guard_with_flags_t"]
        [::std::mem::align_of::<__Request__mach_port_guard_with_flags_t>() - 4usize];
    ["Offset of field: __Request__mach_port_guard_with_flags_t::Head"]
        [::std::mem::offset_of!(__Request__mach_port_guard_with_flags_t, Head) - 0usize];
    ["Offset of field: __Request__mach_port_guard_with_flags_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_port_guard_with_flags_t, NDR) - 24usize];
    ["Offset of field: __Request__mach_port_guard_with_flags_t::name"]
        [::std::mem::offset_of!(__Request__mach_port_guard_with_flags_t, name) - 32usize];
    ["Offset of field: __Request__mach_port_guard_with_flags_t::guard"]
        [::std::mem::offset_of!(__Request__mach_port_guard_with_flags_t, guard) - 36usize];
    ["Offset of field: __Request__mach_port_guard_with_flags_t::flags"]
        [::std::mem::offset_of!(__Request__mach_port_guard_with_flags_t, flags) - 44usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_swap_guard_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub old_guard: mach_port_context_t,
    pub new_guard: mach_port_context_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_port_swap_guard_t"]
        [::std::mem::size_of::<__Request__mach_port_swap_guard_t>() - 52usize];
    ["Alignment of __Request__mach_port_swap_guard_t"]
        [::std::mem::align_of::<__Request__mach_port_swap_guard_t>() - 4usize];
    ["Offset of field: __Request__mach_port_swap_guard_t::Head"]
        [::std::mem::offset_of!(__Request__mach_port_swap_guard_t, Head) - 0usize];
    ["Offset of field: __Request__mach_port_swap_guard_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_port_swap_guard_t, NDR) - 24usize];
    ["Offset of field: __Request__mach_port_swap_guard_t::name"]
        [::std::mem::offset_of!(__Request__mach_port_swap_guard_t, name) - 32usize];
    ["Offset of field: __Request__mach_port_swap_guard_t::old_guard"]
        [::std::mem::offset_of!(__Request__mach_port_swap_guard_t, old_guard) - 36usize];
    ["Offset of field: __Request__mach_port_swap_guard_t::new_guard"]
        [::std::mem::offset_of!(__Request__mach_port_swap_guard_t, new_guard) - 44usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_kobject_description_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_port_kobject_description_t"]
        [::std::mem::size_of::<__Request__mach_port_kobject_description_t>() - 36usize];
    ["Alignment of __Request__mach_port_kobject_description_t"]
        [::std::mem::align_of::<__Request__mach_port_kobject_description_t>() - 4usize];
    ["Offset of field: __Request__mach_port_kobject_description_t::Head"]
        [::std::mem::offset_of!(__Request__mach_port_kobject_description_t, Head) - 0usize];
    ["Offset of field: __Request__mach_port_kobject_description_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_port_kobject_description_t, NDR) - 24usize];
    ["Offset of field: __Request__mach_port_kobject_description_t::name"]
        [::std::mem::offset_of!(__Request__mach_port_kobject_description_t, name) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_is_connection_for_service_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub connection_port: mach_port_name_t,
    pub service_port: mach_port_name_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_port_is_connection_for_service_t"]
        [::std::mem::size_of::<__Request__mach_port_is_connection_for_service_t>() - 40usize];
    ["Alignment of __Request__mach_port_is_connection_for_service_t"]
        [::std::mem::align_of::<__Request__mach_port_is_connection_for_service_t>() - 4usize];
    ["Offset of field: __Request__mach_port_is_connection_for_service_t::Head"]
        [::std::mem::offset_of!(__Request__mach_port_is_connection_for_service_t, Head) - 0usize];
    ["Offset of field: __Request__mach_port_is_connection_for_service_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_port_is_connection_for_service_t, NDR) - 24usize];
    ["Offset of field: __Request__mach_port_is_connection_for_service_t::connection_port"][::std::mem::offset_of!(
        __Request__mach_port_is_connection_for_service_t,
        connection_port
    )
        - 32usize];
    ["Offset of field: __Request__mach_port_is_connection_for_service_t::service_port"][::std::mem::offset_of!(
        __Request__mach_port_is_connection_for_service_t,
        service_port
    )
        - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_get_service_port_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_port_get_service_port_info_t"]
        [::std::mem::size_of::<__Request__mach_port_get_service_port_info_t>() - 36usize];
    ["Alignment of __Request__mach_port_get_service_port_info_t"]
        [::std::mem::align_of::<__Request__mach_port_get_service_port_info_t>() - 4usize];
    ["Offset of field: __Request__mach_port_get_service_port_info_t::Head"]
        [::std::mem::offset_of!(__Request__mach_port_get_service_port_info_t, Head) - 0usize];
    ["Offset of field: __Request__mach_port_get_service_port_info_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_port_get_service_port_info_t, NDR) - 24usize];
    ["Offset of field: __Request__mach_port_get_service_port_info_t::name"]
        [::std::mem::offset_of!(__Request__mach_port_get_service_port_info_t, name) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_assert_attributes_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub flavor: mach_port_flavor_t,
    pub infoCnt: mach_msg_type_number_t,
    pub info: [integer_t; 17usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_port_assert_attributes_t"]
        [::std::mem::size_of::<__Request__mach_port_assert_attributes_t>() - 112usize];
    ["Alignment of __Request__mach_port_assert_attributes_t"]
        [::std::mem::align_of::<__Request__mach_port_assert_attributes_t>() - 4usize];
    ["Offset of field: __Request__mach_port_assert_attributes_t::Head"]
        [::std::mem::offset_of!(__Request__mach_port_assert_attributes_t, Head) - 0usize];
    ["Offset of field: __Request__mach_port_assert_attributes_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_port_assert_attributes_t, NDR) - 24usize];
    ["Offset of field: __Request__mach_port_assert_attributes_t::name"]
        [::std::mem::offset_of!(__Request__mach_port_assert_attributes_t, name) - 32usize];
    ["Offset of field: __Request__mach_port_assert_attributes_t::flavor"]
        [::std::mem::offset_of!(__Request__mach_port_assert_attributes_t, flavor) - 36usize];
    ["Offset of field: __Request__mach_port_assert_attributes_t::infoCnt"]
        [::std::mem::offset_of!(__Request__mach_port_assert_attributes_t, infoCnt) - 40usize];
    ["Offset of field: __Request__mach_port_assert_attributes_t::info"]
        [::std::mem::offset_of!(__Request__mach_port_assert_attributes_t, info) - 44usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__mach_port_subsystem {
    pub Request_mach_port_names: __Request__mach_port_names_t,
    pub Request_mach_port_type: __Request__mach_port_type_t,
    pub Request_mach_port_rename: __Request__mach_port_rename_t,
    pub Request_mach_port_allocate_name: __Request__mach_port_allocate_name_t,
    pub Request_mach_port_allocate: __Request__mach_port_allocate_t,
    pub Request_mach_port_destroy: __Request__mach_port_destroy_t,
    pub Request_mach_port_deallocate: __Request__mach_port_deallocate_t,
    pub Request_mach_port_get_refs: __Request__mach_port_get_refs_t,
    pub Request_mach_port_mod_refs: __Request__mach_port_mod_refs_t,
    pub Request_mach_port_peek: __Request__mach_port_peek_t,
    pub Request_mach_port_set_mscount: __Request__mach_port_set_mscount_t,
    pub Request_mach_port_get_set_status: __Request__mach_port_get_set_status_t,
    pub Request_mach_port_move_member: __Request__mach_port_move_member_t,
    pub Request_mach_port_request_notification: __Request__mach_port_request_notification_t,
    pub Request_mach_port_insert_right: __Request__mach_port_insert_right_t,
    pub Request_mach_port_extract_right: __Request__mach_port_extract_right_t,
    pub Request_mach_port_set_seqno: __Request__mach_port_set_seqno_t,
    pub Request_mach_port_get_attributes: __Request__mach_port_get_attributes_t,
    pub Request_mach_port_set_attributes: __Request__mach_port_set_attributes_t,
    pub Request_mach_port_allocate_qos: __Request__mach_port_allocate_qos_t,
    pub Request_mach_port_allocate_full: __Request__mach_port_allocate_full_t,
    pub Request_task_set_port_space: __Request__task_set_port_space_t,
    pub Request_mach_port_get_srights: __Request__mach_port_get_srights_t,
    pub Request_mach_port_space_info: __Request__mach_port_space_info_t,
    pub Request_mach_port_dnrequest_info: __Request__mach_port_dnrequest_info_t,
    pub Request_mach_port_kernel_object: __Request__mach_port_kernel_object_t,
    pub Request_mach_port_insert_member: __Request__mach_port_insert_member_t,
    pub Request_mach_port_extract_member: __Request__mach_port_extract_member_t,
    pub Request_mach_port_get_context: __Request__mach_port_get_context_t,
    pub Request_mach_port_set_context: __Request__mach_port_set_context_t,
    pub Request_mach_port_kobject: __Request__mach_port_kobject_t,
    pub Request_mach_port_construct: __Request__mach_port_construct_t,
    pub Request_mach_port_destruct: __Request__mach_port_destruct_t,
    pub Request_mach_port_guard: __Request__mach_port_guard_t,
    pub Request_mach_port_unguard: __Request__mach_port_unguard_t,
    pub Request_mach_port_space_basic_info: __Request__mach_port_space_basic_info_t,
    pub Request_mach_port_guard_with_flags: __Request__mach_port_guard_with_flags_t,
    pub Request_mach_port_swap_guard: __Request__mach_port_swap_guard_t,
    pub Request_mach_port_kobject_description: __Request__mach_port_kobject_description_t,
    pub Request_mach_port_is_connection_for_service:
        __Request__mach_port_is_connection_for_service_t,
    pub Request_mach_port_get_service_port_info: __Request__mach_port_get_service_port_info_t,
    pub Request_mach_port_assert_attributes: __Request__mach_port_assert_attributes_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __RequestUnion__mach_port_subsystem"]
        [::std::mem::size_of::<__RequestUnion__mach_port_subsystem>() - 112usize];
    ["Alignment of __RequestUnion__mach_port_subsystem"]
        [::std::mem::align_of::<__RequestUnion__mach_port_subsystem>() - 4usize];
    ["Offset of field: __RequestUnion__mach_port_subsystem::Request_mach_port_names"][::std::mem::offset_of!(
        __RequestUnion__mach_port_subsystem,
        Request_mach_port_names
    ) - 0usize];
    ["Offset of field: __RequestUnion__mach_port_subsystem::Request_mach_port_type"][::std::mem::offset_of!(
        __RequestUnion__mach_port_subsystem,
        Request_mach_port_type
    ) - 0usize];
    ["Offset of field: __RequestUnion__mach_port_subsystem::Request_mach_port_rename"][::std::mem::offset_of!(
        __RequestUnion__mach_port_subsystem,
        Request_mach_port_rename
    ) - 0usize];
    ["Offset of field: __RequestUnion__mach_port_subsystem::Request_mach_port_allocate_name"][::std::mem::offset_of!(
        __RequestUnion__mach_port_subsystem,
        Request_mach_port_allocate_name
    )
        - 0usize];
    ["Offset of field: __RequestUnion__mach_port_subsystem::Request_mach_port_allocate"][::std::mem::offset_of!(
        __RequestUnion__mach_port_subsystem,
        Request_mach_port_allocate
    )
        - 0usize];
    ["Offset of field: __RequestUnion__mach_port_subsystem::Request_mach_port_destroy"][::std::mem::offset_of!(
        __RequestUnion__mach_port_subsystem,
        Request_mach_port_destroy
    ) - 0usize];
    ["Offset of field: __RequestUnion__mach_port_subsystem::Request_mach_port_deallocate"][::std::mem::offset_of!(
        __RequestUnion__mach_port_subsystem,
        Request_mach_port_deallocate
    )
        - 0usize];
    ["Offset of field: __RequestUnion__mach_port_subsystem::Request_mach_port_get_refs"][::std::mem::offset_of!(
        __RequestUnion__mach_port_subsystem,
        Request_mach_port_get_refs
    )
        - 0usize];
    ["Offset of field: __RequestUnion__mach_port_subsystem::Request_mach_port_mod_refs"][::std::mem::offset_of!(
        __RequestUnion__mach_port_subsystem,
        Request_mach_port_mod_refs
    )
        - 0usize];
    ["Offset of field: __RequestUnion__mach_port_subsystem::Request_mach_port_peek"][::std::mem::offset_of!(
        __RequestUnion__mach_port_subsystem,
        Request_mach_port_peek
    ) - 0usize];
    ["Offset of field: __RequestUnion__mach_port_subsystem::Request_mach_port_set_mscount"][::std::mem::offset_of!(
        __RequestUnion__mach_port_subsystem,
        Request_mach_port_set_mscount
    )
        - 0usize];
    ["Offset of field: __RequestUnion__mach_port_subsystem::Request_mach_port_get_set_status"][::std::mem::offset_of!(
        __RequestUnion__mach_port_subsystem,
        Request_mach_port_get_set_status
    )
        - 0usize];
    ["Offset of field: __RequestUnion__mach_port_subsystem::Request_mach_port_move_member"][::std::mem::offset_of!(
        __RequestUnion__mach_port_subsystem,
        Request_mach_port_move_member
    )
        - 0usize];
    ["Offset of field: __RequestUnion__mach_port_subsystem::Request_mach_port_request_notification"] [:: std :: mem :: offset_of ! (__RequestUnion__mach_port_subsystem , Request_mach_port_request_notification) - 0usize] ;
    ["Offset of field: __RequestUnion__mach_port_subsystem::Request_mach_port_insert_right"][::std::mem::offset_of!(
        __RequestUnion__mach_port_subsystem,
        Request_mach_port_insert_right
    )
        - 0usize];
    ["Offset of field: __RequestUnion__mach_port_subsystem::Request_mach_port_extract_right"][::std::mem::offset_of!(
        __RequestUnion__mach_port_subsystem,
        Request_mach_port_extract_right
    )
        - 0usize];
    ["Offset of field: __RequestUnion__mach_port_subsystem::Request_mach_port_set_seqno"][::std::mem::offset_of!(
        __RequestUnion__mach_port_subsystem,
        Request_mach_port_set_seqno
    )
        - 0usize];
    ["Offset of field: __RequestUnion__mach_port_subsystem::Request_mach_port_get_attributes"][::std::mem::offset_of!(
        __RequestUnion__mach_port_subsystem,
        Request_mach_port_get_attributes
    )
        - 0usize];
    ["Offset of field: __RequestUnion__mach_port_subsystem::Request_mach_port_set_attributes"][::std::mem::offset_of!(
        __RequestUnion__mach_port_subsystem,
        Request_mach_port_set_attributes
    )
        - 0usize];
    ["Offset of field: __RequestUnion__mach_port_subsystem::Request_mach_port_allocate_qos"][::std::mem::offset_of!(
        __RequestUnion__mach_port_subsystem,
        Request_mach_port_allocate_qos
    )
        - 0usize];
    ["Offset of field: __RequestUnion__mach_port_subsystem::Request_mach_port_allocate_full"][::std::mem::offset_of!(
        __RequestUnion__mach_port_subsystem,
        Request_mach_port_allocate_full
    )
        - 0usize];
    ["Offset of field: __RequestUnion__mach_port_subsystem::Request_task_set_port_space"][::std::mem::offset_of!(
        __RequestUnion__mach_port_subsystem,
        Request_task_set_port_space
    )
        - 0usize];
    ["Offset of field: __RequestUnion__mach_port_subsystem::Request_mach_port_get_srights"][::std::mem::offset_of!(
        __RequestUnion__mach_port_subsystem,
        Request_mach_port_get_srights
    )
        - 0usize];
    ["Offset of field: __RequestUnion__mach_port_subsystem::Request_mach_port_space_info"][::std::mem::offset_of!(
        __RequestUnion__mach_port_subsystem,
        Request_mach_port_space_info
    )
        - 0usize];
    ["Offset of field: __RequestUnion__mach_port_subsystem::Request_mach_port_dnrequest_info"][::std::mem::offset_of!(
        __RequestUnion__mach_port_subsystem,
        Request_mach_port_dnrequest_info
    )
        - 0usize];
    ["Offset of field: __RequestUnion__mach_port_subsystem::Request_mach_port_kernel_object"][::std::mem::offset_of!(
        __RequestUnion__mach_port_subsystem,
        Request_mach_port_kernel_object
    )
        - 0usize];
    ["Offset of field: __RequestUnion__mach_port_subsystem::Request_mach_port_insert_member"][::std::mem::offset_of!(
        __RequestUnion__mach_port_subsystem,
        Request_mach_port_insert_member
    )
        - 0usize];
    ["Offset of field: __RequestUnion__mach_port_subsystem::Request_mach_port_extract_member"][::std::mem::offset_of!(
        __RequestUnion__mach_port_subsystem,
        Request_mach_port_extract_member
    )
        - 0usize];
    ["Offset of field: __RequestUnion__mach_port_subsystem::Request_mach_port_get_context"][::std::mem::offset_of!(
        __RequestUnion__mach_port_subsystem,
        Request_mach_port_get_context
    )
        - 0usize];
    ["Offset of field: __RequestUnion__mach_port_subsystem::Request_mach_port_set_context"][::std::mem::offset_of!(
        __RequestUnion__mach_port_subsystem,
        Request_mach_port_set_context
    )
        - 0usize];
    ["Offset of field: __RequestUnion__mach_port_subsystem::Request_mach_port_kobject"][::std::mem::offset_of!(
        __RequestUnion__mach_port_subsystem,
        Request_mach_port_kobject
    ) - 0usize];
    ["Offset of field: __RequestUnion__mach_port_subsystem::Request_mach_port_construct"][::std::mem::offset_of!(
        __RequestUnion__mach_port_subsystem,
        Request_mach_port_construct
    )
        - 0usize];
    ["Offset of field: __RequestUnion__mach_port_subsystem::Request_mach_port_destruct"][::std::mem::offset_of!(
        __RequestUnion__mach_port_subsystem,
        Request_mach_port_destruct
    )
        - 0usize];
    ["Offset of field: __RequestUnion__mach_port_subsystem::Request_mach_port_guard"][::std::mem::offset_of!(
        __RequestUnion__mach_port_subsystem,
        Request_mach_port_guard
    ) - 0usize];
    ["Offset of field: __RequestUnion__mach_port_subsystem::Request_mach_port_unguard"][::std::mem::offset_of!(
        __RequestUnion__mach_port_subsystem,
        Request_mach_port_unguard
    ) - 0usize];
    ["Offset of field: __RequestUnion__mach_port_subsystem::Request_mach_port_space_basic_info"][::std::mem::offset_of!(
        __RequestUnion__mach_port_subsystem,
        Request_mach_port_space_basic_info
    )
        - 0usize];
    ["Offset of field: __RequestUnion__mach_port_subsystem::Request_mach_port_guard_with_flags"][::std::mem::offset_of!(
        __RequestUnion__mach_port_subsystem,
        Request_mach_port_guard_with_flags
    )
        - 0usize];
    ["Offset of field: __RequestUnion__mach_port_subsystem::Request_mach_port_swap_guard"][::std::mem::offset_of!(
        __RequestUnion__mach_port_subsystem,
        Request_mach_port_swap_guard
    )
        - 0usize];
    ["Offset of field: __RequestUnion__mach_port_subsystem::Request_mach_port_kobject_description"] [:: std :: mem :: offset_of ! (__RequestUnion__mach_port_subsystem , Request_mach_port_kobject_description) - 0usize] ;
    ["Offset of field: __RequestUnion__mach_port_subsystem::Request_mach_port_is_connection_for_service"] [:: std :: mem :: offset_of ! (__RequestUnion__mach_port_subsystem , Request_mach_port_is_connection_for_service) - 0usize] ;
    ["Offset of field: __RequestUnion__mach_port_subsystem::Request_mach_port_get_service_port_info"] [:: std :: mem :: offset_of ! (__RequestUnion__mach_port_subsystem , Request_mach_port_get_service_port_info) - 0usize] ;
    ["Offset of field: __RequestUnion__mach_port_subsystem::Request_mach_port_assert_attributes"][::std::mem::offset_of!(
        __RequestUnion__mach_port_subsystem,
        Request_mach_port_assert_attributes
    )
        - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_names_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub names: mach_msg_ool_descriptor_t,
    pub types: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub namesCnt: mach_msg_type_number_t,
    pub typesCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_port_names_t"]
        [::std::mem::size_of::<__Reply__mach_port_names_t>() - 76usize];
    ["Alignment of __Reply__mach_port_names_t"]
        [::std::mem::align_of::<__Reply__mach_port_names_t>() - 4usize];
    ["Offset of field: __Reply__mach_port_names_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_port_names_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_port_names_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__mach_port_names_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__mach_port_names_t::names"]
        [::std::mem::offset_of!(__Reply__mach_port_names_t, names) - 28usize];
    ["Offset of field: __Reply__mach_port_names_t::types"]
        [::std::mem::offset_of!(__Reply__mach_port_names_t, types) - 44usize];
    ["Offset of field: __Reply__mach_port_names_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_port_names_t, NDR) - 60usize];
    ["Offset of field: __Reply__mach_port_names_t::namesCnt"]
        [::std::mem::offset_of!(__Reply__mach_port_names_t, namesCnt) - 68usize];
    ["Offset of field: __Reply__mach_port_names_t::typesCnt"]
        [::std::mem::offset_of!(__Reply__mach_port_names_t, typesCnt) - 72usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_type_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub ptype: mach_port_type_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_port_type_t"]
        [::std::mem::size_of::<__Reply__mach_port_type_t>() - 40usize];
    ["Alignment of __Reply__mach_port_type_t"]
        [::std::mem::align_of::<__Reply__mach_port_type_t>() - 4usize];
    ["Offset of field: __Reply__mach_port_type_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_port_type_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_port_type_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_port_type_t, NDR) - 24usize];
    ["Offset of field: __Reply__mach_port_type_t::RetCode"]
        [::std::mem::offset_of!(__Reply__mach_port_type_t, RetCode) - 32usize];
    ["Offset of field: __Reply__mach_port_type_t::ptype"]
        [::std::mem::offset_of!(__Reply__mach_port_type_t, ptype) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_rename_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_port_rename_t"]
        [::std::mem::size_of::<__Reply__mach_port_rename_t>() - 36usize];
    ["Alignment of __Reply__mach_port_rename_t"]
        [::std::mem::align_of::<__Reply__mach_port_rename_t>() - 4usize];
    ["Offset of field: __Reply__mach_port_rename_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_port_rename_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_port_rename_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_port_rename_t, NDR) - 24usize];
    ["Offset of field: __Reply__mach_port_rename_t::RetCode"]
        [::std::mem::offset_of!(__Reply__mach_port_rename_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_allocate_name_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_port_allocate_name_t"]
        [::std::mem::size_of::<__Reply__mach_port_allocate_name_t>() - 36usize];
    ["Alignment of __Reply__mach_port_allocate_name_t"]
        [::std::mem::align_of::<__Reply__mach_port_allocate_name_t>() - 4usize];
    ["Offset of field: __Reply__mach_port_allocate_name_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_port_allocate_name_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_port_allocate_name_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_port_allocate_name_t, NDR) - 24usize];
    ["Offset of field: __Reply__mach_port_allocate_name_t::RetCode"]
        [::std::mem::offset_of!(__Reply__mach_port_allocate_name_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_allocate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub name: mach_port_name_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_port_allocate_t"]
        [::std::mem::size_of::<__Reply__mach_port_allocate_t>() - 40usize];
    ["Alignment of __Reply__mach_port_allocate_t"]
        [::std::mem::align_of::<__Reply__mach_port_allocate_t>() - 4usize];
    ["Offset of field: __Reply__mach_port_allocate_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_port_allocate_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_port_allocate_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_port_allocate_t, NDR) - 24usize];
    ["Offset of field: __Reply__mach_port_allocate_t::RetCode"]
        [::std::mem::offset_of!(__Reply__mach_port_allocate_t, RetCode) - 32usize];
    ["Offset of field: __Reply__mach_port_allocate_t::name"]
        [::std::mem::offset_of!(__Reply__mach_port_allocate_t, name) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_destroy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_port_destroy_t"]
        [::std::mem::size_of::<__Reply__mach_port_destroy_t>() - 36usize];
    ["Alignment of __Reply__mach_port_destroy_t"]
        [::std::mem::align_of::<__Reply__mach_port_destroy_t>() - 4usize];
    ["Offset of field: __Reply__mach_port_destroy_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_port_destroy_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_port_destroy_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_port_destroy_t, NDR) - 24usize];
    ["Offset of field: __Reply__mach_port_destroy_t::RetCode"]
        [::std::mem::offset_of!(__Reply__mach_port_destroy_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_deallocate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_port_deallocate_t"]
        [::std::mem::size_of::<__Reply__mach_port_deallocate_t>() - 36usize];
    ["Alignment of __Reply__mach_port_deallocate_t"]
        [::std::mem::align_of::<__Reply__mach_port_deallocate_t>() - 4usize];
    ["Offset of field: __Reply__mach_port_deallocate_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_port_deallocate_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_port_deallocate_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_port_deallocate_t, NDR) - 24usize];
    ["Offset of field: __Reply__mach_port_deallocate_t::RetCode"]
        [::std::mem::offset_of!(__Reply__mach_port_deallocate_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_get_refs_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub refs: mach_port_urefs_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_port_get_refs_t"]
        [::std::mem::size_of::<__Reply__mach_port_get_refs_t>() - 40usize];
    ["Alignment of __Reply__mach_port_get_refs_t"]
        [::std::mem::align_of::<__Reply__mach_port_get_refs_t>() - 4usize];
    ["Offset of field: __Reply__mach_port_get_refs_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_port_get_refs_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_port_get_refs_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_port_get_refs_t, NDR) - 24usize];
    ["Offset of field: __Reply__mach_port_get_refs_t::RetCode"]
        [::std::mem::offset_of!(__Reply__mach_port_get_refs_t, RetCode) - 32usize];
    ["Offset of field: __Reply__mach_port_get_refs_t::refs"]
        [::std::mem::offset_of!(__Reply__mach_port_get_refs_t, refs) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_mod_refs_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_port_mod_refs_t"]
        [::std::mem::size_of::<__Reply__mach_port_mod_refs_t>() - 36usize];
    ["Alignment of __Reply__mach_port_mod_refs_t"]
        [::std::mem::align_of::<__Reply__mach_port_mod_refs_t>() - 4usize];
    ["Offset of field: __Reply__mach_port_mod_refs_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_port_mod_refs_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_port_mod_refs_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_port_mod_refs_t, NDR) - 24usize];
    ["Offset of field: __Reply__mach_port_mod_refs_t::RetCode"]
        [::std::mem::offset_of!(__Reply__mach_port_mod_refs_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_peek_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub request_seqnop: mach_port_seqno_t,
    pub msg_sizep: mach_msg_size_t,
    pub msg_idp: mach_msg_id_t,
    pub trailer_infopCnt: mach_msg_type_number_t,
    pub trailer_infop: [::std::os::raw::c_char; 68usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_port_peek_t"]
        [::std::mem::size_of::<__Reply__mach_port_peek_t>() - 120usize];
    ["Alignment of __Reply__mach_port_peek_t"]
        [::std::mem::align_of::<__Reply__mach_port_peek_t>() - 4usize];
    ["Offset of field: __Reply__mach_port_peek_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_port_peek_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_port_peek_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_port_peek_t, NDR) - 24usize];
    ["Offset of field: __Reply__mach_port_peek_t::RetCode"]
        [::std::mem::offset_of!(__Reply__mach_port_peek_t, RetCode) - 32usize];
    ["Offset of field: __Reply__mach_port_peek_t::request_seqnop"]
        [::std::mem::offset_of!(__Reply__mach_port_peek_t, request_seqnop) - 36usize];
    ["Offset of field: __Reply__mach_port_peek_t::msg_sizep"]
        [::std::mem::offset_of!(__Reply__mach_port_peek_t, msg_sizep) - 40usize];
    ["Offset of field: __Reply__mach_port_peek_t::msg_idp"]
        [::std::mem::offset_of!(__Reply__mach_port_peek_t, msg_idp) - 44usize];
    ["Offset of field: __Reply__mach_port_peek_t::trailer_infopCnt"]
        [::std::mem::offset_of!(__Reply__mach_port_peek_t, trailer_infopCnt) - 48usize];
    ["Offset of field: __Reply__mach_port_peek_t::trailer_infop"]
        [::std::mem::offset_of!(__Reply__mach_port_peek_t, trailer_infop) - 52usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_set_mscount_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_port_set_mscount_t"]
        [::std::mem::size_of::<__Reply__mach_port_set_mscount_t>() - 36usize];
    ["Alignment of __Reply__mach_port_set_mscount_t"]
        [::std::mem::align_of::<__Reply__mach_port_set_mscount_t>() - 4usize];
    ["Offset of field: __Reply__mach_port_set_mscount_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_port_set_mscount_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_port_set_mscount_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_port_set_mscount_t, NDR) - 24usize];
    ["Offset of field: __Reply__mach_port_set_mscount_t::RetCode"]
        [::std::mem::offset_of!(__Reply__mach_port_set_mscount_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_get_set_status_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub members: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub membersCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_port_get_set_status_t"]
        [::std::mem::size_of::<__Reply__mach_port_get_set_status_t>() - 56usize];
    ["Alignment of __Reply__mach_port_get_set_status_t"]
        [::std::mem::align_of::<__Reply__mach_port_get_set_status_t>() - 4usize];
    ["Offset of field: __Reply__mach_port_get_set_status_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_port_get_set_status_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_port_get_set_status_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__mach_port_get_set_status_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__mach_port_get_set_status_t::members"]
        [::std::mem::offset_of!(__Reply__mach_port_get_set_status_t, members) - 28usize];
    ["Offset of field: __Reply__mach_port_get_set_status_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_port_get_set_status_t, NDR) - 44usize];
    ["Offset of field: __Reply__mach_port_get_set_status_t::membersCnt"]
        [::std::mem::offset_of!(__Reply__mach_port_get_set_status_t, membersCnt) - 52usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_move_member_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_port_move_member_t"]
        [::std::mem::size_of::<__Reply__mach_port_move_member_t>() - 36usize];
    ["Alignment of __Reply__mach_port_move_member_t"]
        [::std::mem::align_of::<__Reply__mach_port_move_member_t>() - 4usize];
    ["Offset of field: __Reply__mach_port_move_member_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_port_move_member_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_port_move_member_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_port_move_member_t, NDR) - 24usize];
    ["Offset of field: __Reply__mach_port_move_member_t::RetCode"]
        [::std::mem::offset_of!(__Reply__mach_port_move_member_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_request_notification_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub previous: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_port_request_notification_t"]
        [::std::mem::size_of::<__Reply__mach_port_request_notification_t>() - 40usize];
    ["Alignment of __Reply__mach_port_request_notification_t"]
        [::std::mem::align_of::<__Reply__mach_port_request_notification_t>() - 4usize];
    ["Offset of field: __Reply__mach_port_request_notification_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_port_request_notification_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_port_request_notification_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__mach_port_request_notification_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__mach_port_request_notification_t::previous"]
        [::std::mem::offset_of!(__Reply__mach_port_request_notification_t, previous) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_insert_right_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_port_insert_right_t"]
        [::std::mem::size_of::<__Reply__mach_port_insert_right_t>() - 36usize];
    ["Alignment of __Reply__mach_port_insert_right_t"]
        [::std::mem::align_of::<__Reply__mach_port_insert_right_t>() - 4usize];
    ["Offset of field: __Reply__mach_port_insert_right_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_port_insert_right_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_port_insert_right_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_port_insert_right_t, NDR) - 24usize];
    ["Offset of field: __Reply__mach_port_insert_right_t::RetCode"]
        [::std::mem::offset_of!(__Reply__mach_port_insert_right_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_extract_right_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub poly: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_port_extract_right_t"]
        [::std::mem::size_of::<__Reply__mach_port_extract_right_t>() - 40usize];
    ["Alignment of __Reply__mach_port_extract_right_t"]
        [::std::mem::align_of::<__Reply__mach_port_extract_right_t>() - 4usize];
    ["Offset of field: __Reply__mach_port_extract_right_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_port_extract_right_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_port_extract_right_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__mach_port_extract_right_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__mach_port_extract_right_t::poly"]
        [::std::mem::offset_of!(__Reply__mach_port_extract_right_t, poly) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_set_seqno_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_port_set_seqno_t"]
        [::std::mem::size_of::<__Reply__mach_port_set_seqno_t>() - 36usize];
    ["Alignment of __Reply__mach_port_set_seqno_t"]
        [::std::mem::align_of::<__Reply__mach_port_set_seqno_t>() - 4usize];
    ["Offset of field: __Reply__mach_port_set_seqno_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_port_set_seqno_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_port_set_seqno_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_port_set_seqno_t, NDR) - 24usize];
    ["Offset of field: __Reply__mach_port_set_seqno_t::RetCode"]
        [::std::mem::offset_of!(__Reply__mach_port_set_seqno_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_get_attributes_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub port_info_outCnt: mach_msg_type_number_t,
    pub port_info_out: [integer_t; 17usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_port_get_attributes_t"]
        [::std::mem::size_of::<__Reply__mach_port_get_attributes_t>() - 108usize];
    ["Alignment of __Reply__mach_port_get_attributes_t"]
        [::std::mem::align_of::<__Reply__mach_port_get_attributes_t>() - 4usize];
    ["Offset of field: __Reply__mach_port_get_attributes_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_port_get_attributes_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_port_get_attributes_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_port_get_attributes_t, NDR) - 24usize];
    ["Offset of field: __Reply__mach_port_get_attributes_t::RetCode"]
        [::std::mem::offset_of!(__Reply__mach_port_get_attributes_t, RetCode) - 32usize];
    ["Offset of field: __Reply__mach_port_get_attributes_t::port_info_outCnt"]
        [::std::mem::offset_of!(__Reply__mach_port_get_attributes_t, port_info_outCnt) - 36usize];
    ["Offset of field: __Reply__mach_port_get_attributes_t::port_info_out"]
        [::std::mem::offset_of!(__Reply__mach_port_get_attributes_t, port_info_out) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_set_attributes_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_port_set_attributes_t"]
        [::std::mem::size_of::<__Reply__mach_port_set_attributes_t>() - 36usize];
    ["Alignment of __Reply__mach_port_set_attributes_t"]
        [::std::mem::align_of::<__Reply__mach_port_set_attributes_t>() - 4usize];
    ["Offset of field: __Reply__mach_port_set_attributes_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_port_set_attributes_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_port_set_attributes_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_port_set_attributes_t, NDR) - 24usize];
    ["Offset of field: __Reply__mach_port_set_attributes_t::RetCode"]
        [::std::mem::offset_of!(__Reply__mach_port_set_attributes_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_allocate_qos_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub qos: mach_port_qos_t,
    pub name: mach_port_name_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_port_allocate_qos_t"]
        [::std::mem::size_of::<__Reply__mach_port_allocate_qos_t>() - 48usize];
    ["Alignment of __Reply__mach_port_allocate_qos_t"]
        [::std::mem::align_of::<__Reply__mach_port_allocate_qos_t>() - 4usize];
    ["Offset of field: __Reply__mach_port_allocate_qos_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_port_allocate_qos_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_port_allocate_qos_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_port_allocate_qos_t, NDR) - 24usize];
    ["Offset of field: __Reply__mach_port_allocate_qos_t::RetCode"]
        [::std::mem::offset_of!(__Reply__mach_port_allocate_qos_t, RetCode) - 32usize];
    ["Offset of field: __Reply__mach_port_allocate_qos_t::qos"]
        [::std::mem::offset_of!(__Reply__mach_port_allocate_qos_t, qos) - 36usize];
    ["Offset of field: __Reply__mach_port_allocate_qos_t::name"]
        [::std::mem::offset_of!(__Reply__mach_port_allocate_qos_t, name) - 44usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_allocate_full_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub qos: mach_port_qos_t,
    pub name: mach_port_name_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_port_allocate_full_t"]
        [::std::mem::size_of::<__Reply__mach_port_allocate_full_t>() - 48usize];
    ["Alignment of __Reply__mach_port_allocate_full_t"]
        [::std::mem::align_of::<__Reply__mach_port_allocate_full_t>() - 4usize];
    ["Offset of field: __Reply__mach_port_allocate_full_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_port_allocate_full_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_port_allocate_full_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_port_allocate_full_t, NDR) - 24usize];
    ["Offset of field: __Reply__mach_port_allocate_full_t::RetCode"]
        [::std::mem::offset_of!(__Reply__mach_port_allocate_full_t, RetCode) - 32usize];
    ["Offset of field: __Reply__mach_port_allocate_full_t::qos"]
        [::std::mem::offset_of!(__Reply__mach_port_allocate_full_t, qos) - 36usize];
    ["Offset of field: __Reply__mach_port_allocate_full_t::name"]
        [::std::mem::offset_of!(__Reply__mach_port_allocate_full_t, name) - 44usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_set_port_space_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_set_port_space_t"]
        [::std::mem::size_of::<__Reply__task_set_port_space_t>() - 36usize];
    ["Alignment of __Reply__task_set_port_space_t"]
        [::std::mem::align_of::<__Reply__task_set_port_space_t>() - 4usize];
    ["Offset of field: __Reply__task_set_port_space_t::Head"]
        [::std::mem::offset_of!(__Reply__task_set_port_space_t, Head) - 0usize];
    ["Offset of field: __Reply__task_set_port_space_t::NDR"]
        [::std::mem::offset_of!(__Reply__task_set_port_space_t, NDR) - 24usize];
    ["Offset of field: __Reply__task_set_port_space_t::RetCode"]
        [::std::mem::offset_of!(__Reply__task_set_port_space_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_get_srights_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub srights: mach_port_rights_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_port_get_srights_t"]
        [::std::mem::size_of::<__Reply__mach_port_get_srights_t>() - 40usize];
    ["Alignment of __Reply__mach_port_get_srights_t"]
        [::std::mem::align_of::<__Reply__mach_port_get_srights_t>() - 4usize];
    ["Offset of field: __Reply__mach_port_get_srights_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_port_get_srights_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_port_get_srights_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_port_get_srights_t, NDR) - 24usize];
    ["Offset of field: __Reply__mach_port_get_srights_t::RetCode"]
        [::std::mem::offset_of!(__Reply__mach_port_get_srights_t, RetCode) - 32usize];
    ["Offset of field: __Reply__mach_port_get_srights_t::srights"]
        [::std::mem::offset_of!(__Reply__mach_port_get_srights_t, srights) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_space_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub table_info: mach_msg_ool_descriptor_t,
    pub tree_info: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub space_info: ipc_info_space_t,
    pub table_infoCnt: mach_msg_type_number_t,
    pub tree_infoCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_port_space_info_t"]
        [::std::mem::size_of::<__Reply__mach_port_space_info_t>() - 100usize];
    ["Alignment of __Reply__mach_port_space_info_t"]
        [::std::mem::align_of::<__Reply__mach_port_space_info_t>() - 4usize];
    ["Offset of field: __Reply__mach_port_space_info_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_port_space_info_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_port_space_info_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__mach_port_space_info_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__mach_port_space_info_t::table_info"]
        [::std::mem::offset_of!(__Reply__mach_port_space_info_t, table_info) - 28usize];
    ["Offset of field: __Reply__mach_port_space_info_t::tree_info"]
        [::std::mem::offset_of!(__Reply__mach_port_space_info_t, tree_info) - 44usize];
    ["Offset of field: __Reply__mach_port_space_info_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_port_space_info_t, NDR) - 60usize];
    ["Offset of field: __Reply__mach_port_space_info_t::space_info"]
        [::std::mem::offset_of!(__Reply__mach_port_space_info_t, space_info) - 68usize];
    ["Offset of field: __Reply__mach_port_space_info_t::table_infoCnt"]
        [::std::mem::offset_of!(__Reply__mach_port_space_info_t, table_infoCnt) - 92usize];
    ["Offset of field: __Reply__mach_port_space_info_t::tree_infoCnt"]
        [::std::mem::offset_of!(__Reply__mach_port_space_info_t, tree_infoCnt) - 96usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_dnrequest_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub dnr_total: ::std::os::raw::c_uint,
    pub dnr_used: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_port_dnrequest_info_t"]
        [::std::mem::size_of::<__Reply__mach_port_dnrequest_info_t>() - 44usize];
    ["Alignment of __Reply__mach_port_dnrequest_info_t"]
        [::std::mem::align_of::<__Reply__mach_port_dnrequest_info_t>() - 4usize];
    ["Offset of field: __Reply__mach_port_dnrequest_info_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_port_dnrequest_info_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_port_dnrequest_info_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_port_dnrequest_info_t, NDR) - 24usize];
    ["Offset of field: __Reply__mach_port_dnrequest_info_t::RetCode"]
        [::std::mem::offset_of!(__Reply__mach_port_dnrequest_info_t, RetCode) - 32usize];
    ["Offset of field: __Reply__mach_port_dnrequest_info_t::dnr_total"]
        [::std::mem::offset_of!(__Reply__mach_port_dnrequest_info_t, dnr_total) - 36usize];
    ["Offset of field: __Reply__mach_port_dnrequest_info_t::dnr_used"]
        [::std::mem::offset_of!(__Reply__mach_port_dnrequest_info_t, dnr_used) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_kernel_object_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub object_type: ::std::os::raw::c_uint,
    pub object_addr: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_port_kernel_object_t"]
        [::std::mem::size_of::<__Reply__mach_port_kernel_object_t>() - 44usize];
    ["Alignment of __Reply__mach_port_kernel_object_t"]
        [::std::mem::align_of::<__Reply__mach_port_kernel_object_t>() - 4usize];
    ["Offset of field: __Reply__mach_port_kernel_object_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_port_kernel_object_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_port_kernel_object_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_port_kernel_object_t, NDR) - 24usize];
    ["Offset of field: __Reply__mach_port_kernel_object_t::RetCode"]
        [::std::mem::offset_of!(__Reply__mach_port_kernel_object_t, RetCode) - 32usize];
    ["Offset of field: __Reply__mach_port_kernel_object_t::object_type"]
        [::std::mem::offset_of!(__Reply__mach_port_kernel_object_t, object_type) - 36usize];
    ["Offset of field: __Reply__mach_port_kernel_object_t::object_addr"]
        [::std::mem::offset_of!(__Reply__mach_port_kernel_object_t, object_addr) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_insert_member_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_port_insert_member_t"]
        [::std::mem::size_of::<__Reply__mach_port_insert_member_t>() - 36usize];
    ["Alignment of __Reply__mach_port_insert_member_t"]
        [::std::mem::align_of::<__Reply__mach_port_insert_member_t>() - 4usize];
    ["Offset of field: __Reply__mach_port_insert_member_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_port_insert_member_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_port_insert_member_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_port_insert_member_t, NDR) - 24usize];
    ["Offset of field: __Reply__mach_port_insert_member_t::RetCode"]
        [::std::mem::offset_of!(__Reply__mach_port_insert_member_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_extract_member_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_port_extract_member_t"]
        [::std::mem::size_of::<__Reply__mach_port_extract_member_t>() - 36usize];
    ["Alignment of __Reply__mach_port_extract_member_t"]
        [::std::mem::align_of::<__Reply__mach_port_extract_member_t>() - 4usize];
    ["Offset of field: __Reply__mach_port_extract_member_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_port_extract_member_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_port_extract_member_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_port_extract_member_t, NDR) - 24usize];
    ["Offset of field: __Reply__mach_port_extract_member_t::RetCode"]
        [::std::mem::offset_of!(__Reply__mach_port_extract_member_t, RetCode) - 32usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_get_context_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub context: mach_port_context_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_port_get_context_t"]
        [::std::mem::size_of::<__Reply__mach_port_get_context_t>() - 44usize];
    ["Alignment of __Reply__mach_port_get_context_t"]
        [::std::mem::align_of::<__Reply__mach_port_get_context_t>() - 4usize];
    ["Offset of field: __Reply__mach_port_get_context_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_port_get_context_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_port_get_context_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_port_get_context_t, NDR) - 24usize];
    ["Offset of field: __Reply__mach_port_get_context_t::RetCode"]
        [::std::mem::offset_of!(__Reply__mach_port_get_context_t, RetCode) - 32usize];
    ["Offset of field: __Reply__mach_port_get_context_t::context"]
        [::std::mem::offset_of!(__Reply__mach_port_get_context_t, context) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_set_context_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_port_set_context_t"]
        [::std::mem::size_of::<__Reply__mach_port_set_context_t>() - 36usize];
    ["Alignment of __Reply__mach_port_set_context_t"]
        [::std::mem::align_of::<__Reply__mach_port_set_context_t>() - 4usize];
    ["Offset of field: __Reply__mach_port_set_context_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_port_set_context_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_port_set_context_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_port_set_context_t, NDR) - 24usize];
    ["Offset of field: __Reply__mach_port_set_context_t::RetCode"]
        [::std::mem::offset_of!(__Reply__mach_port_set_context_t, RetCode) - 32usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_kobject_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub object_type: natural_t,
    pub object_addr: mach_vm_address_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_port_kobject_t"]
        [::std::mem::size_of::<__Reply__mach_port_kobject_t>() - 48usize];
    ["Alignment of __Reply__mach_port_kobject_t"]
        [::std::mem::align_of::<__Reply__mach_port_kobject_t>() - 4usize];
    ["Offset of field: __Reply__mach_port_kobject_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_port_kobject_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_port_kobject_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_port_kobject_t, NDR) - 24usize];
    ["Offset of field: __Reply__mach_port_kobject_t::RetCode"]
        [::std::mem::offset_of!(__Reply__mach_port_kobject_t, RetCode) - 32usize];
    ["Offset of field: __Reply__mach_port_kobject_t::object_type"]
        [::std::mem::offset_of!(__Reply__mach_port_kobject_t, object_type) - 36usize];
    ["Offset of field: __Reply__mach_port_kobject_t::object_addr"]
        [::std::mem::offset_of!(__Reply__mach_port_kobject_t, object_addr) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_construct_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub name: mach_port_name_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_port_construct_t"]
        [::std::mem::size_of::<__Reply__mach_port_construct_t>() - 40usize];
    ["Alignment of __Reply__mach_port_construct_t"]
        [::std::mem::align_of::<__Reply__mach_port_construct_t>() - 4usize];
    ["Offset of field: __Reply__mach_port_construct_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_port_construct_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_port_construct_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_port_construct_t, NDR) - 24usize];
    ["Offset of field: __Reply__mach_port_construct_t::RetCode"]
        [::std::mem::offset_of!(__Reply__mach_port_construct_t, RetCode) - 32usize];
    ["Offset of field: __Reply__mach_port_construct_t::name"]
        [::std::mem::offset_of!(__Reply__mach_port_construct_t, name) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_destruct_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_port_destruct_t"]
        [::std::mem::size_of::<__Reply__mach_port_destruct_t>() - 36usize];
    ["Alignment of __Reply__mach_port_destruct_t"]
        [::std::mem::align_of::<__Reply__mach_port_destruct_t>() - 4usize];
    ["Offset of field: __Reply__mach_port_destruct_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_port_destruct_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_port_destruct_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_port_destruct_t, NDR) - 24usize];
    ["Offset of field: __Reply__mach_port_destruct_t::RetCode"]
        [::std::mem::offset_of!(__Reply__mach_port_destruct_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_guard_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_port_guard_t"]
        [::std::mem::size_of::<__Reply__mach_port_guard_t>() - 36usize];
    ["Alignment of __Reply__mach_port_guard_t"]
        [::std::mem::align_of::<__Reply__mach_port_guard_t>() - 4usize];
    ["Offset of field: __Reply__mach_port_guard_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_port_guard_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_port_guard_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_port_guard_t, NDR) - 24usize];
    ["Offset of field: __Reply__mach_port_guard_t::RetCode"]
        [::std::mem::offset_of!(__Reply__mach_port_guard_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_unguard_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_port_unguard_t"]
        [::std::mem::size_of::<__Reply__mach_port_unguard_t>() - 36usize];
    ["Alignment of __Reply__mach_port_unguard_t"]
        [::std::mem::align_of::<__Reply__mach_port_unguard_t>() - 4usize];
    ["Offset of field: __Reply__mach_port_unguard_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_port_unguard_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_port_unguard_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_port_unguard_t, NDR) - 24usize];
    ["Offset of field: __Reply__mach_port_unguard_t::RetCode"]
        [::std::mem::offset_of!(__Reply__mach_port_unguard_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_space_basic_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub basic_info: ipc_info_space_basic_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_port_space_basic_info_t"]
        [::std::mem::size_of::<__Reply__mach_port_space_basic_info_t>() - 60usize];
    ["Alignment of __Reply__mach_port_space_basic_info_t"]
        [::std::mem::align_of::<__Reply__mach_port_space_basic_info_t>() - 4usize];
    ["Offset of field: __Reply__mach_port_space_basic_info_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_port_space_basic_info_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_port_space_basic_info_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_port_space_basic_info_t, NDR) - 24usize];
    ["Offset of field: __Reply__mach_port_space_basic_info_t::RetCode"]
        [::std::mem::offset_of!(__Reply__mach_port_space_basic_info_t, RetCode) - 32usize];
    ["Offset of field: __Reply__mach_port_space_basic_info_t::basic_info"]
        [::std::mem::offset_of!(__Reply__mach_port_space_basic_info_t, basic_info) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_guard_with_flags_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_port_guard_with_flags_t"]
        [::std::mem::size_of::<__Reply__mach_port_guard_with_flags_t>() - 36usize];
    ["Alignment of __Reply__mach_port_guard_with_flags_t"]
        [::std::mem::align_of::<__Reply__mach_port_guard_with_flags_t>() - 4usize];
    ["Offset of field: __Reply__mach_port_guard_with_flags_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_port_guard_with_flags_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_port_guard_with_flags_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_port_guard_with_flags_t, NDR) - 24usize];
    ["Offset of field: __Reply__mach_port_guard_with_flags_t::RetCode"]
        [::std::mem::offset_of!(__Reply__mach_port_guard_with_flags_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_swap_guard_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_port_swap_guard_t"]
        [::std::mem::size_of::<__Reply__mach_port_swap_guard_t>() - 36usize];
    ["Alignment of __Reply__mach_port_swap_guard_t"]
        [::std::mem::align_of::<__Reply__mach_port_swap_guard_t>() - 4usize];
    ["Offset of field: __Reply__mach_port_swap_guard_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_port_swap_guard_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_port_swap_guard_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_port_swap_guard_t, NDR) - 24usize];
    ["Offset of field: __Reply__mach_port_swap_guard_t::RetCode"]
        [::std::mem::offset_of!(__Reply__mach_port_swap_guard_t, RetCode) - 32usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_kobject_description_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub object_type: natural_t,
    pub object_addr: mach_vm_address_t,
    pub descriptionOffset: mach_msg_type_number_t,
    pub descriptionCnt: mach_msg_type_number_t,
    pub description: [::std::os::raw::c_char; 512usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_port_kobject_description_t"]
        [::std::mem::size_of::<__Reply__mach_port_kobject_description_t>() - 568usize];
    ["Alignment of __Reply__mach_port_kobject_description_t"]
        [::std::mem::align_of::<__Reply__mach_port_kobject_description_t>() - 4usize];
    ["Offset of field: __Reply__mach_port_kobject_description_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_port_kobject_description_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_port_kobject_description_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_port_kobject_description_t, NDR) - 24usize];
    ["Offset of field: __Reply__mach_port_kobject_description_t::RetCode"]
        [::std::mem::offset_of!(__Reply__mach_port_kobject_description_t, RetCode) - 32usize];
    ["Offset of field: __Reply__mach_port_kobject_description_t::object_type"]
        [::std::mem::offset_of!(__Reply__mach_port_kobject_description_t, object_type) - 36usize];
    ["Offset of field: __Reply__mach_port_kobject_description_t::object_addr"]
        [::std::mem::offset_of!(__Reply__mach_port_kobject_description_t, object_addr) - 40usize];
    ["Offset of field: __Reply__mach_port_kobject_description_t::descriptionOffset"][::std::mem::offset_of!(
        __Reply__mach_port_kobject_description_t,
        descriptionOffset
    ) - 48usize];
    ["Offset of field: __Reply__mach_port_kobject_description_t::descriptionCnt"][::std::mem::offset_of!(
        __Reply__mach_port_kobject_description_t,
        descriptionCnt
    ) - 52usize];
    ["Offset of field: __Reply__mach_port_kobject_description_t::description"]
        [::std::mem::offset_of!(__Reply__mach_port_kobject_description_t, description) - 56usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_is_connection_for_service_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub filter_policy_id: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_port_is_connection_for_service_t"]
        [::std::mem::size_of::<__Reply__mach_port_is_connection_for_service_t>() - 44usize];
    ["Alignment of __Reply__mach_port_is_connection_for_service_t"]
        [::std::mem::align_of::<__Reply__mach_port_is_connection_for_service_t>() - 4usize];
    ["Offset of field: __Reply__mach_port_is_connection_for_service_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_port_is_connection_for_service_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_port_is_connection_for_service_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_port_is_connection_for_service_t, NDR) - 24usize];
    ["Offset of field: __Reply__mach_port_is_connection_for_service_t::RetCode"]
        [::std::mem::offset_of!(__Reply__mach_port_is_connection_for_service_t, RetCode) - 32usize];
    ["Offset of field: __Reply__mach_port_is_connection_for_service_t::filter_policy_id"][::std::mem::offset_of!(
        __Reply__mach_port_is_connection_for_service_t,
        filter_policy_id
    )
        - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_get_service_port_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub sp_info_out: mach_service_port_info_data_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_port_get_service_port_info_t"]
        [::std::mem::size_of::<__Reply__mach_port_get_service_port_info_t>() - 292usize];
    ["Alignment of __Reply__mach_port_get_service_port_info_t"]
        [::std::mem::align_of::<__Reply__mach_port_get_service_port_info_t>() - 4usize];
    ["Offset of field: __Reply__mach_port_get_service_port_info_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_port_get_service_port_info_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_port_get_service_port_info_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_port_get_service_port_info_t, NDR) - 24usize];
    ["Offset of field: __Reply__mach_port_get_service_port_info_t::RetCode"]
        [::std::mem::offset_of!(__Reply__mach_port_get_service_port_info_t, RetCode) - 32usize];
    ["Offset of field: __Reply__mach_port_get_service_port_info_t::sp_info_out"]
        [::std::mem::offset_of!(__Reply__mach_port_get_service_port_info_t, sp_info_out) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_assert_attributes_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_port_assert_attributes_t"]
        [::std::mem::size_of::<__Reply__mach_port_assert_attributes_t>() - 36usize];
    ["Alignment of __Reply__mach_port_assert_attributes_t"]
        [::std::mem::align_of::<__Reply__mach_port_assert_attributes_t>() - 4usize];
    ["Offset of field: __Reply__mach_port_assert_attributes_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_port_assert_attributes_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_port_assert_attributes_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_port_assert_attributes_t, NDR) - 24usize];
    ["Offset of field: __Reply__mach_port_assert_attributes_t::RetCode"]
        [::std::mem::offset_of!(__Reply__mach_port_assert_attributes_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__mach_port_subsystem {
    pub Reply_mach_port_names: __Reply__mach_port_names_t,
    pub Reply_mach_port_type: __Reply__mach_port_type_t,
    pub Reply_mach_port_rename: __Reply__mach_port_rename_t,
    pub Reply_mach_port_allocate_name: __Reply__mach_port_allocate_name_t,
    pub Reply_mach_port_allocate: __Reply__mach_port_allocate_t,
    pub Reply_mach_port_destroy: __Reply__mach_port_destroy_t,
    pub Reply_mach_port_deallocate: __Reply__mach_port_deallocate_t,
    pub Reply_mach_port_get_refs: __Reply__mach_port_get_refs_t,
    pub Reply_mach_port_mod_refs: __Reply__mach_port_mod_refs_t,
    pub Reply_mach_port_peek: __Reply__mach_port_peek_t,
    pub Reply_mach_port_set_mscount: __Reply__mach_port_set_mscount_t,
    pub Reply_mach_port_get_set_status: __Reply__mach_port_get_set_status_t,
    pub Reply_mach_port_move_member: __Reply__mach_port_move_member_t,
    pub Reply_mach_port_request_notification: __Reply__mach_port_request_notification_t,
    pub Reply_mach_port_insert_right: __Reply__mach_port_insert_right_t,
    pub Reply_mach_port_extract_right: __Reply__mach_port_extract_right_t,
    pub Reply_mach_port_set_seqno: __Reply__mach_port_set_seqno_t,
    pub Reply_mach_port_get_attributes: __Reply__mach_port_get_attributes_t,
    pub Reply_mach_port_set_attributes: __Reply__mach_port_set_attributes_t,
    pub Reply_mach_port_allocate_qos: __Reply__mach_port_allocate_qos_t,
    pub Reply_mach_port_allocate_full: __Reply__mach_port_allocate_full_t,
    pub Reply_task_set_port_space: __Reply__task_set_port_space_t,
    pub Reply_mach_port_get_srights: __Reply__mach_port_get_srights_t,
    pub Reply_mach_port_space_info: __Reply__mach_port_space_info_t,
    pub Reply_mach_port_dnrequest_info: __Reply__mach_port_dnrequest_info_t,
    pub Reply_mach_port_kernel_object: __Reply__mach_port_kernel_object_t,
    pub Reply_mach_port_insert_member: __Reply__mach_port_insert_member_t,
    pub Reply_mach_port_extract_member: __Reply__mach_port_extract_member_t,
    pub Reply_mach_port_get_context: __Reply__mach_port_get_context_t,
    pub Reply_mach_port_set_context: __Reply__mach_port_set_context_t,
    pub Reply_mach_port_kobject: __Reply__mach_port_kobject_t,
    pub Reply_mach_port_construct: __Reply__mach_port_construct_t,
    pub Reply_mach_port_destruct: __Reply__mach_port_destruct_t,
    pub Reply_mach_port_guard: __Reply__mach_port_guard_t,
    pub Reply_mach_port_unguard: __Reply__mach_port_unguard_t,
    pub Reply_mach_port_space_basic_info: __Reply__mach_port_space_basic_info_t,
    pub Reply_mach_port_guard_with_flags: __Reply__mach_port_guard_with_flags_t,
    pub Reply_mach_port_swap_guard: __Reply__mach_port_swap_guard_t,
    pub Reply_mach_port_kobject_description: __Reply__mach_port_kobject_description_t,
    pub Reply_mach_port_is_connection_for_service: __Reply__mach_port_is_connection_for_service_t,
    pub Reply_mach_port_get_service_port_info: __Reply__mach_port_get_service_port_info_t,
    pub Reply_mach_port_assert_attributes: __Reply__mach_port_assert_attributes_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __ReplyUnion__mach_port_subsystem"]
        [::std::mem::size_of::<__ReplyUnion__mach_port_subsystem>() - 568usize];
    ["Alignment of __ReplyUnion__mach_port_subsystem"]
        [::std::mem::align_of::<__ReplyUnion__mach_port_subsystem>() - 4usize];
    ["Offset of field: __ReplyUnion__mach_port_subsystem::Reply_mach_port_names"]
        [::std::mem::offset_of!(__ReplyUnion__mach_port_subsystem, Reply_mach_port_names) - 0usize];
    ["Offset of field: __ReplyUnion__mach_port_subsystem::Reply_mach_port_type"]
        [::std::mem::offset_of!(__ReplyUnion__mach_port_subsystem, Reply_mach_port_type) - 0usize];
    ["Offset of field: __ReplyUnion__mach_port_subsystem::Reply_mach_port_rename"][::std::mem::offset_of!(
        __ReplyUnion__mach_port_subsystem,
        Reply_mach_port_rename
    ) - 0usize];
    ["Offset of field: __ReplyUnion__mach_port_subsystem::Reply_mach_port_allocate_name"][::std::mem::offset_of!(
        __ReplyUnion__mach_port_subsystem,
        Reply_mach_port_allocate_name
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__mach_port_subsystem::Reply_mach_port_allocate"][::std::mem::offset_of!(
        __ReplyUnion__mach_port_subsystem,
        Reply_mach_port_allocate
    ) - 0usize];
    ["Offset of field: __ReplyUnion__mach_port_subsystem::Reply_mach_port_destroy"][::std::mem::offset_of!(
        __ReplyUnion__mach_port_subsystem,
        Reply_mach_port_destroy
    ) - 0usize];
    ["Offset of field: __ReplyUnion__mach_port_subsystem::Reply_mach_port_deallocate"][::std::mem::offset_of!(
        __ReplyUnion__mach_port_subsystem,
        Reply_mach_port_deallocate
    ) - 0usize];
    ["Offset of field: __ReplyUnion__mach_port_subsystem::Reply_mach_port_get_refs"][::std::mem::offset_of!(
        __ReplyUnion__mach_port_subsystem,
        Reply_mach_port_get_refs
    ) - 0usize];
    ["Offset of field: __ReplyUnion__mach_port_subsystem::Reply_mach_port_mod_refs"][::std::mem::offset_of!(
        __ReplyUnion__mach_port_subsystem,
        Reply_mach_port_mod_refs
    ) - 0usize];
    ["Offset of field: __ReplyUnion__mach_port_subsystem::Reply_mach_port_peek"]
        [::std::mem::offset_of!(__ReplyUnion__mach_port_subsystem, Reply_mach_port_peek) - 0usize];
    ["Offset of field: __ReplyUnion__mach_port_subsystem::Reply_mach_port_set_mscount"][::std::mem::offset_of!(
        __ReplyUnion__mach_port_subsystem,
        Reply_mach_port_set_mscount
    ) - 0usize];
    ["Offset of field: __ReplyUnion__mach_port_subsystem::Reply_mach_port_get_set_status"][::std::mem::offset_of!(
        __ReplyUnion__mach_port_subsystem,
        Reply_mach_port_get_set_status
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__mach_port_subsystem::Reply_mach_port_move_member"][::std::mem::offset_of!(
        __ReplyUnion__mach_port_subsystem,
        Reply_mach_port_move_member
    ) - 0usize];
    ["Offset of field: __ReplyUnion__mach_port_subsystem::Reply_mach_port_request_notification"][::std::mem::offset_of!(
        __ReplyUnion__mach_port_subsystem,
        Reply_mach_port_request_notification
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__mach_port_subsystem::Reply_mach_port_insert_right"][::std::mem::offset_of!(
        __ReplyUnion__mach_port_subsystem,
        Reply_mach_port_insert_right
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__mach_port_subsystem::Reply_mach_port_extract_right"][::std::mem::offset_of!(
        __ReplyUnion__mach_port_subsystem,
        Reply_mach_port_extract_right
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__mach_port_subsystem::Reply_mach_port_set_seqno"][::std::mem::offset_of!(
        __ReplyUnion__mach_port_subsystem,
        Reply_mach_port_set_seqno
    ) - 0usize];
    ["Offset of field: __ReplyUnion__mach_port_subsystem::Reply_mach_port_get_attributes"][::std::mem::offset_of!(
        __ReplyUnion__mach_port_subsystem,
        Reply_mach_port_get_attributes
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__mach_port_subsystem::Reply_mach_port_set_attributes"][::std::mem::offset_of!(
        __ReplyUnion__mach_port_subsystem,
        Reply_mach_port_set_attributes
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__mach_port_subsystem::Reply_mach_port_allocate_qos"][::std::mem::offset_of!(
        __ReplyUnion__mach_port_subsystem,
        Reply_mach_port_allocate_qos
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__mach_port_subsystem::Reply_mach_port_allocate_full"][::std::mem::offset_of!(
        __ReplyUnion__mach_port_subsystem,
        Reply_mach_port_allocate_full
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__mach_port_subsystem::Reply_task_set_port_space"][::std::mem::offset_of!(
        __ReplyUnion__mach_port_subsystem,
        Reply_task_set_port_space
    ) - 0usize];
    ["Offset of field: __ReplyUnion__mach_port_subsystem::Reply_mach_port_get_srights"][::std::mem::offset_of!(
        __ReplyUnion__mach_port_subsystem,
        Reply_mach_port_get_srights
    ) - 0usize];
    ["Offset of field: __ReplyUnion__mach_port_subsystem::Reply_mach_port_space_info"][::std::mem::offset_of!(
        __ReplyUnion__mach_port_subsystem,
        Reply_mach_port_space_info
    ) - 0usize];
    ["Offset of field: __ReplyUnion__mach_port_subsystem::Reply_mach_port_dnrequest_info"][::std::mem::offset_of!(
        __ReplyUnion__mach_port_subsystem,
        Reply_mach_port_dnrequest_info
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__mach_port_subsystem::Reply_mach_port_kernel_object"][::std::mem::offset_of!(
        __ReplyUnion__mach_port_subsystem,
        Reply_mach_port_kernel_object
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__mach_port_subsystem::Reply_mach_port_insert_member"][::std::mem::offset_of!(
        __ReplyUnion__mach_port_subsystem,
        Reply_mach_port_insert_member
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__mach_port_subsystem::Reply_mach_port_extract_member"][::std::mem::offset_of!(
        __ReplyUnion__mach_port_subsystem,
        Reply_mach_port_extract_member
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__mach_port_subsystem::Reply_mach_port_get_context"][::std::mem::offset_of!(
        __ReplyUnion__mach_port_subsystem,
        Reply_mach_port_get_context
    ) - 0usize];
    ["Offset of field: __ReplyUnion__mach_port_subsystem::Reply_mach_port_set_context"][::std::mem::offset_of!(
        __ReplyUnion__mach_port_subsystem,
        Reply_mach_port_set_context
    ) - 0usize];
    ["Offset of field: __ReplyUnion__mach_port_subsystem::Reply_mach_port_kobject"][::std::mem::offset_of!(
        __ReplyUnion__mach_port_subsystem,
        Reply_mach_port_kobject
    ) - 0usize];
    ["Offset of field: __ReplyUnion__mach_port_subsystem::Reply_mach_port_construct"][::std::mem::offset_of!(
        __ReplyUnion__mach_port_subsystem,
        Reply_mach_port_construct
    ) - 0usize];
    ["Offset of field: __ReplyUnion__mach_port_subsystem::Reply_mach_port_destruct"][::std::mem::offset_of!(
        __ReplyUnion__mach_port_subsystem,
        Reply_mach_port_destruct
    ) - 0usize];
    ["Offset of field: __ReplyUnion__mach_port_subsystem::Reply_mach_port_guard"]
        [::std::mem::offset_of!(__ReplyUnion__mach_port_subsystem, Reply_mach_port_guard) - 0usize];
    ["Offset of field: __ReplyUnion__mach_port_subsystem::Reply_mach_port_unguard"][::std::mem::offset_of!(
        __ReplyUnion__mach_port_subsystem,
        Reply_mach_port_unguard
    ) - 0usize];
    ["Offset of field: __ReplyUnion__mach_port_subsystem::Reply_mach_port_space_basic_info"][::std::mem::offset_of!(
        __ReplyUnion__mach_port_subsystem,
        Reply_mach_port_space_basic_info
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__mach_port_subsystem::Reply_mach_port_guard_with_flags"][::std::mem::offset_of!(
        __ReplyUnion__mach_port_subsystem,
        Reply_mach_port_guard_with_flags
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__mach_port_subsystem::Reply_mach_port_swap_guard"][::std::mem::offset_of!(
        __ReplyUnion__mach_port_subsystem,
        Reply_mach_port_swap_guard
    ) - 0usize];
    ["Offset of field: __ReplyUnion__mach_port_subsystem::Reply_mach_port_kobject_description"][::std::mem::offset_of!(
        __ReplyUnion__mach_port_subsystem,
        Reply_mach_port_kobject_description
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__mach_port_subsystem::Reply_mach_port_is_connection_for_service"] [:: std :: mem :: offset_of ! (__ReplyUnion__mach_port_subsystem , Reply_mach_port_is_connection_for_service) - 0usize] ;
    ["Offset of field: __ReplyUnion__mach_port_subsystem::Reply_mach_port_get_service_port_info"][::std::mem::offset_of!(
        __ReplyUnion__mach_port_subsystem,
        Reply_mach_port_get_service_port_info
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__mach_port_subsystem::Reply_mach_port_assert_attributes"][::std::mem::offset_of!(
        __ReplyUnion__mach_port_subsystem,
        Reply_mach_port_assert_attributes
    )
        - 0usize];
};
unsafe extern "C" {
    pub fn mach_host_self() -> mach_port_t;
}
unsafe extern "C" {
    pub fn mach_thread_self() -> mach_port_t;
}
unsafe extern "C" {
    pub fn mach_task_is_self(task: task_name_t) -> boolean_t;
}
unsafe extern "C" {
    pub fn host_page_size(arg1: host_t, arg2: *mut vm_size_t) -> kern_return_t;
}
unsafe extern "C" {
    pub static mut mach_task_self_: mach_port_t;
}
unsafe extern "C" {
    pub fn clock_sleep_trap(
        clock_name: mach_port_name_t,
        sleep_type: sleep_type_t,
        sleep_sec: ::std::os::raw::c_int,
        sleep_nsec: ::std::os::raw::c_int,
        wakeup_time: *mut mach_timespec_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn _kernelrpc_mach_vm_allocate_trap(
        target: mach_port_name_t,
        addr: *mut mach_vm_offset_t,
        size: mach_vm_size_t,
        flags: ::std::os::raw::c_int,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn _kernelrpc_mach_vm_deallocate_trap(
        target: mach_port_name_t,
        address: mach_vm_address_t,
        size: mach_vm_size_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn task_dyld_process_info_notify_get(
        names_addr: mach_port_name_array_t,
        names_count_addr: *mut natural_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn _kernelrpc_mach_vm_protect_trap(
        target: mach_port_name_t,
        address: mach_vm_address_t,
        size: mach_vm_size_t,
        set_maximum: boolean_t,
        new_protection: vm_prot_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn _kernelrpc_mach_vm_map_trap(
        target: mach_port_name_t,
        address: *mut mach_vm_offset_t,
        size: mach_vm_size_t,
        mask: mach_vm_offset_t,
        flags: ::std::os::raw::c_int,
        cur_protection: vm_prot_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn _kernelrpc_mach_vm_purgable_control_trap(
        target: mach_port_name_t,
        address: mach_vm_offset_t,
        control: vm_purgable_t,
        state: *mut ::std::os::raw::c_int,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn _kernelrpc_mach_port_allocate_trap(
        target: mach_port_name_t,
        right: mach_port_right_t,
        name: *mut mach_port_name_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn _kernelrpc_mach_port_deallocate_trap(
        target: mach_port_name_t,
        name: mach_port_name_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn _kernelrpc_mach_port_mod_refs_trap(
        target: mach_port_name_t,
        name: mach_port_name_t,
        right: mach_port_right_t,
        delta: mach_port_delta_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn _kernelrpc_mach_port_move_member_trap(
        target: mach_port_name_t,
        member: mach_port_name_t,
        after: mach_port_name_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn _kernelrpc_mach_port_insert_right_trap(
        target: mach_port_name_t,
        name: mach_port_name_t,
        poly: mach_port_name_t,
        polyPoly: mach_msg_type_name_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn _kernelrpc_mach_port_get_attributes_trap(
        target: mach_port_name_t,
        name: mach_port_name_t,
        flavor: mach_port_flavor_t,
        port_info_out: mach_port_info_t,
        port_info_outCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn _kernelrpc_mach_port_insert_member_trap(
        target: mach_port_name_t,
        name: mach_port_name_t,
        pset: mach_port_name_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn _kernelrpc_mach_port_extract_member_trap(
        target: mach_port_name_t,
        name: mach_port_name_t,
        pset: mach_port_name_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn _kernelrpc_mach_port_construct_trap(
        target: mach_port_name_t,
        options: *mut mach_port_options_t,
        context: u64,
        name: *mut mach_port_name_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn _kernelrpc_mach_port_destruct_trap(
        target: mach_port_name_t,
        name: mach_port_name_t,
        srdelta: mach_port_delta_t,
        guard: u64,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn _kernelrpc_mach_port_guard_trap(
        target: mach_port_name_t,
        name: mach_port_name_t,
        guard: u64,
        strict: boolean_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn _kernelrpc_mach_port_unguard_trap(
        target: mach_port_name_t,
        name: mach_port_name_t,
        guard: u64,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn mach_generate_activity_id(
        target: mach_port_name_t,
        count: ::std::os::raw::c_int,
        activity_id: *mut u64,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn macx_swapon(
        filename: u64,
        flags: ::std::os::raw::c_int,
        size: ::std::os::raw::c_int,
        priority: ::std::os::raw::c_int,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn macx_swapoff(filename: u64, flags: ::std::os::raw::c_int) -> kern_return_t;
}
unsafe extern "C" {
    pub fn macx_triggers(
        hi_water: ::std::os::raw::c_int,
        low_water: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        alert_port: mach_port_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn macx_backing_store_suspend(suspend: boolean_t) -> kern_return_t;
}
unsafe extern "C" {
    pub fn macx_backing_store_recovery(pid: ::std::os::raw::c_int) -> kern_return_t;
}
unsafe extern "C" {
    pub fn swtch_pri(pri: ::std::os::raw::c_int) -> boolean_t;
}
unsafe extern "C" {
    pub fn swtch() -> boolean_t;
}
unsafe extern "C" {
    pub fn thread_switch(
        thread_name: mach_port_name_t,
        option: ::std::os::raw::c_int,
        option_time: mach_msg_timeout_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn task_self_trap() -> mach_port_name_t;
}
unsafe extern "C" {
    pub fn host_create_mach_voucher_trap(
        host: mach_port_name_t,
        recipes: mach_voucher_attr_raw_recipe_array_t,
        recipes_size: ::std::os::raw::c_int,
        voucher: *mut mach_port_name_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn mach_voucher_extract_attr_recipe_trap(
        voucher_name: mach_port_name_t,
        key: mach_voucher_attr_key_t,
        recipe: mach_voucher_attr_raw_recipe_t,
        recipe_size: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn _kernelrpc_mach_port_type_trap(
        task: ipc_space_t,
        name: mach_port_name_t,
        ptype: *mut mach_port_type_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn _kernelrpc_mach_port_request_notification_trap(
        task: ipc_space_t,
        name: mach_port_name_t,
        msgid: mach_msg_id_t,
        sync: mach_port_mscount_t,
        notify: mach_port_name_t,
        notifyPoly: mach_msg_type_name_t,
        previous: *mut mach_port_name_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn task_for_pid(
        target_tport: mach_port_name_t,
        pid: ::std::os::raw::c_int,
        t: *mut mach_port_name_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn task_name_for_pid(
        target_tport: mach_port_name_t,
        pid: ::std::os::raw::c_int,
        tn: *mut mach_port_name_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn pid_for_task(t: mach_port_name_t, x: *mut ::std::os::raw::c_int) -> kern_return_t;
}
unsafe extern "C" {
    pub fn debug_control_port_for_pid(
        target_tport: mach_port_name_t,
        pid: ::std::os::raw::c_int,
        t: *mut mach_port_name_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub static mut bootstrap_port: mach_port_t;
}
unsafe extern "C" {
    pub static mut vprintf_stderr_func: ::std::option::Option<
        unsafe extern "C" fn(
            format: *const ::std::os::raw::c_char,
            ap: va_list,
        ) -> ::std::os::raw::c_int,
    >;
}
unsafe extern "C" {
    pub fn host_info(
        host: host_t,
        flavor: host_flavor_t,
        host_info_out: host_info_t,
        host_info_outCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn host_kernel_version(
        host: host_t,
        kernel_version: *mut ::std::os::raw::c_char,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn _host_page_size(host: host_t, out_page_size: *mut vm_size_t) -> kern_return_t;
}
unsafe extern "C" {
    pub fn mach_memory_object_memory_entry(
        host: host_t,
        internal: boolean_t,
        size: vm_size_t,
        permission: vm_prot_t,
        pager: memory_object_t,
        entry_handle: *mut mach_port_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn host_processor_info(
        host: host_t,
        flavor: processor_flavor_t,
        out_processor_count: *mut natural_t,
        out_processor_info: *mut processor_info_array_t,
        out_processor_infoCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn host_get_io_main(host: host_t, io_main: *mut io_main_t) -> kern_return_t;
}
unsafe extern "C" {
    pub fn host_get_clock_service(
        host: host_t,
        clock_id: clock_id_t,
        clock_serv: *mut clock_serv_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn kmod_get_info(
        host: host_t,
        modules: *mut kmod_args_t,
        modulesCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn host_virtual_physical_table_info(
        host: host_t,
        info: *mut hash_info_bucket_array_t,
        infoCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn processor_set_default(
        host: host_t,
        default_set: *mut processor_set_name_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn processor_set_create(
        host: host_t,
        new_set: *mut processor_set_t,
        new_name: *mut processor_set_name_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn mach_memory_object_memory_entry_64(
        host: host_t,
        internal: boolean_t,
        size: memory_object_size_t,
        permission: vm_prot_t,
        pager: memory_object_t,
        entry_handle: *mut mach_port_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn host_statistics(
        host_priv: host_t,
        flavor: host_flavor_t,
        host_info_out: host_info_t,
        host_info_outCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn host_request_notification(
        host: host_t,
        notify_type: host_flavor_t,
        notify_port: mach_port_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn host_lockgroup_info(
        host: host_t,
        lockgroup_info: *mut lockgroup_info_array_t,
        lockgroup_infoCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn host_statistics64(
        host_priv: host_t,
        flavor: host_flavor_t,
        host_info64_out: host_info64_t,
        host_info64_outCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn mach_zone_info(
        host: mach_port_t,
        names: *mut mach_zone_name_array_t,
        namesCnt: *mut mach_msg_type_number_t,
        info: *mut mach_zone_info_array_t,
        infoCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn host_create_mach_voucher(
        host: host_t,
        recipes: mach_voucher_attr_raw_recipe_array_t,
        recipesCnt: mach_msg_type_number_t,
        voucher: *mut ipc_voucher_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn host_register_mach_voucher_attr_manager(
        host: host_t,
        attr_manager: mach_voucher_attr_manager_t,
        default_value: mach_voucher_attr_value_handle_t,
        new_key: *mut mach_voucher_attr_key_t,
        new_attr_control: *mut ipc_voucher_attr_control_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn host_register_well_known_mach_voucher_attr_manager(
        host: host_t,
        attr_manager: mach_voucher_attr_manager_t,
        default_value: mach_voucher_attr_value_handle_t,
        key: mach_voucher_attr_key_t,
        new_attr_control: *mut ipc_voucher_attr_control_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn host_set_atm_diagnostic_flag(host: host_t, diagnostic_flag: u32) -> kern_return_t;
}
unsafe extern "C" {
    pub fn host_get_atm_diagnostic_flag(host: host_t, diagnostic_flag: *mut u32) -> kern_return_t;
}
unsafe extern "C" {
    pub fn mach_memory_info(
        host: mach_port_t,
        names: *mut mach_zone_name_array_t,
        namesCnt: *mut mach_msg_type_number_t,
        info: *mut mach_zone_info_array_t,
        infoCnt: *mut mach_msg_type_number_t,
        memory_info: *mut mach_memory_info_array_t,
        memory_infoCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn host_set_multiuser_config_flags(
        host_priv: host_priv_t,
        multiuser_flags: u32,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn host_get_multiuser_config_flags(
        host: host_t,
        multiuser_flags: *mut u32,
    ) -> kern_return_t;
}
unsafe extern "C" {
    pub fn host_check_multiuser_mode(host: host_t, multiuser_mode: *mut u32) -> kern_return_t;
}
unsafe extern "C" {
    pub fn mach_zone_info_for_zone(
        host: host_priv_t,
        name: mach_zone_name_t,
        info: *mut mach_zone_info_t,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: host_flavor_t,
    pub host_info_outCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__host_info_t"][::std::mem::size_of::<__Request__host_info_t>() - 40usize];
    ["Alignment of __Request__host_info_t"]
        [::std::mem::align_of::<__Request__host_info_t>() - 4usize];
    ["Offset of field: __Request__host_info_t::Head"]
        [::std::mem::offset_of!(__Request__host_info_t, Head) - 0usize];
    ["Offset of field: __Request__host_info_t::NDR"]
        [::std::mem::offset_of!(__Request__host_info_t, NDR) - 24usize];
    ["Offset of field: __Request__host_info_t::flavor"]
        [::std::mem::offset_of!(__Request__host_info_t, flavor) - 32usize];
    ["Offset of field: __Request__host_info_t::host_info_outCnt"]
        [::std::mem::offset_of!(__Request__host_info_t, host_info_outCnt) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_kernel_version_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__host_kernel_version_t"]
        [::std::mem::size_of::<__Request__host_kernel_version_t>() - 24usize];
    ["Alignment of __Request__host_kernel_version_t"]
        [::std::mem::align_of::<__Request__host_kernel_version_t>() - 4usize];
    ["Offset of field: __Request__host_kernel_version_t::Head"]
        [::std::mem::offset_of!(__Request__host_kernel_version_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request___host_page_size_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request___host_page_size_t"]
        [::std::mem::size_of::<__Request___host_page_size_t>() - 24usize];
    ["Alignment of __Request___host_page_size_t"]
        [::std::mem::align_of::<__Request___host_page_size_t>() - 4usize];
    ["Offset of field: __Request___host_page_size_t::Head"]
        [::std::mem::offset_of!(__Request___host_page_size_t, Head) - 0usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_memory_object_memory_entry_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub pager: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub internal: boolean_t,
    pub size: vm_size_t,
    pub permission: vm_prot_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_memory_object_memory_entry_t"]
        [::std::mem::size_of::<__Request__mach_memory_object_memory_entry_t>() - 64usize];
    ["Alignment of __Request__mach_memory_object_memory_entry_t"]
        [::std::mem::align_of::<__Request__mach_memory_object_memory_entry_t>() - 4usize];
    ["Offset of field: __Request__mach_memory_object_memory_entry_t::Head"]
        [::std::mem::offset_of!(__Request__mach_memory_object_memory_entry_t, Head) - 0usize];
    ["Offset of field: __Request__mach_memory_object_memory_entry_t::msgh_body"]
        [::std::mem::offset_of!(__Request__mach_memory_object_memory_entry_t, msgh_body) - 24usize];
    ["Offset of field: __Request__mach_memory_object_memory_entry_t::pager"]
        [::std::mem::offset_of!(__Request__mach_memory_object_memory_entry_t, pager) - 28usize];
    ["Offset of field: __Request__mach_memory_object_memory_entry_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_memory_object_memory_entry_t, NDR) - 40usize];
    ["Offset of field: __Request__mach_memory_object_memory_entry_t::internal"]
        [::std::mem::offset_of!(__Request__mach_memory_object_memory_entry_t, internal) - 48usize];
    ["Offset of field: __Request__mach_memory_object_memory_entry_t::size"]
        [::std::mem::offset_of!(__Request__mach_memory_object_memory_entry_t, size) - 52usize];
    ["Offset of field: __Request__mach_memory_object_memory_entry_t::permission"][::std::mem::offset_of!(
        __Request__mach_memory_object_memory_entry_t,
        permission
    ) - 60usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_processor_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: processor_flavor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__host_processor_info_t"]
        [::std::mem::size_of::<__Request__host_processor_info_t>() - 36usize];
    ["Alignment of __Request__host_processor_info_t"]
        [::std::mem::align_of::<__Request__host_processor_info_t>() - 4usize];
    ["Offset of field: __Request__host_processor_info_t::Head"]
        [::std::mem::offset_of!(__Request__host_processor_info_t, Head) - 0usize];
    ["Offset of field: __Request__host_processor_info_t::NDR"]
        [::std::mem::offset_of!(__Request__host_processor_info_t, NDR) - 24usize];
    ["Offset of field: __Request__host_processor_info_t::flavor"]
        [::std::mem::offset_of!(__Request__host_processor_info_t, flavor) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_get_io_main_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__host_get_io_main_t"]
        [::std::mem::size_of::<__Request__host_get_io_main_t>() - 24usize];
    ["Alignment of __Request__host_get_io_main_t"]
        [::std::mem::align_of::<__Request__host_get_io_main_t>() - 4usize];
    ["Offset of field: __Request__host_get_io_main_t::Head"]
        [::std::mem::offset_of!(__Request__host_get_io_main_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_get_clock_service_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub clock_id: clock_id_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__host_get_clock_service_t"]
        [::std::mem::size_of::<__Request__host_get_clock_service_t>() - 36usize];
    ["Alignment of __Request__host_get_clock_service_t"]
        [::std::mem::align_of::<__Request__host_get_clock_service_t>() - 4usize];
    ["Offset of field: __Request__host_get_clock_service_t::Head"]
        [::std::mem::offset_of!(__Request__host_get_clock_service_t, Head) - 0usize];
    ["Offset of field: __Request__host_get_clock_service_t::NDR"]
        [::std::mem::offset_of!(__Request__host_get_clock_service_t, NDR) - 24usize];
    ["Offset of field: __Request__host_get_clock_service_t::clock_id"]
        [::std::mem::offset_of!(__Request__host_get_clock_service_t, clock_id) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__kmod_get_info_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__kmod_get_info_t"]
        [::std::mem::size_of::<__Request__kmod_get_info_t>() - 24usize];
    ["Alignment of __Request__kmod_get_info_t"]
        [::std::mem::align_of::<__Request__kmod_get_info_t>() - 4usize];
    ["Offset of field: __Request__kmod_get_info_t::Head"]
        [::std::mem::offset_of!(__Request__kmod_get_info_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_virtual_physical_table_info_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__host_virtual_physical_table_info_t"]
        [::std::mem::size_of::<__Request__host_virtual_physical_table_info_t>() - 24usize];
    ["Alignment of __Request__host_virtual_physical_table_info_t"]
        [::std::mem::align_of::<__Request__host_virtual_physical_table_info_t>() - 4usize];
    ["Offset of field: __Request__host_virtual_physical_table_info_t::Head"]
        [::std::mem::offset_of!(__Request__host_virtual_physical_table_info_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_set_default_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__processor_set_default_t"]
        [::std::mem::size_of::<__Request__processor_set_default_t>() - 24usize];
    ["Alignment of __Request__processor_set_default_t"]
        [::std::mem::align_of::<__Request__processor_set_default_t>() - 4usize];
    ["Offset of field: __Request__processor_set_default_t::Head"]
        [::std::mem::offset_of!(__Request__processor_set_default_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_set_create_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__processor_set_create_t"]
        [::std::mem::size_of::<__Request__processor_set_create_t>() - 24usize];
    ["Alignment of __Request__processor_set_create_t"]
        [::std::mem::align_of::<__Request__processor_set_create_t>() - 4usize];
    ["Offset of field: __Request__processor_set_create_t::Head"]
        [::std::mem::offset_of!(__Request__processor_set_create_t, Head) - 0usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_memory_object_memory_entry_64_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub pager: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub internal: boolean_t,
    pub size: memory_object_size_t,
    pub permission: vm_prot_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_memory_object_memory_entry_64_t"]
        [::std::mem::size_of::<__Request__mach_memory_object_memory_entry_64_t>() - 64usize];
    ["Alignment of __Request__mach_memory_object_memory_entry_64_t"]
        [::std::mem::align_of::<__Request__mach_memory_object_memory_entry_64_t>() - 4usize];
    ["Offset of field: __Request__mach_memory_object_memory_entry_64_t::Head"]
        [::std::mem::offset_of!(__Request__mach_memory_object_memory_entry_64_t, Head) - 0usize];
    ["Offset of field: __Request__mach_memory_object_memory_entry_64_t::msgh_body"][::std::mem::offset_of!(
        __Request__mach_memory_object_memory_entry_64_t,
        msgh_body
    ) - 24usize];
    ["Offset of field: __Request__mach_memory_object_memory_entry_64_t::pager"]
        [::std::mem::offset_of!(__Request__mach_memory_object_memory_entry_64_t, pager) - 28usize];
    ["Offset of field: __Request__mach_memory_object_memory_entry_64_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_memory_object_memory_entry_64_t, NDR) - 40usize];
    ["Offset of field: __Request__mach_memory_object_memory_entry_64_t::internal"][::std::mem::offset_of!(
        __Request__mach_memory_object_memory_entry_64_t,
        internal
    ) - 48usize];
    ["Offset of field: __Request__mach_memory_object_memory_entry_64_t::size"]
        [::std::mem::offset_of!(__Request__mach_memory_object_memory_entry_64_t, size) - 52usize];
    ["Offset of field: __Request__mach_memory_object_memory_entry_64_t::permission"][::std::mem::offset_of!(
        __Request__mach_memory_object_memory_entry_64_t,
        permission
    ) - 60usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_statistics_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: host_flavor_t,
    pub host_info_outCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__host_statistics_t"]
        [::std::mem::size_of::<__Request__host_statistics_t>() - 40usize];
    ["Alignment of __Request__host_statistics_t"]
        [::std::mem::align_of::<__Request__host_statistics_t>() - 4usize];
    ["Offset of field: __Request__host_statistics_t::Head"]
        [::std::mem::offset_of!(__Request__host_statistics_t, Head) - 0usize];
    ["Offset of field: __Request__host_statistics_t::NDR"]
        [::std::mem::offset_of!(__Request__host_statistics_t, NDR) - 24usize];
    ["Offset of field: __Request__host_statistics_t::flavor"]
        [::std::mem::offset_of!(__Request__host_statistics_t, flavor) - 32usize];
    ["Offset of field: __Request__host_statistics_t::host_info_outCnt"]
        [::std::mem::offset_of!(__Request__host_statistics_t, host_info_outCnt) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_request_notification_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub notify_port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub notify_type: host_flavor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__host_request_notification_t"]
        [::std::mem::size_of::<__Request__host_request_notification_t>() - 52usize];
    ["Alignment of __Request__host_request_notification_t"]
        [::std::mem::align_of::<__Request__host_request_notification_t>() - 4usize];
    ["Offset of field: __Request__host_request_notification_t::Head"]
        [::std::mem::offset_of!(__Request__host_request_notification_t, Head) - 0usize];
    ["Offset of field: __Request__host_request_notification_t::msgh_body"]
        [::std::mem::offset_of!(__Request__host_request_notification_t, msgh_body) - 24usize];
    ["Offset of field: __Request__host_request_notification_t::notify_port"]
        [::std::mem::offset_of!(__Request__host_request_notification_t, notify_port) - 28usize];
    ["Offset of field: __Request__host_request_notification_t::NDR"]
        [::std::mem::offset_of!(__Request__host_request_notification_t, NDR) - 40usize];
    ["Offset of field: __Request__host_request_notification_t::notify_type"]
        [::std::mem::offset_of!(__Request__host_request_notification_t, notify_type) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_lockgroup_info_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__host_lockgroup_info_t"]
        [::std::mem::size_of::<__Request__host_lockgroup_info_t>() - 24usize];
    ["Alignment of __Request__host_lockgroup_info_t"]
        [::std::mem::align_of::<__Request__host_lockgroup_info_t>() - 4usize];
    ["Offset of field: __Request__host_lockgroup_info_t::Head"]
        [::std::mem::offset_of!(__Request__host_lockgroup_info_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_statistics64_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: host_flavor_t,
    pub host_info64_outCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__host_statistics64_t"]
        [::std::mem::size_of::<__Request__host_statistics64_t>() - 40usize];
    ["Alignment of __Request__host_statistics64_t"]
        [::std::mem::align_of::<__Request__host_statistics64_t>() - 4usize];
    ["Offset of field: __Request__host_statistics64_t::Head"]
        [::std::mem::offset_of!(__Request__host_statistics64_t, Head) - 0usize];
    ["Offset of field: __Request__host_statistics64_t::NDR"]
        [::std::mem::offset_of!(__Request__host_statistics64_t, NDR) - 24usize];
    ["Offset of field: __Request__host_statistics64_t::flavor"]
        [::std::mem::offset_of!(__Request__host_statistics64_t, flavor) - 32usize];
    ["Offset of field: __Request__host_statistics64_t::host_info64_outCnt"]
        [::std::mem::offset_of!(__Request__host_statistics64_t, host_info64_outCnt) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_zone_info_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_zone_info_t"]
        [::std::mem::size_of::<__Request__mach_zone_info_t>() - 24usize];
    ["Alignment of __Request__mach_zone_info_t"]
        [::std::mem::align_of::<__Request__mach_zone_info_t>() - 4usize];
    ["Offset of field: __Request__mach_zone_info_t::Head"]
        [::std::mem::offset_of!(__Request__mach_zone_info_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_create_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub recipesCnt: mach_msg_type_number_t,
    pub recipes: [u8; 5120usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__host_create_mach_voucher_t"]
        [::std::mem::size_of::<__Request__host_create_mach_voucher_t>() - 5156usize];
    ["Alignment of __Request__host_create_mach_voucher_t"]
        [::std::mem::align_of::<__Request__host_create_mach_voucher_t>() - 4usize];
    ["Offset of field: __Request__host_create_mach_voucher_t::Head"]
        [::std::mem::offset_of!(__Request__host_create_mach_voucher_t, Head) - 0usize];
    ["Offset of field: __Request__host_create_mach_voucher_t::NDR"]
        [::std::mem::offset_of!(__Request__host_create_mach_voucher_t, NDR) - 24usize];
    ["Offset of field: __Request__host_create_mach_voucher_t::recipesCnt"]
        [::std::mem::offset_of!(__Request__host_create_mach_voucher_t, recipesCnt) - 32usize];
    ["Offset of field: __Request__host_create_mach_voucher_t::recipes"]
        [::std::mem::offset_of!(__Request__host_create_mach_voucher_t, recipes) - 36usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_register_mach_voucher_attr_manager_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub attr_manager: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub default_value: mach_voucher_attr_value_handle_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__host_register_mach_voucher_attr_manager_t"]
        [::std::mem::size_of::<__Request__host_register_mach_voucher_attr_manager_t>() - 56usize];
    ["Alignment of __Request__host_register_mach_voucher_attr_manager_t"]
        [::std::mem::align_of::<__Request__host_register_mach_voucher_attr_manager_t>() - 4usize];
    ["Offset of field: __Request__host_register_mach_voucher_attr_manager_t::Head"][::std::mem::offset_of!(
        __Request__host_register_mach_voucher_attr_manager_t,
        Head
    ) - 0usize];
    ["Offset of field: __Request__host_register_mach_voucher_attr_manager_t::msgh_body"][::std::mem::offset_of!(
        __Request__host_register_mach_voucher_attr_manager_t,
        msgh_body
    )
        - 24usize];
    ["Offset of field: __Request__host_register_mach_voucher_attr_manager_t::attr_manager"][::std::mem::offset_of!(
        __Request__host_register_mach_voucher_attr_manager_t,
        attr_manager
    )
        - 28usize];
    ["Offset of field: __Request__host_register_mach_voucher_attr_manager_t::NDR"][::std::mem::offset_of!(
        __Request__host_register_mach_voucher_attr_manager_t,
        NDR
    ) - 40usize];
    ["Offset of field: __Request__host_register_mach_voucher_attr_manager_t::default_value"][::std::mem::offset_of!(
        __Request__host_register_mach_voucher_attr_manager_t,
        default_value
    )
        - 48usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_register_well_known_mach_voucher_attr_manager_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub attr_manager: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub default_value: mach_voucher_attr_value_handle_t,
    pub key: mach_voucher_attr_key_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__host_register_well_known_mach_voucher_attr_manager_t"][::std::mem::size_of::<
        __Request__host_register_well_known_mach_voucher_attr_manager_t,
    >() - 60usize];
    ["Alignment of __Request__host_register_well_known_mach_voucher_attr_manager_t"]
        [::std::mem::align_of::<__Request__host_register_well_known_mach_voucher_attr_manager_t>()
            - 4usize];
    ["Offset of field: __Request__host_register_well_known_mach_voucher_attr_manager_t::Head"][::std::mem::offset_of!(
        __Request__host_register_well_known_mach_voucher_attr_manager_t,
        Head
    )
        - 0usize];
    ["Offset of field: __Request__host_register_well_known_mach_voucher_attr_manager_t::msgh_body"] [:: std :: mem :: offset_of ! (__Request__host_register_well_known_mach_voucher_attr_manager_t , msgh_body) - 24usize] ;
    ["Offset of field: __Request__host_register_well_known_mach_voucher_attr_manager_t::attr_manager"] [:: std :: mem :: offset_of ! (__Request__host_register_well_known_mach_voucher_attr_manager_t , attr_manager) - 28usize] ;
    ["Offset of field: __Request__host_register_well_known_mach_voucher_attr_manager_t::NDR"][::std::mem::offset_of!(
        __Request__host_register_well_known_mach_voucher_attr_manager_t,
        NDR
    )
        - 40usize];
    ["Offset of field: __Request__host_register_well_known_mach_voucher_attr_manager_t::default_value"] [:: std :: mem :: offset_of ! (__Request__host_register_well_known_mach_voucher_attr_manager_t , default_value) - 48usize] ;
    ["Offset of field: __Request__host_register_well_known_mach_voucher_attr_manager_t::key"][::std::mem::offset_of!(
        __Request__host_register_well_known_mach_voucher_attr_manager_t,
        key
    )
        - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_set_atm_diagnostic_flag_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub diagnostic_flag: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__host_set_atm_diagnostic_flag_t"]
        [::std::mem::size_of::<__Request__host_set_atm_diagnostic_flag_t>() - 36usize];
    ["Alignment of __Request__host_set_atm_diagnostic_flag_t"]
        [::std::mem::align_of::<__Request__host_set_atm_diagnostic_flag_t>() - 4usize];
    ["Offset of field: __Request__host_set_atm_diagnostic_flag_t::Head"]
        [::std::mem::offset_of!(__Request__host_set_atm_diagnostic_flag_t, Head) - 0usize];
    ["Offset of field: __Request__host_set_atm_diagnostic_flag_t::NDR"]
        [::std::mem::offset_of!(__Request__host_set_atm_diagnostic_flag_t, NDR) - 24usize];
    ["Offset of field: __Request__host_set_atm_diagnostic_flag_t::diagnostic_flag"][::std::mem::offset_of!(
        __Request__host_set_atm_diagnostic_flag_t,
        diagnostic_flag
    ) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_get_atm_diagnostic_flag_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__host_get_atm_diagnostic_flag_t"]
        [::std::mem::size_of::<__Request__host_get_atm_diagnostic_flag_t>() - 24usize];
    ["Alignment of __Request__host_get_atm_diagnostic_flag_t"]
        [::std::mem::align_of::<__Request__host_get_atm_diagnostic_flag_t>() - 4usize];
    ["Offset of field: __Request__host_get_atm_diagnostic_flag_t::Head"]
        [::std::mem::offset_of!(__Request__host_get_atm_diagnostic_flag_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_memory_info_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_memory_info_t"]
        [::std::mem::size_of::<__Request__mach_memory_info_t>() - 24usize];
    ["Alignment of __Request__mach_memory_info_t"]
        [::std::mem::align_of::<__Request__mach_memory_info_t>() - 4usize];
    ["Offset of field: __Request__mach_memory_info_t::Head"]
        [::std::mem::offset_of!(__Request__mach_memory_info_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_set_multiuser_config_flags_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub multiuser_flags: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__host_set_multiuser_config_flags_t"]
        [::std::mem::size_of::<__Request__host_set_multiuser_config_flags_t>() - 36usize];
    ["Alignment of __Request__host_set_multiuser_config_flags_t"]
        [::std::mem::align_of::<__Request__host_set_multiuser_config_flags_t>() - 4usize];
    ["Offset of field: __Request__host_set_multiuser_config_flags_t::Head"]
        [::std::mem::offset_of!(__Request__host_set_multiuser_config_flags_t, Head) - 0usize];
    ["Offset of field: __Request__host_set_multiuser_config_flags_t::NDR"]
        [::std::mem::offset_of!(__Request__host_set_multiuser_config_flags_t, NDR) - 24usize];
    ["Offset of field: __Request__host_set_multiuser_config_flags_t::multiuser_flags"][::std::mem::offset_of!(
        __Request__host_set_multiuser_config_flags_t,
        multiuser_flags
    ) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_get_multiuser_config_flags_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__host_get_multiuser_config_flags_t"]
        [::std::mem::size_of::<__Request__host_get_multiuser_config_flags_t>() - 24usize];
    ["Alignment of __Request__host_get_multiuser_config_flags_t"]
        [::std::mem::align_of::<__Request__host_get_multiuser_config_flags_t>() - 4usize];
    ["Offset of field: __Request__host_get_multiuser_config_flags_t::Head"]
        [::std::mem::offset_of!(__Request__host_get_multiuser_config_flags_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_check_multiuser_mode_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__host_check_multiuser_mode_t"]
        [::std::mem::size_of::<__Request__host_check_multiuser_mode_t>() - 24usize];
    ["Alignment of __Request__host_check_multiuser_mode_t"]
        [::std::mem::align_of::<__Request__host_check_multiuser_mode_t>() - 4usize];
    ["Offset of field: __Request__host_check_multiuser_mode_t::Head"]
        [::std::mem::offset_of!(__Request__host_check_multiuser_mode_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_zone_info_for_zone_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_zone_name_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_zone_info_for_zone_t"]
        [::std::mem::size_of::<__Request__mach_zone_info_for_zone_t>() - 112usize];
    ["Alignment of __Request__mach_zone_info_for_zone_t"]
        [::std::mem::align_of::<__Request__mach_zone_info_for_zone_t>() - 4usize];
    ["Offset of field: __Request__mach_zone_info_for_zone_t::Head"]
        [::std::mem::offset_of!(__Request__mach_zone_info_for_zone_t, Head) - 0usize];
    ["Offset of field: __Request__mach_zone_info_for_zone_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_zone_info_for_zone_t, NDR) - 24usize];
    ["Offset of field: __Request__mach_zone_info_for_zone_t::name"]
        [::std::mem::offset_of!(__Request__mach_zone_info_for_zone_t, name) - 32usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__mach_host_subsystem {
    pub Request_host_info: __Request__host_info_t,
    pub Request_host_kernel_version: __Request__host_kernel_version_t,
    pub Request__host_page_size: __Request___host_page_size_t,
    pub Request_mach_memory_object_memory_entry: __Request__mach_memory_object_memory_entry_t,
    pub Request_host_processor_info: __Request__host_processor_info_t,
    pub Request_host_get_io_main: __Request__host_get_io_main_t,
    pub Request_host_get_clock_service: __Request__host_get_clock_service_t,
    pub Request_kmod_get_info: __Request__kmod_get_info_t,
    pub Request_host_virtual_physical_table_info: __Request__host_virtual_physical_table_info_t,
    pub Request_processor_set_default: __Request__processor_set_default_t,
    pub Request_processor_set_create: __Request__processor_set_create_t,
    pub Request_mach_memory_object_memory_entry_64: __Request__mach_memory_object_memory_entry_64_t,
    pub Request_host_statistics: __Request__host_statistics_t,
    pub Request_host_request_notification: __Request__host_request_notification_t,
    pub Request_host_lockgroup_info: __Request__host_lockgroup_info_t,
    pub Request_host_statistics64: __Request__host_statistics64_t,
    pub Request_mach_zone_info: __Request__mach_zone_info_t,
    pub Request_host_create_mach_voucher: __Request__host_create_mach_voucher_t,
    pub Request_host_register_mach_voucher_attr_manager:
        __Request__host_register_mach_voucher_attr_manager_t,
    pub Request_host_register_well_known_mach_voucher_attr_manager:
        __Request__host_register_well_known_mach_voucher_attr_manager_t,
    pub Request_host_set_atm_diagnostic_flag: __Request__host_set_atm_diagnostic_flag_t,
    pub Request_host_get_atm_diagnostic_flag: __Request__host_get_atm_diagnostic_flag_t,
    pub Request_mach_memory_info: __Request__mach_memory_info_t,
    pub Request_host_set_multiuser_config_flags: __Request__host_set_multiuser_config_flags_t,
    pub Request_host_get_multiuser_config_flags: __Request__host_get_multiuser_config_flags_t,
    pub Request_host_check_multiuser_mode: __Request__host_check_multiuser_mode_t,
    pub Request_mach_zone_info_for_zone: __Request__mach_zone_info_for_zone_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __RequestUnion__mach_host_subsystem"]
        [::std::mem::size_of::<__RequestUnion__mach_host_subsystem>() - 5156usize];
    ["Alignment of __RequestUnion__mach_host_subsystem"]
        [::std::mem::align_of::<__RequestUnion__mach_host_subsystem>() - 4usize];
    ["Offset of field: __RequestUnion__mach_host_subsystem::Request_host_info"]
        [::std::mem::offset_of!(__RequestUnion__mach_host_subsystem, Request_host_info) - 0usize];
    ["Offset of field: __RequestUnion__mach_host_subsystem::Request_host_kernel_version"][::std::mem::offset_of!(
        __RequestUnion__mach_host_subsystem,
        Request_host_kernel_version
    )
        - 0usize];
    ["Offset of field: __RequestUnion__mach_host_subsystem::Request__host_page_size"][::std::mem::offset_of!(
        __RequestUnion__mach_host_subsystem,
        Request__host_page_size
    ) - 0usize];
    ["Offset of field: __RequestUnion__mach_host_subsystem::Request_mach_memory_object_memory_entry"] [:: std :: mem :: offset_of ! (__RequestUnion__mach_host_subsystem , Request_mach_memory_object_memory_entry) - 0usize] ;
    ["Offset of field: __RequestUnion__mach_host_subsystem::Request_host_processor_info"][::std::mem::offset_of!(
        __RequestUnion__mach_host_subsystem,
        Request_host_processor_info
    )
        - 0usize];
    ["Offset of field: __RequestUnion__mach_host_subsystem::Request_host_get_io_main"][::std::mem::offset_of!(
        __RequestUnion__mach_host_subsystem,
        Request_host_get_io_main
    ) - 0usize];
    ["Offset of field: __RequestUnion__mach_host_subsystem::Request_host_get_clock_service"][::std::mem::offset_of!(
        __RequestUnion__mach_host_subsystem,
        Request_host_get_clock_service
    )
        - 0usize];
    ["Offset of field: __RequestUnion__mach_host_subsystem::Request_kmod_get_info"][::std::mem::offset_of!(
        __RequestUnion__mach_host_subsystem,
        Request_kmod_get_info
    ) - 0usize];
    ["Offset of field: __RequestUnion__mach_host_subsystem::Request_host_virtual_physical_table_info"] [:: std :: mem :: offset_of ! (__RequestUnion__mach_host_subsystem , Request_host_virtual_physical_table_info) - 0usize] ;
    ["Offset of field: __RequestUnion__mach_host_subsystem::Request_processor_set_default"][::std::mem::offset_of!(
        __RequestUnion__mach_host_subsystem,
        Request_processor_set_default
    )
        - 0usize];
    ["Offset of field: __RequestUnion__mach_host_subsystem::Request_processor_set_create"][::std::mem::offset_of!(
        __RequestUnion__mach_host_subsystem,
        Request_processor_set_create
    )
        - 0usize];
    ["Offset of field: __RequestUnion__mach_host_subsystem::Request_mach_memory_object_memory_entry_64"] [:: std :: mem :: offset_of ! (__RequestUnion__mach_host_subsystem , Request_mach_memory_object_memory_entry_64) - 0usize] ;
    ["Offset of field: __RequestUnion__mach_host_subsystem::Request_host_statistics"][::std::mem::offset_of!(
        __RequestUnion__mach_host_subsystem,
        Request_host_statistics
    ) - 0usize];
    ["Offset of field: __RequestUnion__mach_host_subsystem::Request_host_request_notification"][::std::mem::offset_of!(
        __RequestUnion__mach_host_subsystem,
        Request_host_request_notification
    )
        - 0usize];
    ["Offset of field: __RequestUnion__mach_host_subsystem::Request_host_lockgroup_info"][::std::mem::offset_of!(
        __RequestUnion__mach_host_subsystem,
        Request_host_lockgroup_info
    )
        - 0usize];
    ["Offset of field: __RequestUnion__mach_host_subsystem::Request_host_statistics64"][::std::mem::offset_of!(
        __RequestUnion__mach_host_subsystem,
        Request_host_statistics64
    ) - 0usize];
    ["Offset of field: __RequestUnion__mach_host_subsystem::Request_mach_zone_info"][::std::mem::offset_of!(
        __RequestUnion__mach_host_subsystem,
        Request_mach_zone_info
    ) - 0usize];
    ["Offset of field: __RequestUnion__mach_host_subsystem::Request_host_create_mach_voucher"][::std::mem::offset_of!(
        __RequestUnion__mach_host_subsystem,
        Request_host_create_mach_voucher
    )
        - 0usize];
    ["Offset of field: __RequestUnion__mach_host_subsystem::Request_host_register_mach_voucher_attr_manager"] [:: std :: mem :: offset_of ! (__RequestUnion__mach_host_subsystem , Request_host_register_mach_voucher_attr_manager) - 0usize] ;
    ["Offset of field: __RequestUnion__mach_host_subsystem::Request_host_register_well_known_mach_voucher_attr_manager"] [:: std :: mem :: offset_of ! (__RequestUnion__mach_host_subsystem , Request_host_register_well_known_mach_voucher_attr_manager) - 0usize] ;
    ["Offset of field: __RequestUnion__mach_host_subsystem::Request_host_set_atm_diagnostic_flag"] [:: std :: mem :: offset_of ! (__RequestUnion__mach_host_subsystem , Request_host_set_atm_diagnostic_flag) - 0usize] ;
    ["Offset of field: __RequestUnion__mach_host_subsystem::Request_host_get_atm_diagnostic_flag"] [:: std :: mem :: offset_of ! (__RequestUnion__mach_host_subsystem , Request_host_get_atm_diagnostic_flag) - 0usize] ;
    ["Offset of field: __RequestUnion__mach_host_subsystem::Request_mach_memory_info"][::std::mem::offset_of!(
        __RequestUnion__mach_host_subsystem,
        Request_mach_memory_info
    ) - 0usize];
    ["Offset of field: __RequestUnion__mach_host_subsystem::Request_host_set_multiuser_config_flags"] [:: std :: mem :: offset_of ! (__RequestUnion__mach_host_subsystem , Request_host_set_multiuser_config_flags) - 0usize] ;
    ["Offset of field: __RequestUnion__mach_host_subsystem::Request_host_get_multiuser_config_flags"] [:: std :: mem :: offset_of ! (__RequestUnion__mach_host_subsystem , Request_host_get_multiuser_config_flags) - 0usize] ;
    ["Offset of field: __RequestUnion__mach_host_subsystem::Request_host_check_multiuser_mode"][::std::mem::offset_of!(
        __RequestUnion__mach_host_subsystem,
        Request_host_check_multiuser_mode
    )
        - 0usize];
    ["Offset of field: __RequestUnion__mach_host_subsystem::Request_mach_zone_info_for_zone"][::std::mem::offset_of!(
        __RequestUnion__mach_host_subsystem,
        Request_mach_zone_info_for_zone
    )
        - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub host_info_outCnt: mach_msg_type_number_t,
    pub host_info_out: [integer_t; 68usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__host_info_t"][::std::mem::size_of::<__Reply__host_info_t>() - 312usize];
    ["Alignment of __Reply__host_info_t"][::std::mem::align_of::<__Reply__host_info_t>() - 4usize];
    ["Offset of field: __Reply__host_info_t::Head"]
        [::std::mem::offset_of!(__Reply__host_info_t, Head) - 0usize];
    ["Offset of field: __Reply__host_info_t::NDR"]
        [::std::mem::offset_of!(__Reply__host_info_t, NDR) - 24usize];
    ["Offset of field: __Reply__host_info_t::RetCode"]
        [::std::mem::offset_of!(__Reply__host_info_t, RetCode) - 32usize];
    ["Offset of field: __Reply__host_info_t::host_info_outCnt"]
        [::std::mem::offset_of!(__Reply__host_info_t, host_info_outCnt) - 36usize];
    ["Offset of field: __Reply__host_info_t::host_info_out"]
        [::std::mem::offset_of!(__Reply__host_info_t, host_info_out) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_kernel_version_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub kernel_versionOffset: mach_msg_type_number_t,
    pub kernel_versionCnt: mach_msg_type_number_t,
    pub kernel_version: [::std::os::raw::c_char; 512usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__host_kernel_version_t"]
        [::std::mem::size_of::<__Reply__host_kernel_version_t>() - 556usize];
    ["Alignment of __Reply__host_kernel_version_t"]
        [::std::mem::align_of::<__Reply__host_kernel_version_t>() - 4usize];
    ["Offset of field: __Reply__host_kernel_version_t::Head"]
        [::std::mem::offset_of!(__Reply__host_kernel_version_t, Head) - 0usize];
    ["Offset of field: __Reply__host_kernel_version_t::NDR"]
        [::std::mem::offset_of!(__Reply__host_kernel_version_t, NDR) - 24usize];
    ["Offset of field: __Reply__host_kernel_version_t::RetCode"]
        [::std::mem::offset_of!(__Reply__host_kernel_version_t, RetCode) - 32usize];
    ["Offset of field: __Reply__host_kernel_version_t::kernel_versionOffset"]
        [::std::mem::offset_of!(__Reply__host_kernel_version_t, kernel_versionOffset) - 36usize];
    ["Offset of field: __Reply__host_kernel_version_t::kernel_versionCnt"]
        [::std::mem::offset_of!(__Reply__host_kernel_version_t, kernel_versionCnt) - 40usize];
    ["Offset of field: __Reply__host_kernel_version_t::kernel_version"]
        [::std::mem::offset_of!(__Reply__host_kernel_version_t, kernel_version) - 44usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply___host_page_size_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub out_page_size: vm_size_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply___host_page_size_t"]
        [::std::mem::size_of::<__Reply___host_page_size_t>() - 44usize];
    ["Alignment of __Reply___host_page_size_t"]
        [::std::mem::align_of::<__Reply___host_page_size_t>() - 4usize];
    ["Offset of field: __Reply___host_page_size_t::Head"]
        [::std::mem::offset_of!(__Reply___host_page_size_t, Head) - 0usize];
    ["Offset of field: __Reply___host_page_size_t::NDR"]
        [::std::mem::offset_of!(__Reply___host_page_size_t, NDR) - 24usize];
    ["Offset of field: __Reply___host_page_size_t::RetCode"]
        [::std::mem::offset_of!(__Reply___host_page_size_t, RetCode) - 32usize];
    ["Offset of field: __Reply___host_page_size_t::out_page_size"]
        [::std::mem::offset_of!(__Reply___host_page_size_t, out_page_size) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_memory_object_memory_entry_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub entry_handle: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_memory_object_memory_entry_t"]
        [::std::mem::size_of::<__Reply__mach_memory_object_memory_entry_t>() - 40usize];
    ["Alignment of __Reply__mach_memory_object_memory_entry_t"]
        [::std::mem::align_of::<__Reply__mach_memory_object_memory_entry_t>() - 4usize];
    ["Offset of field: __Reply__mach_memory_object_memory_entry_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_memory_object_memory_entry_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_memory_object_memory_entry_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__mach_memory_object_memory_entry_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__mach_memory_object_memory_entry_t::entry_handle"][::std::mem::offset_of!(
        __Reply__mach_memory_object_memory_entry_t,
        entry_handle
    ) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_processor_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub out_processor_info: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub out_processor_count: natural_t,
    pub out_processor_infoCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__host_processor_info_t"]
        [::std::mem::size_of::<__Reply__host_processor_info_t>() - 60usize];
    ["Alignment of __Reply__host_processor_info_t"]
        [::std::mem::align_of::<__Reply__host_processor_info_t>() - 4usize];
    ["Offset of field: __Reply__host_processor_info_t::Head"]
        [::std::mem::offset_of!(__Reply__host_processor_info_t, Head) - 0usize];
    ["Offset of field: __Reply__host_processor_info_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__host_processor_info_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__host_processor_info_t::out_processor_info"]
        [::std::mem::offset_of!(__Reply__host_processor_info_t, out_processor_info) - 28usize];
    ["Offset of field: __Reply__host_processor_info_t::NDR"]
        [::std::mem::offset_of!(__Reply__host_processor_info_t, NDR) - 44usize];
    ["Offset of field: __Reply__host_processor_info_t::out_processor_count"]
        [::std::mem::offset_of!(__Reply__host_processor_info_t, out_processor_count) - 52usize];
    ["Offset of field: __Reply__host_processor_info_t::out_processor_infoCnt"]
        [::std::mem::offset_of!(__Reply__host_processor_info_t, out_processor_infoCnt) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_get_io_main_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub io_main: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__host_get_io_main_t"]
        [::std::mem::size_of::<__Reply__host_get_io_main_t>() - 40usize];
    ["Alignment of __Reply__host_get_io_main_t"]
        [::std::mem::align_of::<__Reply__host_get_io_main_t>() - 4usize];
    ["Offset of field: __Reply__host_get_io_main_t::Head"]
        [::std::mem::offset_of!(__Reply__host_get_io_main_t, Head) - 0usize];
    ["Offset of field: __Reply__host_get_io_main_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__host_get_io_main_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__host_get_io_main_t::io_main"]
        [::std::mem::offset_of!(__Reply__host_get_io_main_t, io_main) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_get_clock_service_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub clock_serv: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__host_get_clock_service_t"]
        [::std::mem::size_of::<__Reply__host_get_clock_service_t>() - 40usize];
    ["Alignment of __Reply__host_get_clock_service_t"]
        [::std::mem::align_of::<__Reply__host_get_clock_service_t>() - 4usize];
    ["Offset of field: __Reply__host_get_clock_service_t::Head"]
        [::std::mem::offset_of!(__Reply__host_get_clock_service_t, Head) - 0usize];
    ["Offset of field: __Reply__host_get_clock_service_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__host_get_clock_service_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__host_get_clock_service_t::clock_serv"]
        [::std::mem::offset_of!(__Reply__host_get_clock_service_t, clock_serv) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__kmod_get_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub modules: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub modulesCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__kmod_get_info_t"]
        [::std::mem::size_of::<__Reply__kmod_get_info_t>() - 56usize];
    ["Alignment of __Reply__kmod_get_info_t"]
        [::std::mem::align_of::<__Reply__kmod_get_info_t>() - 4usize];
    ["Offset of field: __Reply__kmod_get_info_t::Head"]
        [::std::mem::offset_of!(__Reply__kmod_get_info_t, Head) - 0usize];
    ["Offset of field: __Reply__kmod_get_info_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__kmod_get_info_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__kmod_get_info_t::modules"]
        [::std::mem::offset_of!(__Reply__kmod_get_info_t, modules) - 28usize];
    ["Offset of field: __Reply__kmod_get_info_t::NDR"]
        [::std::mem::offset_of!(__Reply__kmod_get_info_t, NDR) - 44usize];
    ["Offset of field: __Reply__kmod_get_info_t::modulesCnt"]
        [::std::mem::offset_of!(__Reply__kmod_get_info_t, modulesCnt) - 52usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_virtual_physical_table_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub info: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub infoCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__host_virtual_physical_table_info_t"]
        [::std::mem::size_of::<__Reply__host_virtual_physical_table_info_t>() - 56usize];
    ["Alignment of __Reply__host_virtual_physical_table_info_t"]
        [::std::mem::align_of::<__Reply__host_virtual_physical_table_info_t>() - 4usize];
    ["Offset of field: __Reply__host_virtual_physical_table_info_t::Head"]
        [::std::mem::offset_of!(__Reply__host_virtual_physical_table_info_t, Head) - 0usize];
    ["Offset of field: __Reply__host_virtual_physical_table_info_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__host_virtual_physical_table_info_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__host_virtual_physical_table_info_t::info"]
        [::std::mem::offset_of!(__Reply__host_virtual_physical_table_info_t, info) - 28usize];
    ["Offset of field: __Reply__host_virtual_physical_table_info_t::NDR"]
        [::std::mem::offset_of!(__Reply__host_virtual_physical_table_info_t, NDR) - 44usize];
    ["Offset of field: __Reply__host_virtual_physical_table_info_t::infoCnt"]
        [::std::mem::offset_of!(__Reply__host_virtual_physical_table_info_t, infoCnt) - 52usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_set_default_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub default_set: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__processor_set_default_t"]
        [::std::mem::size_of::<__Reply__processor_set_default_t>() - 40usize];
    ["Alignment of __Reply__processor_set_default_t"]
        [::std::mem::align_of::<__Reply__processor_set_default_t>() - 4usize];
    ["Offset of field: __Reply__processor_set_default_t::Head"]
        [::std::mem::offset_of!(__Reply__processor_set_default_t, Head) - 0usize];
    ["Offset of field: __Reply__processor_set_default_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__processor_set_default_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__processor_set_default_t::default_set"]
        [::std::mem::offset_of!(__Reply__processor_set_default_t, default_set) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_set_create_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_set: mach_msg_port_descriptor_t,
    pub new_name: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__processor_set_create_t"]
        [::std::mem::size_of::<__Reply__processor_set_create_t>() - 52usize];
    ["Alignment of __Reply__processor_set_create_t"]
        [::std::mem::align_of::<__Reply__processor_set_create_t>() - 4usize];
    ["Offset of field: __Reply__processor_set_create_t::Head"]
        [::std::mem::offset_of!(__Reply__processor_set_create_t, Head) - 0usize];
    ["Offset of field: __Reply__processor_set_create_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__processor_set_create_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__processor_set_create_t::new_set"]
        [::std::mem::offset_of!(__Reply__processor_set_create_t, new_set) - 28usize];
    ["Offset of field: __Reply__processor_set_create_t::new_name"]
        [::std::mem::offset_of!(__Reply__processor_set_create_t, new_name) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_memory_object_memory_entry_64_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub entry_handle: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_memory_object_memory_entry_64_t"]
        [::std::mem::size_of::<__Reply__mach_memory_object_memory_entry_64_t>() - 40usize];
    ["Alignment of __Reply__mach_memory_object_memory_entry_64_t"]
        [::std::mem::align_of::<__Reply__mach_memory_object_memory_entry_64_t>() - 4usize];
    ["Offset of field: __Reply__mach_memory_object_memory_entry_64_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_memory_object_memory_entry_64_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_memory_object_memory_entry_64_t::msgh_body"][::std::mem::offset_of!(
        __Reply__mach_memory_object_memory_entry_64_t,
        msgh_body
    ) - 24usize];
    ["Offset of field: __Reply__mach_memory_object_memory_entry_64_t::entry_handle"][::std::mem::offset_of!(
        __Reply__mach_memory_object_memory_entry_64_t,
        entry_handle
    ) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_statistics_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub host_info_outCnt: mach_msg_type_number_t,
    pub host_info_out: [integer_t; 68usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__host_statistics_t"]
        [::std::mem::size_of::<__Reply__host_statistics_t>() - 312usize];
    ["Alignment of __Reply__host_statistics_t"]
        [::std::mem::align_of::<__Reply__host_statistics_t>() - 4usize];
    ["Offset of field: __Reply__host_statistics_t::Head"]
        [::std::mem::offset_of!(__Reply__host_statistics_t, Head) - 0usize];
    ["Offset of field: __Reply__host_statistics_t::NDR"]
        [::std::mem::offset_of!(__Reply__host_statistics_t, NDR) - 24usize];
    ["Offset of field: __Reply__host_statistics_t::RetCode"]
        [::std::mem::offset_of!(__Reply__host_statistics_t, RetCode) - 32usize];
    ["Offset of field: __Reply__host_statistics_t::host_info_outCnt"]
        [::std::mem::offset_of!(__Reply__host_statistics_t, host_info_outCnt) - 36usize];
    ["Offset of field: __Reply__host_statistics_t::host_info_out"]
        [::std::mem::offset_of!(__Reply__host_statistics_t, host_info_out) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_request_notification_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__host_request_notification_t"]
        [::std::mem::size_of::<__Reply__host_request_notification_t>() - 36usize];
    ["Alignment of __Reply__host_request_notification_t"]
        [::std::mem::align_of::<__Reply__host_request_notification_t>() - 4usize];
    ["Offset of field: __Reply__host_request_notification_t::Head"]
        [::std::mem::offset_of!(__Reply__host_request_notification_t, Head) - 0usize];
    ["Offset of field: __Reply__host_request_notification_t::NDR"]
        [::std::mem::offset_of!(__Reply__host_request_notification_t, NDR) - 24usize];
    ["Offset of field: __Reply__host_request_notification_t::RetCode"]
        [::std::mem::offset_of!(__Reply__host_request_notification_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_lockgroup_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub lockgroup_info: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub lockgroup_infoCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__host_lockgroup_info_t"]
        [::std::mem::size_of::<__Reply__host_lockgroup_info_t>() - 56usize];
    ["Alignment of __Reply__host_lockgroup_info_t"]
        [::std::mem::align_of::<__Reply__host_lockgroup_info_t>() - 4usize];
    ["Offset of field: __Reply__host_lockgroup_info_t::Head"]
        [::std::mem::offset_of!(__Reply__host_lockgroup_info_t, Head) - 0usize];
    ["Offset of field: __Reply__host_lockgroup_info_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__host_lockgroup_info_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__host_lockgroup_info_t::lockgroup_info"]
        [::std::mem::offset_of!(__Reply__host_lockgroup_info_t, lockgroup_info) - 28usize];
    ["Offset of field: __Reply__host_lockgroup_info_t::NDR"]
        [::std::mem::offset_of!(__Reply__host_lockgroup_info_t, NDR) - 44usize];
    ["Offset of field: __Reply__host_lockgroup_info_t::lockgroup_infoCnt"]
        [::std::mem::offset_of!(__Reply__host_lockgroup_info_t, lockgroup_infoCnt) - 52usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_statistics64_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub host_info64_outCnt: mach_msg_type_number_t,
    pub host_info64_out: [integer_t; 256usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__host_statistics64_t"]
        [::std::mem::size_of::<__Reply__host_statistics64_t>() - 1064usize];
    ["Alignment of __Reply__host_statistics64_t"]
        [::std::mem::align_of::<__Reply__host_statistics64_t>() - 4usize];
    ["Offset of field: __Reply__host_statistics64_t::Head"]
        [::std::mem::offset_of!(__Reply__host_statistics64_t, Head) - 0usize];
    ["Offset of field: __Reply__host_statistics64_t::NDR"]
        [::std::mem::offset_of!(__Reply__host_statistics64_t, NDR) - 24usize];
    ["Offset of field: __Reply__host_statistics64_t::RetCode"]
        [::std::mem::offset_of!(__Reply__host_statistics64_t, RetCode) - 32usize];
    ["Offset of field: __Reply__host_statistics64_t::host_info64_outCnt"]
        [::std::mem::offset_of!(__Reply__host_statistics64_t, host_info64_outCnt) - 36usize];
    ["Offset of field: __Reply__host_statistics64_t::host_info64_out"]
        [::std::mem::offset_of!(__Reply__host_statistics64_t, host_info64_out) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_zone_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub names: mach_msg_ool_descriptor_t,
    pub info: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub namesCnt: mach_msg_type_number_t,
    pub infoCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_zone_info_t"]
        [::std::mem::size_of::<__Reply__mach_zone_info_t>() - 76usize];
    ["Alignment of __Reply__mach_zone_info_t"]
        [::std::mem::align_of::<__Reply__mach_zone_info_t>() - 4usize];
    ["Offset of field: __Reply__mach_zone_info_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_zone_info_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_zone_info_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__mach_zone_info_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__mach_zone_info_t::names"]
        [::std::mem::offset_of!(__Reply__mach_zone_info_t, names) - 28usize];
    ["Offset of field: __Reply__mach_zone_info_t::info"]
        [::std::mem::offset_of!(__Reply__mach_zone_info_t, info) - 44usize];
    ["Offset of field: __Reply__mach_zone_info_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_zone_info_t, NDR) - 60usize];
    ["Offset of field: __Reply__mach_zone_info_t::namesCnt"]
        [::std::mem::offset_of!(__Reply__mach_zone_info_t, namesCnt) - 68usize];
    ["Offset of field: __Reply__mach_zone_info_t::infoCnt"]
        [::std::mem::offset_of!(__Reply__mach_zone_info_t, infoCnt) - 72usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_create_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub voucher: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__host_create_mach_voucher_t"]
        [::std::mem::size_of::<__Reply__host_create_mach_voucher_t>() - 40usize];
    ["Alignment of __Reply__host_create_mach_voucher_t"]
        [::std::mem::align_of::<__Reply__host_create_mach_voucher_t>() - 4usize];
    ["Offset of field: __Reply__host_create_mach_voucher_t::Head"]
        [::std::mem::offset_of!(__Reply__host_create_mach_voucher_t, Head) - 0usize];
    ["Offset of field: __Reply__host_create_mach_voucher_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__host_create_mach_voucher_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__host_create_mach_voucher_t::voucher"]
        [::std::mem::offset_of!(__Reply__host_create_mach_voucher_t, voucher) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_register_mach_voucher_attr_manager_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_attr_control: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub new_key: mach_voucher_attr_key_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__host_register_mach_voucher_attr_manager_t"]
        [::std::mem::size_of::<__Reply__host_register_mach_voucher_attr_manager_t>() - 52usize];
    ["Alignment of __Reply__host_register_mach_voucher_attr_manager_t"]
        [::std::mem::align_of::<__Reply__host_register_mach_voucher_attr_manager_t>() - 4usize];
    ["Offset of field: __Reply__host_register_mach_voucher_attr_manager_t::Head"]
        [::std::mem::offset_of!(__Reply__host_register_mach_voucher_attr_manager_t, Head) - 0usize];
    ["Offset of field: __Reply__host_register_mach_voucher_attr_manager_t::msgh_body"][::std::mem::offset_of!(
        __Reply__host_register_mach_voucher_attr_manager_t,
        msgh_body
    ) - 24usize];
    ["Offset of field: __Reply__host_register_mach_voucher_attr_manager_t::new_attr_control"][::std::mem::offset_of!(
        __Reply__host_register_mach_voucher_attr_manager_t,
        new_attr_control
    )
        - 28usize];
    ["Offset of field: __Reply__host_register_mach_voucher_attr_manager_t::NDR"]
        [::std::mem::offset_of!(__Reply__host_register_mach_voucher_attr_manager_t, NDR) - 40usize];
    ["Offset of field: __Reply__host_register_mach_voucher_attr_manager_t::new_key"][::std::mem::offset_of!(
        __Reply__host_register_mach_voucher_attr_manager_t,
        new_key
    ) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_register_well_known_mach_voucher_attr_manager_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_attr_control: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__host_register_well_known_mach_voucher_attr_manager_t"][::std::mem::size_of::<
        __Reply__host_register_well_known_mach_voucher_attr_manager_t,
    >() - 40usize];
    ["Alignment of __Reply__host_register_well_known_mach_voucher_attr_manager_t"]
        [::std::mem::align_of::<__Reply__host_register_well_known_mach_voucher_attr_manager_t>()
            - 4usize];
    ["Offset of field: __Reply__host_register_well_known_mach_voucher_attr_manager_t::Head"][::std::mem::offset_of!(
        __Reply__host_register_well_known_mach_voucher_attr_manager_t,
        Head
    )
        - 0usize];
    ["Offset of field: __Reply__host_register_well_known_mach_voucher_attr_manager_t::msgh_body"][::std::mem::offset_of!(
        __Reply__host_register_well_known_mach_voucher_attr_manager_t,
        msgh_body
    )
        - 24usize];
    ["Offset of field: __Reply__host_register_well_known_mach_voucher_attr_manager_t::new_attr_control"] [:: std :: mem :: offset_of ! (__Reply__host_register_well_known_mach_voucher_attr_manager_t , new_attr_control) - 28usize] ;
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_set_atm_diagnostic_flag_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__host_set_atm_diagnostic_flag_t"]
        [::std::mem::size_of::<__Reply__host_set_atm_diagnostic_flag_t>() - 36usize];
    ["Alignment of __Reply__host_set_atm_diagnostic_flag_t"]
        [::std::mem::align_of::<__Reply__host_set_atm_diagnostic_flag_t>() - 4usize];
    ["Offset of field: __Reply__host_set_atm_diagnostic_flag_t::Head"]
        [::std::mem::offset_of!(__Reply__host_set_atm_diagnostic_flag_t, Head) - 0usize];
    ["Offset of field: __Reply__host_set_atm_diagnostic_flag_t::NDR"]
        [::std::mem::offset_of!(__Reply__host_set_atm_diagnostic_flag_t, NDR) - 24usize];
    ["Offset of field: __Reply__host_set_atm_diagnostic_flag_t::RetCode"]
        [::std::mem::offset_of!(__Reply__host_set_atm_diagnostic_flag_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_get_atm_diagnostic_flag_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub diagnostic_flag: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__host_get_atm_diagnostic_flag_t"]
        [::std::mem::size_of::<__Reply__host_get_atm_diagnostic_flag_t>() - 40usize];
    ["Alignment of __Reply__host_get_atm_diagnostic_flag_t"]
        [::std::mem::align_of::<__Reply__host_get_atm_diagnostic_flag_t>() - 4usize];
    ["Offset of field: __Reply__host_get_atm_diagnostic_flag_t::Head"]
        [::std::mem::offset_of!(__Reply__host_get_atm_diagnostic_flag_t, Head) - 0usize];
    ["Offset of field: __Reply__host_get_atm_diagnostic_flag_t::NDR"]
        [::std::mem::offset_of!(__Reply__host_get_atm_diagnostic_flag_t, NDR) - 24usize];
    ["Offset of field: __Reply__host_get_atm_diagnostic_flag_t::RetCode"]
        [::std::mem::offset_of!(__Reply__host_get_atm_diagnostic_flag_t, RetCode) - 32usize];
    ["Offset of field: __Reply__host_get_atm_diagnostic_flag_t::diagnostic_flag"][::std::mem::offset_of!(
        __Reply__host_get_atm_diagnostic_flag_t,
        diagnostic_flag
    ) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_memory_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub names: mach_msg_ool_descriptor_t,
    pub info: mach_msg_ool_descriptor_t,
    pub memory_info: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub namesCnt: mach_msg_type_number_t,
    pub infoCnt: mach_msg_type_number_t,
    pub memory_infoCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_memory_info_t"]
        [::std::mem::size_of::<__Reply__mach_memory_info_t>() - 96usize];
    ["Alignment of __Reply__mach_memory_info_t"]
        [::std::mem::align_of::<__Reply__mach_memory_info_t>() - 4usize];
    ["Offset of field: __Reply__mach_memory_info_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_memory_info_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_memory_info_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__mach_memory_info_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__mach_memory_info_t::names"]
        [::std::mem::offset_of!(__Reply__mach_memory_info_t, names) - 28usize];
    ["Offset of field: __Reply__mach_memory_info_t::info"]
        [::std::mem::offset_of!(__Reply__mach_memory_info_t, info) - 44usize];
    ["Offset of field: __Reply__mach_memory_info_t::memory_info"]
        [::std::mem::offset_of!(__Reply__mach_memory_info_t, memory_info) - 60usize];
    ["Offset of field: __Reply__mach_memory_info_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_memory_info_t, NDR) - 76usize];
    ["Offset of field: __Reply__mach_memory_info_t::namesCnt"]
        [::std::mem::offset_of!(__Reply__mach_memory_info_t, namesCnt) - 84usize];
    ["Offset of field: __Reply__mach_memory_info_t::infoCnt"]
        [::std::mem::offset_of!(__Reply__mach_memory_info_t, infoCnt) - 88usize];
    ["Offset of field: __Reply__mach_memory_info_t::memory_infoCnt"]
        [::std::mem::offset_of!(__Reply__mach_memory_info_t, memory_infoCnt) - 92usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_set_multiuser_config_flags_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__host_set_multiuser_config_flags_t"]
        [::std::mem::size_of::<__Reply__host_set_multiuser_config_flags_t>() - 36usize];
    ["Alignment of __Reply__host_set_multiuser_config_flags_t"]
        [::std::mem::align_of::<__Reply__host_set_multiuser_config_flags_t>() - 4usize];
    ["Offset of field: __Reply__host_set_multiuser_config_flags_t::Head"]
        [::std::mem::offset_of!(__Reply__host_set_multiuser_config_flags_t, Head) - 0usize];
    ["Offset of field: __Reply__host_set_multiuser_config_flags_t::NDR"]
        [::std::mem::offset_of!(__Reply__host_set_multiuser_config_flags_t, NDR) - 24usize];
    ["Offset of field: __Reply__host_set_multiuser_config_flags_t::RetCode"]
        [::std::mem::offset_of!(__Reply__host_set_multiuser_config_flags_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_get_multiuser_config_flags_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub multiuser_flags: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__host_get_multiuser_config_flags_t"]
        [::std::mem::size_of::<__Reply__host_get_multiuser_config_flags_t>() - 40usize];
    ["Alignment of __Reply__host_get_multiuser_config_flags_t"]
        [::std::mem::align_of::<__Reply__host_get_multiuser_config_flags_t>() - 4usize];
    ["Offset of field: __Reply__host_get_multiuser_config_flags_t::Head"]
        [::std::mem::offset_of!(__Reply__host_get_multiuser_config_flags_t, Head) - 0usize];
    ["Offset of field: __Reply__host_get_multiuser_config_flags_t::NDR"]
        [::std::mem::offset_of!(__Reply__host_get_multiuser_config_flags_t, NDR) - 24usize];
    ["Offset of field: __Reply__host_get_multiuser_config_flags_t::RetCode"]
        [::std::mem::offset_of!(__Reply__host_get_multiuser_config_flags_t, RetCode) - 32usize];
    ["Offset of field: __Reply__host_get_multiuser_config_flags_t::multiuser_flags"][::std::mem::offset_of!(
        __Reply__host_get_multiuser_config_flags_t,
        multiuser_flags
    ) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_check_multiuser_mode_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub multiuser_mode: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__host_check_multiuser_mode_t"]
        [::std::mem::size_of::<__Reply__host_check_multiuser_mode_t>() - 40usize];
    ["Alignment of __Reply__host_check_multiuser_mode_t"]
        [::std::mem::align_of::<__Reply__host_check_multiuser_mode_t>() - 4usize];
    ["Offset of field: __Reply__host_check_multiuser_mode_t::Head"]
        [::std::mem::offset_of!(__Reply__host_check_multiuser_mode_t, Head) - 0usize];
    ["Offset of field: __Reply__host_check_multiuser_mode_t::NDR"]
        [::std::mem::offset_of!(__Reply__host_check_multiuser_mode_t, NDR) - 24usize];
    ["Offset of field: __Reply__host_check_multiuser_mode_t::RetCode"]
        [::std::mem::offset_of!(__Reply__host_check_multiuser_mode_t, RetCode) - 32usize];
    ["Offset of field: __Reply__host_check_multiuser_mode_t::multiuser_mode"]
        [::std::mem::offset_of!(__Reply__host_check_multiuser_mode_t, multiuser_mode) - 36usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_zone_info_for_zone_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub info: mach_zone_info_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_zone_info_for_zone_t"]
        [::std::mem::size_of::<__Reply__mach_zone_info_for_zone_t>() - 100usize];
    ["Alignment of __Reply__mach_zone_info_for_zone_t"]
        [::std::mem::align_of::<__Reply__mach_zone_info_for_zone_t>() - 4usize];
    ["Offset of field: __Reply__mach_zone_info_for_zone_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_zone_info_for_zone_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_zone_info_for_zone_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_zone_info_for_zone_t, NDR) - 24usize];
    ["Offset of field: __Reply__mach_zone_info_for_zone_t::RetCode"]
        [::std::mem::offset_of!(__Reply__mach_zone_info_for_zone_t, RetCode) - 32usize];
    ["Offset of field: __Reply__mach_zone_info_for_zone_t::info"]
        [::std::mem::offset_of!(__Reply__mach_zone_info_for_zone_t, info) - 36usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__mach_host_subsystem {
    pub Reply_host_info: __Reply__host_info_t,
    pub Reply_host_kernel_version: __Reply__host_kernel_version_t,
    pub Reply__host_page_size: __Reply___host_page_size_t,
    pub Reply_mach_memory_object_memory_entry: __Reply__mach_memory_object_memory_entry_t,
    pub Reply_host_processor_info: __Reply__host_processor_info_t,
    pub Reply_host_get_io_main: __Reply__host_get_io_main_t,
    pub Reply_host_get_clock_service: __Reply__host_get_clock_service_t,
    pub Reply_kmod_get_info: __Reply__kmod_get_info_t,
    pub Reply_host_virtual_physical_table_info: __Reply__host_virtual_physical_table_info_t,
    pub Reply_processor_set_default: __Reply__processor_set_default_t,
    pub Reply_processor_set_create: __Reply__processor_set_create_t,
    pub Reply_mach_memory_object_memory_entry_64: __Reply__mach_memory_object_memory_entry_64_t,
    pub Reply_host_statistics: __Reply__host_statistics_t,
    pub Reply_host_request_notification: __Reply__host_request_notification_t,
    pub Reply_host_lockgroup_info: __Reply__host_lockgroup_info_t,
    pub Reply_host_statistics64: __Reply__host_statistics64_t,
    pub Reply_mach_zone_info: __Reply__mach_zone_info_t,
    pub Reply_host_create_mach_voucher: __Reply__host_create_mach_voucher_t,
    pub Reply_host_register_mach_voucher_attr_manager:
        __Reply__host_register_mach_voucher_attr_manager_t,
    pub Reply_host_register_well_known_mach_voucher_attr_manager:
        __Reply__host_register_well_known_mach_voucher_attr_manager_t,
    pub Reply_host_set_atm_diagnostic_flag: __Reply__host_set_atm_diagnostic_flag_t,
    pub Reply_host_get_atm_diagnostic_flag: __Reply__host_get_atm_diagnostic_flag_t,
    pub Reply_mach_memory_info: __Reply__mach_memory_info_t,
    pub Reply_host_set_multiuser_config_flags: __Reply__host_set_multiuser_config_flags_t,
    pub Reply_host_get_multiuser_config_flags: __Reply__host_get_multiuser_config_flags_t,
    pub Reply_host_check_multiuser_mode: __Reply__host_check_multiuser_mode_t,
    pub Reply_mach_zone_info_for_zone: __Reply__mach_zone_info_for_zone_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __ReplyUnion__mach_host_subsystem"]
        [::std::mem::size_of::<__ReplyUnion__mach_host_subsystem>() - 1064usize];
    ["Alignment of __ReplyUnion__mach_host_subsystem"]
        [::std::mem::align_of::<__ReplyUnion__mach_host_subsystem>() - 4usize];
    ["Offset of field: __ReplyUnion__mach_host_subsystem::Reply_host_info"]
        [::std::mem::offset_of!(__ReplyUnion__mach_host_subsystem, Reply_host_info) - 0usize];
    ["Offset of field: __ReplyUnion__mach_host_subsystem::Reply_host_kernel_version"][::std::mem::offset_of!(
        __ReplyUnion__mach_host_subsystem,
        Reply_host_kernel_version
    ) - 0usize];
    ["Offset of field: __ReplyUnion__mach_host_subsystem::Reply__host_page_size"]
        [::std::mem::offset_of!(__ReplyUnion__mach_host_subsystem, Reply__host_page_size) - 0usize];
    ["Offset of field: __ReplyUnion__mach_host_subsystem::Reply_mach_memory_object_memory_entry"][::std::mem::offset_of!(
        __ReplyUnion__mach_host_subsystem,
        Reply_mach_memory_object_memory_entry
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__mach_host_subsystem::Reply_host_processor_info"][::std::mem::offset_of!(
        __ReplyUnion__mach_host_subsystem,
        Reply_host_processor_info
    ) - 0usize];
    ["Offset of field: __ReplyUnion__mach_host_subsystem::Reply_host_get_io_main"][::std::mem::offset_of!(
        __ReplyUnion__mach_host_subsystem,
        Reply_host_get_io_main
    ) - 0usize];
    ["Offset of field: __ReplyUnion__mach_host_subsystem::Reply_host_get_clock_service"][::std::mem::offset_of!(
        __ReplyUnion__mach_host_subsystem,
        Reply_host_get_clock_service
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__mach_host_subsystem::Reply_kmod_get_info"]
        [::std::mem::offset_of!(__ReplyUnion__mach_host_subsystem, Reply_kmod_get_info) - 0usize];
    ["Offset of field: __ReplyUnion__mach_host_subsystem::Reply_host_virtual_physical_table_info"] [:: std :: mem :: offset_of ! (__ReplyUnion__mach_host_subsystem , Reply_host_virtual_physical_table_info) - 0usize] ;
    ["Offset of field: __ReplyUnion__mach_host_subsystem::Reply_processor_set_default"][::std::mem::offset_of!(
        __ReplyUnion__mach_host_subsystem,
        Reply_processor_set_default
    ) - 0usize];
    ["Offset of field: __ReplyUnion__mach_host_subsystem::Reply_processor_set_create"][::std::mem::offset_of!(
        __ReplyUnion__mach_host_subsystem,
        Reply_processor_set_create
    ) - 0usize];
    ["Offset of field: __ReplyUnion__mach_host_subsystem::Reply_mach_memory_object_memory_entry_64"] [:: std :: mem :: offset_of ! (__ReplyUnion__mach_host_subsystem , Reply_mach_memory_object_memory_entry_64) - 0usize] ;
    ["Offset of field: __ReplyUnion__mach_host_subsystem::Reply_host_statistics"]
        [::std::mem::offset_of!(__ReplyUnion__mach_host_subsystem, Reply_host_statistics) - 0usize];
    ["Offset of field: __ReplyUnion__mach_host_subsystem::Reply_host_request_notification"][::std::mem::offset_of!(
        __ReplyUnion__mach_host_subsystem,
        Reply_host_request_notification
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__mach_host_subsystem::Reply_host_lockgroup_info"][::std::mem::offset_of!(
        __ReplyUnion__mach_host_subsystem,
        Reply_host_lockgroup_info
    ) - 0usize];
    ["Offset of field: __ReplyUnion__mach_host_subsystem::Reply_host_statistics64"][::std::mem::offset_of!(
        __ReplyUnion__mach_host_subsystem,
        Reply_host_statistics64
    ) - 0usize];
    ["Offset of field: __ReplyUnion__mach_host_subsystem::Reply_mach_zone_info"]
        [::std::mem::offset_of!(__ReplyUnion__mach_host_subsystem, Reply_mach_zone_info) - 0usize];
    ["Offset of field: __ReplyUnion__mach_host_subsystem::Reply_host_create_mach_voucher"][::std::mem::offset_of!(
        __ReplyUnion__mach_host_subsystem,
        Reply_host_create_mach_voucher
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__mach_host_subsystem::Reply_host_register_mach_voucher_attr_manager"] [:: std :: mem :: offset_of ! (__ReplyUnion__mach_host_subsystem , Reply_host_register_mach_voucher_attr_manager) - 0usize] ;
    ["Offset of field: __ReplyUnion__mach_host_subsystem::Reply_host_register_well_known_mach_voucher_attr_manager"] [:: std :: mem :: offset_of ! (__ReplyUnion__mach_host_subsystem , Reply_host_register_well_known_mach_voucher_attr_manager) - 0usize] ;
    ["Offset of field: __ReplyUnion__mach_host_subsystem::Reply_host_set_atm_diagnostic_flag"][::std::mem::offset_of!(
        __ReplyUnion__mach_host_subsystem,
        Reply_host_set_atm_diagnostic_flag
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__mach_host_subsystem::Reply_host_get_atm_diagnostic_flag"][::std::mem::offset_of!(
        __ReplyUnion__mach_host_subsystem,
        Reply_host_get_atm_diagnostic_flag
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__mach_host_subsystem::Reply_mach_memory_info"][::std::mem::offset_of!(
        __ReplyUnion__mach_host_subsystem,
        Reply_mach_memory_info
    ) - 0usize];
    ["Offset of field: __ReplyUnion__mach_host_subsystem::Reply_host_set_multiuser_config_flags"][::std::mem::offset_of!(
        __ReplyUnion__mach_host_subsystem,
        Reply_host_set_multiuser_config_flags
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__mach_host_subsystem::Reply_host_get_multiuser_config_flags"][::std::mem::offset_of!(
        __ReplyUnion__mach_host_subsystem,
        Reply_host_get_multiuser_config_flags
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__mach_host_subsystem::Reply_host_check_multiuser_mode"][::std::mem::offset_of!(
        __ReplyUnion__mach_host_subsystem,
        Reply_host_check_multiuser_mode
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__mach_host_subsystem::Reply_mach_zone_info_for_zone"][::std::mem::offset_of!(
        __ReplyUnion__mach_host_subsystem,
        Reply_mach_zone_info_for_zone
    )
        - 0usize];
};
pub type routine_arg_type = ::std::os::raw::c_uint;
pub type routine_arg_offset = ::std::os::raw::c_uint;
pub type routine_arg_size = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rpc_routine_arg_descriptor {
    pub type_: routine_arg_type,
    pub size: routine_arg_size,
    pub count: routine_arg_size,
    pub offset: routine_arg_offset,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rpc_routine_arg_descriptor"]
        [::std::mem::size_of::<rpc_routine_arg_descriptor>() - 16usize];
    ["Alignment of rpc_routine_arg_descriptor"]
        [::std::mem::align_of::<rpc_routine_arg_descriptor>() - 4usize];
    ["Offset of field: rpc_routine_arg_descriptor::type_"]
        [::std::mem::offset_of!(rpc_routine_arg_descriptor, type_) - 0usize];
    ["Offset of field: rpc_routine_arg_descriptor::size"]
        [::std::mem::offset_of!(rpc_routine_arg_descriptor, size) - 4usize];
    ["Offset of field: rpc_routine_arg_descriptor::count"]
        [::std::mem::offset_of!(rpc_routine_arg_descriptor, count) - 8usize];
    ["Offset of field: rpc_routine_arg_descriptor::offset"]
        [::std::mem::offset_of!(rpc_routine_arg_descriptor, offset) - 12usize];
};
pub type rpc_routine_arg_descriptor_t = *mut rpc_routine_arg_descriptor;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rpc_routine_descriptor {
    pub impl_routine: mig_impl_routine_t,
    pub stub_routine: mig_stub_routine_t,
    pub argc: ::std::os::raw::c_uint,
    pub descr_count: ::std::os::raw::c_uint,
    pub arg_descr: rpc_routine_arg_descriptor_t,
    pub max_reply_msg: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rpc_routine_descriptor"][::std::mem::size_of::<rpc_routine_descriptor>() - 40usize];
    ["Alignment of rpc_routine_descriptor"]
        [::std::mem::align_of::<rpc_routine_descriptor>() - 8usize];
    ["Offset of field: rpc_routine_descriptor::impl_routine"]
        [::std::mem::offset_of!(rpc_routine_descriptor, impl_routine) - 0usize];
    ["Offset of field: rpc_routine_descriptor::stub_routine"]
        [::std::mem::offset_of!(rpc_routine_descriptor, stub_routine) - 8usize];
    ["Offset of field: rpc_routine_descriptor::argc"]
        [::std::mem::offset_of!(rpc_routine_descriptor, argc) - 16usize];
    ["Offset of field: rpc_routine_descriptor::descr_count"]
        [::std::mem::offset_of!(rpc_routine_descriptor, descr_count) - 20usize];
    ["Offset of field: rpc_routine_descriptor::arg_descr"]
        [::std::mem::offset_of!(rpc_routine_descriptor, arg_descr) - 24usize];
    ["Offset of field: rpc_routine_descriptor::max_reply_msg"]
        [::std::mem::offset_of!(rpc_routine_descriptor, max_reply_msg) - 32usize];
};
pub type rpc_routine_descriptor_t = *mut rpc_routine_descriptor;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rpc_signature {
    pub rd: rpc_routine_descriptor,
    pub rad: [rpc_routine_arg_descriptor; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rpc_signature"][::std::mem::size_of::<rpc_signature>() - 56usize];
    ["Alignment of rpc_signature"][::std::mem::align_of::<rpc_signature>() - 8usize];
    ["Offset of field: rpc_signature::rd"][::std::mem::offset_of!(rpc_signature, rd) - 0usize];
    ["Offset of field: rpc_signature::rad"][::std::mem::offset_of!(rpc_signature, rad) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rpc_subsystem {
    pub reserved: *mut ::std::os::raw::c_void,
    pub start: mach_msg_id_t,
    pub end: mach_msg_id_t,
    pub maxsize: ::std::os::raw::c_uint,
    pub base_addr: vm_address_t,
    pub routine: [rpc_routine_descriptor; 1usize],
    pub arg_descriptor: [rpc_routine_arg_descriptor; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rpc_subsystem"][::std::mem::size_of::<rpc_subsystem>() - 88usize];
    ["Alignment of rpc_subsystem"][::std::mem::align_of::<rpc_subsystem>() - 8usize];
    ["Offset of field: rpc_subsystem::reserved"]
        [::std::mem::offset_of!(rpc_subsystem, reserved) - 0usize];
    ["Offset of field: rpc_subsystem::start"]
        [::std::mem::offset_of!(rpc_subsystem, start) - 8usize];
    ["Offset of field: rpc_subsystem::end"][::std::mem::offset_of!(rpc_subsystem, end) - 12usize];
    ["Offset of field: rpc_subsystem::maxsize"]
        [::std::mem::offset_of!(rpc_subsystem, maxsize) - 16usize];
    ["Offset of field: rpc_subsystem::base_addr"]
        [::std::mem::offset_of!(rpc_subsystem, base_addr) - 24usize];
    ["Offset of field: rpc_subsystem::routine"]
        [::std::mem::offset_of!(rpc_subsystem, routine) - 32usize];
    ["Offset of field: rpc_subsystem::arg_descriptor"]
        [::std::mem::offset_of!(rpc_subsystem, arg_descriptor) - 72usize];
};
pub type rpc_subsystem_t = *mut rpc_subsystem;
pub type mach_error_t = kern_return_t;
pub type mach_error_fn_t = ::std::option::Option<unsafe extern "C" fn() -> mach_error_t>;
unsafe extern "C" {
    pub fn mach_error_string(error_value: mach_error_t) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn mach_error(str_: *const ::std::os::raw::c_char, error_value: mach_error_t);
}
unsafe extern "C" {
    pub fn mach_error_type(error_value: mach_error_t) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn panic_init(arg1: mach_port_t);
}
unsafe extern "C" {
    pub fn panic(arg1: *const ::std::os::raw::c_char, ...);
}
unsafe extern "C" {
    pub fn slot_name(
        arg1: cpu_type_t,
        arg2: cpu_subtype_t,
        arg3: *mut *mut ::std::os::raw::c_char,
        arg4: *mut *mut ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    pub fn mig_reply_setup(arg1: *mut mach_msg_header_t, arg2: *mut mach_msg_header_t);
}
unsafe extern "C" {
    pub fn mach_msg_destroy(arg1: *mut mach_msg_header_t);
}
unsafe extern "C" {
    pub fn mach_msg_receive(arg1: *mut mach_msg_header_t) -> mach_msg_return_t;
}
unsafe extern "C" {
    pub fn mach_msg_send(arg1: *mut mach_msg_header_t) -> mach_msg_return_t;
}
unsafe extern "C" {
    pub fn mach_msg_server_once(
        arg1: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut mach_msg_header_t,
                arg2: *mut mach_msg_header_t,
            ) -> boolean_t,
        >,
        arg2: mach_msg_size_t,
        arg3: mach_port_t,
        arg4: mach_msg_options_t,
    ) -> mach_msg_return_t;
}
unsafe extern "C" {
    pub fn mach_msg_server(
        arg1: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut mach_msg_header_t,
                arg2: *mut mach_msg_header_t,
            ) -> boolean_t,
        >,
        arg2: mach_msg_size_t,
        arg3: mach_port_t,
        arg4: mach_msg_options_t,
    ) -> mach_msg_return_t;
}
unsafe extern "C" {
    pub fn mach_msg_server_importance(
        arg1: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut mach_msg_header_t,
                arg2: *mut mach_msg_header_t,
            ) -> boolean_t,
        >,
        arg2: mach_msg_size_t,
        arg3: mach_port_t,
        arg4: mach_msg_options_t,
    ) -> mach_msg_return_t;
}
unsafe extern "C" {
    pub fn clock_get_res(arg1: mach_port_t, arg2: *mut clock_res_t) -> kern_return_t;
}
unsafe extern "C" {
    pub fn clock_set_res(arg1: mach_port_t, arg2: clock_res_t) -> kern_return_t;
}
unsafe extern "C" {
    pub fn clock_sleep(
        arg1: mach_port_t,
        arg2: ::std::os::raw::c_int,
        arg3: mach_timespec_t,
        arg4: *mut mach_timespec_t,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct voucher_mach_msg_state_s {
    _unused: [u8; 0],
}
pub type voucher_mach_msg_state_t = *mut voucher_mach_msg_state_s;
unsafe extern "C" {
    pub fn voucher_mach_msg_set(msg: *mut mach_msg_header_t) -> boolean_t;
}
unsafe extern "C" {
    pub fn voucher_mach_msg_clear(msg: *mut mach_msg_header_t);
}
unsafe extern "C" {
    pub fn voucher_mach_msg_adopt(msg: *mut mach_msg_header_t) -> voucher_mach_msg_state_t;
}
unsafe extern "C" {
    pub fn voucher_mach_msg_revert(state: voucher_mach_msg_state_t);
}
pub type uv__io_cb = ::std::option::Option<
    unsafe extern "C" fn(loop_: *mut uv_loop_s, w: *mut uv__io_s, events: ::std::os::raw::c_uint),
>;
pub type uv__io_t = uv__io_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uv__io_s {
    pub cb: uv__io_cb,
    pub pending_queue: uv__queue,
    pub watcher_queue: uv__queue,
    pub pevents: ::std::os::raw::c_uint,
    pub events: ::std::os::raw::c_uint,
    pub fd: ::std::os::raw::c_int,
    pub rcount: ::std::os::raw::c_int,
    pub wcount: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uv__io_s"][::std::mem::size_of::<uv__io_s>() - 64usize];
    ["Alignment of uv__io_s"][::std::mem::align_of::<uv__io_s>() - 8usize];
    ["Offset of field: uv__io_s::cb"][::std::mem::offset_of!(uv__io_s, cb) - 0usize];
    ["Offset of field: uv__io_s::pending_queue"]
        [::std::mem::offset_of!(uv__io_s, pending_queue) - 8usize];
    ["Offset of field: uv__io_s::watcher_queue"]
        [::std::mem::offset_of!(uv__io_s, watcher_queue) - 24usize];
    ["Offset of field: uv__io_s::pevents"][::std::mem::offset_of!(uv__io_s, pevents) - 40usize];
    ["Offset of field: uv__io_s::events"][::std::mem::offset_of!(uv__io_s, events) - 44usize];
    ["Offset of field: uv__io_s::fd"][::std::mem::offset_of!(uv__io_s, fd) - 48usize];
    ["Offset of field: uv__io_s::rcount"][::std::mem::offset_of!(uv__io_s, rcount) - 52usize];
    ["Offset of field: uv__io_s::wcount"][::std::mem::offset_of!(uv__io_s, wcount) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uv_buf_t {
    pub base: *mut ::std::os::raw::c_char,
    pub len: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uv_buf_t"][::std::mem::size_of::<uv_buf_t>() - 16usize];
    ["Alignment of uv_buf_t"][::std::mem::align_of::<uv_buf_t>() - 8usize];
    ["Offset of field: uv_buf_t::base"][::std::mem::offset_of!(uv_buf_t, base) - 0usize];
    ["Offset of field: uv_buf_t::len"][::std::mem::offset_of!(uv_buf_t, len) - 8usize];
};
pub type uv_file = ::std::os::raw::c_int;
pub type uv_os_sock_t = ::std::os::raw::c_int;
pub type uv_os_fd_t = ::std::os::raw::c_int;
pub type uv_pid_t = pid_t;
pub type uv_once_t = pthread_once_t;
pub type uv_thread_t = pthread_t;
pub type uv_mutex_t = pthread_mutex_t;
pub type uv_rwlock_t = pthread_rwlock_t;
pub type uv_sem_t = semaphore_t;
pub type uv_cond_t = pthread_cond_t;
pub type uv_key_t = pthread_key_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _uv_barrier {
    pub mutex: uv_mutex_t,
    pub cond: uv_cond_t,
    pub threshold: ::std::os::raw::c_uint,
    pub in_: ::std::os::raw::c_uint,
    pub out: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _uv_barrier"][::std::mem::size_of::<_uv_barrier>() - 128usize];
    ["Alignment of _uv_barrier"][::std::mem::align_of::<_uv_barrier>() - 8usize];
    ["Offset of field: _uv_barrier::mutex"][::std::mem::offset_of!(_uv_barrier, mutex) - 0usize];
    ["Offset of field: _uv_barrier::cond"][::std::mem::offset_of!(_uv_barrier, cond) - 64usize];
    ["Offset of field: _uv_barrier::threshold"]
        [::std::mem::offset_of!(_uv_barrier, threshold) - 112usize];
    ["Offset of field: _uv_barrier::in_"][::std::mem::offset_of!(_uv_barrier, in_) - 116usize];
    ["Offset of field: _uv_barrier::out"][::std::mem::offset_of!(_uv_barrier, out) - 120usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uv_barrier_t {
    pub b: *mut _uv_barrier,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uv_barrier_t"][::std::mem::size_of::<uv_barrier_t>() - 8usize];
    ["Alignment of uv_barrier_t"][::std::mem::align_of::<uv_barrier_t>() - 8usize];
    ["Offset of field: uv_barrier_t::b"][::std::mem::offset_of!(uv_barrier_t, b) - 0usize];
};
pub type uv_gid_t = gid_t;
pub type uv_uid_t = uid_t;
pub type uv__dirent_t = dirent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uv_lib_t {
    pub handle: *mut ::std::os::raw::c_void,
    pub errmsg: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uv_lib_t"][::std::mem::size_of::<uv_lib_t>() - 16usize];
    ["Alignment of uv_lib_t"][::std::mem::align_of::<uv_lib_t>() - 8usize];
    ["Offset of field: uv_lib_t::handle"][::std::mem::offset_of!(uv_lib_t, handle) - 0usize];
    ["Offset of field: uv_lib_t::errmsg"][::std::mem::offset_of!(uv_lib_t, errmsg) - 8usize];
};
pub const uv_errno_t_UV_E2BIG: uv_errno_t = -7;
pub const uv_errno_t_UV_EACCES: uv_errno_t = -13;
pub const uv_errno_t_UV_EADDRINUSE: uv_errno_t = -48;
pub const uv_errno_t_UV_EADDRNOTAVAIL: uv_errno_t = -49;
pub const uv_errno_t_UV_EAFNOSUPPORT: uv_errno_t = -47;
pub const uv_errno_t_UV_EAGAIN: uv_errno_t = -35;
pub const uv_errno_t_UV_EAI_ADDRFAMILY: uv_errno_t = -3000;
pub const uv_errno_t_UV_EAI_AGAIN: uv_errno_t = -3001;
pub const uv_errno_t_UV_EAI_BADFLAGS: uv_errno_t = -3002;
pub const uv_errno_t_UV_EAI_BADHINTS: uv_errno_t = -3013;
pub const uv_errno_t_UV_EAI_CANCELED: uv_errno_t = -3003;
pub const uv_errno_t_UV_EAI_FAIL: uv_errno_t = -3004;
pub const uv_errno_t_UV_EAI_FAMILY: uv_errno_t = -3005;
pub const uv_errno_t_UV_EAI_MEMORY: uv_errno_t = -3006;
pub const uv_errno_t_UV_EAI_NODATA: uv_errno_t = -3007;
pub const uv_errno_t_UV_EAI_NONAME: uv_errno_t = -3008;
pub const uv_errno_t_UV_EAI_OVERFLOW: uv_errno_t = -3009;
pub const uv_errno_t_UV_EAI_PROTOCOL: uv_errno_t = -3014;
pub const uv_errno_t_UV_EAI_SERVICE: uv_errno_t = -3010;
pub const uv_errno_t_UV_EAI_SOCKTYPE: uv_errno_t = -3011;
pub const uv_errno_t_UV_EALREADY: uv_errno_t = -37;
pub const uv_errno_t_UV_EBADF: uv_errno_t = -9;
pub const uv_errno_t_UV_EBUSY: uv_errno_t = -16;
pub const uv_errno_t_UV_ECANCELED: uv_errno_t = -89;
pub const uv_errno_t_UV_ECHARSET: uv_errno_t = -4080;
pub const uv_errno_t_UV_ECONNABORTED: uv_errno_t = -53;
pub const uv_errno_t_UV_ECONNREFUSED: uv_errno_t = -61;
pub const uv_errno_t_UV_ECONNRESET: uv_errno_t = -54;
pub const uv_errno_t_UV_EDESTADDRREQ: uv_errno_t = -39;
pub const uv_errno_t_UV_EEXIST: uv_errno_t = -17;
pub const uv_errno_t_UV_EFAULT: uv_errno_t = -14;
pub const uv_errno_t_UV_EFBIG: uv_errno_t = -27;
pub const uv_errno_t_UV_EHOSTUNREACH: uv_errno_t = -65;
pub const uv_errno_t_UV_EINTR: uv_errno_t = -4;
pub const uv_errno_t_UV_EINVAL: uv_errno_t = -22;
pub const uv_errno_t_UV_EIO: uv_errno_t = -5;
pub const uv_errno_t_UV_EISCONN: uv_errno_t = -56;
pub const uv_errno_t_UV_EISDIR: uv_errno_t = -21;
pub const uv_errno_t_UV_ELOOP: uv_errno_t = -62;
pub const uv_errno_t_UV_EMFILE: uv_errno_t = -24;
pub const uv_errno_t_UV_EMSGSIZE: uv_errno_t = -40;
pub const uv_errno_t_UV_ENAMETOOLONG: uv_errno_t = -63;
pub const uv_errno_t_UV_ENETDOWN: uv_errno_t = -50;
pub const uv_errno_t_UV_ENETUNREACH: uv_errno_t = -51;
pub const uv_errno_t_UV_ENFILE: uv_errno_t = -23;
pub const uv_errno_t_UV_ENOBUFS: uv_errno_t = -55;
pub const uv_errno_t_UV_ENODEV: uv_errno_t = -19;
pub const uv_errno_t_UV_ENOENT: uv_errno_t = -2;
pub const uv_errno_t_UV_ENOMEM: uv_errno_t = -12;
pub const uv_errno_t_UV_ENONET: uv_errno_t = -4056;
pub const uv_errno_t_UV_ENOPROTOOPT: uv_errno_t = -42;
pub const uv_errno_t_UV_ENOSPC: uv_errno_t = -28;
pub const uv_errno_t_UV_ENOSYS: uv_errno_t = -78;
pub const uv_errno_t_UV_ENOTCONN: uv_errno_t = -57;
pub const uv_errno_t_UV_ENOTDIR: uv_errno_t = -20;
pub const uv_errno_t_UV_ENOTEMPTY: uv_errno_t = -66;
pub const uv_errno_t_UV_ENOTSOCK: uv_errno_t = -38;
pub const uv_errno_t_UV_ENOTSUP: uv_errno_t = -45;
pub const uv_errno_t_UV_EOVERFLOW: uv_errno_t = -84;
pub const uv_errno_t_UV_EPERM: uv_errno_t = -1;
pub const uv_errno_t_UV_EPIPE: uv_errno_t = -32;
pub const uv_errno_t_UV_EPROTO: uv_errno_t = -100;
pub const uv_errno_t_UV_EPROTONOSUPPORT: uv_errno_t = -43;
pub const uv_errno_t_UV_EPROTOTYPE: uv_errno_t = -41;
pub const uv_errno_t_UV_ERANGE: uv_errno_t = -34;
pub const uv_errno_t_UV_EROFS: uv_errno_t = -30;
pub const uv_errno_t_UV_ESHUTDOWN: uv_errno_t = -58;
pub const uv_errno_t_UV_ESPIPE: uv_errno_t = -29;
pub const uv_errno_t_UV_ESRCH: uv_errno_t = -3;
pub const uv_errno_t_UV_ETIMEDOUT: uv_errno_t = -60;
pub const uv_errno_t_UV_ETXTBSY: uv_errno_t = -26;
pub const uv_errno_t_UV_EXDEV: uv_errno_t = -18;
pub const uv_errno_t_UV_UNKNOWN: uv_errno_t = -4094;
pub const uv_errno_t_UV_EOF: uv_errno_t = -4095;
pub const uv_errno_t_UV_ENXIO: uv_errno_t = -6;
pub const uv_errno_t_UV_EMLINK: uv_errno_t = -31;
pub const uv_errno_t_UV_EHOSTDOWN: uv_errno_t = -64;
pub const uv_errno_t_UV_EREMOTEIO: uv_errno_t = -4030;
pub const uv_errno_t_UV_ENOTTY: uv_errno_t = -25;
pub const uv_errno_t_UV_EFTYPE: uv_errno_t = -79;
pub const uv_errno_t_UV_EILSEQ: uv_errno_t = -92;
pub const uv_errno_t_UV_ESOCKTNOSUPPORT: uv_errno_t = -44;
pub const uv_errno_t_UV_ENODATA: uv_errno_t = -96;
pub const uv_errno_t_UV_EUNATCH: uv_errno_t = -4023;
pub const uv_errno_t_UV_ERRNO_MAX: uv_errno_t = -4096;
pub type uv_errno_t = ::std::os::raw::c_int;
pub const uv_handle_type_UV_UNKNOWN_HANDLE: uv_handle_type = 0;
pub const uv_handle_type_UV_ASYNC: uv_handle_type = 1;
pub const uv_handle_type_UV_CHECK: uv_handle_type = 2;
pub const uv_handle_type_UV_FS_EVENT: uv_handle_type = 3;
pub const uv_handle_type_UV_FS_POLL: uv_handle_type = 4;
pub const uv_handle_type_UV_HANDLE: uv_handle_type = 5;
pub const uv_handle_type_UV_IDLE: uv_handle_type = 6;
pub const uv_handle_type_UV_NAMED_PIPE: uv_handle_type = 7;
pub const uv_handle_type_UV_POLL: uv_handle_type = 8;
pub const uv_handle_type_UV_PREPARE: uv_handle_type = 9;
pub const uv_handle_type_UV_PROCESS: uv_handle_type = 10;
pub const uv_handle_type_UV_STREAM: uv_handle_type = 11;
pub const uv_handle_type_UV_TCP: uv_handle_type = 12;
pub const uv_handle_type_UV_TIMER: uv_handle_type = 13;
pub const uv_handle_type_UV_TTY: uv_handle_type = 14;
pub const uv_handle_type_UV_UDP: uv_handle_type = 15;
pub const uv_handle_type_UV_SIGNAL: uv_handle_type = 16;
pub const uv_handle_type_UV_FILE: uv_handle_type = 17;
pub const uv_handle_type_UV_HANDLE_TYPE_MAX: uv_handle_type = 18;
pub type uv_handle_type = ::std::os::raw::c_uint;
pub const uv_req_type_UV_UNKNOWN_REQ: uv_req_type = 0;
pub const uv_req_type_UV_REQ: uv_req_type = 1;
pub const uv_req_type_UV_CONNECT: uv_req_type = 2;
pub const uv_req_type_UV_WRITE: uv_req_type = 3;
pub const uv_req_type_UV_SHUTDOWN: uv_req_type = 4;
pub const uv_req_type_UV_UDP_SEND: uv_req_type = 5;
pub const uv_req_type_UV_FS: uv_req_type = 6;
pub const uv_req_type_UV_WORK: uv_req_type = 7;
pub const uv_req_type_UV_GETADDRINFO: uv_req_type = 8;
pub const uv_req_type_UV_GETNAMEINFO: uv_req_type = 9;
pub const uv_req_type_UV_RANDOM: uv_req_type = 10;
pub const uv_req_type_UV_REQ_TYPE_MAX: uv_req_type = 11;
pub type uv_req_type = ::std::os::raw::c_uint;
pub type uv_loop_t = uv_loop_s;
pub type uv_handle_t = uv_handle_s;
pub type uv_dir_t = uv_dir_s;
pub type uv_stream_t = uv_stream_s;
pub type uv_tcp_t = uv_tcp_s;
pub type uv_udp_t = uv_udp_s;
pub type uv_pipe_t = uv_pipe_s;
pub type uv_tty_t = uv_tty_s;
pub type uv_poll_t = uv_poll_s;
pub type uv_timer_t = uv_timer_s;
pub type uv_prepare_t = uv_prepare_s;
pub type uv_check_t = uv_check_s;
pub type uv_idle_t = uv_idle_s;
pub type uv_async_t = uv_async_s;
pub type uv_process_t = uv_process_s;
pub type uv_fs_event_t = uv_fs_event_s;
pub type uv_fs_poll_t = uv_fs_poll_s;
pub type uv_signal_t = uv_signal_s;
pub type uv_req_t = uv_req_s;
pub type uv_getaddrinfo_t = uv_getaddrinfo_s;
pub type uv_getnameinfo_t = uv_getnameinfo_s;
pub type uv_shutdown_t = uv_shutdown_s;
pub type uv_write_t = uv_write_s;
pub type uv_connect_t = uv_connect_s;
pub type uv_udp_send_t = uv_udp_send_s;
pub type uv_fs_t = uv_fs_s;
pub type uv_work_t = uv_work_s;
pub type uv_random_t = uv_random_s;
pub type uv_env_item_t = uv_env_item_s;
pub type uv_cpu_info_t = uv_cpu_info_s;
pub type uv_interface_address_t = uv_interface_address_s;
pub type uv_dirent_t = uv_dirent_s;
pub type uv_passwd_t = uv_passwd_s;
pub type uv_group_t = uv_group_s;
pub type uv_utsname_t = uv_utsname_s;
pub type uv_statfs_t = uv_statfs_s;
pub type uv_metrics_t = uv_metrics_s;
pub const uv_loop_option_UV_LOOP_BLOCK_SIGNAL: uv_loop_option = 0;
pub const uv_loop_option_UV_METRICS_IDLE_TIME: uv_loop_option = 1;
pub type uv_loop_option = ::std::os::raw::c_uint;
pub const uv_run_mode_UV_RUN_DEFAULT: uv_run_mode = 0;
pub const uv_run_mode_UV_RUN_ONCE: uv_run_mode = 1;
pub const uv_run_mode_UV_RUN_NOWAIT: uv_run_mode = 2;
pub type uv_run_mode = ::std::os::raw::c_uint;
unsafe extern "C" {
    pub fn uv_version() -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    pub fn uv_version_string() -> *const ::std::os::raw::c_char;
}
pub type uv_malloc_func =
    ::std::option::Option<unsafe extern "C" fn(size: usize) -> *mut ::std::os::raw::c_void>;
pub type uv_realloc_func = ::std::option::Option<
    unsafe extern "C" fn(
        ptr: *mut ::std::os::raw::c_void,
        size: usize,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type uv_calloc_func = ::std::option::Option<
    unsafe extern "C" fn(count: usize, size: usize) -> *mut ::std::os::raw::c_void,
>;
pub type uv_free_func =
    ::std::option::Option<unsafe extern "C" fn(ptr: *mut ::std::os::raw::c_void)>;
unsafe extern "C" {
    pub fn uv_library_shutdown();
}
unsafe extern "C" {
    pub fn uv_replace_allocator(
        malloc_func: uv_malloc_func,
        realloc_func: uv_realloc_func,
        calloc_func: uv_calloc_func,
        free_func: uv_free_func,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_default_loop() -> *mut uv_loop_t;
}
unsafe extern "C" {
    pub fn uv_loop_init(loop_: *mut uv_loop_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_loop_close(loop_: *mut uv_loop_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_loop_new() -> *mut uv_loop_t;
}
unsafe extern "C" {
    pub fn uv_loop_delete(arg1: *mut uv_loop_t);
}
unsafe extern "C" {
    pub fn uv_loop_size() -> usize;
}
unsafe extern "C" {
    pub fn uv_loop_alive(loop_: *const uv_loop_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_loop_configure(
        loop_: *mut uv_loop_t,
        option: uv_loop_option,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_loop_fork(loop_: *mut uv_loop_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_run(arg1: *mut uv_loop_t, mode: uv_run_mode) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_stop(arg1: *mut uv_loop_t);
}
unsafe extern "C" {
    pub fn uv_ref(arg1: *mut uv_handle_t);
}
unsafe extern "C" {
    pub fn uv_unref(arg1: *mut uv_handle_t);
}
unsafe extern "C" {
    pub fn uv_has_ref(arg1: *const uv_handle_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_update_time(arg1: *mut uv_loop_t);
}
unsafe extern "C" {
    pub fn uv_now(arg1: *const uv_loop_t) -> u64;
}
unsafe extern "C" {
    pub fn uv_backend_fd(arg1: *const uv_loop_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_backend_timeout(arg1: *const uv_loop_t) -> ::std::os::raw::c_int;
}
pub type uv_alloc_cb = ::std::option::Option<
    unsafe extern "C" fn(handle: *mut uv_handle_t, suggested_size: usize, buf: *mut uv_buf_t),
>;
pub type uv_read_cb = ::std::option::Option<
    unsafe extern "C" fn(stream: *mut uv_stream_t, nread: isize, buf: *const uv_buf_t),
>;
pub type uv_write_cb = ::std::option::Option<
    unsafe extern "C" fn(req: *mut uv_write_t, status: ::std::os::raw::c_int),
>;
pub type uv_connect_cb = ::std::option::Option<
    unsafe extern "C" fn(req: *mut uv_connect_t, status: ::std::os::raw::c_int),
>;
pub type uv_shutdown_cb = ::std::option::Option<
    unsafe extern "C" fn(req: *mut uv_shutdown_t, status: ::std::os::raw::c_int),
>;
pub type uv_connection_cb = ::std::option::Option<
    unsafe extern "C" fn(server: *mut uv_stream_t, status: ::std::os::raw::c_int),
>;
pub type uv_close_cb = ::std::option::Option<unsafe extern "C" fn(handle: *mut uv_handle_t)>;
pub type uv_poll_cb = ::std::option::Option<
    unsafe extern "C" fn(
        handle: *mut uv_poll_t,
        status: ::std::os::raw::c_int,
        events: ::std::os::raw::c_int,
    ),
>;
pub type uv_timer_cb = ::std::option::Option<unsafe extern "C" fn(handle: *mut uv_timer_t)>;
pub type uv_async_cb = ::std::option::Option<unsafe extern "C" fn(handle: *mut uv_async_t)>;
pub type uv_prepare_cb = ::std::option::Option<unsafe extern "C" fn(handle: *mut uv_prepare_t)>;
pub type uv_check_cb = ::std::option::Option<unsafe extern "C" fn(handle: *mut uv_check_t)>;
pub type uv_idle_cb = ::std::option::Option<unsafe extern "C" fn(handle: *mut uv_idle_t)>;
pub type uv_exit_cb = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut uv_process_t,
        exit_status: i64,
        term_signal: ::std::os::raw::c_int,
    ),
>;
pub type uv_walk_cb = ::std::option::Option<
    unsafe extern "C" fn(handle: *mut uv_handle_t, arg: *mut ::std::os::raw::c_void),
>;
pub type uv_fs_cb = ::std::option::Option<unsafe extern "C" fn(req: *mut uv_fs_t)>;
pub type uv_work_cb = ::std::option::Option<unsafe extern "C" fn(req: *mut uv_work_t)>;
pub type uv_after_work_cb =
    ::std::option::Option<unsafe extern "C" fn(req: *mut uv_work_t, status: ::std::os::raw::c_int)>;
pub type uv_getaddrinfo_cb = ::std::option::Option<
    unsafe extern "C" fn(
        req: *mut uv_getaddrinfo_t,
        status: ::std::os::raw::c_int,
        res: *mut addrinfo,
    ),
>;
pub type uv_getnameinfo_cb = ::std::option::Option<
    unsafe extern "C" fn(
        req: *mut uv_getnameinfo_t,
        status: ::std::os::raw::c_int,
        hostname: *const ::std::os::raw::c_char,
        service: *const ::std::os::raw::c_char,
    ),
>;
pub type uv_random_cb = ::std::option::Option<
    unsafe extern "C" fn(
        req: *mut uv_random_t,
        status: ::std::os::raw::c_int,
        buf: *mut ::std::os::raw::c_void,
        buflen: usize,
    ),
>;
pub const uv_clock_id_UV_CLOCK_MONOTONIC: uv_clock_id = 0;
pub const uv_clock_id_UV_CLOCK_REALTIME: uv_clock_id = 1;
pub type uv_clock_id = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uv_timespec_t {
    pub tv_sec: ::std::os::raw::c_long,
    pub tv_nsec: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uv_timespec_t"][::std::mem::size_of::<uv_timespec_t>() - 16usize];
    ["Alignment of uv_timespec_t"][::std::mem::align_of::<uv_timespec_t>() - 8usize];
    ["Offset of field: uv_timespec_t::tv_sec"]
        [::std::mem::offset_of!(uv_timespec_t, tv_sec) - 0usize];
    ["Offset of field: uv_timespec_t::tv_nsec"]
        [::std::mem::offset_of!(uv_timespec_t, tv_nsec) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uv_timespec64_t {
    pub tv_sec: i64,
    pub tv_nsec: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uv_timespec64_t"][::std::mem::size_of::<uv_timespec64_t>() - 16usize];
    ["Alignment of uv_timespec64_t"][::std::mem::align_of::<uv_timespec64_t>() - 8usize];
    ["Offset of field: uv_timespec64_t::tv_sec"]
        [::std::mem::offset_of!(uv_timespec64_t, tv_sec) - 0usize];
    ["Offset of field: uv_timespec64_t::tv_nsec"]
        [::std::mem::offset_of!(uv_timespec64_t, tv_nsec) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uv_timeval_t {
    pub tv_sec: ::std::os::raw::c_long,
    pub tv_usec: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uv_timeval_t"][::std::mem::size_of::<uv_timeval_t>() - 16usize];
    ["Alignment of uv_timeval_t"][::std::mem::align_of::<uv_timeval_t>() - 8usize];
    ["Offset of field: uv_timeval_t::tv_sec"]
        [::std::mem::offset_of!(uv_timeval_t, tv_sec) - 0usize];
    ["Offset of field: uv_timeval_t::tv_usec"]
        [::std::mem::offset_of!(uv_timeval_t, tv_usec) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uv_timeval64_t {
    pub tv_sec: i64,
    pub tv_usec: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uv_timeval64_t"][::std::mem::size_of::<uv_timeval64_t>() - 16usize];
    ["Alignment of uv_timeval64_t"][::std::mem::align_of::<uv_timeval64_t>() - 8usize];
    ["Offset of field: uv_timeval64_t::tv_sec"]
        [::std::mem::offset_of!(uv_timeval64_t, tv_sec) - 0usize];
    ["Offset of field: uv_timeval64_t::tv_usec"]
        [::std::mem::offset_of!(uv_timeval64_t, tv_usec) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uv_stat_t {
    pub st_dev: u64,
    pub st_mode: u64,
    pub st_nlink: u64,
    pub st_uid: u64,
    pub st_gid: u64,
    pub st_rdev: u64,
    pub st_ino: u64,
    pub st_size: u64,
    pub st_blksize: u64,
    pub st_blocks: u64,
    pub st_flags: u64,
    pub st_gen: u64,
    pub st_atim: uv_timespec_t,
    pub st_mtim: uv_timespec_t,
    pub st_ctim: uv_timespec_t,
    pub st_birthtim: uv_timespec_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uv_stat_t"][::std::mem::size_of::<uv_stat_t>() - 160usize];
    ["Alignment of uv_stat_t"][::std::mem::align_of::<uv_stat_t>() - 8usize];
    ["Offset of field: uv_stat_t::st_dev"][::std::mem::offset_of!(uv_stat_t, st_dev) - 0usize];
    ["Offset of field: uv_stat_t::st_mode"][::std::mem::offset_of!(uv_stat_t, st_mode) - 8usize];
    ["Offset of field: uv_stat_t::st_nlink"][::std::mem::offset_of!(uv_stat_t, st_nlink) - 16usize];
    ["Offset of field: uv_stat_t::st_uid"][::std::mem::offset_of!(uv_stat_t, st_uid) - 24usize];
    ["Offset of field: uv_stat_t::st_gid"][::std::mem::offset_of!(uv_stat_t, st_gid) - 32usize];
    ["Offset of field: uv_stat_t::st_rdev"][::std::mem::offset_of!(uv_stat_t, st_rdev) - 40usize];
    ["Offset of field: uv_stat_t::st_ino"][::std::mem::offset_of!(uv_stat_t, st_ino) - 48usize];
    ["Offset of field: uv_stat_t::st_size"][::std::mem::offset_of!(uv_stat_t, st_size) - 56usize];
    ["Offset of field: uv_stat_t::st_blksize"]
        [::std::mem::offset_of!(uv_stat_t, st_blksize) - 64usize];
    ["Offset of field: uv_stat_t::st_blocks"]
        [::std::mem::offset_of!(uv_stat_t, st_blocks) - 72usize];
    ["Offset of field: uv_stat_t::st_flags"][::std::mem::offset_of!(uv_stat_t, st_flags) - 80usize];
    ["Offset of field: uv_stat_t::st_gen"][::std::mem::offset_of!(uv_stat_t, st_gen) - 88usize];
    ["Offset of field: uv_stat_t::st_atim"][::std::mem::offset_of!(uv_stat_t, st_atim) - 96usize];
    ["Offset of field: uv_stat_t::st_mtim"][::std::mem::offset_of!(uv_stat_t, st_mtim) - 112usize];
    ["Offset of field: uv_stat_t::st_ctim"][::std::mem::offset_of!(uv_stat_t, st_ctim) - 128usize];
    ["Offset of field: uv_stat_t::st_birthtim"]
        [::std::mem::offset_of!(uv_stat_t, st_birthtim) - 144usize];
};
pub type uv_fs_event_cb = ::std::option::Option<
    unsafe extern "C" fn(
        handle: *mut uv_fs_event_t,
        filename: *const ::std::os::raw::c_char,
        events: ::std::os::raw::c_int,
        status: ::std::os::raw::c_int,
    ),
>;
pub type uv_fs_poll_cb = ::std::option::Option<
    unsafe extern "C" fn(
        handle: *mut uv_fs_poll_t,
        status: ::std::os::raw::c_int,
        prev: *const uv_stat_t,
        curr: *const uv_stat_t,
    ),
>;
pub type uv_signal_cb = ::std::option::Option<
    unsafe extern "C" fn(handle: *mut uv_signal_t, signum: ::std::os::raw::c_int),
>;
pub const uv_membership_UV_LEAVE_GROUP: uv_membership = 0;
pub const uv_membership_UV_JOIN_GROUP: uv_membership = 1;
pub type uv_membership = ::std::os::raw::c_uint;
unsafe extern "C" {
    pub fn uv_translate_sys_error(sys_errno: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_strerror(err: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn uv_strerror_r(
        err: ::std::os::raw::c_int,
        buf: *mut ::std::os::raw::c_char,
        buflen: usize,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn uv_err_name(err: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn uv_err_name_r(
        err: ::std::os::raw::c_int,
        buf: *mut ::std::os::raw::c_char,
        buflen: usize,
    ) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uv_req_s {
    pub data: *mut ::std::os::raw::c_void,
    pub type_: uv_req_type,
    pub reserved: [*mut ::std::os::raw::c_void; 6usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uv_req_s"][::std::mem::size_of::<uv_req_s>() - 64usize];
    ["Alignment of uv_req_s"][::std::mem::align_of::<uv_req_s>() - 8usize];
    ["Offset of field: uv_req_s::data"][::std::mem::offset_of!(uv_req_s, data) - 0usize];
    ["Offset of field: uv_req_s::type_"][::std::mem::offset_of!(uv_req_s, type_) - 8usize];
    ["Offset of field: uv_req_s::reserved"][::std::mem::offset_of!(uv_req_s, reserved) - 16usize];
};
unsafe extern "C" {
    pub fn uv_shutdown(
        req: *mut uv_shutdown_t,
        handle: *mut uv_stream_t,
        cb: uv_shutdown_cb,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uv_shutdown_s {
    pub data: *mut ::std::os::raw::c_void,
    pub type_: uv_req_type,
    pub reserved: [*mut ::std::os::raw::c_void; 6usize],
    pub handle: *mut uv_stream_t,
    pub cb: uv_shutdown_cb,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uv_shutdown_s"][::std::mem::size_of::<uv_shutdown_s>() - 80usize];
    ["Alignment of uv_shutdown_s"][::std::mem::align_of::<uv_shutdown_s>() - 8usize];
    ["Offset of field: uv_shutdown_s::data"][::std::mem::offset_of!(uv_shutdown_s, data) - 0usize];
    ["Offset of field: uv_shutdown_s::type_"]
        [::std::mem::offset_of!(uv_shutdown_s, type_) - 8usize];
    ["Offset of field: uv_shutdown_s::reserved"]
        [::std::mem::offset_of!(uv_shutdown_s, reserved) - 16usize];
    ["Offset of field: uv_shutdown_s::handle"]
        [::std::mem::offset_of!(uv_shutdown_s, handle) - 64usize];
    ["Offset of field: uv_shutdown_s::cb"][::std::mem::offset_of!(uv_shutdown_s, cb) - 72usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct uv_handle_s {
    pub data: *mut ::std::os::raw::c_void,
    pub loop_: *mut uv_loop_t,
    pub type_: uv_handle_type,
    pub close_cb: uv_close_cb,
    pub handle_queue: uv__queue,
    pub u: uv_handle_s__bindgen_ty_1,
    pub next_closing: *mut uv_handle_t,
    pub flags: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union uv_handle_s__bindgen_ty_1 {
    pub fd: ::std::os::raw::c_int,
    pub reserved: [*mut ::std::os::raw::c_void; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uv_handle_s__bindgen_ty_1"]
        [::std::mem::size_of::<uv_handle_s__bindgen_ty_1>() - 32usize];
    ["Alignment of uv_handle_s__bindgen_ty_1"]
        [::std::mem::align_of::<uv_handle_s__bindgen_ty_1>() - 8usize];
    ["Offset of field: uv_handle_s__bindgen_ty_1::fd"]
        [::std::mem::offset_of!(uv_handle_s__bindgen_ty_1, fd) - 0usize];
    ["Offset of field: uv_handle_s__bindgen_ty_1::reserved"]
        [::std::mem::offset_of!(uv_handle_s__bindgen_ty_1, reserved) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uv_handle_s"][::std::mem::size_of::<uv_handle_s>() - 96usize];
    ["Alignment of uv_handle_s"][::std::mem::align_of::<uv_handle_s>() - 8usize];
    ["Offset of field: uv_handle_s::data"][::std::mem::offset_of!(uv_handle_s, data) - 0usize];
    ["Offset of field: uv_handle_s::loop_"][::std::mem::offset_of!(uv_handle_s, loop_) - 8usize];
    ["Offset of field: uv_handle_s::type_"][::std::mem::offset_of!(uv_handle_s, type_) - 16usize];
    ["Offset of field: uv_handle_s::close_cb"]
        [::std::mem::offset_of!(uv_handle_s, close_cb) - 24usize];
    ["Offset of field: uv_handle_s::handle_queue"]
        [::std::mem::offset_of!(uv_handle_s, handle_queue) - 32usize];
    ["Offset of field: uv_handle_s::u"][::std::mem::offset_of!(uv_handle_s, u) - 48usize];
    ["Offset of field: uv_handle_s::next_closing"]
        [::std::mem::offset_of!(uv_handle_s, next_closing) - 80usize];
    ["Offset of field: uv_handle_s::flags"][::std::mem::offset_of!(uv_handle_s, flags) - 88usize];
};
unsafe extern "C" {
    pub fn uv_handle_size(type_: uv_handle_type) -> usize;
}
unsafe extern "C" {
    pub fn uv_handle_get_type(handle: *const uv_handle_t) -> uv_handle_type;
}
unsafe extern "C" {
    pub fn uv_handle_type_name(type_: uv_handle_type) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn uv_handle_get_data(handle: *const uv_handle_t) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn uv_handle_get_loop(handle: *const uv_handle_t) -> *mut uv_loop_t;
}
unsafe extern "C" {
    pub fn uv_handle_set_data(handle: *mut uv_handle_t, data: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn uv_req_size(type_: uv_req_type) -> usize;
}
unsafe extern "C" {
    pub fn uv_req_get_data(req: *const uv_req_t) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn uv_req_set_data(req: *mut uv_req_t, data: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn uv_req_get_type(req: *const uv_req_t) -> uv_req_type;
}
unsafe extern "C" {
    pub fn uv_req_type_name(type_: uv_req_type) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn uv_is_active(handle: *const uv_handle_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_walk(loop_: *mut uv_loop_t, walk_cb: uv_walk_cb, arg: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn uv_print_all_handles(loop_: *mut uv_loop_t, stream: *mut FILE);
}
unsafe extern "C" {
    pub fn uv_print_active_handles(loop_: *mut uv_loop_t, stream: *mut FILE);
}
unsafe extern "C" {
    pub fn uv_close(handle: *mut uv_handle_t, close_cb: uv_close_cb);
}
unsafe extern "C" {
    pub fn uv_send_buffer_size(
        handle: *mut uv_handle_t,
        value: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_recv_buffer_size(
        handle: *mut uv_handle_t,
        value: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_fileno(handle: *const uv_handle_t, fd: *mut uv_os_fd_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_buf_init(base: *mut ::std::os::raw::c_char, len: ::std::os::raw::c_uint) -> uv_buf_t;
}
unsafe extern "C" {
    pub fn uv_pipe(
        fds: *mut uv_file,
        read_flags: ::std::os::raw::c_int,
        write_flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_socketpair(
        type_: ::std::os::raw::c_int,
        protocol: ::std::os::raw::c_int,
        socket_vector: *mut uv_os_sock_t,
        flags0: ::std::os::raw::c_int,
        flags1: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct uv_stream_s {
    pub data: *mut ::std::os::raw::c_void,
    pub loop_: *mut uv_loop_t,
    pub type_: uv_handle_type,
    pub close_cb: uv_close_cb,
    pub handle_queue: uv__queue,
    pub u: uv_stream_s__bindgen_ty_1,
    pub next_closing: *mut uv_handle_t,
    pub flags: ::std::os::raw::c_uint,
    pub write_queue_size: usize,
    pub alloc_cb: uv_alloc_cb,
    pub read_cb: uv_read_cb,
    pub connect_req: *mut uv_connect_t,
    pub shutdown_req: *mut uv_shutdown_t,
    pub io_watcher: uv__io_t,
    pub write_queue: uv__queue,
    pub write_completed_queue: uv__queue,
    pub connection_cb: uv_connection_cb,
    pub delayed_error: ::std::os::raw::c_int,
    pub accepted_fd: ::std::os::raw::c_int,
    pub queued_fds: *mut ::std::os::raw::c_void,
    pub select: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union uv_stream_s__bindgen_ty_1 {
    pub fd: ::std::os::raw::c_int,
    pub reserved: [*mut ::std::os::raw::c_void; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uv_stream_s__bindgen_ty_1"]
        [::std::mem::size_of::<uv_stream_s__bindgen_ty_1>() - 32usize];
    ["Alignment of uv_stream_s__bindgen_ty_1"]
        [::std::mem::align_of::<uv_stream_s__bindgen_ty_1>() - 8usize];
    ["Offset of field: uv_stream_s__bindgen_ty_1::fd"]
        [::std::mem::offset_of!(uv_stream_s__bindgen_ty_1, fd) - 0usize];
    ["Offset of field: uv_stream_s__bindgen_ty_1::reserved"]
        [::std::mem::offset_of!(uv_stream_s__bindgen_ty_1, reserved) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uv_stream_s"][::std::mem::size_of::<uv_stream_s>() - 264usize];
    ["Alignment of uv_stream_s"][::std::mem::align_of::<uv_stream_s>() - 8usize];
    ["Offset of field: uv_stream_s::data"][::std::mem::offset_of!(uv_stream_s, data) - 0usize];
    ["Offset of field: uv_stream_s::loop_"][::std::mem::offset_of!(uv_stream_s, loop_) - 8usize];
    ["Offset of field: uv_stream_s::type_"][::std::mem::offset_of!(uv_stream_s, type_) - 16usize];
    ["Offset of field: uv_stream_s::close_cb"]
        [::std::mem::offset_of!(uv_stream_s, close_cb) - 24usize];
    ["Offset of field: uv_stream_s::handle_queue"]
        [::std::mem::offset_of!(uv_stream_s, handle_queue) - 32usize];
    ["Offset of field: uv_stream_s::u"][::std::mem::offset_of!(uv_stream_s, u) - 48usize];
    ["Offset of field: uv_stream_s::next_closing"]
        [::std::mem::offset_of!(uv_stream_s, next_closing) - 80usize];
    ["Offset of field: uv_stream_s::flags"][::std::mem::offset_of!(uv_stream_s, flags) - 88usize];
    ["Offset of field: uv_stream_s::write_queue_size"]
        [::std::mem::offset_of!(uv_stream_s, write_queue_size) - 96usize];
    ["Offset of field: uv_stream_s::alloc_cb"]
        [::std::mem::offset_of!(uv_stream_s, alloc_cb) - 104usize];
    ["Offset of field: uv_stream_s::read_cb"]
        [::std::mem::offset_of!(uv_stream_s, read_cb) - 112usize];
    ["Offset of field: uv_stream_s::connect_req"]
        [::std::mem::offset_of!(uv_stream_s, connect_req) - 120usize];
    ["Offset of field: uv_stream_s::shutdown_req"]
        [::std::mem::offset_of!(uv_stream_s, shutdown_req) - 128usize];
    ["Offset of field: uv_stream_s::io_watcher"]
        [::std::mem::offset_of!(uv_stream_s, io_watcher) - 136usize];
    ["Offset of field: uv_stream_s::write_queue"]
        [::std::mem::offset_of!(uv_stream_s, write_queue) - 200usize];
    ["Offset of field: uv_stream_s::write_completed_queue"]
        [::std::mem::offset_of!(uv_stream_s, write_completed_queue) - 216usize];
    ["Offset of field: uv_stream_s::connection_cb"]
        [::std::mem::offset_of!(uv_stream_s, connection_cb) - 232usize];
    ["Offset of field: uv_stream_s::delayed_error"]
        [::std::mem::offset_of!(uv_stream_s, delayed_error) - 240usize];
    ["Offset of field: uv_stream_s::accepted_fd"]
        [::std::mem::offset_of!(uv_stream_s, accepted_fd) - 244usize];
    ["Offset of field: uv_stream_s::queued_fds"]
        [::std::mem::offset_of!(uv_stream_s, queued_fds) - 248usize];
    ["Offset of field: uv_stream_s::select"]
        [::std::mem::offset_of!(uv_stream_s, select) - 256usize];
};
unsafe extern "C" {
    pub fn uv_stream_get_write_queue_size(stream: *const uv_stream_t) -> usize;
}
unsafe extern "C" {
    pub fn uv_listen(
        stream: *mut uv_stream_t,
        backlog: ::std::os::raw::c_int,
        cb: uv_connection_cb,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_accept(server: *mut uv_stream_t, client: *mut uv_stream_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_read_start(
        arg1: *mut uv_stream_t,
        alloc_cb: uv_alloc_cb,
        read_cb: uv_read_cb,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_read_stop(arg1: *mut uv_stream_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_write(
        req: *mut uv_write_t,
        handle: *mut uv_stream_t,
        bufs: *const uv_buf_t,
        nbufs: ::std::os::raw::c_uint,
        cb: uv_write_cb,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_write2(
        req: *mut uv_write_t,
        handle: *mut uv_stream_t,
        bufs: *const uv_buf_t,
        nbufs: ::std::os::raw::c_uint,
        send_handle: *mut uv_stream_t,
        cb: uv_write_cb,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_try_write(
        handle: *mut uv_stream_t,
        bufs: *const uv_buf_t,
        nbufs: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_try_write2(
        handle: *mut uv_stream_t,
        bufs: *const uv_buf_t,
        nbufs: ::std::os::raw::c_uint,
        send_handle: *mut uv_stream_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uv_write_s {
    pub data: *mut ::std::os::raw::c_void,
    pub type_: uv_req_type,
    pub reserved: [*mut ::std::os::raw::c_void; 6usize],
    pub cb: uv_write_cb,
    pub send_handle: *mut uv_stream_t,
    pub handle: *mut uv_stream_t,
    pub queue: uv__queue,
    pub write_index: ::std::os::raw::c_uint,
    pub bufs: *mut uv_buf_t,
    pub nbufs: ::std::os::raw::c_uint,
    pub error: ::std::os::raw::c_int,
    pub bufsml: [uv_buf_t; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uv_write_s"][::std::mem::size_of::<uv_write_s>() - 192usize];
    ["Alignment of uv_write_s"][::std::mem::align_of::<uv_write_s>() - 8usize];
    ["Offset of field: uv_write_s::data"][::std::mem::offset_of!(uv_write_s, data) - 0usize];
    ["Offset of field: uv_write_s::type_"][::std::mem::offset_of!(uv_write_s, type_) - 8usize];
    ["Offset of field: uv_write_s::reserved"]
        [::std::mem::offset_of!(uv_write_s, reserved) - 16usize];
    ["Offset of field: uv_write_s::cb"][::std::mem::offset_of!(uv_write_s, cb) - 64usize];
    ["Offset of field: uv_write_s::send_handle"]
        [::std::mem::offset_of!(uv_write_s, send_handle) - 72usize];
    ["Offset of field: uv_write_s::handle"][::std::mem::offset_of!(uv_write_s, handle) - 80usize];
    ["Offset of field: uv_write_s::queue"][::std::mem::offset_of!(uv_write_s, queue) - 88usize];
    ["Offset of field: uv_write_s::write_index"]
        [::std::mem::offset_of!(uv_write_s, write_index) - 104usize];
    ["Offset of field: uv_write_s::bufs"][::std::mem::offset_of!(uv_write_s, bufs) - 112usize];
    ["Offset of field: uv_write_s::nbufs"][::std::mem::offset_of!(uv_write_s, nbufs) - 120usize];
    ["Offset of field: uv_write_s::error"][::std::mem::offset_of!(uv_write_s, error) - 124usize];
    ["Offset of field: uv_write_s::bufsml"][::std::mem::offset_of!(uv_write_s, bufsml) - 128usize];
};
unsafe extern "C" {
    pub fn uv_is_readable(handle: *const uv_stream_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_is_writable(handle: *const uv_stream_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_stream_set_blocking(
        handle: *mut uv_stream_t,
        blocking: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_is_closing(handle: *const uv_handle_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct uv_tcp_s {
    pub data: *mut ::std::os::raw::c_void,
    pub loop_: *mut uv_loop_t,
    pub type_: uv_handle_type,
    pub close_cb: uv_close_cb,
    pub handle_queue: uv__queue,
    pub u: uv_tcp_s__bindgen_ty_1,
    pub next_closing: *mut uv_handle_t,
    pub flags: ::std::os::raw::c_uint,
    pub write_queue_size: usize,
    pub alloc_cb: uv_alloc_cb,
    pub read_cb: uv_read_cb,
    pub connect_req: *mut uv_connect_t,
    pub shutdown_req: *mut uv_shutdown_t,
    pub io_watcher: uv__io_t,
    pub write_queue: uv__queue,
    pub write_completed_queue: uv__queue,
    pub connection_cb: uv_connection_cb,
    pub delayed_error: ::std::os::raw::c_int,
    pub accepted_fd: ::std::os::raw::c_int,
    pub queued_fds: *mut ::std::os::raw::c_void,
    pub select: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union uv_tcp_s__bindgen_ty_1 {
    pub fd: ::std::os::raw::c_int,
    pub reserved: [*mut ::std::os::raw::c_void; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uv_tcp_s__bindgen_ty_1"][::std::mem::size_of::<uv_tcp_s__bindgen_ty_1>() - 32usize];
    ["Alignment of uv_tcp_s__bindgen_ty_1"]
        [::std::mem::align_of::<uv_tcp_s__bindgen_ty_1>() - 8usize];
    ["Offset of field: uv_tcp_s__bindgen_ty_1::fd"]
        [::std::mem::offset_of!(uv_tcp_s__bindgen_ty_1, fd) - 0usize];
    ["Offset of field: uv_tcp_s__bindgen_ty_1::reserved"]
        [::std::mem::offset_of!(uv_tcp_s__bindgen_ty_1, reserved) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uv_tcp_s"][::std::mem::size_of::<uv_tcp_s>() - 264usize];
    ["Alignment of uv_tcp_s"][::std::mem::align_of::<uv_tcp_s>() - 8usize];
    ["Offset of field: uv_tcp_s::data"][::std::mem::offset_of!(uv_tcp_s, data) - 0usize];
    ["Offset of field: uv_tcp_s::loop_"][::std::mem::offset_of!(uv_tcp_s, loop_) - 8usize];
    ["Offset of field: uv_tcp_s::type_"][::std::mem::offset_of!(uv_tcp_s, type_) - 16usize];
    ["Offset of field: uv_tcp_s::close_cb"][::std::mem::offset_of!(uv_tcp_s, close_cb) - 24usize];
    ["Offset of field: uv_tcp_s::handle_queue"]
        [::std::mem::offset_of!(uv_tcp_s, handle_queue) - 32usize];
    ["Offset of field: uv_tcp_s::u"][::std::mem::offset_of!(uv_tcp_s, u) - 48usize];
    ["Offset of field: uv_tcp_s::next_closing"]
        [::std::mem::offset_of!(uv_tcp_s, next_closing) - 80usize];
    ["Offset of field: uv_tcp_s::flags"][::std::mem::offset_of!(uv_tcp_s, flags) - 88usize];
    ["Offset of field: uv_tcp_s::write_queue_size"]
        [::std::mem::offset_of!(uv_tcp_s, write_queue_size) - 96usize];
    ["Offset of field: uv_tcp_s::alloc_cb"][::std::mem::offset_of!(uv_tcp_s, alloc_cb) - 104usize];
    ["Offset of field: uv_tcp_s::read_cb"][::std::mem::offset_of!(uv_tcp_s, read_cb) - 112usize];
    ["Offset of field: uv_tcp_s::connect_req"]
        [::std::mem::offset_of!(uv_tcp_s, connect_req) - 120usize];
    ["Offset of field: uv_tcp_s::shutdown_req"]
        [::std::mem::offset_of!(uv_tcp_s, shutdown_req) - 128usize];
    ["Offset of field: uv_tcp_s::io_watcher"]
        [::std::mem::offset_of!(uv_tcp_s, io_watcher) - 136usize];
    ["Offset of field: uv_tcp_s::write_queue"]
        [::std::mem::offset_of!(uv_tcp_s, write_queue) - 200usize];
    ["Offset of field: uv_tcp_s::write_completed_queue"]
        [::std::mem::offset_of!(uv_tcp_s, write_completed_queue) - 216usize];
    ["Offset of field: uv_tcp_s::connection_cb"]
        [::std::mem::offset_of!(uv_tcp_s, connection_cb) - 232usize];
    ["Offset of field: uv_tcp_s::delayed_error"]
        [::std::mem::offset_of!(uv_tcp_s, delayed_error) - 240usize];
    ["Offset of field: uv_tcp_s::accepted_fd"]
        [::std::mem::offset_of!(uv_tcp_s, accepted_fd) - 244usize];
    ["Offset of field: uv_tcp_s::queued_fds"]
        [::std::mem::offset_of!(uv_tcp_s, queued_fds) - 248usize];
    ["Offset of field: uv_tcp_s::select"][::std::mem::offset_of!(uv_tcp_s, select) - 256usize];
};
unsafe extern "C" {
    pub fn uv_tcp_init(arg1: *mut uv_loop_t, handle: *mut uv_tcp_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_tcp_init_ex(
        arg1: *mut uv_loop_t,
        handle: *mut uv_tcp_t,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_tcp_open(handle: *mut uv_tcp_t, sock: uv_os_sock_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_tcp_nodelay(
        handle: *mut uv_tcp_t,
        enable: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_tcp_keepalive(
        handle: *mut uv_tcp_t,
        enable: ::std::os::raw::c_int,
        delay: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_tcp_simultaneous_accepts(
        handle: *mut uv_tcp_t,
        enable: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub const uv_tcp_flags_UV_TCP_IPV6ONLY: uv_tcp_flags = 1;
pub type uv_tcp_flags = ::std::os::raw::c_uint;
unsafe extern "C" {
    pub fn uv_tcp_bind(
        handle: *mut uv_tcp_t,
        addr: *const sockaddr,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_tcp_getsockname(
        handle: *const uv_tcp_t,
        name: *mut sockaddr,
        namelen: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_tcp_getpeername(
        handle: *const uv_tcp_t,
        name: *mut sockaddr,
        namelen: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_tcp_close_reset(
        handle: *mut uv_tcp_t,
        close_cb: uv_close_cb,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_tcp_connect(
        req: *mut uv_connect_t,
        handle: *mut uv_tcp_t,
        addr: *const sockaddr,
        cb: uv_connect_cb,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uv_connect_s {
    pub data: *mut ::std::os::raw::c_void,
    pub type_: uv_req_type,
    pub reserved: [*mut ::std::os::raw::c_void; 6usize],
    pub cb: uv_connect_cb,
    pub handle: *mut uv_stream_t,
    pub queue: uv__queue,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uv_connect_s"][::std::mem::size_of::<uv_connect_s>() - 96usize];
    ["Alignment of uv_connect_s"][::std::mem::align_of::<uv_connect_s>() - 8usize];
    ["Offset of field: uv_connect_s::data"][::std::mem::offset_of!(uv_connect_s, data) - 0usize];
    ["Offset of field: uv_connect_s::type_"][::std::mem::offset_of!(uv_connect_s, type_) - 8usize];
    ["Offset of field: uv_connect_s::reserved"]
        [::std::mem::offset_of!(uv_connect_s, reserved) - 16usize];
    ["Offset of field: uv_connect_s::cb"][::std::mem::offset_of!(uv_connect_s, cb) - 64usize];
    ["Offset of field: uv_connect_s::handle"]
        [::std::mem::offset_of!(uv_connect_s, handle) - 72usize];
    ["Offset of field: uv_connect_s::queue"][::std::mem::offset_of!(uv_connect_s, queue) - 80usize];
};
pub const uv_udp_flags_UV_UDP_IPV6ONLY: uv_udp_flags = 1;
pub const uv_udp_flags_UV_UDP_PARTIAL: uv_udp_flags = 2;
pub const uv_udp_flags_UV_UDP_REUSEADDR: uv_udp_flags = 4;
pub const uv_udp_flags_UV_UDP_MMSG_CHUNK: uv_udp_flags = 8;
pub const uv_udp_flags_UV_UDP_MMSG_FREE: uv_udp_flags = 16;
pub const uv_udp_flags_UV_UDP_LINUX_RECVERR: uv_udp_flags = 32;
pub const uv_udp_flags_UV_UDP_RECVMMSG: uv_udp_flags = 256;
pub type uv_udp_flags = ::std::os::raw::c_uint;
pub type uv_udp_send_cb = ::std::option::Option<
    unsafe extern "C" fn(req: *mut uv_udp_send_t, status: ::std::os::raw::c_int),
>;
pub type uv_udp_recv_cb = ::std::option::Option<
    unsafe extern "C" fn(
        handle: *mut uv_udp_t,
        nread: isize,
        buf: *const uv_buf_t,
        addr: *const sockaddr,
        flags: ::std::os::raw::c_uint,
    ),
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct uv_udp_s {
    pub data: *mut ::std::os::raw::c_void,
    pub loop_: *mut uv_loop_t,
    pub type_: uv_handle_type,
    pub close_cb: uv_close_cb,
    pub handle_queue: uv__queue,
    pub u: uv_udp_s__bindgen_ty_1,
    pub next_closing: *mut uv_handle_t,
    pub flags: ::std::os::raw::c_uint,
    pub send_queue_size: usize,
    pub send_queue_count: usize,
    pub alloc_cb: uv_alloc_cb,
    pub recv_cb: uv_udp_recv_cb,
    pub io_watcher: uv__io_t,
    pub write_queue: uv__queue,
    pub write_completed_queue: uv__queue,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union uv_udp_s__bindgen_ty_1 {
    pub fd: ::std::os::raw::c_int,
    pub reserved: [*mut ::std::os::raw::c_void; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uv_udp_s__bindgen_ty_1"][::std::mem::size_of::<uv_udp_s__bindgen_ty_1>() - 32usize];
    ["Alignment of uv_udp_s__bindgen_ty_1"]
        [::std::mem::align_of::<uv_udp_s__bindgen_ty_1>() - 8usize];
    ["Offset of field: uv_udp_s__bindgen_ty_1::fd"]
        [::std::mem::offset_of!(uv_udp_s__bindgen_ty_1, fd) - 0usize];
    ["Offset of field: uv_udp_s__bindgen_ty_1::reserved"]
        [::std::mem::offset_of!(uv_udp_s__bindgen_ty_1, reserved) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uv_udp_s"][::std::mem::size_of::<uv_udp_s>() - 224usize];
    ["Alignment of uv_udp_s"][::std::mem::align_of::<uv_udp_s>() - 8usize];
    ["Offset of field: uv_udp_s::data"][::std::mem::offset_of!(uv_udp_s, data) - 0usize];
    ["Offset of field: uv_udp_s::loop_"][::std::mem::offset_of!(uv_udp_s, loop_) - 8usize];
    ["Offset of field: uv_udp_s::type_"][::std::mem::offset_of!(uv_udp_s, type_) - 16usize];
    ["Offset of field: uv_udp_s::close_cb"][::std::mem::offset_of!(uv_udp_s, close_cb) - 24usize];
    ["Offset of field: uv_udp_s::handle_queue"]
        [::std::mem::offset_of!(uv_udp_s, handle_queue) - 32usize];
    ["Offset of field: uv_udp_s::u"][::std::mem::offset_of!(uv_udp_s, u) - 48usize];
    ["Offset of field: uv_udp_s::next_closing"]
        [::std::mem::offset_of!(uv_udp_s, next_closing) - 80usize];
    ["Offset of field: uv_udp_s::flags"][::std::mem::offset_of!(uv_udp_s, flags) - 88usize];
    ["Offset of field: uv_udp_s::send_queue_size"]
        [::std::mem::offset_of!(uv_udp_s, send_queue_size) - 96usize];
    ["Offset of field: uv_udp_s::send_queue_count"]
        [::std::mem::offset_of!(uv_udp_s, send_queue_count) - 104usize];
    ["Offset of field: uv_udp_s::alloc_cb"][::std::mem::offset_of!(uv_udp_s, alloc_cb) - 112usize];
    ["Offset of field: uv_udp_s::recv_cb"][::std::mem::offset_of!(uv_udp_s, recv_cb) - 120usize];
    ["Offset of field: uv_udp_s::io_watcher"]
        [::std::mem::offset_of!(uv_udp_s, io_watcher) - 128usize];
    ["Offset of field: uv_udp_s::write_queue"]
        [::std::mem::offset_of!(uv_udp_s, write_queue) - 192usize];
    ["Offset of field: uv_udp_s::write_completed_queue"]
        [::std::mem::offset_of!(uv_udp_s, write_completed_queue) - 208usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uv_udp_send_s {
    pub data: *mut ::std::os::raw::c_void,
    pub type_: uv_req_type,
    pub reserved: [*mut ::std::os::raw::c_void; 6usize],
    pub handle: *mut uv_udp_t,
    pub cb: uv_udp_send_cb,
    pub queue: uv__queue,
    pub addr: sockaddr_storage,
    pub nbufs: ::std::os::raw::c_uint,
    pub bufs: *mut uv_buf_t,
    pub status: isize,
    pub send_cb: uv_udp_send_cb,
    pub bufsml: [uv_buf_t; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uv_udp_send_s"][::std::mem::size_of::<uv_udp_send_s>() - 320usize];
    ["Alignment of uv_udp_send_s"][::std::mem::align_of::<uv_udp_send_s>() - 8usize];
    ["Offset of field: uv_udp_send_s::data"][::std::mem::offset_of!(uv_udp_send_s, data) - 0usize];
    ["Offset of field: uv_udp_send_s::type_"]
        [::std::mem::offset_of!(uv_udp_send_s, type_) - 8usize];
    ["Offset of field: uv_udp_send_s::reserved"]
        [::std::mem::offset_of!(uv_udp_send_s, reserved) - 16usize];
    ["Offset of field: uv_udp_send_s::handle"]
        [::std::mem::offset_of!(uv_udp_send_s, handle) - 64usize];
    ["Offset of field: uv_udp_send_s::cb"][::std::mem::offset_of!(uv_udp_send_s, cb) - 72usize];
    ["Offset of field: uv_udp_send_s::queue"]
        [::std::mem::offset_of!(uv_udp_send_s, queue) - 80usize];
    ["Offset of field: uv_udp_send_s::addr"][::std::mem::offset_of!(uv_udp_send_s, addr) - 96usize];
    ["Offset of field: uv_udp_send_s::nbufs"]
        [::std::mem::offset_of!(uv_udp_send_s, nbufs) - 224usize];
    ["Offset of field: uv_udp_send_s::bufs"]
        [::std::mem::offset_of!(uv_udp_send_s, bufs) - 232usize];
    ["Offset of field: uv_udp_send_s::status"]
        [::std::mem::offset_of!(uv_udp_send_s, status) - 240usize];
    ["Offset of field: uv_udp_send_s::send_cb"]
        [::std::mem::offset_of!(uv_udp_send_s, send_cb) - 248usize];
    ["Offset of field: uv_udp_send_s::bufsml"]
        [::std::mem::offset_of!(uv_udp_send_s, bufsml) - 256usize];
};
unsafe extern "C" {
    pub fn uv_udp_init(arg1: *mut uv_loop_t, handle: *mut uv_udp_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_udp_init_ex(
        arg1: *mut uv_loop_t,
        handle: *mut uv_udp_t,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_udp_open(handle: *mut uv_udp_t, sock: uv_os_sock_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_udp_bind(
        handle: *mut uv_udp_t,
        addr: *const sockaddr,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_udp_connect(handle: *mut uv_udp_t, addr: *const sockaddr) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_udp_getpeername(
        handle: *const uv_udp_t,
        name: *mut sockaddr,
        namelen: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_udp_getsockname(
        handle: *const uv_udp_t,
        name: *mut sockaddr,
        namelen: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_udp_set_membership(
        handle: *mut uv_udp_t,
        multicast_addr: *const ::std::os::raw::c_char,
        interface_addr: *const ::std::os::raw::c_char,
        membership: uv_membership,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_udp_set_source_membership(
        handle: *mut uv_udp_t,
        multicast_addr: *const ::std::os::raw::c_char,
        interface_addr: *const ::std::os::raw::c_char,
        source_addr: *const ::std::os::raw::c_char,
        membership: uv_membership,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_udp_set_multicast_loop(
        handle: *mut uv_udp_t,
        on: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_udp_set_multicast_ttl(
        handle: *mut uv_udp_t,
        ttl: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_udp_set_multicast_interface(
        handle: *mut uv_udp_t,
        interface_addr: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_udp_set_broadcast(
        handle: *mut uv_udp_t,
        on: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_udp_set_ttl(
        handle: *mut uv_udp_t,
        ttl: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_udp_send(
        req: *mut uv_udp_send_t,
        handle: *mut uv_udp_t,
        bufs: *const uv_buf_t,
        nbufs: ::std::os::raw::c_uint,
        addr: *const sockaddr,
        send_cb: uv_udp_send_cb,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_udp_try_send(
        handle: *mut uv_udp_t,
        bufs: *const uv_buf_t,
        nbufs: ::std::os::raw::c_uint,
        addr: *const sockaddr,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_udp_recv_start(
        handle: *mut uv_udp_t,
        alloc_cb: uv_alloc_cb,
        recv_cb: uv_udp_recv_cb,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_udp_using_recvmmsg(handle: *const uv_udp_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_udp_recv_stop(handle: *mut uv_udp_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_udp_get_send_queue_size(handle: *const uv_udp_t) -> usize;
}
unsafe extern "C" {
    pub fn uv_udp_get_send_queue_count(handle: *const uv_udp_t) -> usize;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct uv_tty_s {
    pub data: *mut ::std::os::raw::c_void,
    pub loop_: *mut uv_loop_t,
    pub type_: uv_handle_type,
    pub close_cb: uv_close_cb,
    pub handle_queue: uv__queue,
    pub u: uv_tty_s__bindgen_ty_1,
    pub next_closing: *mut uv_handle_t,
    pub flags: ::std::os::raw::c_uint,
    pub write_queue_size: usize,
    pub alloc_cb: uv_alloc_cb,
    pub read_cb: uv_read_cb,
    pub connect_req: *mut uv_connect_t,
    pub shutdown_req: *mut uv_shutdown_t,
    pub io_watcher: uv__io_t,
    pub write_queue: uv__queue,
    pub write_completed_queue: uv__queue,
    pub connection_cb: uv_connection_cb,
    pub delayed_error: ::std::os::raw::c_int,
    pub accepted_fd: ::std::os::raw::c_int,
    pub queued_fds: *mut ::std::os::raw::c_void,
    pub select: *mut ::std::os::raw::c_void,
    pub orig_termios: termios,
    pub mode: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union uv_tty_s__bindgen_ty_1 {
    pub fd: ::std::os::raw::c_int,
    pub reserved: [*mut ::std::os::raw::c_void; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uv_tty_s__bindgen_ty_1"][::std::mem::size_of::<uv_tty_s__bindgen_ty_1>() - 32usize];
    ["Alignment of uv_tty_s__bindgen_ty_1"]
        [::std::mem::align_of::<uv_tty_s__bindgen_ty_1>() - 8usize];
    ["Offset of field: uv_tty_s__bindgen_ty_1::fd"]
        [::std::mem::offset_of!(uv_tty_s__bindgen_ty_1, fd) - 0usize];
    ["Offset of field: uv_tty_s__bindgen_ty_1::reserved"]
        [::std::mem::offset_of!(uv_tty_s__bindgen_ty_1, reserved) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uv_tty_s"][::std::mem::size_of::<uv_tty_s>() - 344usize];
    ["Alignment of uv_tty_s"][::std::mem::align_of::<uv_tty_s>() - 8usize];
    ["Offset of field: uv_tty_s::data"][::std::mem::offset_of!(uv_tty_s, data) - 0usize];
    ["Offset of field: uv_tty_s::loop_"][::std::mem::offset_of!(uv_tty_s, loop_) - 8usize];
    ["Offset of field: uv_tty_s::type_"][::std::mem::offset_of!(uv_tty_s, type_) - 16usize];
    ["Offset of field: uv_tty_s::close_cb"][::std::mem::offset_of!(uv_tty_s, close_cb) - 24usize];
    ["Offset of field: uv_tty_s::handle_queue"]
        [::std::mem::offset_of!(uv_tty_s, handle_queue) - 32usize];
    ["Offset of field: uv_tty_s::u"][::std::mem::offset_of!(uv_tty_s, u) - 48usize];
    ["Offset of field: uv_tty_s::next_closing"]
        [::std::mem::offset_of!(uv_tty_s, next_closing) - 80usize];
    ["Offset of field: uv_tty_s::flags"][::std::mem::offset_of!(uv_tty_s, flags) - 88usize];
    ["Offset of field: uv_tty_s::write_queue_size"]
        [::std::mem::offset_of!(uv_tty_s, write_queue_size) - 96usize];
    ["Offset of field: uv_tty_s::alloc_cb"][::std::mem::offset_of!(uv_tty_s, alloc_cb) - 104usize];
    ["Offset of field: uv_tty_s::read_cb"][::std::mem::offset_of!(uv_tty_s, read_cb) - 112usize];
    ["Offset of field: uv_tty_s::connect_req"]
        [::std::mem::offset_of!(uv_tty_s, connect_req) - 120usize];
    ["Offset of field: uv_tty_s::shutdown_req"]
        [::std::mem::offset_of!(uv_tty_s, shutdown_req) - 128usize];
    ["Offset of field: uv_tty_s::io_watcher"]
        [::std::mem::offset_of!(uv_tty_s, io_watcher) - 136usize];
    ["Offset of field: uv_tty_s::write_queue"]
        [::std::mem::offset_of!(uv_tty_s, write_queue) - 200usize];
    ["Offset of field: uv_tty_s::write_completed_queue"]
        [::std::mem::offset_of!(uv_tty_s, write_completed_queue) - 216usize];
    ["Offset of field: uv_tty_s::connection_cb"]
        [::std::mem::offset_of!(uv_tty_s, connection_cb) - 232usize];
    ["Offset of field: uv_tty_s::delayed_error"]
        [::std::mem::offset_of!(uv_tty_s, delayed_error) - 240usize];
    ["Offset of field: uv_tty_s::accepted_fd"]
        [::std::mem::offset_of!(uv_tty_s, accepted_fd) - 244usize];
    ["Offset of field: uv_tty_s::queued_fds"]
        [::std::mem::offset_of!(uv_tty_s, queued_fds) - 248usize];
    ["Offset of field: uv_tty_s::select"][::std::mem::offset_of!(uv_tty_s, select) - 256usize];
    ["Offset of field: uv_tty_s::orig_termios"]
        [::std::mem::offset_of!(uv_tty_s, orig_termios) - 264usize];
    ["Offset of field: uv_tty_s::mode"][::std::mem::offset_of!(uv_tty_s, mode) - 336usize];
};
pub const uv_tty_mode_t_UV_TTY_MODE_NORMAL: uv_tty_mode_t = 0;
pub const uv_tty_mode_t_UV_TTY_MODE_RAW: uv_tty_mode_t = 1;
pub const uv_tty_mode_t_UV_TTY_MODE_IO: uv_tty_mode_t = 2;
pub type uv_tty_mode_t = ::std::os::raw::c_uint;
pub const uv_tty_vtermstate_t_UV_TTY_SUPPORTED: uv_tty_vtermstate_t = 0;
pub const uv_tty_vtermstate_t_UV_TTY_UNSUPPORTED: uv_tty_vtermstate_t = 1;
pub type uv_tty_vtermstate_t = ::std::os::raw::c_uint;
unsafe extern "C" {
    pub fn uv_tty_init(
        arg1: *mut uv_loop_t,
        arg2: *mut uv_tty_t,
        fd: uv_file,
        readable: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_tty_set_mode(arg1: *mut uv_tty_t, mode: uv_tty_mode_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_tty_reset_mode() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_tty_get_winsize(
        arg1: *mut uv_tty_t,
        width: *mut ::std::os::raw::c_int,
        height: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_tty_set_vterm_state(state: uv_tty_vtermstate_t);
}
unsafe extern "C" {
    pub fn uv_tty_get_vterm_state(state: *mut uv_tty_vtermstate_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_guess_handle(file: uv_file) -> uv_handle_type;
}
pub const UV_PIPE_NO_TRUNCATE: _bindgen_ty_3 = 1;
pub type _bindgen_ty_3 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct uv_pipe_s {
    pub data: *mut ::std::os::raw::c_void,
    pub loop_: *mut uv_loop_t,
    pub type_: uv_handle_type,
    pub close_cb: uv_close_cb,
    pub handle_queue: uv__queue,
    pub u: uv_pipe_s__bindgen_ty_1,
    pub next_closing: *mut uv_handle_t,
    pub flags: ::std::os::raw::c_uint,
    pub write_queue_size: usize,
    pub alloc_cb: uv_alloc_cb,
    pub read_cb: uv_read_cb,
    pub connect_req: *mut uv_connect_t,
    pub shutdown_req: *mut uv_shutdown_t,
    pub io_watcher: uv__io_t,
    pub write_queue: uv__queue,
    pub write_completed_queue: uv__queue,
    pub connection_cb: uv_connection_cb,
    pub delayed_error: ::std::os::raw::c_int,
    pub accepted_fd: ::std::os::raw::c_int,
    pub queued_fds: *mut ::std::os::raw::c_void,
    pub select: *mut ::std::os::raw::c_void,
    pub ipc: ::std::os::raw::c_int,
    pub pipe_fname: *const ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union uv_pipe_s__bindgen_ty_1 {
    pub fd: ::std::os::raw::c_int,
    pub reserved: [*mut ::std::os::raw::c_void; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uv_pipe_s__bindgen_ty_1"][::std::mem::size_of::<uv_pipe_s__bindgen_ty_1>() - 32usize];
    ["Alignment of uv_pipe_s__bindgen_ty_1"]
        [::std::mem::align_of::<uv_pipe_s__bindgen_ty_1>() - 8usize];
    ["Offset of field: uv_pipe_s__bindgen_ty_1::fd"]
        [::std::mem::offset_of!(uv_pipe_s__bindgen_ty_1, fd) - 0usize];
    ["Offset of field: uv_pipe_s__bindgen_ty_1::reserved"]
        [::std::mem::offset_of!(uv_pipe_s__bindgen_ty_1, reserved) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uv_pipe_s"][::std::mem::size_of::<uv_pipe_s>() - 280usize];
    ["Alignment of uv_pipe_s"][::std::mem::align_of::<uv_pipe_s>() - 8usize];
    ["Offset of field: uv_pipe_s::data"][::std::mem::offset_of!(uv_pipe_s, data) - 0usize];
    ["Offset of field: uv_pipe_s::loop_"][::std::mem::offset_of!(uv_pipe_s, loop_) - 8usize];
    ["Offset of field: uv_pipe_s::type_"][::std::mem::offset_of!(uv_pipe_s, type_) - 16usize];
    ["Offset of field: uv_pipe_s::close_cb"][::std::mem::offset_of!(uv_pipe_s, close_cb) - 24usize];
    ["Offset of field: uv_pipe_s::handle_queue"]
        [::std::mem::offset_of!(uv_pipe_s, handle_queue) - 32usize];
    ["Offset of field: uv_pipe_s::u"][::std::mem::offset_of!(uv_pipe_s, u) - 48usize];
    ["Offset of field: uv_pipe_s::next_closing"]
        [::std::mem::offset_of!(uv_pipe_s, next_closing) - 80usize];
    ["Offset of field: uv_pipe_s::flags"][::std::mem::offset_of!(uv_pipe_s, flags) - 88usize];
    ["Offset of field: uv_pipe_s::write_queue_size"]
        [::std::mem::offset_of!(uv_pipe_s, write_queue_size) - 96usize];
    ["Offset of field: uv_pipe_s::alloc_cb"]
        [::std::mem::offset_of!(uv_pipe_s, alloc_cb) - 104usize];
    ["Offset of field: uv_pipe_s::read_cb"][::std::mem::offset_of!(uv_pipe_s, read_cb) - 112usize];
    ["Offset of field: uv_pipe_s::connect_req"]
        [::std::mem::offset_of!(uv_pipe_s, connect_req) - 120usize];
    ["Offset of field: uv_pipe_s::shutdown_req"]
        [::std::mem::offset_of!(uv_pipe_s, shutdown_req) - 128usize];
    ["Offset of field: uv_pipe_s::io_watcher"]
        [::std::mem::offset_of!(uv_pipe_s, io_watcher) - 136usize];
    ["Offset of field: uv_pipe_s::write_queue"]
        [::std::mem::offset_of!(uv_pipe_s, write_queue) - 200usize];
    ["Offset of field: uv_pipe_s::write_completed_queue"]
        [::std::mem::offset_of!(uv_pipe_s, write_completed_queue) - 216usize];
    ["Offset of field: uv_pipe_s::connection_cb"]
        [::std::mem::offset_of!(uv_pipe_s, connection_cb) - 232usize];
    ["Offset of field: uv_pipe_s::delayed_error"]
        [::std::mem::offset_of!(uv_pipe_s, delayed_error) - 240usize];
    ["Offset of field: uv_pipe_s::accepted_fd"]
        [::std::mem::offset_of!(uv_pipe_s, accepted_fd) - 244usize];
    ["Offset of field: uv_pipe_s::queued_fds"]
        [::std::mem::offset_of!(uv_pipe_s, queued_fds) - 248usize];
    ["Offset of field: uv_pipe_s::select"][::std::mem::offset_of!(uv_pipe_s, select) - 256usize];
    ["Offset of field: uv_pipe_s::ipc"][::std::mem::offset_of!(uv_pipe_s, ipc) - 264usize];
    ["Offset of field: uv_pipe_s::pipe_fname"]
        [::std::mem::offset_of!(uv_pipe_s, pipe_fname) - 272usize];
};
unsafe extern "C" {
    pub fn uv_pipe_init(
        arg1: *mut uv_loop_t,
        handle: *mut uv_pipe_t,
        ipc: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_pipe_open(arg1: *mut uv_pipe_t, file: uv_file) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_pipe_bind(
        handle: *mut uv_pipe_t,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_pipe_bind2(
        handle: *mut uv_pipe_t,
        name: *const ::std::os::raw::c_char,
        namelen: usize,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_pipe_connect(
        req: *mut uv_connect_t,
        handle: *mut uv_pipe_t,
        name: *const ::std::os::raw::c_char,
        cb: uv_connect_cb,
    );
}
unsafe extern "C" {
    pub fn uv_pipe_connect2(
        req: *mut uv_connect_t,
        handle: *mut uv_pipe_t,
        name: *const ::std::os::raw::c_char,
        namelen: usize,
        flags: ::std::os::raw::c_uint,
        cb: uv_connect_cb,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_pipe_getsockname(
        handle: *const uv_pipe_t,
        buffer: *mut ::std::os::raw::c_char,
        size: *mut usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_pipe_getpeername(
        handle: *const uv_pipe_t,
        buffer: *mut ::std::os::raw::c_char,
        size: *mut usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_pipe_pending_instances(handle: *mut uv_pipe_t, count: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn uv_pipe_pending_count(handle: *mut uv_pipe_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_pipe_pending_type(handle: *mut uv_pipe_t) -> uv_handle_type;
}
unsafe extern "C" {
    pub fn uv_pipe_chmod(
        handle: *mut uv_pipe_t,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct uv_poll_s {
    pub data: *mut ::std::os::raw::c_void,
    pub loop_: *mut uv_loop_t,
    pub type_: uv_handle_type,
    pub close_cb: uv_close_cb,
    pub handle_queue: uv__queue,
    pub u: uv_poll_s__bindgen_ty_1,
    pub next_closing: *mut uv_handle_t,
    pub flags: ::std::os::raw::c_uint,
    pub poll_cb: uv_poll_cb,
    pub io_watcher: uv__io_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union uv_poll_s__bindgen_ty_1 {
    pub fd: ::std::os::raw::c_int,
    pub reserved: [*mut ::std::os::raw::c_void; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uv_poll_s__bindgen_ty_1"][::std::mem::size_of::<uv_poll_s__bindgen_ty_1>() - 32usize];
    ["Alignment of uv_poll_s__bindgen_ty_1"]
        [::std::mem::align_of::<uv_poll_s__bindgen_ty_1>() - 8usize];
    ["Offset of field: uv_poll_s__bindgen_ty_1::fd"]
        [::std::mem::offset_of!(uv_poll_s__bindgen_ty_1, fd) - 0usize];
    ["Offset of field: uv_poll_s__bindgen_ty_1::reserved"]
        [::std::mem::offset_of!(uv_poll_s__bindgen_ty_1, reserved) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uv_poll_s"][::std::mem::size_of::<uv_poll_s>() - 168usize];
    ["Alignment of uv_poll_s"][::std::mem::align_of::<uv_poll_s>() - 8usize];
    ["Offset of field: uv_poll_s::data"][::std::mem::offset_of!(uv_poll_s, data) - 0usize];
    ["Offset of field: uv_poll_s::loop_"][::std::mem::offset_of!(uv_poll_s, loop_) - 8usize];
    ["Offset of field: uv_poll_s::type_"][::std::mem::offset_of!(uv_poll_s, type_) - 16usize];
    ["Offset of field: uv_poll_s::close_cb"][::std::mem::offset_of!(uv_poll_s, close_cb) - 24usize];
    ["Offset of field: uv_poll_s::handle_queue"]
        [::std::mem::offset_of!(uv_poll_s, handle_queue) - 32usize];
    ["Offset of field: uv_poll_s::u"][::std::mem::offset_of!(uv_poll_s, u) - 48usize];
    ["Offset of field: uv_poll_s::next_closing"]
        [::std::mem::offset_of!(uv_poll_s, next_closing) - 80usize];
    ["Offset of field: uv_poll_s::flags"][::std::mem::offset_of!(uv_poll_s, flags) - 88usize];
    ["Offset of field: uv_poll_s::poll_cb"][::std::mem::offset_of!(uv_poll_s, poll_cb) - 96usize];
    ["Offset of field: uv_poll_s::io_watcher"]
        [::std::mem::offset_of!(uv_poll_s, io_watcher) - 104usize];
};
pub const uv_poll_event_UV_READABLE: uv_poll_event = 1;
pub const uv_poll_event_UV_WRITABLE: uv_poll_event = 2;
pub const uv_poll_event_UV_DISCONNECT: uv_poll_event = 4;
pub const uv_poll_event_UV_PRIORITIZED: uv_poll_event = 8;
pub type uv_poll_event = ::std::os::raw::c_uint;
unsafe extern "C" {
    pub fn uv_poll_init(
        loop_: *mut uv_loop_t,
        handle: *mut uv_poll_t,
        fd: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_poll_init_socket(
        loop_: *mut uv_loop_t,
        handle: *mut uv_poll_t,
        socket: uv_os_sock_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_poll_start(
        handle: *mut uv_poll_t,
        events: ::std::os::raw::c_int,
        cb: uv_poll_cb,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_poll_stop(handle: *mut uv_poll_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct uv_prepare_s {
    pub data: *mut ::std::os::raw::c_void,
    pub loop_: *mut uv_loop_t,
    pub type_: uv_handle_type,
    pub close_cb: uv_close_cb,
    pub handle_queue: uv__queue,
    pub u: uv_prepare_s__bindgen_ty_1,
    pub next_closing: *mut uv_handle_t,
    pub flags: ::std::os::raw::c_uint,
    pub prepare_cb: uv_prepare_cb,
    pub queue: uv__queue,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union uv_prepare_s__bindgen_ty_1 {
    pub fd: ::std::os::raw::c_int,
    pub reserved: [*mut ::std::os::raw::c_void; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uv_prepare_s__bindgen_ty_1"]
        [::std::mem::size_of::<uv_prepare_s__bindgen_ty_1>() - 32usize];
    ["Alignment of uv_prepare_s__bindgen_ty_1"]
        [::std::mem::align_of::<uv_prepare_s__bindgen_ty_1>() - 8usize];
    ["Offset of field: uv_prepare_s__bindgen_ty_1::fd"]
        [::std::mem::offset_of!(uv_prepare_s__bindgen_ty_1, fd) - 0usize];
    ["Offset of field: uv_prepare_s__bindgen_ty_1::reserved"]
        [::std::mem::offset_of!(uv_prepare_s__bindgen_ty_1, reserved) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uv_prepare_s"][::std::mem::size_of::<uv_prepare_s>() - 120usize];
    ["Alignment of uv_prepare_s"][::std::mem::align_of::<uv_prepare_s>() - 8usize];
    ["Offset of field: uv_prepare_s::data"][::std::mem::offset_of!(uv_prepare_s, data) - 0usize];
    ["Offset of field: uv_prepare_s::loop_"][::std::mem::offset_of!(uv_prepare_s, loop_) - 8usize];
    ["Offset of field: uv_prepare_s::type_"][::std::mem::offset_of!(uv_prepare_s, type_) - 16usize];
    ["Offset of field: uv_prepare_s::close_cb"]
        [::std::mem::offset_of!(uv_prepare_s, close_cb) - 24usize];
    ["Offset of field: uv_prepare_s::handle_queue"]
        [::std::mem::offset_of!(uv_prepare_s, handle_queue) - 32usize];
    ["Offset of field: uv_prepare_s::u"][::std::mem::offset_of!(uv_prepare_s, u) - 48usize];
    ["Offset of field: uv_prepare_s::next_closing"]
        [::std::mem::offset_of!(uv_prepare_s, next_closing) - 80usize];
    ["Offset of field: uv_prepare_s::flags"][::std::mem::offset_of!(uv_prepare_s, flags) - 88usize];
    ["Offset of field: uv_prepare_s::prepare_cb"]
        [::std::mem::offset_of!(uv_prepare_s, prepare_cb) - 96usize];
    ["Offset of field: uv_prepare_s::queue"]
        [::std::mem::offset_of!(uv_prepare_s, queue) - 104usize];
};
unsafe extern "C" {
    pub fn uv_prepare_init(
        arg1: *mut uv_loop_t,
        prepare: *mut uv_prepare_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_prepare_start(prepare: *mut uv_prepare_t, cb: uv_prepare_cb)
        -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_prepare_stop(prepare: *mut uv_prepare_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct uv_check_s {
    pub data: *mut ::std::os::raw::c_void,
    pub loop_: *mut uv_loop_t,
    pub type_: uv_handle_type,
    pub close_cb: uv_close_cb,
    pub handle_queue: uv__queue,
    pub u: uv_check_s__bindgen_ty_1,
    pub next_closing: *mut uv_handle_t,
    pub flags: ::std::os::raw::c_uint,
    pub check_cb: uv_check_cb,
    pub queue: uv__queue,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union uv_check_s__bindgen_ty_1 {
    pub fd: ::std::os::raw::c_int,
    pub reserved: [*mut ::std::os::raw::c_void; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uv_check_s__bindgen_ty_1"]
        [::std::mem::size_of::<uv_check_s__bindgen_ty_1>() - 32usize];
    ["Alignment of uv_check_s__bindgen_ty_1"]
        [::std::mem::align_of::<uv_check_s__bindgen_ty_1>() - 8usize];
    ["Offset of field: uv_check_s__bindgen_ty_1::fd"]
        [::std::mem::offset_of!(uv_check_s__bindgen_ty_1, fd) - 0usize];
    ["Offset of field: uv_check_s__bindgen_ty_1::reserved"]
        [::std::mem::offset_of!(uv_check_s__bindgen_ty_1, reserved) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uv_check_s"][::std::mem::size_of::<uv_check_s>() - 120usize];
    ["Alignment of uv_check_s"][::std::mem::align_of::<uv_check_s>() - 8usize];
    ["Offset of field: uv_check_s::data"][::std::mem::offset_of!(uv_check_s, data) - 0usize];
    ["Offset of field: uv_check_s::loop_"][::std::mem::offset_of!(uv_check_s, loop_) - 8usize];
    ["Offset of field: uv_check_s::type_"][::std::mem::offset_of!(uv_check_s, type_) - 16usize];
    ["Offset of field: uv_check_s::close_cb"]
        [::std::mem::offset_of!(uv_check_s, close_cb) - 24usize];
    ["Offset of field: uv_check_s::handle_queue"]
        [::std::mem::offset_of!(uv_check_s, handle_queue) - 32usize];
    ["Offset of field: uv_check_s::u"][::std::mem::offset_of!(uv_check_s, u) - 48usize];
    ["Offset of field: uv_check_s::next_closing"]
        [::std::mem::offset_of!(uv_check_s, next_closing) - 80usize];
    ["Offset of field: uv_check_s::flags"][::std::mem::offset_of!(uv_check_s, flags) - 88usize];
    ["Offset of field: uv_check_s::check_cb"]
        [::std::mem::offset_of!(uv_check_s, check_cb) - 96usize];
    ["Offset of field: uv_check_s::queue"][::std::mem::offset_of!(uv_check_s, queue) - 104usize];
};
unsafe extern "C" {
    pub fn uv_check_init(arg1: *mut uv_loop_t, check: *mut uv_check_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_check_start(check: *mut uv_check_t, cb: uv_check_cb) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_check_stop(check: *mut uv_check_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct uv_idle_s {
    pub data: *mut ::std::os::raw::c_void,
    pub loop_: *mut uv_loop_t,
    pub type_: uv_handle_type,
    pub close_cb: uv_close_cb,
    pub handle_queue: uv__queue,
    pub u: uv_idle_s__bindgen_ty_1,
    pub next_closing: *mut uv_handle_t,
    pub flags: ::std::os::raw::c_uint,
    pub idle_cb: uv_idle_cb,
    pub queue: uv__queue,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union uv_idle_s__bindgen_ty_1 {
    pub fd: ::std::os::raw::c_int,
    pub reserved: [*mut ::std::os::raw::c_void; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uv_idle_s__bindgen_ty_1"][::std::mem::size_of::<uv_idle_s__bindgen_ty_1>() - 32usize];
    ["Alignment of uv_idle_s__bindgen_ty_1"]
        [::std::mem::align_of::<uv_idle_s__bindgen_ty_1>() - 8usize];
    ["Offset of field: uv_idle_s__bindgen_ty_1::fd"]
        [::std::mem::offset_of!(uv_idle_s__bindgen_ty_1, fd) - 0usize];
    ["Offset of field: uv_idle_s__bindgen_ty_1::reserved"]
        [::std::mem::offset_of!(uv_idle_s__bindgen_ty_1, reserved) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uv_idle_s"][::std::mem::size_of::<uv_idle_s>() - 120usize];
    ["Alignment of uv_idle_s"][::std::mem::align_of::<uv_idle_s>() - 8usize];
    ["Offset of field: uv_idle_s::data"][::std::mem::offset_of!(uv_idle_s, data) - 0usize];
    ["Offset of field: uv_idle_s::loop_"][::std::mem::offset_of!(uv_idle_s, loop_) - 8usize];
    ["Offset of field: uv_idle_s::type_"][::std::mem::offset_of!(uv_idle_s, type_) - 16usize];
    ["Offset of field: uv_idle_s::close_cb"][::std::mem::offset_of!(uv_idle_s, close_cb) - 24usize];
    ["Offset of field: uv_idle_s::handle_queue"]
        [::std::mem::offset_of!(uv_idle_s, handle_queue) - 32usize];
    ["Offset of field: uv_idle_s::u"][::std::mem::offset_of!(uv_idle_s, u) - 48usize];
    ["Offset of field: uv_idle_s::next_closing"]
        [::std::mem::offset_of!(uv_idle_s, next_closing) - 80usize];
    ["Offset of field: uv_idle_s::flags"][::std::mem::offset_of!(uv_idle_s, flags) - 88usize];
    ["Offset of field: uv_idle_s::idle_cb"][::std::mem::offset_of!(uv_idle_s, idle_cb) - 96usize];
    ["Offset of field: uv_idle_s::queue"][::std::mem::offset_of!(uv_idle_s, queue) - 104usize];
};
unsafe extern "C" {
    pub fn uv_idle_init(arg1: *mut uv_loop_t, idle: *mut uv_idle_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_idle_start(idle: *mut uv_idle_t, cb: uv_idle_cb) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_idle_stop(idle: *mut uv_idle_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct uv_async_s {
    pub data: *mut ::std::os::raw::c_void,
    pub loop_: *mut uv_loop_t,
    pub type_: uv_handle_type,
    pub close_cb: uv_close_cb,
    pub handle_queue: uv__queue,
    pub u: uv_async_s__bindgen_ty_1,
    pub next_closing: *mut uv_handle_t,
    pub flags: ::std::os::raw::c_uint,
    pub async_cb: uv_async_cb,
    pub queue: uv__queue,
    pub pending: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union uv_async_s__bindgen_ty_1 {
    pub fd: ::std::os::raw::c_int,
    pub reserved: [*mut ::std::os::raw::c_void; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uv_async_s__bindgen_ty_1"]
        [::std::mem::size_of::<uv_async_s__bindgen_ty_1>() - 32usize];
    ["Alignment of uv_async_s__bindgen_ty_1"]
        [::std::mem::align_of::<uv_async_s__bindgen_ty_1>() - 8usize];
    ["Offset of field: uv_async_s__bindgen_ty_1::fd"]
        [::std::mem::offset_of!(uv_async_s__bindgen_ty_1, fd) - 0usize];
    ["Offset of field: uv_async_s__bindgen_ty_1::reserved"]
        [::std::mem::offset_of!(uv_async_s__bindgen_ty_1, reserved) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uv_async_s"][::std::mem::size_of::<uv_async_s>() - 128usize];
    ["Alignment of uv_async_s"][::std::mem::align_of::<uv_async_s>() - 8usize];
    ["Offset of field: uv_async_s::data"][::std::mem::offset_of!(uv_async_s, data) - 0usize];
    ["Offset of field: uv_async_s::loop_"][::std::mem::offset_of!(uv_async_s, loop_) - 8usize];
    ["Offset of field: uv_async_s::type_"][::std::mem::offset_of!(uv_async_s, type_) - 16usize];
    ["Offset of field: uv_async_s::close_cb"]
        [::std::mem::offset_of!(uv_async_s, close_cb) - 24usize];
    ["Offset of field: uv_async_s::handle_queue"]
        [::std::mem::offset_of!(uv_async_s, handle_queue) - 32usize];
    ["Offset of field: uv_async_s::u"][::std::mem::offset_of!(uv_async_s, u) - 48usize];
    ["Offset of field: uv_async_s::next_closing"]
        [::std::mem::offset_of!(uv_async_s, next_closing) - 80usize];
    ["Offset of field: uv_async_s::flags"][::std::mem::offset_of!(uv_async_s, flags) - 88usize];
    ["Offset of field: uv_async_s::async_cb"]
        [::std::mem::offset_of!(uv_async_s, async_cb) - 96usize];
    ["Offset of field: uv_async_s::queue"][::std::mem::offset_of!(uv_async_s, queue) - 104usize];
    ["Offset of field: uv_async_s::pending"]
        [::std::mem::offset_of!(uv_async_s, pending) - 120usize];
};
unsafe extern "C" {
    pub fn uv_async_init(
        arg1: *mut uv_loop_t,
        async_: *mut uv_async_t,
        async_cb: uv_async_cb,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_async_send(async_: *mut uv_async_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct uv_timer_s {
    pub data: *mut ::std::os::raw::c_void,
    pub loop_: *mut uv_loop_t,
    pub type_: uv_handle_type,
    pub close_cb: uv_close_cb,
    pub handle_queue: uv__queue,
    pub u: uv_timer_s__bindgen_ty_1,
    pub next_closing: *mut uv_handle_t,
    pub flags: ::std::os::raw::c_uint,
    pub timer_cb: uv_timer_cb,
    pub node: uv_timer_s__bindgen_ty_2,
    pub timeout: u64,
    pub repeat: u64,
    pub start_id: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union uv_timer_s__bindgen_ty_1 {
    pub fd: ::std::os::raw::c_int,
    pub reserved: [*mut ::std::os::raw::c_void; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uv_timer_s__bindgen_ty_1"]
        [::std::mem::size_of::<uv_timer_s__bindgen_ty_1>() - 32usize];
    ["Alignment of uv_timer_s__bindgen_ty_1"]
        [::std::mem::align_of::<uv_timer_s__bindgen_ty_1>() - 8usize];
    ["Offset of field: uv_timer_s__bindgen_ty_1::fd"]
        [::std::mem::offset_of!(uv_timer_s__bindgen_ty_1, fd) - 0usize];
    ["Offset of field: uv_timer_s__bindgen_ty_1::reserved"]
        [::std::mem::offset_of!(uv_timer_s__bindgen_ty_1, reserved) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union uv_timer_s__bindgen_ty_2 {
    pub heap: [*mut ::std::os::raw::c_void; 3usize],
    pub queue: uv__queue,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uv_timer_s__bindgen_ty_2"]
        [::std::mem::size_of::<uv_timer_s__bindgen_ty_2>() - 24usize];
    ["Alignment of uv_timer_s__bindgen_ty_2"]
        [::std::mem::align_of::<uv_timer_s__bindgen_ty_2>() - 8usize];
    ["Offset of field: uv_timer_s__bindgen_ty_2::heap"]
        [::std::mem::offset_of!(uv_timer_s__bindgen_ty_2, heap) - 0usize];
    ["Offset of field: uv_timer_s__bindgen_ty_2::queue"]
        [::std::mem::offset_of!(uv_timer_s__bindgen_ty_2, queue) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uv_timer_s"][::std::mem::size_of::<uv_timer_s>() - 152usize];
    ["Alignment of uv_timer_s"][::std::mem::align_of::<uv_timer_s>() - 8usize];
    ["Offset of field: uv_timer_s::data"][::std::mem::offset_of!(uv_timer_s, data) - 0usize];
    ["Offset of field: uv_timer_s::loop_"][::std::mem::offset_of!(uv_timer_s, loop_) - 8usize];
    ["Offset of field: uv_timer_s::type_"][::std::mem::offset_of!(uv_timer_s, type_) - 16usize];
    ["Offset of field: uv_timer_s::close_cb"]
        [::std::mem::offset_of!(uv_timer_s, close_cb) - 24usize];
    ["Offset of field: uv_timer_s::handle_queue"]
        [::std::mem::offset_of!(uv_timer_s, handle_queue) - 32usize];
    ["Offset of field: uv_timer_s::u"][::std::mem::offset_of!(uv_timer_s, u) - 48usize];
    ["Offset of field: uv_timer_s::next_closing"]
        [::std::mem::offset_of!(uv_timer_s, next_closing) - 80usize];
    ["Offset of field: uv_timer_s::flags"][::std::mem::offset_of!(uv_timer_s, flags) - 88usize];
    ["Offset of field: uv_timer_s::timer_cb"]
        [::std::mem::offset_of!(uv_timer_s, timer_cb) - 96usize];
    ["Offset of field: uv_timer_s::node"][::std::mem::offset_of!(uv_timer_s, node) - 104usize];
    ["Offset of field: uv_timer_s::timeout"]
        [::std::mem::offset_of!(uv_timer_s, timeout) - 128usize];
    ["Offset of field: uv_timer_s::repeat"][::std::mem::offset_of!(uv_timer_s, repeat) - 136usize];
    ["Offset of field: uv_timer_s::start_id"]
        [::std::mem::offset_of!(uv_timer_s, start_id) - 144usize];
};
unsafe extern "C" {
    pub fn uv_timer_init(arg1: *mut uv_loop_t, handle: *mut uv_timer_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_timer_start(
        handle: *mut uv_timer_t,
        cb: uv_timer_cb,
        timeout: u64,
        repeat: u64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_timer_stop(handle: *mut uv_timer_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_timer_again(handle: *mut uv_timer_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_timer_set_repeat(handle: *mut uv_timer_t, repeat: u64);
}
unsafe extern "C" {
    pub fn uv_timer_get_repeat(handle: *const uv_timer_t) -> u64;
}
unsafe extern "C" {
    pub fn uv_timer_get_due_in(handle: *const uv_timer_t) -> u64;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uv_getaddrinfo_s {
    pub data: *mut ::std::os::raw::c_void,
    pub type_: uv_req_type,
    pub reserved: [*mut ::std::os::raw::c_void; 6usize],
    pub loop_: *mut uv_loop_t,
    pub work_req: uv__work,
    pub cb: uv_getaddrinfo_cb,
    pub hints: *mut addrinfo,
    pub hostname: *mut ::std::os::raw::c_char,
    pub service: *mut ::std::os::raw::c_char,
    pub addrinfo: *mut addrinfo,
    pub retcode: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uv_getaddrinfo_s"][::std::mem::size_of::<uv_getaddrinfo_s>() - 160usize];
    ["Alignment of uv_getaddrinfo_s"][::std::mem::align_of::<uv_getaddrinfo_s>() - 8usize];
    ["Offset of field: uv_getaddrinfo_s::data"]
        [::std::mem::offset_of!(uv_getaddrinfo_s, data) - 0usize];
    ["Offset of field: uv_getaddrinfo_s::type_"]
        [::std::mem::offset_of!(uv_getaddrinfo_s, type_) - 8usize];
    ["Offset of field: uv_getaddrinfo_s::reserved"]
        [::std::mem::offset_of!(uv_getaddrinfo_s, reserved) - 16usize];
    ["Offset of field: uv_getaddrinfo_s::loop_"]
        [::std::mem::offset_of!(uv_getaddrinfo_s, loop_) - 64usize];
    ["Offset of field: uv_getaddrinfo_s::work_req"]
        [::std::mem::offset_of!(uv_getaddrinfo_s, work_req) - 72usize];
    ["Offset of field: uv_getaddrinfo_s::cb"]
        [::std::mem::offset_of!(uv_getaddrinfo_s, cb) - 112usize];
    ["Offset of field: uv_getaddrinfo_s::hints"]
        [::std::mem::offset_of!(uv_getaddrinfo_s, hints) - 120usize];
    ["Offset of field: uv_getaddrinfo_s::hostname"]
        [::std::mem::offset_of!(uv_getaddrinfo_s, hostname) - 128usize];
    ["Offset of field: uv_getaddrinfo_s::service"]
        [::std::mem::offset_of!(uv_getaddrinfo_s, service) - 136usize];
    ["Offset of field: uv_getaddrinfo_s::addrinfo"]
        [::std::mem::offset_of!(uv_getaddrinfo_s, addrinfo) - 144usize];
    ["Offset of field: uv_getaddrinfo_s::retcode"]
        [::std::mem::offset_of!(uv_getaddrinfo_s, retcode) - 152usize];
};
unsafe extern "C" {
    pub fn uv_getaddrinfo(
        loop_: *mut uv_loop_t,
        req: *mut uv_getaddrinfo_t,
        getaddrinfo_cb: uv_getaddrinfo_cb,
        node: *const ::std::os::raw::c_char,
        service: *const ::std::os::raw::c_char,
        hints: *const addrinfo,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_freeaddrinfo(ai: *mut addrinfo);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uv_getnameinfo_s {
    pub data: *mut ::std::os::raw::c_void,
    pub type_: uv_req_type,
    pub reserved: [*mut ::std::os::raw::c_void; 6usize],
    pub loop_: *mut uv_loop_t,
    pub work_req: uv__work,
    pub getnameinfo_cb: uv_getnameinfo_cb,
    pub storage: sockaddr_storage,
    pub flags: ::std::os::raw::c_int,
    pub host: [::std::os::raw::c_char; 1025usize],
    pub service: [::std::os::raw::c_char; 32usize],
    pub retcode: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uv_getnameinfo_s"][::std::mem::size_of::<uv_getnameinfo_s>() - 1320usize];
    ["Alignment of uv_getnameinfo_s"][::std::mem::align_of::<uv_getnameinfo_s>() - 8usize];
    ["Offset of field: uv_getnameinfo_s::data"]
        [::std::mem::offset_of!(uv_getnameinfo_s, data) - 0usize];
    ["Offset of field: uv_getnameinfo_s::type_"]
        [::std::mem::offset_of!(uv_getnameinfo_s, type_) - 8usize];
    ["Offset of field: uv_getnameinfo_s::reserved"]
        [::std::mem::offset_of!(uv_getnameinfo_s, reserved) - 16usize];
    ["Offset of field: uv_getnameinfo_s::loop_"]
        [::std::mem::offset_of!(uv_getnameinfo_s, loop_) - 64usize];
    ["Offset of field: uv_getnameinfo_s::work_req"]
        [::std::mem::offset_of!(uv_getnameinfo_s, work_req) - 72usize];
    ["Offset of field: uv_getnameinfo_s::getnameinfo_cb"]
        [::std::mem::offset_of!(uv_getnameinfo_s, getnameinfo_cb) - 112usize];
    ["Offset of field: uv_getnameinfo_s::storage"]
        [::std::mem::offset_of!(uv_getnameinfo_s, storage) - 120usize];
    ["Offset of field: uv_getnameinfo_s::flags"]
        [::std::mem::offset_of!(uv_getnameinfo_s, flags) - 248usize];
    ["Offset of field: uv_getnameinfo_s::host"]
        [::std::mem::offset_of!(uv_getnameinfo_s, host) - 252usize];
    ["Offset of field: uv_getnameinfo_s::service"]
        [::std::mem::offset_of!(uv_getnameinfo_s, service) - 1277usize];
    ["Offset of field: uv_getnameinfo_s::retcode"]
        [::std::mem::offset_of!(uv_getnameinfo_s, retcode) - 1312usize];
};
unsafe extern "C" {
    pub fn uv_getnameinfo(
        loop_: *mut uv_loop_t,
        req: *mut uv_getnameinfo_t,
        getnameinfo_cb: uv_getnameinfo_cb,
        addr: *const sockaddr,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub const uv_stdio_flags_UV_IGNORE: uv_stdio_flags = 0;
pub const uv_stdio_flags_UV_CREATE_PIPE: uv_stdio_flags = 1;
pub const uv_stdio_flags_UV_INHERIT_FD: uv_stdio_flags = 2;
pub const uv_stdio_flags_UV_INHERIT_STREAM: uv_stdio_flags = 4;
pub const uv_stdio_flags_UV_READABLE_PIPE: uv_stdio_flags = 16;
pub const uv_stdio_flags_UV_WRITABLE_PIPE: uv_stdio_flags = 32;
pub const uv_stdio_flags_UV_NONBLOCK_PIPE: uv_stdio_flags = 64;
pub const uv_stdio_flags_UV_OVERLAPPED_PIPE: uv_stdio_flags = 64;
pub type uv_stdio_flags = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct uv_stdio_container_s {
    pub flags: uv_stdio_flags,
    pub data: uv_stdio_container_s__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union uv_stdio_container_s__bindgen_ty_1 {
    pub stream: *mut uv_stream_t,
    pub fd: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uv_stdio_container_s__bindgen_ty_1"]
        [::std::mem::size_of::<uv_stdio_container_s__bindgen_ty_1>() - 8usize];
    ["Alignment of uv_stdio_container_s__bindgen_ty_1"]
        [::std::mem::align_of::<uv_stdio_container_s__bindgen_ty_1>() - 8usize];
    ["Offset of field: uv_stdio_container_s__bindgen_ty_1::stream"]
        [::std::mem::offset_of!(uv_stdio_container_s__bindgen_ty_1, stream) - 0usize];
    ["Offset of field: uv_stdio_container_s__bindgen_ty_1::fd"]
        [::std::mem::offset_of!(uv_stdio_container_s__bindgen_ty_1, fd) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uv_stdio_container_s"][::std::mem::size_of::<uv_stdio_container_s>() - 16usize];
    ["Alignment of uv_stdio_container_s"][::std::mem::align_of::<uv_stdio_container_s>() - 8usize];
    ["Offset of field: uv_stdio_container_s::flags"]
        [::std::mem::offset_of!(uv_stdio_container_s, flags) - 0usize];
    ["Offset of field: uv_stdio_container_s::data"]
        [::std::mem::offset_of!(uv_stdio_container_s, data) - 8usize];
};
pub type uv_stdio_container_t = uv_stdio_container_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uv_process_options_s {
    pub exit_cb: uv_exit_cb,
    pub file: *const ::std::os::raw::c_char,
    pub args: *mut *mut ::std::os::raw::c_char,
    pub env: *mut *mut ::std::os::raw::c_char,
    pub cwd: *const ::std::os::raw::c_char,
    pub flags: ::std::os::raw::c_uint,
    pub stdio_count: ::std::os::raw::c_int,
    pub stdio: *mut uv_stdio_container_t,
    pub uid: uv_uid_t,
    pub gid: uv_gid_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uv_process_options_s"][::std::mem::size_of::<uv_process_options_s>() - 64usize];
    ["Alignment of uv_process_options_s"][::std::mem::align_of::<uv_process_options_s>() - 8usize];
    ["Offset of field: uv_process_options_s::exit_cb"]
        [::std::mem::offset_of!(uv_process_options_s, exit_cb) - 0usize];
    ["Offset of field: uv_process_options_s::file"]
        [::std::mem::offset_of!(uv_process_options_s, file) - 8usize];
    ["Offset of field: uv_process_options_s::args"]
        [::std::mem::offset_of!(uv_process_options_s, args) - 16usize];
    ["Offset of field: uv_process_options_s::env"]
        [::std::mem::offset_of!(uv_process_options_s, env) - 24usize];
    ["Offset of field: uv_process_options_s::cwd"]
        [::std::mem::offset_of!(uv_process_options_s, cwd) - 32usize];
    ["Offset of field: uv_process_options_s::flags"]
        [::std::mem::offset_of!(uv_process_options_s, flags) - 40usize];
    ["Offset of field: uv_process_options_s::stdio_count"]
        [::std::mem::offset_of!(uv_process_options_s, stdio_count) - 44usize];
    ["Offset of field: uv_process_options_s::stdio"]
        [::std::mem::offset_of!(uv_process_options_s, stdio) - 48usize];
    ["Offset of field: uv_process_options_s::uid"]
        [::std::mem::offset_of!(uv_process_options_s, uid) - 56usize];
    ["Offset of field: uv_process_options_s::gid"]
        [::std::mem::offset_of!(uv_process_options_s, gid) - 60usize];
};
pub type uv_process_options_t = uv_process_options_s;
pub const uv_process_flags_UV_PROCESS_SETUID: uv_process_flags = 1;
pub const uv_process_flags_UV_PROCESS_SETGID: uv_process_flags = 2;
pub const uv_process_flags_UV_PROCESS_WINDOWS_VERBATIM_ARGUMENTS: uv_process_flags = 4;
pub const uv_process_flags_UV_PROCESS_DETACHED: uv_process_flags = 8;
pub const uv_process_flags_UV_PROCESS_WINDOWS_HIDE: uv_process_flags = 16;
pub const uv_process_flags_UV_PROCESS_WINDOWS_HIDE_CONSOLE: uv_process_flags = 32;
pub const uv_process_flags_UV_PROCESS_WINDOWS_HIDE_GUI: uv_process_flags = 64;
pub const uv_process_flags_UV_PROCESS_WINDOWS_FILE_PATH_EXACT_NAME: uv_process_flags = 128;
pub type uv_process_flags = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct uv_process_s {
    pub data: *mut ::std::os::raw::c_void,
    pub loop_: *mut uv_loop_t,
    pub type_: uv_handle_type,
    pub close_cb: uv_close_cb,
    pub handle_queue: uv__queue,
    pub u: uv_process_s__bindgen_ty_1,
    pub next_closing: *mut uv_handle_t,
    pub flags: ::std::os::raw::c_uint,
    pub exit_cb: uv_exit_cb,
    pub pid: ::std::os::raw::c_int,
    pub queue: uv__queue,
    pub status: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union uv_process_s__bindgen_ty_1 {
    pub fd: ::std::os::raw::c_int,
    pub reserved: [*mut ::std::os::raw::c_void; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uv_process_s__bindgen_ty_1"]
        [::std::mem::size_of::<uv_process_s__bindgen_ty_1>() - 32usize];
    ["Alignment of uv_process_s__bindgen_ty_1"]
        [::std::mem::align_of::<uv_process_s__bindgen_ty_1>() - 8usize];
    ["Offset of field: uv_process_s__bindgen_ty_1::fd"]
        [::std::mem::offset_of!(uv_process_s__bindgen_ty_1, fd) - 0usize];
    ["Offset of field: uv_process_s__bindgen_ty_1::reserved"]
        [::std::mem::offset_of!(uv_process_s__bindgen_ty_1, reserved) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uv_process_s"][::std::mem::size_of::<uv_process_s>() - 136usize];
    ["Alignment of uv_process_s"][::std::mem::align_of::<uv_process_s>() - 8usize];
    ["Offset of field: uv_process_s::data"][::std::mem::offset_of!(uv_process_s, data) - 0usize];
    ["Offset of field: uv_process_s::loop_"][::std::mem::offset_of!(uv_process_s, loop_) - 8usize];
    ["Offset of field: uv_process_s::type_"][::std::mem::offset_of!(uv_process_s, type_) - 16usize];
    ["Offset of field: uv_process_s::close_cb"]
        [::std::mem::offset_of!(uv_process_s, close_cb) - 24usize];
    ["Offset of field: uv_process_s::handle_queue"]
        [::std::mem::offset_of!(uv_process_s, handle_queue) - 32usize];
    ["Offset of field: uv_process_s::u"][::std::mem::offset_of!(uv_process_s, u) - 48usize];
    ["Offset of field: uv_process_s::next_closing"]
        [::std::mem::offset_of!(uv_process_s, next_closing) - 80usize];
    ["Offset of field: uv_process_s::flags"][::std::mem::offset_of!(uv_process_s, flags) - 88usize];
    ["Offset of field: uv_process_s::exit_cb"]
        [::std::mem::offset_of!(uv_process_s, exit_cb) - 96usize];
    ["Offset of field: uv_process_s::pid"][::std::mem::offset_of!(uv_process_s, pid) - 104usize];
    ["Offset of field: uv_process_s::queue"]
        [::std::mem::offset_of!(uv_process_s, queue) - 112usize];
    ["Offset of field: uv_process_s::status"]
        [::std::mem::offset_of!(uv_process_s, status) - 128usize];
};
unsafe extern "C" {
    pub fn uv_spawn(
        loop_: *mut uv_loop_t,
        handle: *mut uv_process_t,
        options: *const uv_process_options_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_process_kill(
        arg1: *mut uv_process_t,
        signum: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_kill(
        pid: ::std::os::raw::c_int,
        signum: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_process_get_pid(arg1: *const uv_process_t) -> uv_pid_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uv_work_s {
    pub data: *mut ::std::os::raw::c_void,
    pub type_: uv_req_type,
    pub reserved: [*mut ::std::os::raw::c_void; 6usize],
    pub loop_: *mut uv_loop_t,
    pub work_cb: uv_work_cb,
    pub after_work_cb: uv_after_work_cb,
    pub work_req: uv__work,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uv_work_s"][::std::mem::size_of::<uv_work_s>() - 128usize];
    ["Alignment of uv_work_s"][::std::mem::align_of::<uv_work_s>() - 8usize];
    ["Offset of field: uv_work_s::data"][::std::mem::offset_of!(uv_work_s, data) - 0usize];
    ["Offset of field: uv_work_s::type_"][::std::mem::offset_of!(uv_work_s, type_) - 8usize];
    ["Offset of field: uv_work_s::reserved"][::std::mem::offset_of!(uv_work_s, reserved) - 16usize];
    ["Offset of field: uv_work_s::loop_"][::std::mem::offset_of!(uv_work_s, loop_) - 64usize];
    ["Offset of field: uv_work_s::work_cb"][::std::mem::offset_of!(uv_work_s, work_cb) - 72usize];
    ["Offset of field: uv_work_s::after_work_cb"]
        [::std::mem::offset_of!(uv_work_s, after_work_cb) - 80usize];
    ["Offset of field: uv_work_s::work_req"][::std::mem::offset_of!(uv_work_s, work_req) - 88usize];
};
unsafe extern "C" {
    pub fn uv_queue_work(
        loop_: *mut uv_loop_t,
        req: *mut uv_work_t,
        work_cb: uv_work_cb,
        after_work_cb: uv_after_work_cb,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_cancel(req: *mut uv_req_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uv_cpu_times_s {
    pub user: u64,
    pub nice: u64,
    pub sys: u64,
    pub idle: u64,
    pub irq: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uv_cpu_times_s"][::std::mem::size_of::<uv_cpu_times_s>() - 40usize];
    ["Alignment of uv_cpu_times_s"][::std::mem::align_of::<uv_cpu_times_s>() - 8usize];
    ["Offset of field: uv_cpu_times_s::user"]
        [::std::mem::offset_of!(uv_cpu_times_s, user) - 0usize];
    ["Offset of field: uv_cpu_times_s::nice"]
        [::std::mem::offset_of!(uv_cpu_times_s, nice) - 8usize];
    ["Offset of field: uv_cpu_times_s::sys"][::std::mem::offset_of!(uv_cpu_times_s, sys) - 16usize];
    ["Offset of field: uv_cpu_times_s::idle"]
        [::std::mem::offset_of!(uv_cpu_times_s, idle) - 24usize];
    ["Offset of field: uv_cpu_times_s::irq"][::std::mem::offset_of!(uv_cpu_times_s, irq) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uv_cpu_info_s {
    pub model: *mut ::std::os::raw::c_char,
    pub speed: ::std::os::raw::c_int,
    pub cpu_times: uv_cpu_times_s,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uv_cpu_info_s"][::std::mem::size_of::<uv_cpu_info_s>() - 56usize];
    ["Alignment of uv_cpu_info_s"][::std::mem::align_of::<uv_cpu_info_s>() - 8usize];
    ["Offset of field: uv_cpu_info_s::model"]
        [::std::mem::offset_of!(uv_cpu_info_s, model) - 0usize];
    ["Offset of field: uv_cpu_info_s::speed"]
        [::std::mem::offset_of!(uv_cpu_info_s, speed) - 8usize];
    ["Offset of field: uv_cpu_info_s::cpu_times"]
        [::std::mem::offset_of!(uv_cpu_info_s, cpu_times) - 16usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct uv_interface_address_s {
    pub name: *mut ::std::os::raw::c_char,
    pub phys_addr: [::std::os::raw::c_char; 6usize],
    pub is_internal: ::std::os::raw::c_int,
    pub address: uv_interface_address_s__bindgen_ty_1,
    pub netmask: uv_interface_address_s__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union uv_interface_address_s__bindgen_ty_1 {
    pub address4: sockaddr_in,
    pub address6: sockaddr_in6,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uv_interface_address_s__bindgen_ty_1"]
        [::std::mem::size_of::<uv_interface_address_s__bindgen_ty_1>() - 28usize];
    ["Alignment of uv_interface_address_s__bindgen_ty_1"]
        [::std::mem::align_of::<uv_interface_address_s__bindgen_ty_1>() - 4usize];
    ["Offset of field: uv_interface_address_s__bindgen_ty_1::address4"]
        [::std::mem::offset_of!(uv_interface_address_s__bindgen_ty_1, address4) - 0usize];
    ["Offset of field: uv_interface_address_s__bindgen_ty_1::address6"]
        [::std::mem::offset_of!(uv_interface_address_s__bindgen_ty_1, address6) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union uv_interface_address_s__bindgen_ty_2 {
    pub netmask4: sockaddr_in,
    pub netmask6: sockaddr_in6,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uv_interface_address_s__bindgen_ty_2"]
        [::std::mem::size_of::<uv_interface_address_s__bindgen_ty_2>() - 28usize];
    ["Alignment of uv_interface_address_s__bindgen_ty_2"]
        [::std::mem::align_of::<uv_interface_address_s__bindgen_ty_2>() - 4usize];
    ["Offset of field: uv_interface_address_s__bindgen_ty_2::netmask4"]
        [::std::mem::offset_of!(uv_interface_address_s__bindgen_ty_2, netmask4) - 0usize];
    ["Offset of field: uv_interface_address_s__bindgen_ty_2::netmask6"]
        [::std::mem::offset_of!(uv_interface_address_s__bindgen_ty_2, netmask6) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uv_interface_address_s"][::std::mem::size_of::<uv_interface_address_s>() - 80usize];
    ["Alignment of uv_interface_address_s"]
        [::std::mem::align_of::<uv_interface_address_s>() - 8usize];
    ["Offset of field: uv_interface_address_s::name"]
        [::std::mem::offset_of!(uv_interface_address_s, name) - 0usize];
    ["Offset of field: uv_interface_address_s::phys_addr"]
        [::std::mem::offset_of!(uv_interface_address_s, phys_addr) - 8usize];
    ["Offset of field: uv_interface_address_s::is_internal"]
        [::std::mem::offset_of!(uv_interface_address_s, is_internal) - 16usize];
    ["Offset of field: uv_interface_address_s::address"]
        [::std::mem::offset_of!(uv_interface_address_s, address) - 20usize];
    ["Offset of field: uv_interface_address_s::netmask"]
        [::std::mem::offset_of!(uv_interface_address_s, netmask) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uv_passwd_s {
    pub username: *mut ::std::os::raw::c_char,
    pub uid: ::std::os::raw::c_ulong,
    pub gid: ::std::os::raw::c_ulong,
    pub shell: *mut ::std::os::raw::c_char,
    pub homedir: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uv_passwd_s"][::std::mem::size_of::<uv_passwd_s>() - 40usize];
    ["Alignment of uv_passwd_s"][::std::mem::align_of::<uv_passwd_s>() - 8usize];
    ["Offset of field: uv_passwd_s::username"]
        [::std::mem::offset_of!(uv_passwd_s, username) - 0usize];
    ["Offset of field: uv_passwd_s::uid"][::std::mem::offset_of!(uv_passwd_s, uid) - 8usize];
    ["Offset of field: uv_passwd_s::gid"][::std::mem::offset_of!(uv_passwd_s, gid) - 16usize];
    ["Offset of field: uv_passwd_s::shell"][::std::mem::offset_of!(uv_passwd_s, shell) - 24usize];
    ["Offset of field: uv_passwd_s::homedir"]
        [::std::mem::offset_of!(uv_passwd_s, homedir) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uv_group_s {
    pub groupname: *mut ::std::os::raw::c_char,
    pub gid: ::std::os::raw::c_ulong,
    pub members: *mut *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uv_group_s"][::std::mem::size_of::<uv_group_s>() - 24usize];
    ["Alignment of uv_group_s"][::std::mem::align_of::<uv_group_s>() - 8usize];
    ["Offset of field: uv_group_s::groupname"]
        [::std::mem::offset_of!(uv_group_s, groupname) - 0usize];
    ["Offset of field: uv_group_s::gid"][::std::mem::offset_of!(uv_group_s, gid) - 8usize];
    ["Offset of field: uv_group_s::members"][::std::mem::offset_of!(uv_group_s, members) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uv_utsname_s {
    pub sysname: [::std::os::raw::c_char; 256usize],
    pub release: [::std::os::raw::c_char; 256usize],
    pub version: [::std::os::raw::c_char; 256usize],
    pub machine: [::std::os::raw::c_char; 256usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uv_utsname_s"][::std::mem::size_of::<uv_utsname_s>() - 1024usize];
    ["Alignment of uv_utsname_s"][::std::mem::align_of::<uv_utsname_s>() - 1usize];
    ["Offset of field: uv_utsname_s::sysname"]
        [::std::mem::offset_of!(uv_utsname_s, sysname) - 0usize];
    ["Offset of field: uv_utsname_s::release"]
        [::std::mem::offset_of!(uv_utsname_s, release) - 256usize];
    ["Offset of field: uv_utsname_s::version"]
        [::std::mem::offset_of!(uv_utsname_s, version) - 512usize];
    ["Offset of field: uv_utsname_s::machine"]
        [::std::mem::offset_of!(uv_utsname_s, machine) - 768usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uv_statfs_s {
    pub f_type: u64,
    pub f_bsize: u64,
    pub f_blocks: u64,
    pub f_bfree: u64,
    pub f_bavail: u64,
    pub f_files: u64,
    pub f_ffree: u64,
    pub f_spare: [u64; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uv_statfs_s"][::std::mem::size_of::<uv_statfs_s>() - 88usize];
    ["Alignment of uv_statfs_s"][::std::mem::align_of::<uv_statfs_s>() - 8usize];
    ["Offset of field: uv_statfs_s::f_type"][::std::mem::offset_of!(uv_statfs_s, f_type) - 0usize];
    ["Offset of field: uv_statfs_s::f_bsize"]
        [::std::mem::offset_of!(uv_statfs_s, f_bsize) - 8usize];
    ["Offset of field: uv_statfs_s::f_blocks"]
        [::std::mem::offset_of!(uv_statfs_s, f_blocks) - 16usize];
    ["Offset of field: uv_statfs_s::f_bfree"]
        [::std::mem::offset_of!(uv_statfs_s, f_bfree) - 24usize];
    ["Offset of field: uv_statfs_s::f_bavail"]
        [::std::mem::offset_of!(uv_statfs_s, f_bavail) - 32usize];
    ["Offset of field: uv_statfs_s::f_files"]
        [::std::mem::offset_of!(uv_statfs_s, f_files) - 40usize];
    ["Offset of field: uv_statfs_s::f_ffree"]
        [::std::mem::offset_of!(uv_statfs_s, f_ffree) - 48usize];
    ["Offset of field: uv_statfs_s::f_spare"]
        [::std::mem::offset_of!(uv_statfs_s, f_spare) - 56usize];
};
pub const uv_dirent_type_t_UV_DIRENT_UNKNOWN: uv_dirent_type_t = 0;
pub const uv_dirent_type_t_UV_DIRENT_FILE: uv_dirent_type_t = 1;
pub const uv_dirent_type_t_UV_DIRENT_DIR: uv_dirent_type_t = 2;
pub const uv_dirent_type_t_UV_DIRENT_LINK: uv_dirent_type_t = 3;
pub const uv_dirent_type_t_UV_DIRENT_FIFO: uv_dirent_type_t = 4;
pub const uv_dirent_type_t_UV_DIRENT_SOCKET: uv_dirent_type_t = 5;
pub const uv_dirent_type_t_UV_DIRENT_CHAR: uv_dirent_type_t = 6;
pub const uv_dirent_type_t_UV_DIRENT_BLOCK: uv_dirent_type_t = 7;
pub type uv_dirent_type_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uv_dirent_s {
    pub name: *const ::std::os::raw::c_char,
    pub type_: uv_dirent_type_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uv_dirent_s"][::std::mem::size_of::<uv_dirent_s>() - 16usize];
    ["Alignment of uv_dirent_s"][::std::mem::align_of::<uv_dirent_s>() - 8usize];
    ["Offset of field: uv_dirent_s::name"][::std::mem::offset_of!(uv_dirent_s, name) - 0usize];
    ["Offset of field: uv_dirent_s::type_"][::std::mem::offset_of!(uv_dirent_s, type_) - 8usize];
};
unsafe extern "C" {
    pub fn uv_setup_args(
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
    ) -> *mut *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn uv_get_process_title(
        buffer: *mut ::std::os::raw::c_char,
        size: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_set_process_title(title: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_resident_set_memory(rss: *mut usize) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_uptime(uptime: *mut f64) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_get_osfhandle(fd: ::std::os::raw::c_int) -> uv_os_fd_t;
}
unsafe extern "C" {
    pub fn uv_open_osfhandle(os_fd: uv_os_fd_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uv_rusage_t {
    pub ru_utime: uv_timeval_t,
    pub ru_stime: uv_timeval_t,
    pub ru_maxrss: u64,
    pub ru_ixrss: u64,
    pub ru_idrss: u64,
    pub ru_isrss: u64,
    pub ru_minflt: u64,
    pub ru_majflt: u64,
    pub ru_nswap: u64,
    pub ru_inblock: u64,
    pub ru_oublock: u64,
    pub ru_msgsnd: u64,
    pub ru_msgrcv: u64,
    pub ru_nsignals: u64,
    pub ru_nvcsw: u64,
    pub ru_nivcsw: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uv_rusage_t"][::std::mem::size_of::<uv_rusage_t>() - 144usize];
    ["Alignment of uv_rusage_t"][::std::mem::align_of::<uv_rusage_t>() - 8usize];
    ["Offset of field: uv_rusage_t::ru_utime"]
        [::std::mem::offset_of!(uv_rusage_t, ru_utime) - 0usize];
    ["Offset of field: uv_rusage_t::ru_stime"]
        [::std::mem::offset_of!(uv_rusage_t, ru_stime) - 16usize];
    ["Offset of field: uv_rusage_t::ru_maxrss"]
        [::std::mem::offset_of!(uv_rusage_t, ru_maxrss) - 32usize];
    ["Offset of field: uv_rusage_t::ru_ixrss"]
        [::std::mem::offset_of!(uv_rusage_t, ru_ixrss) - 40usize];
    ["Offset of field: uv_rusage_t::ru_idrss"]
        [::std::mem::offset_of!(uv_rusage_t, ru_idrss) - 48usize];
    ["Offset of field: uv_rusage_t::ru_isrss"]
        [::std::mem::offset_of!(uv_rusage_t, ru_isrss) - 56usize];
    ["Offset of field: uv_rusage_t::ru_minflt"]
        [::std::mem::offset_of!(uv_rusage_t, ru_minflt) - 64usize];
    ["Offset of field: uv_rusage_t::ru_majflt"]
        [::std::mem::offset_of!(uv_rusage_t, ru_majflt) - 72usize];
    ["Offset of field: uv_rusage_t::ru_nswap"]
        [::std::mem::offset_of!(uv_rusage_t, ru_nswap) - 80usize];
    ["Offset of field: uv_rusage_t::ru_inblock"]
        [::std::mem::offset_of!(uv_rusage_t, ru_inblock) - 88usize];
    ["Offset of field: uv_rusage_t::ru_oublock"]
        [::std::mem::offset_of!(uv_rusage_t, ru_oublock) - 96usize];
    ["Offset of field: uv_rusage_t::ru_msgsnd"]
        [::std::mem::offset_of!(uv_rusage_t, ru_msgsnd) - 104usize];
    ["Offset of field: uv_rusage_t::ru_msgrcv"]
        [::std::mem::offset_of!(uv_rusage_t, ru_msgrcv) - 112usize];
    ["Offset of field: uv_rusage_t::ru_nsignals"]
        [::std::mem::offset_of!(uv_rusage_t, ru_nsignals) - 120usize];
    ["Offset of field: uv_rusage_t::ru_nvcsw"]
        [::std::mem::offset_of!(uv_rusage_t, ru_nvcsw) - 128usize];
    ["Offset of field: uv_rusage_t::ru_nivcsw"]
        [::std::mem::offset_of!(uv_rusage_t, ru_nivcsw) - 136usize];
};
unsafe extern "C" {
    pub fn uv_getrusage(rusage: *mut uv_rusage_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_os_homedir(
        buffer: *mut ::std::os::raw::c_char,
        size: *mut usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_os_tmpdir(
        buffer: *mut ::std::os::raw::c_char,
        size: *mut usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_os_get_passwd(pwd: *mut uv_passwd_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_os_free_passwd(pwd: *mut uv_passwd_t);
}
unsafe extern "C" {
    pub fn uv_os_get_passwd2(pwd: *mut uv_passwd_t, uid: uv_uid_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_os_get_group(grp: *mut uv_group_t, gid: uv_uid_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_os_free_group(grp: *mut uv_group_t);
}
unsafe extern "C" {
    pub fn uv_os_getpid() -> uv_pid_t;
}
unsafe extern "C" {
    pub fn uv_os_getppid() -> uv_pid_t;
}
unsafe extern "C" {
    pub fn uv_os_getpriority(
        pid: uv_pid_t,
        priority: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_os_setpriority(
        pid: uv_pid_t,
        priority: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub const UV_THREAD_PRIORITY_HIGHEST: _bindgen_ty_4 = 2;
pub const UV_THREAD_PRIORITY_ABOVE_NORMAL: _bindgen_ty_4 = 1;
pub const UV_THREAD_PRIORITY_NORMAL: _bindgen_ty_4 = 0;
pub const UV_THREAD_PRIORITY_BELOW_NORMAL: _bindgen_ty_4 = -1;
pub const UV_THREAD_PRIORITY_LOWEST: _bindgen_ty_4 = -2;
pub type _bindgen_ty_4 = ::std::os::raw::c_int;
unsafe extern "C" {
    pub fn uv_thread_getpriority(
        tid: uv_thread_t,
        priority: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_thread_setpriority(
        tid: uv_thread_t,
        priority: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_available_parallelism() -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    pub fn uv_cpu_info(
        cpu_infos: *mut *mut uv_cpu_info_t,
        count: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_free_cpu_info(cpu_infos: *mut uv_cpu_info_t, count: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn uv_cpumask_size() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_interface_addresses(
        addresses: *mut *mut uv_interface_address_t,
        count: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_free_interface_addresses(
        addresses: *mut uv_interface_address_t,
        count: ::std::os::raw::c_int,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uv_env_item_s {
    pub name: *mut ::std::os::raw::c_char,
    pub value: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uv_env_item_s"][::std::mem::size_of::<uv_env_item_s>() - 16usize];
    ["Alignment of uv_env_item_s"][::std::mem::align_of::<uv_env_item_s>() - 8usize];
    ["Offset of field: uv_env_item_s::name"][::std::mem::offset_of!(uv_env_item_s, name) - 0usize];
    ["Offset of field: uv_env_item_s::value"]
        [::std::mem::offset_of!(uv_env_item_s, value) - 8usize];
};
unsafe extern "C" {
    pub fn uv_os_environ(
        envitems: *mut *mut uv_env_item_t,
        count: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_os_free_environ(envitems: *mut uv_env_item_t, count: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn uv_os_getenv(
        name: *const ::std::os::raw::c_char,
        buffer: *mut ::std::os::raw::c_char,
        size: *mut usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_os_setenv(
        name: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_os_unsetenv(name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_os_gethostname(
        buffer: *mut ::std::os::raw::c_char,
        size: *mut usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_os_uname(buffer: *mut uv_utsname_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uv_metrics_s {
    pub loop_count: u64,
    pub events: u64,
    pub events_waiting: u64,
    pub reserved: [*mut u64; 13usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uv_metrics_s"][::std::mem::size_of::<uv_metrics_s>() - 128usize];
    ["Alignment of uv_metrics_s"][::std::mem::align_of::<uv_metrics_s>() - 8usize];
    ["Offset of field: uv_metrics_s::loop_count"]
        [::std::mem::offset_of!(uv_metrics_s, loop_count) - 0usize];
    ["Offset of field: uv_metrics_s::events"]
        [::std::mem::offset_of!(uv_metrics_s, events) - 8usize];
    ["Offset of field: uv_metrics_s::events_waiting"]
        [::std::mem::offset_of!(uv_metrics_s, events_waiting) - 16usize];
    ["Offset of field: uv_metrics_s::reserved"]
        [::std::mem::offset_of!(uv_metrics_s, reserved) - 24usize];
};
unsafe extern "C" {
    pub fn uv_metrics_info(
        loop_: *mut uv_loop_t,
        metrics: *mut uv_metrics_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_metrics_idle_time(loop_: *mut uv_loop_t) -> u64;
}
pub const uv_fs_type_UV_FS_UNKNOWN: uv_fs_type = -1;
pub const uv_fs_type_UV_FS_CUSTOM: uv_fs_type = 0;
pub const uv_fs_type_UV_FS_OPEN: uv_fs_type = 1;
pub const uv_fs_type_UV_FS_CLOSE: uv_fs_type = 2;
pub const uv_fs_type_UV_FS_READ: uv_fs_type = 3;
pub const uv_fs_type_UV_FS_WRITE: uv_fs_type = 4;
pub const uv_fs_type_UV_FS_SENDFILE: uv_fs_type = 5;
pub const uv_fs_type_UV_FS_STAT: uv_fs_type = 6;
pub const uv_fs_type_UV_FS_LSTAT: uv_fs_type = 7;
pub const uv_fs_type_UV_FS_FSTAT: uv_fs_type = 8;
pub const uv_fs_type_UV_FS_FTRUNCATE: uv_fs_type = 9;
pub const uv_fs_type_UV_FS_UTIME: uv_fs_type = 10;
pub const uv_fs_type_UV_FS_FUTIME: uv_fs_type = 11;
pub const uv_fs_type_UV_FS_ACCESS: uv_fs_type = 12;
pub const uv_fs_type_UV_FS_CHMOD: uv_fs_type = 13;
pub const uv_fs_type_UV_FS_FCHMOD: uv_fs_type = 14;
pub const uv_fs_type_UV_FS_FSYNC: uv_fs_type = 15;
pub const uv_fs_type_UV_FS_FDATASYNC: uv_fs_type = 16;
pub const uv_fs_type_UV_FS_UNLINK: uv_fs_type = 17;
pub const uv_fs_type_UV_FS_RMDIR: uv_fs_type = 18;
pub const uv_fs_type_UV_FS_MKDIR: uv_fs_type = 19;
pub const uv_fs_type_UV_FS_MKDTEMP: uv_fs_type = 20;
pub const uv_fs_type_UV_FS_RENAME: uv_fs_type = 21;
pub const uv_fs_type_UV_FS_SCANDIR: uv_fs_type = 22;
pub const uv_fs_type_UV_FS_LINK: uv_fs_type = 23;
pub const uv_fs_type_UV_FS_SYMLINK: uv_fs_type = 24;
pub const uv_fs_type_UV_FS_READLINK: uv_fs_type = 25;
pub const uv_fs_type_UV_FS_CHOWN: uv_fs_type = 26;
pub const uv_fs_type_UV_FS_FCHOWN: uv_fs_type = 27;
pub const uv_fs_type_UV_FS_REALPATH: uv_fs_type = 28;
pub const uv_fs_type_UV_FS_COPYFILE: uv_fs_type = 29;
pub const uv_fs_type_UV_FS_LCHOWN: uv_fs_type = 30;
pub const uv_fs_type_UV_FS_OPENDIR: uv_fs_type = 31;
pub const uv_fs_type_UV_FS_READDIR: uv_fs_type = 32;
pub const uv_fs_type_UV_FS_CLOSEDIR: uv_fs_type = 33;
pub const uv_fs_type_UV_FS_STATFS: uv_fs_type = 34;
pub const uv_fs_type_UV_FS_MKSTEMP: uv_fs_type = 35;
pub const uv_fs_type_UV_FS_LUTIME: uv_fs_type = 36;
pub type uv_fs_type = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uv_dir_s {
    pub dirents: *mut uv_dirent_t,
    pub nentries: usize,
    pub reserved: [*mut ::std::os::raw::c_void; 4usize],
    pub dir: *mut DIR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uv_dir_s"][::std::mem::size_of::<uv_dir_s>() - 56usize];
    ["Alignment of uv_dir_s"][::std::mem::align_of::<uv_dir_s>() - 8usize];
    ["Offset of field: uv_dir_s::dirents"][::std::mem::offset_of!(uv_dir_s, dirents) - 0usize];
    ["Offset of field: uv_dir_s::nentries"][::std::mem::offset_of!(uv_dir_s, nentries) - 8usize];
    ["Offset of field: uv_dir_s::reserved"][::std::mem::offset_of!(uv_dir_s, reserved) - 16usize];
    ["Offset of field: uv_dir_s::dir"][::std::mem::offset_of!(uv_dir_s, dir) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uv_fs_s {
    pub data: *mut ::std::os::raw::c_void,
    pub type_: uv_req_type,
    pub reserved: [*mut ::std::os::raw::c_void; 6usize],
    pub fs_type: uv_fs_type,
    pub loop_: *mut uv_loop_t,
    pub cb: uv_fs_cb,
    pub result: isize,
    pub ptr: *mut ::std::os::raw::c_void,
    pub path: *const ::std::os::raw::c_char,
    pub statbuf: uv_stat_t,
    pub new_path: *const ::std::os::raw::c_char,
    pub file: uv_file,
    pub flags: ::std::os::raw::c_int,
    pub mode: mode_t,
    pub nbufs: ::std::os::raw::c_uint,
    pub bufs: *mut uv_buf_t,
    pub off: off_t,
    pub uid: uv_uid_t,
    pub gid: uv_gid_t,
    pub atime: f64,
    pub mtime: f64,
    pub work_req: uv__work,
    pub bufsml: [uv_buf_t; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uv_fs_s"][::std::mem::size_of::<uv_fs_s>() - 440usize];
    ["Alignment of uv_fs_s"][::std::mem::align_of::<uv_fs_s>() - 8usize];
    ["Offset of field: uv_fs_s::data"][::std::mem::offset_of!(uv_fs_s, data) - 0usize];
    ["Offset of field: uv_fs_s::type_"][::std::mem::offset_of!(uv_fs_s, type_) - 8usize];
    ["Offset of field: uv_fs_s::reserved"][::std::mem::offset_of!(uv_fs_s, reserved) - 16usize];
    ["Offset of field: uv_fs_s::fs_type"][::std::mem::offset_of!(uv_fs_s, fs_type) - 64usize];
    ["Offset of field: uv_fs_s::loop_"][::std::mem::offset_of!(uv_fs_s, loop_) - 72usize];
    ["Offset of field: uv_fs_s::cb"][::std::mem::offset_of!(uv_fs_s, cb) - 80usize];
    ["Offset of field: uv_fs_s::result"][::std::mem::offset_of!(uv_fs_s, result) - 88usize];
    ["Offset of field: uv_fs_s::ptr"][::std::mem::offset_of!(uv_fs_s, ptr) - 96usize];
    ["Offset of field: uv_fs_s::path"][::std::mem::offset_of!(uv_fs_s, path) - 104usize];
    ["Offset of field: uv_fs_s::statbuf"][::std::mem::offset_of!(uv_fs_s, statbuf) - 112usize];
    ["Offset of field: uv_fs_s::new_path"][::std::mem::offset_of!(uv_fs_s, new_path) - 272usize];
    ["Offset of field: uv_fs_s::file"][::std::mem::offset_of!(uv_fs_s, file) - 280usize];
    ["Offset of field: uv_fs_s::flags"][::std::mem::offset_of!(uv_fs_s, flags) - 284usize];
    ["Offset of field: uv_fs_s::mode"][::std::mem::offset_of!(uv_fs_s, mode) - 288usize];
    ["Offset of field: uv_fs_s::nbufs"][::std::mem::offset_of!(uv_fs_s, nbufs) - 292usize];
    ["Offset of field: uv_fs_s::bufs"][::std::mem::offset_of!(uv_fs_s, bufs) - 296usize];
    ["Offset of field: uv_fs_s::off"][::std::mem::offset_of!(uv_fs_s, off) - 304usize];
    ["Offset of field: uv_fs_s::uid"][::std::mem::offset_of!(uv_fs_s, uid) - 312usize];
    ["Offset of field: uv_fs_s::gid"][::std::mem::offset_of!(uv_fs_s, gid) - 316usize];
    ["Offset of field: uv_fs_s::atime"][::std::mem::offset_of!(uv_fs_s, atime) - 320usize];
    ["Offset of field: uv_fs_s::mtime"][::std::mem::offset_of!(uv_fs_s, mtime) - 328usize];
    ["Offset of field: uv_fs_s::work_req"][::std::mem::offset_of!(uv_fs_s, work_req) - 336usize];
    ["Offset of field: uv_fs_s::bufsml"][::std::mem::offset_of!(uv_fs_s, bufsml) - 376usize];
};
unsafe extern "C" {
    pub fn uv_fs_get_type(arg1: *const uv_fs_t) -> uv_fs_type;
}
unsafe extern "C" {
    pub fn uv_fs_get_result(arg1: *const uv_fs_t) -> isize;
}
unsafe extern "C" {
    pub fn uv_fs_get_system_error(arg1: *const uv_fs_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_fs_get_ptr(arg1: *const uv_fs_t) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn uv_fs_get_path(arg1: *const uv_fs_t) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn uv_fs_get_statbuf(arg1: *mut uv_fs_t) -> *mut uv_stat_t;
}
unsafe extern "C" {
    pub fn uv_fs_req_cleanup(req: *mut uv_fs_t);
}
unsafe extern "C" {
    pub fn uv_fs_close(
        loop_: *mut uv_loop_t,
        req: *mut uv_fs_t,
        file: uv_file,
        cb: uv_fs_cb,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_fs_open(
        loop_: *mut uv_loop_t,
        req: *mut uv_fs_t,
        path: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
        cb: uv_fs_cb,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_fs_read(
        loop_: *mut uv_loop_t,
        req: *mut uv_fs_t,
        file: uv_file,
        bufs: *const uv_buf_t,
        nbufs: ::std::os::raw::c_uint,
        offset: i64,
        cb: uv_fs_cb,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_fs_unlink(
        loop_: *mut uv_loop_t,
        req: *mut uv_fs_t,
        path: *const ::std::os::raw::c_char,
        cb: uv_fs_cb,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_fs_write(
        loop_: *mut uv_loop_t,
        req: *mut uv_fs_t,
        file: uv_file,
        bufs: *const uv_buf_t,
        nbufs: ::std::os::raw::c_uint,
        offset: i64,
        cb: uv_fs_cb,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_fs_copyfile(
        loop_: *mut uv_loop_t,
        req: *mut uv_fs_t,
        path: *const ::std::os::raw::c_char,
        new_path: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
        cb: uv_fs_cb,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_fs_mkdir(
        loop_: *mut uv_loop_t,
        req: *mut uv_fs_t,
        path: *const ::std::os::raw::c_char,
        mode: ::std::os::raw::c_int,
        cb: uv_fs_cb,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_fs_mkdtemp(
        loop_: *mut uv_loop_t,
        req: *mut uv_fs_t,
        tpl: *const ::std::os::raw::c_char,
        cb: uv_fs_cb,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_fs_mkstemp(
        loop_: *mut uv_loop_t,
        req: *mut uv_fs_t,
        tpl: *const ::std::os::raw::c_char,
        cb: uv_fs_cb,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_fs_rmdir(
        loop_: *mut uv_loop_t,
        req: *mut uv_fs_t,
        path: *const ::std::os::raw::c_char,
        cb: uv_fs_cb,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_fs_scandir(
        loop_: *mut uv_loop_t,
        req: *mut uv_fs_t,
        path: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
        cb: uv_fs_cb,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_fs_scandir_next(req: *mut uv_fs_t, ent: *mut uv_dirent_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_fs_opendir(
        loop_: *mut uv_loop_t,
        req: *mut uv_fs_t,
        path: *const ::std::os::raw::c_char,
        cb: uv_fs_cb,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_fs_readdir(
        loop_: *mut uv_loop_t,
        req: *mut uv_fs_t,
        dir: *mut uv_dir_t,
        cb: uv_fs_cb,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_fs_closedir(
        loop_: *mut uv_loop_t,
        req: *mut uv_fs_t,
        dir: *mut uv_dir_t,
        cb: uv_fs_cb,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_fs_stat(
        loop_: *mut uv_loop_t,
        req: *mut uv_fs_t,
        path: *const ::std::os::raw::c_char,
        cb: uv_fs_cb,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_fs_fstat(
        loop_: *mut uv_loop_t,
        req: *mut uv_fs_t,
        file: uv_file,
        cb: uv_fs_cb,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_fs_rename(
        loop_: *mut uv_loop_t,
        req: *mut uv_fs_t,
        path: *const ::std::os::raw::c_char,
        new_path: *const ::std::os::raw::c_char,
        cb: uv_fs_cb,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_fs_fsync(
        loop_: *mut uv_loop_t,
        req: *mut uv_fs_t,
        file: uv_file,
        cb: uv_fs_cb,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_fs_fdatasync(
        loop_: *mut uv_loop_t,
        req: *mut uv_fs_t,
        file: uv_file,
        cb: uv_fs_cb,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_fs_ftruncate(
        loop_: *mut uv_loop_t,
        req: *mut uv_fs_t,
        file: uv_file,
        offset: i64,
        cb: uv_fs_cb,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_fs_sendfile(
        loop_: *mut uv_loop_t,
        req: *mut uv_fs_t,
        out_fd: uv_file,
        in_fd: uv_file,
        in_offset: i64,
        length: usize,
        cb: uv_fs_cb,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_fs_access(
        loop_: *mut uv_loop_t,
        req: *mut uv_fs_t,
        path: *const ::std::os::raw::c_char,
        mode: ::std::os::raw::c_int,
        cb: uv_fs_cb,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_fs_chmod(
        loop_: *mut uv_loop_t,
        req: *mut uv_fs_t,
        path: *const ::std::os::raw::c_char,
        mode: ::std::os::raw::c_int,
        cb: uv_fs_cb,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_fs_utime(
        loop_: *mut uv_loop_t,
        req: *mut uv_fs_t,
        path: *const ::std::os::raw::c_char,
        atime: f64,
        mtime: f64,
        cb: uv_fs_cb,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_fs_futime(
        loop_: *mut uv_loop_t,
        req: *mut uv_fs_t,
        file: uv_file,
        atime: f64,
        mtime: f64,
        cb: uv_fs_cb,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_fs_lutime(
        loop_: *mut uv_loop_t,
        req: *mut uv_fs_t,
        path: *const ::std::os::raw::c_char,
        atime: f64,
        mtime: f64,
        cb: uv_fs_cb,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_fs_lstat(
        loop_: *mut uv_loop_t,
        req: *mut uv_fs_t,
        path: *const ::std::os::raw::c_char,
        cb: uv_fs_cb,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_fs_link(
        loop_: *mut uv_loop_t,
        req: *mut uv_fs_t,
        path: *const ::std::os::raw::c_char,
        new_path: *const ::std::os::raw::c_char,
        cb: uv_fs_cb,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_fs_symlink(
        loop_: *mut uv_loop_t,
        req: *mut uv_fs_t,
        path: *const ::std::os::raw::c_char,
        new_path: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
        cb: uv_fs_cb,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_fs_readlink(
        loop_: *mut uv_loop_t,
        req: *mut uv_fs_t,
        path: *const ::std::os::raw::c_char,
        cb: uv_fs_cb,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_fs_realpath(
        loop_: *mut uv_loop_t,
        req: *mut uv_fs_t,
        path: *const ::std::os::raw::c_char,
        cb: uv_fs_cb,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_fs_fchmod(
        loop_: *mut uv_loop_t,
        req: *mut uv_fs_t,
        file: uv_file,
        mode: ::std::os::raw::c_int,
        cb: uv_fs_cb,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_fs_chown(
        loop_: *mut uv_loop_t,
        req: *mut uv_fs_t,
        path: *const ::std::os::raw::c_char,
        uid: uv_uid_t,
        gid: uv_gid_t,
        cb: uv_fs_cb,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_fs_fchown(
        loop_: *mut uv_loop_t,
        req: *mut uv_fs_t,
        file: uv_file,
        uid: uv_uid_t,
        gid: uv_gid_t,
        cb: uv_fs_cb,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_fs_lchown(
        loop_: *mut uv_loop_t,
        req: *mut uv_fs_t,
        path: *const ::std::os::raw::c_char,
        uid: uv_uid_t,
        gid: uv_gid_t,
        cb: uv_fs_cb,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_fs_statfs(
        loop_: *mut uv_loop_t,
        req: *mut uv_fs_t,
        path: *const ::std::os::raw::c_char,
        cb: uv_fs_cb,
    ) -> ::std::os::raw::c_int;
}
pub const uv_fs_event_UV_RENAME: uv_fs_event = 1;
pub const uv_fs_event_UV_CHANGE: uv_fs_event = 2;
pub type uv_fs_event = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct uv_fs_event_s {
    pub data: *mut ::std::os::raw::c_void,
    pub loop_: *mut uv_loop_t,
    pub type_: uv_handle_type,
    pub close_cb: uv_close_cb,
    pub handle_queue: uv__queue,
    pub u: uv_fs_event_s__bindgen_ty_1,
    pub next_closing: *mut uv_handle_t,
    pub flags: ::std::os::raw::c_uint,
    pub path: *mut ::std::os::raw::c_char,
    pub cb: uv_fs_event_cb,
    pub event_watcher: uv__io_t,
    pub realpath: *mut ::std::os::raw::c_char,
    pub realpath_len: ::std::os::raw::c_int,
    pub cf_flags: ::std::os::raw::c_int,
    pub cf_cb: *mut uv_async_t,
    pub cf_events: uv__queue,
    pub cf_member: uv__queue,
    pub cf_error: ::std::os::raw::c_int,
    pub cf_mutex: uv_mutex_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union uv_fs_event_s__bindgen_ty_1 {
    pub fd: ::std::os::raw::c_int,
    pub reserved: [*mut ::std::os::raw::c_void; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uv_fs_event_s__bindgen_ty_1"]
        [::std::mem::size_of::<uv_fs_event_s__bindgen_ty_1>() - 32usize];
    ["Alignment of uv_fs_event_s__bindgen_ty_1"]
        [::std::mem::align_of::<uv_fs_event_s__bindgen_ty_1>() - 8usize];
    ["Offset of field: uv_fs_event_s__bindgen_ty_1::fd"]
        [::std::mem::offset_of!(uv_fs_event_s__bindgen_ty_1, fd) - 0usize];
    ["Offset of field: uv_fs_event_s__bindgen_ty_1::reserved"]
        [::std::mem::offset_of!(uv_fs_event_s__bindgen_ty_1, reserved) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uv_fs_event_s"][::std::mem::size_of::<uv_fs_event_s>() - 304usize];
    ["Alignment of uv_fs_event_s"][::std::mem::align_of::<uv_fs_event_s>() - 8usize];
    ["Offset of field: uv_fs_event_s::data"][::std::mem::offset_of!(uv_fs_event_s, data) - 0usize];
    ["Offset of field: uv_fs_event_s::loop_"]
        [::std::mem::offset_of!(uv_fs_event_s, loop_) - 8usize];
    ["Offset of field: uv_fs_event_s::type_"]
        [::std::mem::offset_of!(uv_fs_event_s, type_) - 16usize];
    ["Offset of field: uv_fs_event_s::close_cb"]
        [::std::mem::offset_of!(uv_fs_event_s, close_cb) - 24usize];
    ["Offset of field: uv_fs_event_s::handle_queue"]
        [::std::mem::offset_of!(uv_fs_event_s, handle_queue) - 32usize];
    ["Offset of field: uv_fs_event_s::u"][::std::mem::offset_of!(uv_fs_event_s, u) - 48usize];
    ["Offset of field: uv_fs_event_s::next_closing"]
        [::std::mem::offset_of!(uv_fs_event_s, next_closing) - 80usize];
    ["Offset of field: uv_fs_event_s::flags"]
        [::std::mem::offset_of!(uv_fs_event_s, flags) - 88usize];
    ["Offset of field: uv_fs_event_s::path"][::std::mem::offset_of!(uv_fs_event_s, path) - 96usize];
    ["Offset of field: uv_fs_event_s::cb"][::std::mem::offset_of!(uv_fs_event_s, cb) - 104usize];
    ["Offset of field: uv_fs_event_s::event_watcher"]
        [::std::mem::offset_of!(uv_fs_event_s, event_watcher) - 112usize];
    ["Offset of field: uv_fs_event_s::realpath"]
        [::std::mem::offset_of!(uv_fs_event_s, realpath) - 176usize];
    ["Offset of field: uv_fs_event_s::realpath_len"]
        [::std::mem::offset_of!(uv_fs_event_s, realpath_len) - 184usize];
    ["Offset of field: uv_fs_event_s::cf_flags"]
        [::std::mem::offset_of!(uv_fs_event_s, cf_flags) - 188usize];
    ["Offset of field: uv_fs_event_s::cf_cb"]
        [::std::mem::offset_of!(uv_fs_event_s, cf_cb) - 192usize];
    ["Offset of field: uv_fs_event_s::cf_events"]
        [::std::mem::offset_of!(uv_fs_event_s, cf_events) - 200usize];
    ["Offset of field: uv_fs_event_s::cf_member"]
        [::std::mem::offset_of!(uv_fs_event_s, cf_member) - 216usize];
    ["Offset of field: uv_fs_event_s::cf_error"]
        [::std::mem::offset_of!(uv_fs_event_s, cf_error) - 232usize];
    ["Offset of field: uv_fs_event_s::cf_mutex"]
        [::std::mem::offset_of!(uv_fs_event_s, cf_mutex) - 240usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct uv_fs_poll_s {
    pub data: *mut ::std::os::raw::c_void,
    pub loop_: *mut uv_loop_t,
    pub type_: uv_handle_type,
    pub close_cb: uv_close_cb,
    pub handle_queue: uv__queue,
    pub u: uv_fs_poll_s__bindgen_ty_1,
    pub next_closing: *mut uv_handle_t,
    pub flags: ::std::os::raw::c_uint,
    pub poll_ctx: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union uv_fs_poll_s__bindgen_ty_1 {
    pub fd: ::std::os::raw::c_int,
    pub reserved: [*mut ::std::os::raw::c_void; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uv_fs_poll_s__bindgen_ty_1"]
        [::std::mem::size_of::<uv_fs_poll_s__bindgen_ty_1>() - 32usize];
    ["Alignment of uv_fs_poll_s__bindgen_ty_1"]
        [::std::mem::align_of::<uv_fs_poll_s__bindgen_ty_1>() - 8usize];
    ["Offset of field: uv_fs_poll_s__bindgen_ty_1::fd"]
        [::std::mem::offset_of!(uv_fs_poll_s__bindgen_ty_1, fd) - 0usize];
    ["Offset of field: uv_fs_poll_s__bindgen_ty_1::reserved"]
        [::std::mem::offset_of!(uv_fs_poll_s__bindgen_ty_1, reserved) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uv_fs_poll_s"][::std::mem::size_of::<uv_fs_poll_s>() - 104usize];
    ["Alignment of uv_fs_poll_s"][::std::mem::align_of::<uv_fs_poll_s>() - 8usize];
    ["Offset of field: uv_fs_poll_s::data"][::std::mem::offset_of!(uv_fs_poll_s, data) - 0usize];
    ["Offset of field: uv_fs_poll_s::loop_"][::std::mem::offset_of!(uv_fs_poll_s, loop_) - 8usize];
    ["Offset of field: uv_fs_poll_s::type_"][::std::mem::offset_of!(uv_fs_poll_s, type_) - 16usize];
    ["Offset of field: uv_fs_poll_s::close_cb"]
        [::std::mem::offset_of!(uv_fs_poll_s, close_cb) - 24usize];
    ["Offset of field: uv_fs_poll_s::handle_queue"]
        [::std::mem::offset_of!(uv_fs_poll_s, handle_queue) - 32usize];
    ["Offset of field: uv_fs_poll_s::u"][::std::mem::offset_of!(uv_fs_poll_s, u) - 48usize];
    ["Offset of field: uv_fs_poll_s::next_closing"]
        [::std::mem::offset_of!(uv_fs_poll_s, next_closing) - 80usize];
    ["Offset of field: uv_fs_poll_s::flags"][::std::mem::offset_of!(uv_fs_poll_s, flags) - 88usize];
    ["Offset of field: uv_fs_poll_s::poll_ctx"]
        [::std::mem::offset_of!(uv_fs_poll_s, poll_ctx) - 96usize];
};
unsafe extern "C" {
    pub fn uv_fs_poll_init(
        loop_: *mut uv_loop_t,
        handle: *mut uv_fs_poll_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_fs_poll_start(
        handle: *mut uv_fs_poll_t,
        poll_cb: uv_fs_poll_cb,
        path: *const ::std::os::raw::c_char,
        interval: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_fs_poll_stop(handle: *mut uv_fs_poll_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_fs_poll_getpath(
        handle: *mut uv_fs_poll_t,
        buffer: *mut ::std::os::raw::c_char,
        size: *mut usize,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct uv_signal_s {
    pub data: *mut ::std::os::raw::c_void,
    pub loop_: *mut uv_loop_t,
    pub type_: uv_handle_type,
    pub close_cb: uv_close_cb,
    pub handle_queue: uv__queue,
    pub u: uv_signal_s__bindgen_ty_1,
    pub next_closing: *mut uv_handle_t,
    pub flags: ::std::os::raw::c_uint,
    pub signal_cb: uv_signal_cb,
    pub signum: ::std::os::raw::c_int,
    pub tree_entry: uv_signal_s__bindgen_ty_2,
    pub caught_signals: ::std::os::raw::c_uint,
    pub dispatched_signals: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union uv_signal_s__bindgen_ty_1 {
    pub fd: ::std::os::raw::c_int,
    pub reserved: [*mut ::std::os::raw::c_void; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uv_signal_s__bindgen_ty_1"]
        [::std::mem::size_of::<uv_signal_s__bindgen_ty_1>() - 32usize];
    ["Alignment of uv_signal_s__bindgen_ty_1"]
        [::std::mem::align_of::<uv_signal_s__bindgen_ty_1>() - 8usize];
    ["Offset of field: uv_signal_s__bindgen_ty_1::fd"]
        [::std::mem::offset_of!(uv_signal_s__bindgen_ty_1, fd) - 0usize];
    ["Offset of field: uv_signal_s__bindgen_ty_1::reserved"]
        [::std::mem::offset_of!(uv_signal_s__bindgen_ty_1, reserved) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uv_signal_s__bindgen_ty_2 {
    pub rbe_left: *mut uv_signal_s,
    pub rbe_right: *mut uv_signal_s,
    pub rbe_parent: *mut uv_signal_s,
    pub rbe_color: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uv_signal_s__bindgen_ty_2"]
        [::std::mem::size_of::<uv_signal_s__bindgen_ty_2>() - 32usize];
    ["Alignment of uv_signal_s__bindgen_ty_2"]
        [::std::mem::align_of::<uv_signal_s__bindgen_ty_2>() - 8usize];
    ["Offset of field: uv_signal_s__bindgen_ty_2::rbe_left"]
        [::std::mem::offset_of!(uv_signal_s__bindgen_ty_2, rbe_left) - 0usize];
    ["Offset of field: uv_signal_s__bindgen_ty_2::rbe_right"]
        [::std::mem::offset_of!(uv_signal_s__bindgen_ty_2, rbe_right) - 8usize];
    ["Offset of field: uv_signal_s__bindgen_ty_2::rbe_parent"]
        [::std::mem::offset_of!(uv_signal_s__bindgen_ty_2, rbe_parent) - 16usize];
    ["Offset of field: uv_signal_s__bindgen_ty_2::rbe_color"]
        [::std::mem::offset_of!(uv_signal_s__bindgen_ty_2, rbe_color) - 24usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uv_signal_s"][::std::mem::size_of::<uv_signal_s>() - 152usize];
    ["Alignment of uv_signal_s"][::std::mem::align_of::<uv_signal_s>() - 8usize];
    ["Offset of field: uv_signal_s::data"][::std::mem::offset_of!(uv_signal_s, data) - 0usize];
    ["Offset of field: uv_signal_s::loop_"][::std::mem::offset_of!(uv_signal_s, loop_) - 8usize];
    ["Offset of field: uv_signal_s::type_"][::std::mem::offset_of!(uv_signal_s, type_) - 16usize];
    ["Offset of field: uv_signal_s::close_cb"]
        [::std::mem::offset_of!(uv_signal_s, close_cb) - 24usize];
    ["Offset of field: uv_signal_s::handle_queue"]
        [::std::mem::offset_of!(uv_signal_s, handle_queue) - 32usize];
    ["Offset of field: uv_signal_s::u"][::std::mem::offset_of!(uv_signal_s, u) - 48usize];
    ["Offset of field: uv_signal_s::next_closing"]
        [::std::mem::offset_of!(uv_signal_s, next_closing) - 80usize];
    ["Offset of field: uv_signal_s::flags"][::std::mem::offset_of!(uv_signal_s, flags) - 88usize];
    ["Offset of field: uv_signal_s::signal_cb"]
        [::std::mem::offset_of!(uv_signal_s, signal_cb) - 96usize];
    ["Offset of field: uv_signal_s::signum"]
        [::std::mem::offset_of!(uv_signal_s, signum) - 104usize];
    ["Offset of field: uv_signal_s::tree_entry"]
        [::std::mem::offset_of!(uv_signal_s, tree_entry) - 112usize];
    ["Offset of field: uv_signal_s::caught_signals"]
        [::std::mem::offset_of!(uv_signal_s, caught_signals) - 144usize];
    ["Offset of field: uv_signal_s::dispatched_signals"]
        [::std::mem::offset_of!(uv_signal_s, dispatched_signals) - 148usize];
};
unsafe extern "C" {
    pub fn uv_signal_init(loop_: *mut uv_loop_t, handle: *mut uv_signal_t)
        -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_signal_start(
        handle: *mut uv_signal_t,
        signal_cb: uv_signal_cb,
        signum: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_signal_start_oneshot(
        handle: *mut uv_signal_t,
        signal_cb: uv_signal_cb,
        signum: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_signal_stop(handle: *mut uv_signal_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_loadavg(avg: *mut f64);
}
pub const uv_fs_event_flags_UV_FS_EVENT_WATCH_ENTRY: uv_fs_event_flags = 1;
pub const uv_fs_event_flags_UV_FS_EVENT_STAT: uv_fs_event_flags = 2;
pub const uv_fs_event_flags_UV_FS_EVENT_RECURSIVE: uv_fs_event_flags = 4;
pub type uv_fs_event_flags = ::std::os::raw::c_uint;
unsafe extern "C" {
    pub fn uv_fs_event_init(
        loop_: *mut uv_loop_t,
        handle: *mut uv_fs_event_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_fs_event_start(
        handle: *mut uv_fs_event_t,
        cb: uv_fs_event_cb,
        path: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_fs_event_stop(handle: *mut uv_fs_event_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_fs_event_getpath(
        handle: *mut uv_fs_event_t,
        buffer: *mut ::std::os::raw::c_char,
        size: *mut usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_ip4_addr(
        ip: *const ::std::os::raw::c_char,
        port: ::std::os::raw::c_int,
        addr: *mut sockaddr_in,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_ip6_addr(
        ip: *const ::std::os::raw::c_char,
        port: ::std::os::raw::c_int,
        addr: *mut sockaddr_in6,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_ip4_name(
        src: *const sockaddr_in,
        dst: *mut ::std::os::raw::c_char,
        size: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_ip6_name(
        src: *const sockaddr_in6,
        dst: *mut ::std::os::raw::c_char,
        size: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_ip_name(
        src: *const sockaddr,
        dst: *mut ::std::os::raw::c_char,
        size: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_inet_ntop(
        af: ::std::os::raw::c_int,
        src: *const ::std::os::raw::c_void,
        dst: *mut ::std::os::raw::c_char,
        size: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_inet_pton(
        af: ::std::os::raw::c_int,
        src: *const ::std::os::raw::c_char,
        dst: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uv_random_s {
    pub data: *mut ::std::os::raw::c_void,
    pub type_: uv_req_type,
    pub reserved: [*mut ::std::os::raw::c_void; 6usize],
    pub loop_: *mut uv_loop_t,
    pub status: ::std::os::raw::c_int,
    pub buf: *mut ::std::os::raw::c_void,
    pub buflen: usize,
    pub cb: uv_random_cb,
    pub work_req: uv__work,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uv_random_s"][::std::mem::size_of::<uv_random_s>() - 144usize];
    ["Alignment of uv_random_s"][::std::mem::align_of::<uv_random_s>() - 8usize];
    ["Offset of field: uv_random_s::data"][::std::mem::offset_of!(uv_random_s, data) - 0usize];
    ["Offset of field: uv_random_s::type_"][::std::mem::offset_of!(uv_random_s, type_) - 8usize];
    ["Offset of field: uv_random_s::reserved"]
        [::std::mem::offset_of!(uv_random_s, reserved) - 16usize];
    ["Offset of field: uv_random_s::loop_"][::std::mem::offset_of!(uv_random_s, loop_) - 64usize];
    ["Offset of field: uv_random_s::status"][::std::mem::offset_of!(uv_random_s, status) - 72usize];
    ["Offset of field: uv_random_s::buf"][::std::mem::offset_of!(uv_random_s, buf) - 80usize];
    ["Offset of field: uv_random_s::buflen"][::std::mem::offset_of!(uv_random_s, buflen) - 88usize];
    ["Offset of field: uv_random_s::cb"][::std::mem::offset_of!(uv_random_s, cb) - 96usize];
    ["Offset of field: uv_random_s::work_req"]
        [::std::mem::offset_of!(uv_random_s, work_req) - 104usize];
};
unsafe extern "C" {
    pub fn uv_random(
        loop_: *mut uv_loop_t,
        req: *mut uv_random_t,
        buf: *mut ::std::os::raw::c_void,
        buflen: usize,
        flags: ::std::os::raw::c_uint,
        cb: uv_random_cb,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_if_indextoname(
        ifindex: ::std::os::raw::c_uint,
        buffer: *mut ::std::os::raw::c_char,
        size: *mut usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_if_indextoiid(
        ifindex: ::std::os::raw::c_uint,
        buffer: *mut ::std::os::raw::c_char,
        size: *mut usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_exepath(
        buffer: *mut ::std::os::raw::c_char,
        size: *mut usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_cwd(buffer: *mut ::std::os::raw::c_char, size: *mut usize) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_chdir(dir: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_get_free_memory() -> u64;
}
unsafe extern "C" {
    pub fn uv_get_total_memory() -> u64;
}
unsafe extern "C" {
    pub fn uv_get_constrained_memory() -> u64;
}
unsafe extern "C" {
    pub fn uv_get_available_memory() -> u64;
}
unsafe extern "C" {
    pub fn uv_clock_gettime(
        clock_id: uv_clock_id,
        ts: *mut uv_timespec64_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_hrtime() -> u64;
}
unsafe extern "C" {
    pub fn uv_sleep(msec: ::std::os::raw::c_uint);
}
unsafe extern "C" {
    pub fn uv_disable_stdio_inheritance();
}
unsafe extern "C" {
    pub fn uv_dlopen(
        filename: *const ::std::os::raw::c_char,
        lib: *mut uv_lib_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_dlclose(lib: *mut uv_lib_t);
}
unsafe extern "C" {
    pub fn uv_dlsym(
        lib: *mut uv_lib_t,
        name: *const ::std::os::raw::c_char,
        ptr: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_dlerror(lib: *const uv_lib_t) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn uv_mutex_init(handle: *mut uv_mutex_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_mutex_init_recursive(handle: *mut uv_mutex_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_mutex_destroy(handle: *mut uv_mutex_t);
}
unsafe extern "C" {
    pub fn uv_mutex_lock(handle: *mut uv_mutex_t);
}
unsafe extern "C" {
    pub fn uv_mutex_trylock(handle: *mut uv_mutex_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_mutex_unlock(handle: *mut uv_mutex_t);
}
unsafe extern "C" {
    pub fn uv_rwlock_init(rwlock: *mut uv_rwlock_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_rwlock_destroy(rwlock: *mut uv_rwlock_t);
}
unsafe extern "C" {
    pub fn uv_rwlock_rdlock(rwlock: *mut uv_rwlock_t);
}
unsafe extern "C" {
    pub fn uv_rwlock_tryrdlock(rwlock: *mut uv_rwlock_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_rwlock_rdunlock(rwlock: *mut uv_rwlock_t);
}
unsafe extern "C" {
    pub fn uv_rwlock_wrlock(rwlock: *mut uv_rwlock_t);
}
unsafe extern "C" {
    pub fn uv_rwlock_trywrlock(rwlock: *mut uv_rwlock_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_rwlock_wrunlock(rwlock: *mut uv_rwlock_t);
}
unsafe extern "C" {
    pub fn uv_sem_init(sem: *mut uv_sem_t, value: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_sem_destroy(sem: *mut uv_sem_t);
}
unsafe extern "C" {
    pub fn uv_sem_post(sem: *mut uv_sem_t);
}
unsafe extern "C" {
    pub fn uv_sem_wait(sem: *mut uv_sem_t);
}
unsafe extern "C" {
    pub fn uv_sem_trywait(sem: *mut uv_sem_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_cond_init(cond: *mut uv_cond_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_cond_destroy(cond: *mut uv_cond_t);
}
unsafe extern "C" {
    pub fn uv_cond_signal(cond: *mut uv_cond_t);
}
unsafe extern "C" {
    pub fn uv_cond_broadcast(cond: *mut uv_cond_t);
}
unsafe extern "C" {
    pub fn uv_barrier_init(
        barrier: *mut uv_barrier_t,
        count: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_barrier_destroy(barrier: *mut uv_barrier_t);
}
unsafe extern "C" {
    pub fn uv_barrier_wait(barrier: *mut uv_barrier_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_cond_wait(cond: *mut uv_cond_t, mutex: *mut uv_mutex_t);
}
unsafe extern "C" {
    pub fn uv_cond_timedwait(
        cond: *mut uv_cond_t,
        mutex: *mut uv_mutex_t,
        timeout: u64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_once(guard: *mut uv_once_t, callback: ::std::option::Option<unsafe extern "C" fn()>);
}
unsafe extern "C" {
    pub fn uv_key_create(key: *mut uv_key_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_key_delete(key: *mut uv_key_t);
}
unsafe extern "C" {
    pub fn uv_key_get(key: *mut uv_key_t) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn uv_key_set(key: *mut uv_key_t, value: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn uv_gettimeofday(tv: *mut uv_timeval64_t) -> ::std::os::raw::c_int;
}
pub type uv_thread_cb =
    ::std::option::Option<unsafe extern "C" fn(arg: *mut ::std::os::raw::c_void)>;
unsafe extern "C" {
    pub fn uv_thread_create(
        tid: *mut uv_thread_t,
        entry: uv_thread_cb,
        arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
pub const uv_thread_create_flags_UV_THREAD_NO_FLAGS: uv_thread_create_flags = 0;
pub const uv_thread_create_flags_UV_THREAD_HAS_STACK_SIZE: uv_thread_create_flags = 1;
pub type uv_thread_create_flags = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uv_thread_options_s {
    pub flags: ::std::os::raw::c_uint,
    pub stack_size: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uv_thread_options_s"][::std::mem::size_of::<uv_thread_options_s>() - 16usize];
    ["Alignment of uv_thread_options_s"][::std::mem::align_of::<uv_thread_options_s>() - 8usize];
    ["Offset of field: uv_thread_options_s::flags"]
        [::std::mem::offset_of!(uv_thread_options_s, flags) - 0usize];
    ["Offset of field: uv_thread_options_s::stack_size"]
        [::std::mem::offset_of!(uv_thread_options_s, stack_size) - 8usize];
};
pub type uv_thread_options_t = uv_thread_options_s;
unsafe extern "C" {
    pub fn uv_thread_create_ex(
        tid: *mut uv_thread_t,
        params: *const uv_thread_options_t,
        entry: uv_thread_cb,
        arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_thread_setaffinity(
        tid: *mut uv_thread_t,
        cpumask: *mut ::std::os::raw::c_char,
        oldmask: *mut ::std::os::raw::c_char,
        mask_size: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_thread_getaffinity(
        tid: *mut uv_thread_t,
        cpumask: *mut ::std::os::raw::c_char,
        mask_size: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_thread_getcpu() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_thread_self() -> uv_thread_t;
}
unsafe extern "C" {
    pub fn uv_thread_join(tid: *mut uv_thread_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_thread_equal(t1: *const uv_thread_t, t2: *const uv_thread_t)
        -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union uv_any_handle {
    pub async_: uv_async_t,
    pub check: uv_check_t,
    pub fs_event: uv_fs_event_t,
    pub fs_poll: uv_fs_poll_t,
    pub handle: uv_handle_t,
    pub idle: uv_idle_t,
    pub pipe: uv_pipe_t,
    pub poll: uv_poll_t,
    pub prepare: uv_prepare_t,
    pub process: uv_process_t,
    pub stream: uv_stream_t,
    pub tcp: uv_tcp_t,
    pub timer: uv_timer_t,
    pub tty: uv_tty_t,
    pub udp: uv_udp_t,
    pub signal: uv_signal_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uv_any_handle"][::std::mem::size_of::<uv_any_handle>() - 344usize];
    ["Alignment of uv_any_handle"][::std::mem::align_of::<uv_any_handle>() - 8usize];
    ["Offset of field: uv_any_handle::async_"]
        [::std::mem::offset_of!(uv_any_handle, async_) - 0usize];
    ["Offset of field: uv_any_handle::check"]
        [::std::mem::offset_of!(uv_any_handle, check) - 0usize];
    ["Offset of field: uv_any_handle::fs_event"]
        [::std::mem::offset_of!(uv_any_handle, fs_event) - 0usize];
    ["Offset of field: uv_any_handle::fs_poll"]
        [::std::mem::offset_of!(uv_any_handle, fs_poll) - 0usize];
    ["Offset of field: uv_any_handle::handle"]
        [::std::mem::offset_of!(uv_any_handle, handle) - 0usize];
    ["Offset of field: uv_any_handle::idle"][::std::mem::offset_of!(uv_any_handle, idle) - 0usize];
    ["Offset of field: uv_any_handle::pipe"][::std::mem::offset_of!(uv_any_handle, pipe) - 0usize];
    ["Offset of field: uv_any_handle::poll"][::std::mem::offset_of!(uv_any_handle, poll) - 0usize];
    ["Offset of field: uv_any_handle::prepare"]
        [::std::mem::offset_of!(uv_any_handle, prepare) - 0usize];
    ["Offset of field: uv_any_handle::process"]
        [::std::mem::offset_of!(uv_any_handle, process) - 0usize];
    ["Offset of field: uv_any_handle::stream"]
        [::std::mem::offset_of!(uv_any_handle, stream) - 0usize];
    ["Offset of field: uv_any_handle::tcp"][::std::mem::offset_of!(uv_any_handle, tcp) - 0usize];
    ["Offset of field: uv_any_handle::timer"]
        [::std::mem::offset_of!(uv_any_handle, timer) - 0usize];
    ["Offset of field: uv_any_handle::tty"][::std::mem::offset_of!(uv_any_handle, tty) - 0usize];
    ["Offset of field: uv_any_handle::udp"][::std::mem::offset_of!(uv_any_handle, udp) - 0usize];
    ["Offset of field: uv_any_handle::signal"]
        [::std::mem::offset_of!(uv_any_handle, signal) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union uv_any_req {
    pub req: uv_req_t,
    pub connect: uv_connect_t,
    pub write: uv_write_t,
    pub shutdown: uv_shutdown_t,
    pub udp_send: uv_udp_send_t,
    pub fs: uv_fs_t,
    pub work: uv_work_t,
    pub getaddrinfo: uv_getaddrinfo_t,
    pub getnameinfo: uv_getnameinfo_t,
    pub random: uv_random_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uv_any_req"][::std::mem::size_of::<uv_any_req>() - 1320usize];
    ["Alignment of uv_any_req"][::std::mem::align_of::<uv_any_req>() - 8usize];
    ["Offset of field: uv_any_req::req"][::std::mem::offset_of!(uv_any_req, req) - 0usize];
    ["Offset of field: uv_any_req::connect"][::std::mem::offset_of!(uv_any_req, connect) - 0usize];
    ["Offset of field: uv_any_req::write"][::std::mem::offset_of!(uv_any_req, write) - 0usize];
    ["Offset of field: uv_any_req::shutdown"]
        [::std::mem::offset_of!(uv_any_req, shutdown) - 0usize];
    ["Offset of field: uv_any_req::udp_send"]
        [::std::mem::offset_of!(uv_any_req, udp_send) - 0usize];
    ["Offset of field: uv_any_req::fs"][::std::mem::offset_of!(uv_any_req, fs) - 0usize];
    ["Offset of field: uv_any_req::work"][::std::mem::offset_of!(uv_any_req, work) - 0usize];
    ["Offset of field: uv_any_req::getaddrinfo"]
        [::std::mem::offset_of!(uv_any_req, getaddrinfo) - 0usize];
    ["Offset of field: uv_any_req::getnameinfo"]
        [::std::mem::offset_of!(uv_any_req, getnameinfo) - 0usize];
    ["Offset of field: uv_any_req::random"][::std::mem::offset_of!(uv_any_req, random) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct uv_loop_s {
    pub data: *mut ::std::os::raw::c_void,
    pub active_handles: ::std::os::raw::c_uint,
    pub handle_queue: uv__queue,
    pub active_reqs: uv_loop_s__bindgen_ty_1,
    pub internal_fields: *mut ::std::os::raw::c_void,
    pub stop_flag: ::std::os::raw::c_uint,
    pub flags: ::std::os::raw::c_ulong,
    pub backend_fd: ::std::os::raw::c_int,
    pub pending_queue: uv__queue,
    pub watcher_queue: uv__queue,
    pub watchers: *mut *mut uv__io_t,
    pub nwatchers: ::std::os::raw::c_uint,
    pub nfds: ::std::os::raw::c_uint,
    pub wq: uv__queue,
    pub wq_mutex: uv_mutex_t,
    pub wq_async: uv_async_t,
    pub cloexec_lock: uv_rwlock_t,
    pub closing_handles: *mut uv_handle_t,
    pub process_handles: uv__queue,
    pub prepare_handles: uv__queue,
    pub check_handles: uv__queue,
    pub idle_handles: uv__queue,
    pub async_handles: uv__queue,
    pub async_unused: ::std::option::Option<unsafe extern "C" fn()>,
    pub async_io_watcher: uv__io_t,
    pub async_wfd: ::std::os::raw::c_int,
    pub timer_heap: uv_loop_s__bindgen_ty_2,
    pub timer_counter: u64,
    pub time: u64,
    pub signal_pipefd: [::std::os::raw::c_int; 2usize],
    pub signal_io_watcher: uv__io_t,
    pub child_watcher: uv_signal_t,
    pub emfile_fd: ::std::os::raw::c_int,
    pub cf_thread: uv_thread_t,
    pub _cf_reserved: *mut ::std::os::raw::c_void,
    pub cf_state: *mut ::std::os::raw::c_void,
    pub cf_mutex: uv_mutex_t,
    pub cf_sem: uv_sem_t,
    pub cf_signals: uv__queue,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union uv_loop_s__bindgen_ty_1 {
    pub unused: *mut ::std::os::raw::c_void,
    pub count: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uv_loop_s__bindgen_ty_1"][::std::mem::size_of::<uv_loop_s__bindgen_ty_1>() - 8usize];
    ["Alignment of uv_loop_s__bindgen_ty_1"]
        [::std::mem::align_of::<uv_loop_s__bindgen_ty_1>() - 8usize];
    ["Offset of field: uv_loop_s__bindgen_ty_1::unused"]
        [::std::mem::offset_of!(uv_loop_s__bindgen_ty_1, unused) - 0usize];
    ["Offset of field: uv_loop_s__bindgen_ty_1::count"]
        [::std::mem::offset_of!(uv_loop_s__bindgen_ty_1, count) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uv_loop_s__bindgen_ty_2 {
    pub min: *mut ::std::os::raw::c_void,
    pub nelts: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uv_loop_s__bindgen_ty_2"][::std::mem::size_of::<uv_loop_s__bindgen_ty_2>() - 16usize];
    ["Alignment of uv_loop_s__bindgen_ty_2"]
        [::std::mem::align_of::<uv_loop_s__bindgen_ty_2>() - 8usize];
    ["Offset of field: uv_loop_s__bindgen_ty_2::min"]
        [::std::mem::offset_of!(uv_loop_s__bindgen_ty_2, min) - 0usize];
    ["Offset of field: uv_loop_s__bindgen_ty_2::nelts"]
        [::std::mem::offset_of!(uv_loop_s__bindgen_ty_2, nelts) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uv_loop_s"][::std::mem::size_of::<uv_loop_s>() - 1072usize];
    ["Alignment of uv_loop_s"][::std::mem::align_of::<uv_loop_s>() - 8usize];
    ["Offset of field: uv_loop_s::data"][::std::mem::offset_of!(uv_loop_s, data) - 0usize];
    ["Offset of field: uv_loop_s::active_handles"]
        [::std::mem::offset_of!(uv_loop_s, active_handles) - 8usize];
    ["Offset of field: uv_loop_s::handle_queue"]
        [::std::mem::offset_of!(uv_loop_s, handle_queue) - 16usize];
    ["Offset of field: uv_loop_s::active_reqs"]
        [::std::mem::offset_of!(uv_loop_s, active_reqs) - 32usize];
    ["Offset of field: uv_loop_s::internal_fields"]
        [::std::mem::offset_of!(uv_loop_s, internal_fields) - 40usize];
    ["Offset of field: uv_loop_s::stop_flag"]
        [::std::mem::offset_of!(uv_loop_s, stop_flag) - 48usize];
    ["Offset of field: uv_loop_s::flags"][::std::mem::offset_of!(uv_loop_s, flags) - 56usize];
    ["Offset of field: uv_loop_s::backend_fd"]
        [::std::mem::offset_of!(uv_loop_s, backend_fd) - 64usize];
    ["Offset of field: uv_loop_s::pending_queue"]
        [::std::mem::offset_of!(uv_loop_s, pending_queue) - 72usize];
    ["Offset of field: uv_loop_s::watcher_queue"]
        [::std::mem::offset_of!(uv_loop_s, watcher_queue) - 88usize];
    ["Offset of field: uv_loop_s::watchers"]
        [::std::mem::offset_of!(uv_loop_s, watchers) - 104usize];
    ["Offset of field: uv_loop_s::nwatchers"]
        [::std::mem::offset_of!(uv_loop_s, nwatchers) - 112usize];
    ["Offset of field: uv_loop_s::nfds"][::std::mem::offset_of!(uv_loop_s, nfds) - 116usize];
    ["Offset of field: uv_loop_s::wq"][::std::mem::offset_of!(uv_loop_s, wq) - 120usize];
    ["Offset of field: uv_loop_s::wq_mutex"]
        [::std::mem::offset_of!(uv_loop_s, wq_mutex) - 136usize];
    ["Offset of field: uv_loop_s::wq_async"]
        [::std::mem::offset_of!(uv_loop_s, wq_async) - 200usize];
    ["Offset of field: uv_loop_s::cloexec_lock"]
        [::std::mem::offset_of!(uv_loop_s, cloexec_lock) - 328usize];
    ["Offset of field: uv_loop_s::closing_handles"]
        [::std::mem::offset_of!(uv_loop_s, closing_handles) - 528usize];
    ["Offset of field: uv_loop_s::process_handles"]
        [::std::mem::offset_of!(uv_loop_s, process_handles) - 536usize];
    ["Offset of field: uv_loop_s::prepare_handles"]
        [::std::mem::offset_of!(uv_loop_s, prepare_handles) - 552usize];
    ["Offset of field: uv_loop_s::check_handles"]
        [::std::mem::offset_of!(uv_loop_s, check_handles) - 568usize];
    ["Offset of field: uv_loop_s::idle_handles"]
        [::std::mem::offset_of!(uv_loop_s, idle_handles) - 584usize];
    ["Offset of field: uv_loop_s::async_handles"]
        [::std::mem::offset_of!(uv_loop_s, async_handles) - 600usize];
    ["Offset of field: uv_loop_s::async_unused"]
        [::std::mem::offset_of!(uv_loop_s, async_unused) - 616usize];
    ["Offset of field: uv_loop_s::async_io_watcher"]
        [::std::mem::offset_of!(uv_loop_s, async_io_watcher) - 624usize];
    ["Offset of field: uv_loop_s::async_wfd"]
        [::std::mem::offset_of!(uv_loop_s, async_wfd) - 688usize];
    ["Offset of field: uv_loop_s::timer_heap"]
        [::std::mem::offset_of!(uv_loop_s, timer_heap) - 696usize];
    ["Offset of field: uv_loop_s::timer_counter"]
        [::std::mem::offset_of!(uv_loop_s, timer_counter) - 712usize];
    ["Offset of field: uv_loop_s::time"][::std::mem::offset_of!(uv_loop_s, time) - 720usize];
    ["Offset of field: uv_loop_s::signal_pipefd"]
        [::std::mem::offset_of!(uv_loop_s, signal_pipefd) - 728usize];
    ["Offset of field: uv_loop_s::signal_io_watcher"]
        [::std::mem::offset_of!(uv_loop_s, signal_io_watcher) - 736usize];
    ["Offset of field: uv_loop_s::child_watcher"]
        [::std::mem::offset_of!(uv_loop_s, child_watcher) - 800usize];
    ["Offset of field: uv_loop_s::emfile_fd"]
        [::std::mem::offset_of!(uv_loop_s, emfile_fd) - 952usize];
    ["Offset of field: uv_loop_s::cf_thread"]
        [::std::mem::offset_of!(uv_loop_s, cf_thread) - 960usize];
    ["Offset of field: uv_loop_s::_cf_reserved"]
        [::std::mem::offset_of!(uv_loop_s, _cf_reserved) - 968usize];
    ["Offset of field: uv_loop_s::cf_state"]
        [::std::mem::offset_of!(uv_loop_s, cf_state) - 976usize];
    ["Offset of field: uv_loop_s::cf_mutex"]
        [::std::mem::offset_of!(uv_loop_s, cf_mutex) - 984usize];
    ["Offset of field: uv_loop_s::cf_sem"][::std::mem::offset_of!(uv_loop_s, cf_sem) - 1048usize];
    ["Offset of field: uv_loop_s::cf_signals"]
        [::std::mem::offset_of!(uv_loop_s, cf_signals) - 1056usize];
};
unsafe extern "C" {
    pub fn uv_loop_get_data(arg1: *const uv_loop_t) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn uv_loop_set_data(arg1: *mut uv_loop_t, data: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn uv_utf16_length_as_wtf8(utf16: *const u16, utf16_len: isize) -> usize;
}
unsafe extern "C" {
    pub fn uv_utf16_to_wtf8(
        utf16: *const u16,
        utf16_len: isize,
        wtf8_ptr: *mut *mut ::std::os::raw::c_char,
        wtf8_len_ptr: *mut usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uv_wtf8_length_as_utf16(wtf8: *const ::std::os::raw::c_char) -> isize;
}
unsafe extern "C" {
    pub fn uv_wtf8_to_utf16(wtf8: *const ::std::os::raw::c_char, utf16: *mut u16, utf16_len: usize);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct js_platform_s {
    _unused: [u8; 0],
}
pub type js_platform_t = js_platform_s;
#[doc = " @version 1"]
pub type js_platform_options_t = js_platform_options_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct js_env_s {
    _unused: [u8; 0],
}
pub type js_env_t = js_env_s;
#[doc = " @version 0"]
pub type js_env_options_t = js_env_options_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct js_handle_scope_s {
    _unused: [u8; 0],
}
pub type js_handle_scope_t = js_handle_scope_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct js_escapable_handle_scope_s {
    _unused: [u8; 0],
}
pub type js_escapable_handle_scope_t = js_escapable_handle_scope_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct js_context_s {
    _unused: [u8; 0],
}
pub type js_context_t = js_context_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct js_module_s {
    _unused: [u8; 0],
}
pub type js_module_t = js_module_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct js_value_s {
    _unused: [u8; 0],
}
pub type js_value_t = js_value_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct js_ref_s {
    _unused: [u8; 0],
}
pub type js_ref_t = js_ref_s;
#[doc = " @version 0"]
pub type js_property_descriptor_t = js_property_descriptor_s;
#[doc = " @version 0"]
pub type js_delegate_callbacks_t = js_delegate_callbacks_s;
#[doc = " @version 0"]
pub type js_type_tag_t = js_type_tag_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct js_deferred_s {
    _unused: [u8; 0],
}
pub type js_deferred_t = js_deferred_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct js_callback_info_s {
    _unused: [u8; 0],
}
pub type js_callback_info_t = js_callback_info_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct js_arraybuffer_backing_store_s {
    _unused: [u8; 0],
}
pub type js_arraybuffer_backing_store_t = js_arraybuffer_backing_store_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct js_threadsafe_function_s {
    _unused: [u8; 0],
}
pub type js_threadsafe_function_t = js_threadsafe_function_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct js_deferred_teardown_s {
    _unused: [u8; 0],
}
pub type js_deferred_teardown_t = js_deferred_teardown_s;
#[doc = " @version 1"]
pub type js_heap_statistics_t = js_heap_statistics_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct js_inspector_s {
    _unused: [u8; 0],
}
pub type js_inspector_t = js_inspector_s;
pub type js_function_cb = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut js_env_t, arg2: *mut js_callback_info_t) -> *mut js_value_t,
>;
pub type js_finalize_cb = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut js_env_t,
        data: *mut ::std::os::raw::c_void,
        finalize_hint: *mut ::std::os::raw::c_void,
    ),
>;
pub type js_delegate_get_cb = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut js_env_t,
        property: *mut js_value_t,
        data: *mut ::std::os::raw::c_void,
    ) -> *mut js_value_t,
>;
pub type js_delegate_has_cb = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut js_env_t,
        property: *mut js_value_t,
        data: *mut ::std::os::raw::c_void,
    ) -> bool,
>;
pub type js_delegate_set_cb = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut js_env_t,
        property: *mut js_value_t,
        value: *mut js_value_t,
        data: *mut ::std::os::raw::c_void,
    ) -> bool,
>;
pub type js_delegate_delete_property_cb = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut js_env_t,
        property: *mut js_value_t,
        data: *mut ::std::os::raw::c_void,
    ) -> bool,
>;
pub type js_delegate_own_keys_cb = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut js_env_t, data: *mut ::std::os::raw::c_void) -> *mut js_value_t,
>;
pub type js_module_resolve_cb = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut js_env_t,
        specifier: *mut js_value_t,
        assertions: *mut js_value_t,
        referrer: *mut js_module_t,
        data: *mut ::std::os::raw::c_void,
    ) -> *mut js_module_t,
>;
pub type js_module_meta_cb = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut js_env_t,
        module: *mut js_module_t,
        meta: *mut js_value_t,
        data: *mut ::std::os::raw::c_void,
    ),
>;
pub type js_module_evaluate_cb = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut js_env_t,
        module: *mut js_module_t,
        data: *mut ::std::os::raw::c_void,
    ),
>;
pub type js_uncaught_exception_cb = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut js_env_t,
        error: *mut js_value_t,
        data: *mut ::std::os::raw::c_void,
    ),
>;
pub type js_unhandled_rejection_cb = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut js_env_t,
        reason: *mut js_value_t,
        promise: *mut js_value_t,
        data: *mut ::std::os::raw::c_void,
    ),
>;
pub type js_dynamic_import_cb = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut js_env_t,
        specifier: *mut js_value_t,
        assertions: *mut js_value_t,
        referrer: *mut js_value_t,
        data: *mut ::std::os::raw::c_void,
    ) -> *mut js_module_t,
>;
pub type js_threadsafe_function_cb = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut js_env_t,
        function: *mut js_value_t,
        context: *mut ::std::os::raw::c_void,
        data: *mut ::std::os::raw::c_void,
    ),
>;
pub type js_teardown_cb =
    ::std::option::Option<unsafe extern "C" fn(data: *mut ::std::os::raw::c_void)>;
pub type js_deferred_teardown_cb = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut js_deferred_teardown_t, data: *mut ::std::os::raw::c_void),
>;
pub type js_inspector_message_cb = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut js_env_t,
        arg2: *mut js_inspector_t,
        message: *mut js_value_t,
        data: *mut ::std::os::raw::c_void,
    ),
>;
pub type js_inspector_paused_cb = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut js_env_t,
        arg2: *mut js_inspector_t,
        data: *mut ::std::os::raw::c_void,
    ) -> bool,
>;
#[doc = " There's a pending exception that, unless handled, will be propagated up the\n JavaScript execution stack."]
pub const js_pending_exception: _bindgen_ty_5 = -1;
#[doc = " There was an uncaught exception that could not be propagated as the JavaScript\n execution stack is empty."]
pub const js_uncaught_exception: _bindgen_ty_5 = -2;
pub type _bindgen_ty_5 = ::std::os::raw::c_int;
pub const js_value_type_t_js_undefined: js_value_type_t = 0;
pub const js_value_type_t_js_null: js_value_type_t = 1;
pub const js_value_type_t_js_boolean: js_value_type_t = 2;
pub const js_value_type_t_js_number: js_value_type_t = 3;
pub const js_value_type_t_js_string: js_value_type_t = 4;
pub const js_value_type_t_js_symbol: js_value_type_t = 5;
pub const js_value_type_t_js_object: js_value_type_t = 6;
pub const js_value_type_t_js_function: js_value_type_t = 7;
pub const js_value_type_t_js_external: js_value_type_t = 8;
pub const js_value_type_t_js_bigint: js_value_type_t = 9;
pub type js_value_type_t = ::std::os::raw::c_uint;
pub const js_typedarray_type_t_js_int8array: js_typedarray_type_t = 0;
pub const js_typedarray_type_t_js_uint8array: js_typedarray_type_t = 1;
pub const js_typedarray_type_t_js_uint8clampedarray: js_typedarray_type_t = 2;
pub const js_typedarray_type_t_js_int16array: js_typedarray_type_t = 3;
pub const js_typedarray_type_t_js_uint16array: js_typedarray_type_t = 4;
pub const js_typedarray_type_t_js_int32array: js_typedarray_type_t = 5;
pub const js_typedarray_type_t_js_uint32array: js_typedarray_type_t = 6;
pub const js_typedarray_type_t_js_float32array: js_typedarray_type_t = 7;
pub const js_typedarray_type_t_js_float64array: js_typedarray_type_t = 8;
pub const js_typedarray_type_t_js_bigint64array: js_typedarray_type_t = 9;
pub const js_typedarray_type_t_js_biguint64array: js_typedarray_type_t = 10;
#[doc = " @deprecated"]
pub const js_typedarray_type_t_js_int8_array: js_typedarray_type_t = 0;
#[doc = " @deprecated"]
pub const js_typedarray_type_t_js_uint8_array: js_typedarray_type_t = 1;
#[doc = " @deprecated"]
pub const js_typedarray_type_t_js_uint8_clamped_array: js_typedarray_type_t = 2;
#[doc = " @deprecated"]
pub const js_typedarray_type_t_js_int16_array: js_typedarray_type_t = 3;
#[doc = " @deprecated"]
pub const js_typedarray_type_t_js_uint16_array: js_typedarray_type_t = 4;
#[doc = " @deprecated"]
pub const js_typedarray_type_t_js_int32_array: js_typedarray_type_t = 5;
#[doc = " @deprecated"]
pub const js_typedarray_type_t_js_uint32_array: js_typedarray_type_t = 6;
#[doc = " @deprecated"]
pub const js_typedarray_type_t_js_float32_array: js_typedarray_type_t = 7;
#[doc = " @deprecated"]
pub const js_typedarray_type_t_js_float64_array: js_typedarray_type_t = 8;
#[doc = " @deprecated"]
pub const js_typedarray_type_t_js_bigint64_array: js_typedarray_type_t = 9;
#[doc = " @deprecated"]
pub const js_typedarray_type_t_js_biguint64_array: js_typedarray_type_t = 10;
pub type js_typedarray_type_t = ::std::os::raw::c_uint;
pub const js_promise_state_t_js_promise_pending: js_promise_state_t = 0;
pub const js_promise_state_t_js_promise_fulfilled: js_promise_state_t = 1;
pub const js_promise_state_t_js_promise_rejected: js_promise_state_t = 2;
pub type js_promise_state_t = ::std::os::raw::c_uint;
pub const js_writable: _bindgen_ty_6 = 1;
pub const js_enumerable: _bindgen_ty_6 = 2;
pub const js_configurable: _bindgen_ty_6 = 4;
pub const js_static: _bindgen_ty_6 = 1024;
pub type _bindgen_ty_6 = ::std::os::raw::c_uint;
pub const js_threadsafe_function_release_mode_t_js_threadsafe_function_release:
    js_threadsafe_function_release_mode_t = 0;
pub const js_threadsafe_function_release_mode_t_js_threadsafe_function_abort:
    js_threadsafe_function_release_mode_t = 1;
pub type js_threadsafe_function_release_mode_t = ::std::os::raw::c_uint;
pub const js_threadsafe_function_call_mode_t_js_threadsafe_function_nonblocking:
    js_threadsafe_function_call_mode_t = 0;
pub const js_threadsafe_function_call_mode_t_js_threadsafe_function_blocking:
    js_threadsafe_function_call_mode_t = 1;
pub type js_threadsafe_function_call_mode_t = ::std::os::raw::c_uint;
#[doc = " @version 1"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct js_platform_options_s {
    pub version: ::std::os::raw::c_int,
    #[doc = " Expose garbage collection APIs, which are otherwise not available as they\n negatively impact performance.\n\n @since 0"]
    pub expose_garbage_collection: bool,
    #[doc = " Trace invocations of the garbage collector.\n\n @since 0"]
    pub trace_garbage_collection: bool,
    #[doc = " Disable the optimizing compiler, such as TurboFan on V8.\n\n @since 0"]
    pub disable_optimizing_compiler: bool,
    #[doc = " Trace optimizations made by the optimizing compiler based on type feedback.\n\n Requires that the optimizing compiler is enabled and supports tracing.\n\n @since 0"]
    pub trace_optimizations: bool,
    #[doc = " Trace deoptimizations made by the optimizing compiler based on type feddback.\n\n Requires that the optimizing compiler is enabled and supports tracing.\n\n @since 0"]
    pub trace_deoptimizations: bool,
    #[doc = " Enable the sampling profiler if supported.\n\n @since 0"]
    pub enable_sampling_profiler: bool,
    #[doc = " The interval between stack traces in microseconds.\n\n @since 0"]
    pub sampling_profiler_interval: ::std::os::raw::c_int,
    #[doc = " Enable trade-off of performance for memory if supported.\n\n @since 1"]
    pub optimize_for_memory: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of js_platform_options_s"][::std::mem::size_of::<js_platform_options_s>() - 20usize];
    ["Alignment of js_platform_options_s"]
        [::std::mem::align_of::<js_platform_options_s>() - 4usize];
    ["Offset of field: js_platform_options_s::version"]
        [::std::mem::offset_of!(js_platform_options_s, version) - 0usize];
    ["Offset of field: js_platform_options_s::expose_garbage_collection"]
        [::std::mem::offset_of!(js_platform_options_s, expose_garbage_collection) - 4usize];
    ["Offset of field: js_platform_options_s::trace_garbage_collection"]
        [::std::mem::offset_of!(js_platform_options_s, trace_garbage_collection) - 5usize];
    ["Offset of field: js_platform_options_s::disable_optimizing_compiler"]
        [::std::mem::offset_of!(js_platform_options_s, disable_optimizing_compiler) - 6usize];
    ["Offset of field: js_platform_options_s::trace_optimizations"]
        [::std::mem::offset_of!(js_platform_options_s, trace_optimizations) - 7usize];
    ["Offset of field: js_platform_options_s::trace_deoptimizations"]
        [::std::mem::offset_of!(js_platform_options_s, trace_deoptimizations) - 8usize];
    ["Offset of field: js_platform_options_s::enable_sampling_profiler"]
        [::std::mem::offset_of!(js_platform_options_s, enable_sampling_profiler) - 9usize];
    ["Offset of field: js_platform_options_s::sampling_profiler_interval"]
        [::std::mem::offset_of!(js_platform_options_s, sampling_profiler_interval) - 12usize];
    ["Offset of field: js_platform_options_s::optimize_for_memory"]
        [::std::mem::offset_of!(js_platform_options_s, optimize_for_memory) - 16usize];
};
#[doc = " @version 0"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct js_env_options_s {
    pub version: ::std::os::raw::c_int,
    #[doc = " The memory limit of the JavaScript heap. By default, the limit will be\n inferred based on the amount of physical memory of the device.\n\n @since 0"]
    pub memory_limit: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of js_env_options_s"][::std::mem::size_of::<js_env_options_s>() - 16usize];
    ["Alignment of js_env_options_s"][::std::mem::align_of::<js_env_options_s>() - 8usize];
    ["Offset of field: js_env_options_s::version"]
        [::std::mem::offset_of!(js_env_options_s, version) - 0usize];
    ["Offset of field: js_env_options_s::memory_limit"]
        [::std::mem::offset_of!(js_env_options_s, memory_limit) - 8usize];
};
#[doc = " @version 0"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct js_property_descriptor_s {
    pub version: ::std::os::raw::c_int,
    #[doc = " @since 0"]
    pub name: *mut js_value_t,
    #[doc = " @since 0"]
    pub data: *mut ::std::os::raw::c_void,
    #[doc = " @since 0"]
    pub attributes: ::std::os::raw::c_int,
    #[doc = " @since 0"]
    pub method: js_function_cb,
    #[doc = " @since 0"]
    pub getter: js_function_cb,
    #[doc = " @since 0"]
    pub setter: js_function_cb,
    #[doc = " @since 0"]
    pub value: *mut js_value_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of js_property_descriptor_s"]
        [::std::mem::size_of::<js_property_descriptor_s>() - 64usize];
    ["Alignment of js_property_descriptor_s"]
        [::std::mem::align_of::<js_property_descriptor_s>() - 8usize];
    ["Offset of field: js_property_descriptor_s::version"]
        [::std::mem::offset_of!(js_property_descriptor_s, version) - 0usize];
    ["Offset of field: js_property_descriptor_s::name"]
        [::std::mem::offset_of!(js_property_descriptor_s, name) - 8usize];
    ["Offset of field: js_property_descriptor_s::data"]
        [::std::mem::offset_of!(js_property_descriptor_s, data) - 16usize];
    ["Offset of field: js_property_descriptor_s::attributes"]
        [::std::mem::offset_of!(js_property_descriptor_s, attributes) - 24usize];
    ["Offset of field: js_property_descriptor_s::method"]
        [::std::mem::offset_of!(js_property_descriptor_s, method) - 32usize];
    ["Offset of field: js_property_descriptor_s::getter"]
        [::std::mem::offset_of!(js_property_descriptor_s, getter) - 40usize];
    ["Offset of field: js_property_descriptor_s::setter"]
        [::std::mem::offset_of!(js_property_descriptor_s, setter) - 48usize];
    ["Offset of field: js_property_descriptor_s::value"]
        [::std::mem::offset_of!(js_property_descriptor_s, value) - 56usize];
};
#[doc = " @version 0"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct js_delegate_callbacks_s {
    pub version: ::std::os::raw::c_int,
    #[doc = " @since 0"]
    pub get: js_delegate_get_cb,
    #[doc = " @since 0"]
    pub has: js_delegate_has_cb,
    #[doc = " @since 0"]
    pub set: js_delegate_set_cb,
    #[doc = " @since 0"]
    pub delete_property: js_delegate_delete_property_cb,
    #[doc = " @since 0"]
    pub own_keys: js_delegate_own_keys_cb,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of js_delegate_callbacks_s"][::std::mem::size_of::<js_delegate_callbacks_s>() - 48usize];
    ["Alignment of js_delegate_callbacks_s"]
        [::std::mem::align_of::<js_delegate_callbacks_s>() - 8usize];
    ["Offset of field: js_delegate_callbacks_s::version"]
        [::std::mem::offset_of!(js_delegate_callbacks_s, version) - 0usize];
    ["Offset of field: js_delegate_callbacks_s::get"]
        [::std::mem::offset_of!(js_delegate_callbacks_s, get) - 8usize];
    ["Offset of field: js_delegate_callbacks_s::has"]
        [::std::mem::offset_of!(js_delegate_callbacks_s, has) - 16usize];
    ["Offset of field: js_delegate_callbacks_s::set"]
        [::std::mem::offset_of!(js_delegate_callbacks_s, set) - 24usize];
    ["Offset of field: js_delegate_callbacks_s::delete_property"]
        [::std::mem::offset_of!(js_delegate_callbacks_s, delete_property) - 32usize];
    ["Offset of field: js_delegate_callbacks_s::own_keys"]
        [::std::mem::offset_of!(js_delegate_callbacks_s, own_keys) - 40usize];
};
#[doc = " @version 0"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct js_type_tag_s {
    #[doc = " @since 0"]
    pub lower: u64,
    #[doc = " @since 0"]
    pub upper: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of js_type_tag_s"][::std::mem::size_of::<js_type_tag_s>() - 16usize];
    ["Alignment of js_type_tag_s"][::std::mem::align_of::<js_type_tag_s>() - 8usize];
    ["Offset of field: js_type_tag_s::lower"]
        [::std::mem::offset_of!(js_type_tag_s, lower) - 0usize];
    ["Offset of field: js_type_tag_s::upper"]
        [::std::mem::offset_of!(js_type_tag_s, upper) - 8usize];
};
#[doc = " @version 1"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct js_heap_statistics_s {
    pub version: ::std::os::raw::c_int,
    #[doc = " The amount of memory currently committed for the heap.\n\n @since 0"]
    pub total_heap_size: usize,
    #[doc = " The size of all objects residing in the heap.\n\n @since 0"]
    pub used_heap_size: usize,
    #[doc = " The size of the backing store, i.e. array buffers and external strings.\n\n @since 1"]
    pub external_memory: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of js_heap_statistics_s"][::std::mem::size_of::<js_heap_statistics_s>() - 32usize];
    ["Alignment of js_heap_statistics_s"][::std::mem::align_of::<js_heap_statistics_s>() - 8usize];
    ["Offset of field: js_heap_statistics_s::version"]
        [::std::mem::offset_of!(js_heap_statistics_s, version) - 0usize];
    ["Offset of field: js_heap_statistics_s::total_heap_size"]
        [::std::mem::offset_of!(js_heap_statistics_s, total_heap_size) - 8usize];
    ["Offset of field: js_heap_statistics_s::used_heap_size"]
        [::std::mem::offset_of!(js_heap_statistics_s, used_heap_size) - 16usize];
    ["Offset of field: js_heap_statistics_s::external_memory"]
        [::std::mem::offset_of!(js_heap_statistics_s, external_memory) - 24usize];
};
unsafe extern "C" {
    pub fn js_create_platform(
        loop_: *mut uv_loop_t,
        options: *const js_platform_options_t,
        result: *mut *mut js_platform_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn js_destroy_platform(platform: *mut js_platform_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn js_get_platform_identifier(
        platform: *mut js_platform_t,
        result: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn js_get_platform_version(
        platform: *mut js_platform_t,
        result: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn js_get_platform_loop(
        platform: *mut js_platform_t,
        result: *mut *mut uv_loop_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn js_create_env(
        loop_: *mut uv_loop_t,
        platform: *mut js_platform_t,
        options: *const js_env_options_t,
        result: *mut *mut js_env_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn js_destroy_env(env: *mut js_env_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Add a callback for uncaught exceptions. By default, uncaught exceptions are\n swallowed and do not affect JavaScript execution.\n\n An exception is considered uncaught if the JavaScript execution stack is\n emptied without the exception being caught."]
    pub fn js_on_uncaught_exception(
        env: *mut js_env_t,
        cb: js_uncaught_exception_cb,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Add a callback for unhandled promise rejections. By default, unhandled\npromise rejections are swallowed and do not affect JavaScript execution.\n\n A promise rejection is considered unhandled if the rejection has not been\n caught after performing a microtask checkpoint."]
    pub fn js_on_unhandled_rejection(
        env: *mut js_env_t,
        cb: js_unhandled_rejection_cb,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Add a callback for dynamic `import()` statements. By default, a dynamic\n import will result in either an uncaught exception or an unhandled promise\n rejection during script or module evaluation."]
    pub fn js_on_dynamic_import(
        env: *mut js_env_t,
        cb: js_dynamic_import_cb,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn js_get_env_loop(
        env: *mut js_env_t,
        result: *mut *mut uv_loop_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn js_get_env_platform(
        env: *mut js_env_t,
        result: *mut *mut js_platform_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_open_handle_scope(
        env: *mut js_env_t,
        result: *mut *mut js_handle_scope_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_close_handle_scope(
        env: *mut js_env_t,
        scope: *mut js_handle_scope_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_open_escapable_handle_scope(
        env: *mut js_env_t,
        result: *mut *mut js_escapable_handle_scope_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_close_escapable_handle_scope(
        env: *mut js_env_t,
        scope: *mut js_escapable_handle_scope_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Promote an escapee to the outer handle scope. The behavior is undefined if\n called more than once for the same handle.\n\n This function can be called even if there is a pending JavaScript exception."]
    pub fn js_escape_handle(
        env: *mut js_env_t,
        scope: *mut js_escapable_handle_scope_t,
        escapee: *mut js_value_t,
        result: *mut *mut js_value_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_create_context(
        env: *mut js_env_t,
        result: *mut *mut js_context_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_destroy_context(
        env: *mut js_env_t,
        context: *mut js_context_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_enter_context(
        env: *mut js_env_t,
        context: *mut js_context_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_exit_context(env: *mut js_env_t, context: *mut js_context_t)
        -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Get the platform specific bindings object for the specified environment.\n\n Platform implementations can use this to export any additional functionality\n by setting properties on the object and may also import any properties set\n by embedders."]
    pub fn js_get_bindings(
        env: *mut js_env_t,
        result: *mut *mut js_value_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn js_run_script(
        env: *mut js_env_t,
        file: *const ::std::os::raw::c_char,
        len: usize,
        offset: ::std::os::raw::c_int,
        source: *mut js_value_t,
        result: *mut *mut js_value_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn js_create_module(
        env: *mut js_env_t,
        name: *const ::std::os::raw::c_char,
        len: usize,
        offset: ::std::os::raw::c_int,
        source: *mut js_value_t,
        cb: js_module_meta_cb,
        data: *mut ::std::os::raw::c_void,
        result: *mut *mut js_module_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn js_create_synthetic_module(
        env: *mut js_env_t,
        name: *const ::std::os::raw::c_char,
        len: usize,
        export_names: *const *mut js_value_t,
        export_names_len: usize,
        cb: js_module_evaluate_cb,
        data: *mut ::std::os::raw::c_void,
        result: *mut *mut js_module_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_delete_module(env: *mut js_env_t, module: *mut js_module_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Get the name of the module as specified when the module was created. The\n name remains valid until the module is deleted.\n\n This function can be called even if there is a pending JavaScript exception."]
    pub fn js_get_module_name(
        env: *mut js_env_t,
        module: *mut js_module_t,
        result: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Get the namespace object of the module. The behavior is undefined if the\n module is not yet instantiated.\n\n This function can be called even if there is a pending JavaScript exception."]
    pub fn js_get_module_namespace(
        env: *mut js_env_t,
        module: *mut js_module_t,
        result: *mut *mut js_value_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn js_set_module_export(
        env: *mut js_env_t,
        module: *mut js_module_t,
        name: *mut js_value_t,
        value: *mut js_value_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn js_instantiate_module(
        env: *mut js_env_t,
        module: *mut js_module_t,
        cb: js_module_resolve_cb,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn js_run_module(
        env: *mut js_env_t,
        module: *mut js_module_t,
        result: *mut *mut js_value_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_create_reference(
        env: *mut js_env_t,
        value: *mut js_value_t,
        count: u32,
        result: *mut *mut js_ref_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_delete_reference(
        env: *mut js_env_t,
        reference: *mut js_ref_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_reference_ref(
        env: *mut js_env_t,
        reference: *mut js_ref_t,
        result: *mut u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_reference_unref(
        env: *mut js_env_t,
        reference: *mut js_ref_t,
        result: *mut u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_get_reference_value(
        env: *mut js_env_t,
        reference: *mut js_ref_t,
        result: *mut *mut js_value_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn js_define_class(
        env: *mut js_env_t,
        name: *const ::std::os::raw::c_char,
        len: usize,
        constructor: js_function_cb,
        data: *mut ::std::os::raw::c_void,
        properties: *const js_property_descriptor_t,
        properties_len: usize,
        result: *mut *mut js_value_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn js_define_properties(
        env: *mut js_env_t,
        object: *mut js_value_t,
        properties: *const js_property_descriptor_t,
        properties_len: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn js_wrap(
        env: *mut js_env_t,
        object: *mut js_value_t,
        data: *mut ::std::os::raw::c_void,
        finalize_cb: js_finalize_cb,
        finalize_hint: *mut ::std::os::raw::c_void,
        result: *mut *mut js_ref_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn js_unwrap(
        env: *mut js_env_t,
        object: *mut js_value_t,
        result: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn js_remove_wrap(
        env: *mut js_env_t,
        object: *mut js_value_t,
        result: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_create_delegate(
        env: *mut js_env_t,
        callbacks: *const js_delegate_callbacks_t,
        data: *mut ::std::os::raw::c_void,
        finalize_cb: js_finalize_cb,
        finalize_hint: *mut ::std::os::raw::c_void,
        result: *mut *mut js_value_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_add_finalizer(
        env: *mut js_env_t,
        object: *mut js_value_t,
        data: *mut ::std::os::raw::c_void,
        finalize_cb: js_finalize_cb,
        finalize_hint: *mut ::std::os::raw::c_void,
        result: *mut *mut js_ref_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn js_add_type_tag(
        env: *mut js_env_t,
        object: *mut js_value_t,
        tag: *const js_type_tag_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn js_check_type_tag(
        env: *mut js_env_t,
        object: *mut js_value_t,
        tag: *const js_type_tag_t,
        result: *mut bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_create_int32(
        env: *mut js_env_t,
        value: i32,
        result: *mut *mut js_value_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_create_uint32(
        env: *mut js_env_t,
        value: u32,
        result: *mut *mut js_value_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_create_int64(
        env: *mut js_env_t,
        value: i64,
        result: *mut *mut js_value_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_create_double(
        env: *mut js_env_t,
        value: f64,
        result: *mut *mut js_value_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_create_bigint_int64(
        env: *mut js_env_t,
        value: i64,
        result: *mut *mut js_value_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_create_bigint_uint64(
        env: *mut js_env_t,
        value: u64,
        result: *mut *mut js_value_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_create_string_utf8(
        env: *mut js_env_t,
        str_: *const utf8_t,
        len: usize,
        result: *mut *mut js_value_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_create_string_utf16le(
        env: *mut js_env_t,
        str_: *const utf16_t,
        len: usize,
        result: *mut *mut js_value_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_create_string_latin1(
        env: *mut js_env_t,
        str_: *const latin1_t,
        len: usize,
        result: *mut *mut js_value_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_create_symbol(
        env: *mut js_env_t,
        description: *mut js_value_t,
        result: *mut *mut js_value_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_create_object(
        env: *mut js_env_t,
        result: *mut *mut js_value_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn js_create_function(
        env: *mut js_env_t,
        name: *const ::std::os::raw::c_char,
        len: usize,
        cb: js_function_cb,
        data: *mut ::std::os::raw::c_void,
        result: *mut *mut js_value_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn js_create_function_with_source(
        env: *mut js_env_t,
        name: *const ::std::os::raw::c_char,
        name_len: usize,
        file: *const ::std::os::raw::c_char,
        file_len: usize,
        args: *const *mut js_value_t,
        args_len: usize,
        offset: ::std::os::raw::c_int,
        source: *mut js_value_t,
        result: *mut *mut js_value_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_create_array(
        env: *mut js_env_t,
        result: *mut *mut js_value_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_create_array_with_length(
        env: *mut js_env_t,
        len: usize,
        result: *mut *mut js_value_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_create_external(
        env: *mut js_env_t,
        data: *mut ::std::os::raw::c_void,
        finalize_cb: js_finalize_cb,
        finalize_hint: *mut ::std::os::raw::c_void,
        result: *mut *mut js_value_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_create_date(
        env: *mut js_env_t,
        time: f64,
        result: *mut *mut js_value_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_create_error(
        env: *mut js_env_t,
        code: *mut js_value_t,
        message: *mut js_value_t,
        result: *mut *mut js_value_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_create_type_error(
        env: *mut js_env_t,
        code: *mut js_value_t,
        message: *mut js_value_t,
        result: *mut *mut js_value_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_create_range_error(
        env: *mut js_env_t,
        code: *mut js_value_t,
        message: *mut js_value_t,
        result: *mut *mut js_value_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_create_syntax_error(
        env: *mut js_env_t,
        code: *mut js_value_t,
        message: *mut js_value_t,
        result: *mut *mut js_value_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_create_promise(
        env: *mut js_env_t,
        deferred: *mut *mut js_deferred_t,
        promise: *mut *mut js_value_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_resolve_deferred(
        env: *mut js_env_t,
        deferred: *mut js_deferred_t,
        resolution: *mut js_value_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_reject_deferred(
        env: *mut js_env_t,
        deferred: *mut js_deferred_t,
        resolution: *mut js_value_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_get_promise_state(
        env: *mut js_env_t,
        promise: *mut js_value_t,
        result: *mut js_promise_state_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Get the result of the promise. The behavior is undefined if the promise is\n still pending.\n\n This function can be called even if there is a pending JavaScript exception."]
    pub fn js_get_promise_result(
        env: *mut js_env_t,
        promise: *mut js_value_t,
        result: *mut *mut js_value_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn js_create_arraybuffer(
        env: *mut js_env_t,
        len: usize,
        data: *mut *mut ::std::os::raw::c_void,
        result: *mut *mut js_value_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn js_create_arraybuffer_with_backing_store(
        env: *mut js_env_t,
        backing_store: *mut js_arraybuffer_backing_store_t,
        data: *mut *mut ::std::os::raw::c_void,
        len: *mut usize,
        result: *mut *mut js_value_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn js_create_unsafe_arraybuffer(
        env: *mut js_env_t,
        len: usize,
        data: *mut *mut ::std::os::raw::c_void,
        result: *mut *mut js_value_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn js_create_external_arraybuffer(
        env: *mut js_env_t,
        data: *mut ::std::os::raw::c_void,
        len: usize,
        finalize_cb: js_finalize_cb,
        finalize_hint: *mut ::std::os::raw::c_void,
        result: *mut *mut js_value_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_detach_arraybuffer(
        env: *mut js_env_t,
        arraybuffer: *mut js_value_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_get_arraybuffer_backing_store(
        env: *mut js_env_t,
        arraybuffer: *mut js_value_t,
        result: *mut *mut js_arraybuffer_backing_store_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn js_create_sharedarraybuffer(
        env: *mut js_env_t,
        len: usize,
        data: *mut *mut ::std::os::raw::c_void,
        result: *mut *mut js_value_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn js_create_sharedarraybuffer_with_backing_store(
        env: *mut js_env_t,
        backing_store: *mut js_arraybuffer_backing_store_t,
        data: *mut *mut ::std::os::raw::c_void,
        len: *mut usize,
        result: *mut *mut js_value_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn js_create_unsafe_sharedarraybuffer(
        env: *mut js_env_t,
        len: usize,
        data: *mut *mut ::std::os::raw::c_void,
        result: *mut *mut js_value_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_get_sharedarraybuffer_backing_store(
        env: *mut js_env_t,
        sharedarraybuffer: *mut js_value_t,
        result: *mut *mut js_arraybuffer_backing_store_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_release_arraybuffer_backing_store(
        env: *mut js_env_t,
        backing_store: *mut js_arraybuffer_backing_store_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Toggle zero-fill of all array buffers allocated on the heap of the calling\n thread, if supported. If disabled, `new ArrayBuffer()` is NOT guaranteed to\n zero-fill the allocated memory."]
    pub fn js_set_arraybuffer_zero_fill_enabled(enabled: bool) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn js_create_typedarray(
        env: *mut js_env_t,
        type_: js_typedarray_type_t,
        len: usize,
        arraybuffer: *mut js_value_t,
        offset: usize,
        result: *mut *mut js_value_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn js_create_dataview(
        env: *mut js_env_t,
        len: usize,
        arraybuffer: *mut js_value_t,
        offset: usize,
        result: *mut *mut js_value_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_coerce_to_boolean(
        env: *mut js_env_t,
        value: *mut js_value_t,
        result: *mut *mut js_value_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn js_coerce_to_number(
        env: *mut js_env_t,
        value: *mut js_value_t,
        result: *mut *mut js_value_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn js_coerce_to_string(
        env: *mut js_env_t,
        value: *mut js_value_t,
        result: *mut *mut js_value_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn js_coerce_to_object(
        env: *mut js_env_t,
        value: *mut js_value_t,
        result: *mut *mut js_value_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_typeof(
        env: *mut js_env_t,
        value: *mut js_value_t,
        result: *mut js_value_type_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn js_instanceof(
        env: *mut js_env_t,
        object: *mut js_value_t,
        constructor: *mut js_value_t,
        result: *mut bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_is_undefined(
        env: *mut js_env_t,
        value: *mut js_value_t,
        result: *mut bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_is_null(
        env: *mut js_env_t,
        value: *mut js_value_t,
        result: *mut bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_is_boolean(
        env: *mut js_env_t,
        value: *mut js_value_t,
        result: *mut bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_is_number(
        env: *mut js_env_t,
        value: *mut js_value_t,
        result: *mut bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_is_int32(
        env: *mut js_env_t,
        value: *mut js_value_t,
        result: *mut bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_is_uint32(
        env: *mut js_env_t,
        value: *mut js_value_t,
        result: *mut bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_is_string(
        env: *mut js_env_t,
        value: *mut js_value_t,
        result: *mut bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_is_symbol(
        env: *mut js_env_t,
        value: *mut js_value_t,
        result: *mut bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_is_object(
        env: *mut js_env_t,
        value: *mut js_value_t,
        result: *mut bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_is_function(
        env: *mut js_env_t,
        value: *mut js_value_t,
        result: *mut bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_is_async_function(
        env: *mut js_env_t,
        value: *mut js_value_t,
        result: *mut bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_is_generator_function(
        env: *mut js_env_t,
        value: *mut js_value_t,
        result: *mut bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_is_generator(
        env: *mut js_env_t,
        value: *mut js_value_t,
        result: *mut bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_is_arguments(
        env: *mut js_env_t,
        value: *mut js_value_t,
        result: *mut bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_is_array(
        env: *mut js_env_t,
        value: *mut js_value_t,
        result: *mut bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_is_external(
        env: *mut js_env_t,
        value: *mut js_value_t,
        result: *mut bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_is_wrapped(
        env: *mut js_env_t,
        value: *mut js_value_t,
        result: *mut bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_is_delegate(
        env: *mut js_env_t,
        value: *mut js_value_t,
        result: *mut bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_is_bigint(
        env: *mut js_env_t,
        value: *mut js_value_t,
        result: *mut bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_is_date(
        env: *mut js_env_t,
        value: *mut js_value_t,
        result: *mut bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_is_regexp(
        env: *mut js_env_t,
        value: *mut js_value_t,
        result: *mut bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_is_error(
        env: *mut js_env_t,
        value: *mut js_value_t,
        result: *mut bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_is_promise(
        env: *mut js_env_t,
        value: *mut js_value_t,
        result: *mut bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_is_proxy(
        env: *mut js_env_t,
        value: *mut js_value_t,
        result: *mut bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_is_map(
        env: *mut js_env_t,
        value: *mut js_value_t,
        result: *mut bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_is_map_iterator(
        env: *mut js_env_t,
        value: *mut js_value_t,
        result: *mut bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_is_set(
        env: *mut js_env_t,
        value: *mut js_value_t,
        result: *mut bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_is_set_iterator(
        env: *mut js_env_t,
        value: *mut js_value_t,
        result: *mut bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_is_weak_map(
        env: *mut js_env_t,
        value: *mut js_value_t,
        result: *mut bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_is_weak_set(
        env: *mut js_env_t,
        value: *mut js_value_t,
        result: *mut bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_is_weak_ref(
        env: *mut js_env_t,
        value: *mut js_value_t,
        result: *mut bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_is_arraybuffer(
        env: *mut js_env_t,
        value: *mut js_value_t,
        result: *mut bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_is_detached_arraybuffer(
        env: *mut js_env_t,
        value: *mut js_value_t,
        result: *mut bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_is_sharedarraybuffer(
        env: *mut js_env_t,
        value: *mut js_value_t,
        result: *mut bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_is_typedarray(
        env: *mut js_env_t,
        value: *mut js_value_t,
        result: *mut bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_is_int8array(
        env: *mut js_env_t,
        value: *mut js_value_t,
        result: *mut bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_is_uint8array(
        env: *mut js_env_t,
        value: *mut js_value_t,
        result: *mut bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_is_uint8clampedarray(
        env: *mut js_env_t,
        value: *mut js_value_t,
        result: *mut bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_is_int16array(
        env: *mut js_env_t,
        value: *mut js_value_t,
        result: *mut bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_is_uint16array(
        env: *mut js_env_t,
        value: *mut js_value_t,
        result: *mut bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_is_int32array(
        env: *mut js_env_t,
        value: *mut js_value_t,
        result: *mut bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_is_uint32array(
        env: *mut js_env_t,
        value: *mut js_value_t,
        result: *mut bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_is_float32array(
        env: *mut js_env_t,
        value: *mut js_value_t,
        result: *mut bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_is_float64array(
        env: *mut js_env_t,
        value: *mut js_value_t,
        result: *mut bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_is_bigint64array(
        env: *mut js_env_t,
        value: *mut js_value_t,
        result: *mut bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_is_biguint64array(
        env: *mut js_env_t,
        value: *mut js_value_t,
        result: *mut bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_is_dataview(
        env: *mut js_env_t,
        value: *mut js_value_t,
        result: *mut bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_is_module_namespace(
        env: *mut js_env_t,
        value: *mut js_value_t,
        result: *mut bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_strict_equals(
        env: *mut js_env_t,
        a: *mut js_value_t,
        b: *mut js_value_t,
        result: *mut bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_get_global(env: *mut js_env_t, result: *mut *mut js_value_t)
        -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_get_undefined(
        env: *mut js_env_t,
        result: *mut *mut js_value_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_get_null(env: *mut js_env_t, result: *mut *mut js_value_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_get_boolean(
        env: *mut js_env_t,
        value: bool,
        result: *mut *mut js_value_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_get_value_bool(
        env: *mut js_env_t,
        value: *mut js_value_t,
        result: *mut bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_get_value_int32(
        env: *mut js_env_t,
        value: *mut js_value_t,
        result: *mut i32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_get_value_uint32(
        env: *mut js_env_t,
        value: *mut js_value_t,
        result: *mut u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_get_value_int64(
        env: *mut js_env_t,
        value: *mut js_value_t,
        result: *mut i64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_get_value_double(
        env: *mut js_env_t,
        value: *mut js_value_t,
        result: *mut f64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_get_value_bigint_int64(
        env: *mut js_env_t,
        value: *mut js_value_t,
        result: *mut i64,
        lossless: *mut bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_get_value_bigint_uint64(
        env: *mut js_env_t,
        value: *mut js_value_t,
        result: *mut u64,
        lossless: *mut bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_get_value_string_utf8(
        env: *mut js_env_t,
        value: *mut js_value_t,
        str_: *mut utf8_t,
        len: usize,
        result: *mut usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_get_value_string_utf16le(
        env: *mut js_env_t,
        value: *mut js_value_t,
        str_: *mut utf16_t,
        len: usize,
        result: *mut usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_get_value_string_latin1(
        env: *mut js_env_t,
        value: *mut js_value_t,
        str_: *mut latin1_t,
        len: usize,
        result: *mut usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_get_value_external(
        env: *mut js_env_t,
        value: *mut js_value_t,
        result: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_get_value_date(
        env: *mut js_env_t,
        value: *mut js_value_t,
        result: *mut f64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_get_array_length(
        env: *mut js_env_t,
        value: *mut js_value_t,
        result: *mut u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_get_prototype(
        env: *mut js_env_t,
        object: *mut js_value_t,
        result: *mut *mut js_value_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn js_get_property_names(
        env: *mut js_env_t,
        object: *mut js_value_t,
        result: *mut *mut js_value_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn js_get_property(
        env: *mut js_env_t,
        object: *mut js_value_t,
        key: *mut js_value_t,
        result: *mut *mut js_value_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn js_has_property(
        env: *mut js_env_t,
        object: *mut js_value_t,
        key: *mut js_value_t,
        result: *mut bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn js_has_own_property(
        env: *mut js_env_t,
        object: *mut js_value_t,
        key: *mut js_value_t,
        result: *mut bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn js_set_property(
        env: *mut js_env_t,
        object: *mut js_value_t,
        key: *mut js_value_t,
        value: *mut js_value_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn js_delete_property(
        env: *mut js_env_t,
        object: *mut js_value_t,
        key: *mut js_value_t,
        result: *mut bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn js_get_named_property(
        env: *mut js_env_t,
        object: *mut js_value_t,
        name: *const ::std::os::raw::c_char,
        result: *mut *mut js_value_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn js_has_named_property(
        env: *mut js_env_t,
        object: *mut js_value_t,
        name: *const ::std::os::raw::c_char,
        result: *mut bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn js_set_named_property(
        env: *mut js_env_t,
        object: *mut js_value_t,
        name: *const ::std::os::raw::c_char,
        value: *mut js_value_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn js_delete_named_property(
        env: *mut js_env_t,
        object: *mut js_value_t,
        name: *const ::std::os::raw::c_char,
        result: *mut bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn js_get_element(
        env: *mut js_env_t,
        object: *mut js_value_t,
        index: u32,
        result: *mut *mut js_value_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn js_has_element(
        env: *mut js_env_t,
        object: *mut js_value_t,
        index: u32,
        result: *mut bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn js_set_element(
        env: *mut js_env_t,
        object: *mut js_value_t,
        index: u32,
        value: *mut js_value_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn js_delete_element(
        env: *mut js_env_t,
        object: *mut js_value_t,
        index: u32,
        result: *mut bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_get_callback_info(
        env: *mut js_env_t,
        info: *const js_callback_info_t,
        argc: *mut usize,
        argv: *mut *mut js_value_t,
        receiver: *mut *mut js_value_t,
        data: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_get_new_target(
        env: *mut js_env_t,
        info: *const js_callback_info_t,
        result: *mut *mut js_value_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_get_arraybuffer_info(
        env: *mut js_env_t,
        arraybuffer: *mut js_value_t,
        data: *mut *mut ::std::os::raw::c_void,
        len: *mut usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_get_sharedarraybuffer_info(
        env: *mut js_env_t,
        sharedarraybuffer: *mut js_value_t,
        data: *mut *mut ::std::os::raw::c_void,
        len: *mut usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_get_typedarray_info(
        env: *mut js_env_t,
        typedarray: *mut js_value_t,
        type_: *mut js_typedarray_type_t,
        data: *mut *mut ::std::os::raw::c_void,
        len: *mut usize,
        arraybuffer: *mut *mut js_value_t,
        offset: *mut usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_get_dataview_info(
        env: *mut js_env_t,
        dataview: *mut js_value_t,
        data: *mut *mut ::std::os::raw::c_void,
        len: *mut usize,
        arraybuffer: *mut *mut js_value_t,
        offset: *mut usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Call a JavaScript function from native code.\n\n When there is no JavaScript already executing on the stack, such as when the\n native code making the call was invoked as the result of I/O, a microtask\n checkpoint is performed before returning to native code.\n\n If there is JavaScript already executing on the stack, such as when the\n native code making the call was invoked from JavaScript, no microtask\n checkpoint is performed before returning to native code."]
    pub fn js_call_function(
        env: *mut js_env_t,
        receiver: *mut js_value_t,
        function: *mut js_value_t,
        argc: usize,
        argv: *const *mut js_value_t,
        result: *mut *mut js_value_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Call a JavaScript function from native and perform a microtask checkpoint.\n\n THIS FUNCTION MUST ONLY BE USED WHEN THERE IS NO JAVASCRIPT ALREADY\n EXECUTING ON THE STACK. If in doubt, use `js_call_function()` instead which\n automatically performs microtask checkpoints as needed."]
    pub fn js_call_function_with_checkpoint(
        env: *mut js_env_t,
        receiver: *mut js_value_t,
        function: *mut js_value_t,
        argc: usize,
        argv: *const *mut js_value_t,
        result: *mut *mut js_value_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn js_new_instance(
        env: *mut js_env_t,
        constructor: *mut js_value_t,
        argc: usize,
        argv: *const *mut js_value_t,
        result: *mut *mut js_value_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn js_create_threadsafe_function(
        env: *mut js_env_t,
        function: *mut js_value_t,
        queue_limit: usize,
        initial_thread_count: usize,
        finalize_cb: js_finalize_cb,
        finalize_hint: *mut ::std::os::raw::c_void,
        context: *mut ::std::os::raw::c_void,
        cb: js_threadsafe_function_cb,
        result: *mut *mut js_threadsafe_function_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_get_threadsafe_function_context(
        function: *mut js_threadsafe_function_t,
        result: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_call_threadsafe_function(
        function: *mut js_threadsafe_function_t,
        data: *mut ::std::os::raw::c_void,
        mode: js_threadsafe_function_call_mode_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_acquire_threadsafe_function(
        function: *mut js_threadsafe_function_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_release_threadsafe_function(
        function: *mut js_threadsafe_function_t,
        mode: js_threadsafe_function_release_mode_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_ref_threadsafe_function(
        env: *mut js_env_t,
        function: *mut js_threadsafe_function_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_unref_threadsafe_function(
        env: *mut js_env_t,
        function: *mut js_threadsafe_function_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn js_add_teardown_callback(
        env: *mut js_env_t,
        callback: js_teardown_cb,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn js_remove_teardown_callback(
        env: *mut js_env_t,
        callback: js_teardown_cb,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn js_add_deferred_teardown_callback(
        env: *mut js_env_t,
        callback: js_deferred_teardown_cb,
        data: *mut ::std::os::raw::c_void,
        result: *mut *mut js_deferred_teardown_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_finish_deferred_teardown_callback(
        handle: *mut js_deferred_teardown_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn js_throw(env: *mut js_env_t, error: *mut js_value_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn js_throw_error(
        env: *mut js_env_t,
        code: *const ::std::os::raw::c_char,
        message: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn js_throw_verrorf(
        env: *mut js_env_t,
        code: *const ::std::os::raw::c_char,
        message: *const ::std::os::raw::c_char,
        args: va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn js_throw_errorf(
        env: *mut js_env_t,
        code: *const ::std::os::raw::c_char,
        message: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn js_throw_type_error(
        env: *mut js_env_t,
        code: *const ::std::os::raw::c_char,
        message: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn js_throw_type_verrorf(
        env: *mut js_env_t,
        code: *const ::std::os::raw::c_char,
        message: *const ::std::os::raw::c_char,
        args: va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn js_throw_type_errorf(
        env: *mut js_env_t,
        code: *const ::std::os::raw::c_char,
        message: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn js_throw_range_error(
        env: *mut js_env_t,
        code: *const ::std::os::raw::c_char,
        message: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn js_throw_range_verrorf(
        env: *mut js_env_t,
        code: *const ::std::os::raw::c_char,
        message: *const ::std::os::raw::c_char,
        args: va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn js_throw_range_errorf(
        env: *mut js_env_t,
        code: *const ::std::os::raw::c_char,
        message: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn js_throw_syntax_error(
        env: *mut js_env_t,
        code: *const ::std::os::raw::c_char,
        message: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn js_throw_syntax_verrorf(
        env: *mut js_env_t,
        code: *const ::std::os::raw::c_char,
        message: *const ::std::os::raw::c_char,
        args: va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn js_throw_syntax_errorf(
        env: *mut js_env_t,
        code: *const ::std::os::raw::c_char,
        message: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_is_exception_pending(env: *mut js_env_t, result: *mut bool) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_get_and_clear_last_exception(
        env: *mut js_env_t,
        result: *mut *mut js_value_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Trigger an uncaught exception. If no uncaught exception handler is installed\n the function has no effect and execution will continue normally.\n\n This function can be called even if there is a pending JavaScript exception."]
    pub fn js_fatal_exception(env: *mut js_env_t, error: *mut js_value_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Terminate JavaScript execution at the next possible opportunity, discarding\n the remainder of the execution stack.\n\n This function can be called even if there is a pending JavaScript exception."]
    pub fn js_terminate_execution(env: *mut js_env_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_adjust_external_memory(
        env: *mut js_env_t,
        change_in_bytes: i64,
        result: *mut i64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Request that the garbage collector be run. This should only be used for\n testing as it will negatively impact performance. Unless garbage collection\n APIs have been exposed using the `expose_garbage_collection` option the\n function does nothing.\n\n This function can be called even if there is a pending JavaScript exception."]
    pub fn js_request_garbage_collection(env: *mut js_env_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " This function can be called even if there is a pending JavaScript exception."]
    pub fn js_get_heap_statistics(
        env: *mut js_env_t,
        result: *mut js_heap_statistics_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn js_create_inspector(
        env: *mut js_env_t,
        result: *mut *mut js_inspector_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn js_destroy_inspector(
        env: *mut js_env_t,
        inspector: *mut js_inspector_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn js_on_inspector_response(
        env: *mut js_env_t,
        inspector: *mut js_inspector_t,
        cb: js_inspector_message_cb,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn js_on_inspector_paused(
        env: *mut js_env_t,
        inspector: *mut js_inspector_t,
        cb: js_inspector_paused_cb,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn js_connect_inspector(
        env: *mut js_env_t,
        inspector: *mut js_inspector_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn js_send_inspector_request(
        env: *mut js_env_t,
        inspector: *mut js_inspector_t,
        message: *mut js_value_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn js_attach_context_to_inspector(
        env: *mut js_env_t,
        inspector: *mut js_inspector_t,
        context: *mut js_context_t,
        name: *const ::std::os::raw::c_char,
        len: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn js_detach_context_from_inspector(
        env: *mut js_env_t,
        inspector: *mut js_inspector_t,
        context: *mut js_context_t,
    ) -> ::std::os::raw::c_int;
}
#[doc = " @version 0"]
pub type bare_module_t = bare_module_s;
pub type bare_module_cb = ::std::option::Option<
    unsafe extern "C" fn(env: *mut js_env_t, exports: *mut js_value_t) -> *mut js_value_t,
>;
#[doc = " @version 0"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bare_module_s {
    pub version: ::std::os::raw::c_int,
    #[doc = " @since 0"]
    pub filename: *const ::std::os::raw::c_char,
    #[doc = " @since 0"]
    pub init: bare_module_cb,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bare_module_s"][::std::mem::size_of::<bare_module_s>() - 24usize];
    ["Alignment of bare_module_s"][::std::mem::align_of::<bare_module_s>() - 8usize];
    ["Offset of field: bare_module_s::version"]
        [::std::mem::offset_of!(bare_module_s, version) - 0usize];
    ["Offset of field: bare_module_s::filename"]
        [::std::mem::offset_of!(bare_module_s, filename) - 8usize];
    ["Offset of field: bare_module_s::init"][::std::mem::offset_of!(bare_module_s, init) - 16usize];
};
unsafe extern "C" {
    pub fn bare_module_register(mod_: *mut bare_module_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bare_s {
    _unused: [u8; 0],
}
pub type bare_t = bare_s;
#[doc = " @version 0"]
pub type bare_options_t = bare_options_s;
pub type bare_before_exit_cb = ::std::option::Option<unsafe extern "C" fn(arg1: *mut bare_t)>;
pub type bare_exit_cb = ::std::option::Option<unsafe extern "C" fn(arg1: *mut bare_t)>;
pub type bare_teardown_cb = ::std::option::Option<unsafe extern "C" fn(arg1: *mut bare_t)>;
pub type bare_suspend_cb =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut bare_t, linger: ::std::os::raw::c_int)>;
pub type bare_idle_cb = ::std::option::Option<unsafe extern "C" fn(arg1: *mut bare_t)>;
pub type bare_resume_cb = ::std::option::Option<unsafe extern "C" fn(arg1: *mut bare_t)>;
pub type bare_thread_cb =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut bare_t, arg2: *mut js_env_t)>;
#[doc = " @version 0"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bare_options_s {
    pub version: ::std::os::raw::c_int,
    #[doc = " The memory limit of each JavaScript heap. By default, the limit will be\n inferred based on the amount of physical memory of the device.\n\n Note that the limit applies individually to each thread, including the\n main thread.\n\n @since 0"]
    pub memory_limit: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bare_options_s"][::std::mem::size_of::<bare_options_s>() - 16usize];
    ["Alignment of bare_options_s"][::std::mem::align_of::<bare_options_s>() - 8usize];
    ["Offset of field: bare_options_s::version"]
        [::std::mem::offset_of!(bare_options_s, version) - 0usize];
    ["Offset of field: bare_options_s::memory_limit"]
        [::std::mem::offset_of!(bare_options_s, memory_limit) - 8usize];
};
unsafe extern "C" {
    #[doc = " Get the current Bare version. Useful for cases where embedders are\n dynamically linking Bare."]
    pub fn bare_version(
        major: *mut ::std::os::raw::c_int,
        minor: *mut ::std::os::raw::c_int,
        patch: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Set up the Bare process. To get a reference to the JavaScript environment of\n the process, pass the `env` pointer."]
    pub fn bare_setup(
        loop_: *mut uv_loop_t,
        platform: *mut js_platform_t,
        env: *mut *mut js_env_t,
        argc: ::std::os::raw::c_int,
        argv: *mut *const ::std::os::raw::c_char,
        options: *const bare_options_t,
        result: *mut *mut bare_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Tear down the Bare process. The exit code will be stored in `exit_code` if\n provided. The JavaScript environment of the process must not be used after\n this function returns."]
    pub fn bare_teardown(
        bare: *mut bare_t,
        exit_code: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Immediately terminate the process with an exit status of `exit_code`."]
    pub fn bare_exit(bare: *mut bare_t, exit_code: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Load the module identified by `filename`, which may be any of the formats\n supported by the module system. Unless `source` is provided, the contents\n of `filename` will be read from disk.\n\n See https://github.com/holepunchto/bare-module for more information on the\n supported module formats."]
    pub fn bare_load(
        bare: *mut bare_t,
        filename: *const ::std::os::raw::c_char,
        source: *const uv_buf_t,
        result: *mut *mut js_value_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Run the I/O event loop."]
    pub fn bare_run(bare: *mut bare_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Terminate the process as soon as possible. It's safe to call this function\n from any thread."]
    pub fn bare_terminate(bare: *mut bare_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Suspend the process as soon as possible. Once the process has suspended\n successfully, `bare_run()` will not return until another thread resumes the\n process. It's safe to call this function from any thread."]
    pub fn bare_suspend(bare: *mut bare_t, linger: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Resume the process as soon as possible. If the process is not yet idle after\n being suspended the suspension will be cancelled. It's safe to call this\n function from any thread."]
    pub fn bare_resume(bare: *mut bare_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Equivalent to `Bare.on('beforeExit', cb)`."]
    pub fn bare_on_before_exit(bare: *mut bare_t, cb: bare_before_exit_cb)
        -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Equivalent to `Bare.on('exit', cb)`."]
    pub fn bare_on_exit(bare: *mut bare_t, cb: bare_exit_cb) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Equivalent to `Bare.on('teardown', cb)`."]
    pub fn bare_on_teardown(bare: *mut bare_t, cb: bare_teardown_cb) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Equivalent to `Bare.on('suspend', cb)`."]
    pub fn bare_on_suspend(bare: *mut bare_t, cb: bare_suspend_cb) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Equivalent to `Bare.on('idle', cb)`."]
    pub fn bare_on_idle(bare: *mut bare_t, cb: bare_idle_cb) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Equivalent to `Bare.on('resume', cb)`."]
    pub fn bare_on_resume(bare: *mut bare_t, cb: bare_resume_cb) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Attach a thread listener which will invoked with the JavaScript environment\n of each thread created with the `Thread` constructor. Use this to modify the\n environment of the thread before it runs any JavaScript."]
    pub fn bare_on_thread(bare: *mut bare_t, cb: bare_thread_cb) -> ::std::os::raw::c_int;
}
pub type __builtin_va_list = *mut ::std::os::raw::c_char;
pub type __uint128_t = u128;
